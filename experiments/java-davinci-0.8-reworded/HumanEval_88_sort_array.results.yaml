language: java
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ < 2) {\n            return array;\n        }\n        Long first = array.get(0);\n\
    \        Long last = array.get(array.size() - 1);\n        ArrayList<Long> rest\
    \ = new ArrayList<>(array.subList(1, array.size() - 1));\n        ArrayList<Long>\
    \ sorted = sortArray(rest);\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        if ((first + last) % 2 == 0) {\n            res.add(last);\n        \
    \    res.addAll(sorted);\n            res.add(first);\n        } else {\n    \
    \        res.add(first);\n            res.addAll(sorted);\n            res.add(last);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9ri43uf.java:46)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long sum = array.get(0).longValue()\
    \ + array.get(array.size() - 1).longValue();\n        boolean isOdd = sum % 2\
    \ == 1;\n        array.sort((x, y) -> {\n            if (isOdd) {\n          \
    \      return x.compareTo(y);\n            } else {\n                return y.compareTo(x);\n\
    \            }\n        });\n        return array;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpfe0407xg.java:24)\n\tat Problem.main(tmpfe0407xg.java:36)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // IMPLEMENT YOUR\
    \ SOLUTION HERE\n\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpusgd1_pb.java:26: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011675
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = (ArrayList<Long>)array.clone();\n        if (sorted.size() > 0 && sorted.size()\
    \ % 2 == 0) {\n            Collections.sort(sorted, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(sorted);\n        }\n        return\
    \ sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppyml4gxp.java:35)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // return sortArrayHelper(array,\
    \ (0l + (array.size() - 1l)));\n        return sortArrayHelper(array, (0l + (array.size()\
    \ - 1l)));\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmd7bjtj3.java:25: error: cannot find symbol\n        return sortArrayHelper(array,\
    \ (0l + (array.size() - 1l)));\n               ^\n  symbol:   method sortArrayHelper(ArrayList<Long>,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011675
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ myList = new ArrayList<Long>();\n        Collections.sort(array);\n        if\
    \ ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n            for (int\
    \ i = array.size() - 1; i >= 0; i--) {\n                myList.add(array.get(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                myList.add(array.get(i));\n            }\n        }\n\
    \        return myList;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpjyfcegzh.java:26)\n\tat Problem.main(tmpjyfcegzh.java:38)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()==0)\
    \ {\n            return array;\n        }\n        if(array.size()==1) {\n   \
    \         return array;\n        }\n        if(array.size()>1) {\n           \
    \ if((array.get(0)+array.get(array.size()-1))%2==0) {\n                Collections.sort(array,\
    \ Collections.reverseOrder());\n            }\n            else {\n          \
    \      Collections.sort(array);\n            }\n        }\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // IMPLEMENT ME!\n\
    \        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmh7hwzfo.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        throw new RuntimeException(\"\
    not implemented yet\");\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\
    \ yet\n\tat Problem.sortArray(tmphh5smkot.java:24)\n\tat Problem.main(tmphh5smkot.java:27)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        throw new RuntimeException(\"\
    Not implemented\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.sortArray(tmpb_zgplq1.java:24)\n\tat Problem.main(tmpb_zgplq1.java:27)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()\
    \ > 1) {\n            boolean descending = ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2) == 0;\n            ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \            for(long i = 0; i < array.size(); i = i + 1) {\n                long\
    \ current = array.get((int)i);\n                if(sorted.size() == 0) {\n   \
    \                 sorted.add(current);\n                } else {\n           \
    \         for(long j = 0; j < sorted.size(); j = j + 1) {\n                  \
    \      if(descending && sorted.get((int)j) < current) {\n                    \
    \        sorted.add((int)j, current);\n                            break;\n  \
    \                      } else if(!descending && sorted.get((int)j) > current)\
    \ {\n                            sorted.add((int)j, current);\n              \
    \              break;\n                        } else if(j == sorted.size() -\
    \ 1) {\n                            sorted.add(current);\n                   \
    \         break;\n                        }\n                    }\n         \
    \       }\n            }\n            return sorted;\n        } else {\n     \
    \       return array;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        final long[] counter\
    \ = {0l};\n        final ArrayList<Long> odd = new ArrayList<Long>();\n      \
    \  final ArrayList<Long> even = new ArrayList<Long>();\n        array.forEach((Long\
    \ number) -> {\n            if ((number % 2l) == 1l) {\n                odd.add(number);\n\
    \            } else {\n                even.add(number);\n            }\n    \
    \    });\n        odd.sort((Long a, Long b) -> {\n            if (a.compareTo(b)\
    \ < 0) {\n                return -1;\n            } else if (a.compareTo(b) >\
    \ 0) {\n                return 1;\n            } else {\n                return\
    \ 0;\n            }\n        });\n        even.sort((Long a, Long b) -> {\n  \
    \          if (a.compareTo(b) < 0) {\n                return 1;\n            }\
    \ else if (a.compareTo(b) > 0) {\n                return -1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        final ArrayList<Long>\
    \ output = new ArrayList<Long>();\n        odd.forEach((Long number) -> {\n  \
    \          output.add(number);\n        });\n        even.forEach((Long number)\
    \ -> {\n            output.add(number);\n        });\n        return output;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6nuu12dr.java:64)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return new ArrayList<>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0lw0fmfq.java:28)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Step 1: Create\
    \ data structures\n        long sum = 0l;\n        long first = array.get(0);\n\
    \        int size = array.size();\n        long last = array.get(size - 1);\n\
    \        sum = first + last;\n        // Step 2: Perform computations\n      \
    \  // Step 3: Set return value\n        if (sum % 2l == 0l) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpm_gn4scb.java:26)\n\tat Problem.main(tmpm_gn4scb.java:40)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        List<Long> odd =\
    \ new ArrayList<>();\n        List<Long> even = new ArrayList<>();\n        for\
    \ (Long value : array) {\n            if (value % 2 == 0) {\n                even.add(value);\n\
    \            } else {\n                odd.add(value);\n            }\n      \
    \  }\n        odd.sort(Comparator.naturalOrder());\n        even.sort(Comparator.reverseOrder());\n\
    \        List<Long> solution = new ArrayList<>();\n        solution.addAll(odd);\n\
    \        solution.addAll(even);\n        return new ArrayList<>(solution);\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5n7foe70.java:43)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ odd = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        for (int i = 0; i < array.size(); i++) {\n            Long n = array.get(i);\n\
    \            if (n % 2 == 0) {\n                even.add(n);\n            } else\
    \ {\n                odd.add(n);\n            }\n        }\n        Collections.sort(odd);\n\
    \        Collections.sort(even);\n        ArrayList<Long> rv = new ArrayList<Long>();\n\
    \        if (array.size() > 0) {\n            rv.add(array.get(0));\n        }\n\
    \        if (array.size() > 1) {\n            rv.add(array.get(array.size() -\
    \ 1));\n        }\n        Collections.reverse(rv);\n        int oc = 0;\n   \
    \     int ec = 0;\n        for (int i = 1; i < array.size() - 1; i++) {\n    \
    \        if (rv.get(0) + rv.get(1) % 2 == 0) {\n                rv.add(even.get(ec));\n\
    \                ec++;\n            } else {\n                rv.add(odd.get(oc));\n\
    \                oc++;\n            }\n        }\n        return rv;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpu3m6967c.java:51)\n\tat Problem.main(tmpu3m6967c.java:60)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (((array.size())\
    \ == 0)) {\n            return array;\n        }\n        if (((array.size())\
    \ == 1)) {\n            return array;\n        }\n        boolean odd = (((array.get(0))\
    \ + (array.get(((array.size()) - 1)))) % 2) == 1;\n        List<Long> sublist\
    \ = array.subList(1, ((array.size()) - 1));\n        ArrayList<Long> sorted =\
    \ new ArrayList<Long>(sublist);\n        Collections.sort(sorted);\n        if\
    \ (odd) {\n            Collections.reverse(sorted);\n        }\n        sorted.add(0,\
    \ array.get(0));\n        sorted.add(array.get(((array.size()) - 1)));\n     \
    \   return sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjdouswih.java:44)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp19_trd9i.java:30)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (int i = 0; i < array.size(); i++) {\n\
    \            a.add(array.get(i));\n        }\n        int x = 0;\n        if (a.size()\
    \ > 0) {\n            x = a.get(0).intValue() + a.get(a.size() - 1).intValue();\n\
    \        }\n        int i = 0;\n        int j = 0;\n        if (x % 2 == 0) {\n\
    \            i = a.size() - 1;\n            j = 0;\n        } else {\n       \
    \     i = 0;\n            j = a.size() - 1;\n        }\n        while (i < j)\
    \ {\n            long t = a.get(i);\n            a.set(i, a.get(j));\n       \
    \     a.set(j, t);\n            i++;\n            j--;\n        }\n        return\
    \ a;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpecloss7w.java:42)\n\tat Problem.main(tmpecloss7w.java:51)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()<2)\
    \ return array;\n        if((array.get(0)+array.get(array.size()-1))%2 == 0) {\n\
    \            Collections.sort(array,Collections.reverseOrder());\n        } else\
    \ {\n            Collections.sort(array);\n        }\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // if the sum( first\
    \ index value, last index value) is odd,\n        // or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n        if\
    \ (array.size() > 1) {\n            long a = array.get(0);\n            long b\
    \ = array.get(array.size() - 1);\n            if ((a + b) % 2 == 0) {\n      \
    \          Collections.sort(array, Collections.reverseOrder());\n            }\
    \ else {\n                Collections.sort(array);\n            }\n        }\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        final String $class\
    \ = \"Problem\";\n        final String $method = \"sortArray\";\n        if (array.isEmpty())\
    \ {\n            return array;\n        }\n        else {\n            if (array.size()\
    \ == 1) {\n                return array;\n            }\n            else {\n\
    \                if (array.size() == 2) {\n                    return (new ArrayList<Long>(Arrays.asList((long)array.stream().mapToLong(Long::longValue).sum())));\n\
    \                }\n                else {\n                    if (array.size()\
    \ == 3) {\n                        return (new ArrayList<Long>(Arrays.asList((long)array.stream().mapToLong(Long::longValue).sum())));\n\
    \                    }\n                    else {\n                        if\
    \ (array.size() == 4) {\n                            return (new ArrayList<Long>(Arrays.asList((long)array.stream().mapToLong(Long::longValue).sum())));\n\
    \                        }\n                        else {\n                 \
    \           if (array.size() == 5) {\n                                return (new\
    \ ArrayList<Long>(Arrays.asList((long)array.stream().mapToLong(Long::longValue).sum())));\n\
    \                            }\n                            else {\n         \
    \                       return (new ArrayList<Long>(Arrays.asList((long)array.stream().mapToLong(Long::longValue).sum())));\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxly7equa.java:61)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        List<Long> evens\
    \ = new ArrayList<Long>();\n        List<Long> odds = new ArrayList<Long>();\n\
    \        for (Long element : array) {\n            if (element % 2 == 0) {\n \
    \               evens.add(element);\n            } else {\n                odds.add(element);\n\
    \            }\n        }\n        Collections.sort(evens);\n        Collections.sort(odds);\n\
    \        if (evens.size() > 0 && odds.size() > 0) {\n            array.clear();\n\
    \            array.addAll(evens);\n            array.addAll(odds);\n        }\
    \ else if (evens.size() > 0) {\n            array.clear();\n            array.addAll(evens);\n\
    \        } else if (odds.size() > 0) {\n            array.clear();\n         \
    \   array.addAll(odds);\n        }\n        if (array.size() > 0 && array.get(0)\
    \ + array.get(array.size() - 1) % 2 == 0) {\n            Collections.reverse(array);\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3yzbwut.java:54)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        boolean descending = array.get(0)\
    \ + array.get(array.size() - 1) % 2 == 0;\n        if (descending) {\n       \
    \     for (int i = 0; i < array.size(); i++) {\n                for (int j = i\
    \ + 1; j < array.size(); j++) {\n                    if (array.get(i) < array.get(j))\
    \ {\n                        Long temp = array.get(i);\n                     \
    \   array.set(i, array.get(j));\n                        array.set(j, temp);\n\
    \                    }\n                }\n            }\n        } else {\n \
    \           for (int i = 0; i < array.size(); i++) {\n                for (int\
    \ j = i + 1; j < array.size(); j++) {\n                    if (array.get(i) >\
    \ array.get(j)) {\n                        Long temp = array.get(i);\n       \
    \                 array.set(i, array.get(j));\n                        array.set(j,\
    \ temp);\n                    }\n                }\n            }\n        }\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzxq8ufe.java:58)\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // check for empty\
    \ or single element list\n        if (array.size() < 2) {\n            return\
    \ array;\n        }\n        // get first and last elements\n        Long first\
    \ = array.get(0);\n        Long last = array.get(array.size() - 1);\n        //\
    \ check if sum is odd or even\n        boolean isOdd = (first + last) % 2 != 0;\n\
    \        // reverse the list if necessary\n        if (!isOdd) {\n           \
    \ Collections.reverse(array);\n        }\n        // sort the list\n        Collections.sort(array);\n\
    \        // reverse the list again if necessary\n        if (!isOdd) {\n     \
    \       Collections.reverse(array);\n        }\n        return array;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        array.sort((a, b)\
    \ -> a.compareTo(b));\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        for (Long i : array)\
    \ {\n            if (i % 2 == 0) {\n                even.add(i);\n           \
    \ } else {\n                odd.add(i);\n            }\n        }\n        even.sort((a,\
    \ b) -> b.compareTo(a));\n        odd.sort((a, b) -> a.compareTo(b));\n      \
    \  even.addAll(odd);\n        return even;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmjig7yk.java:42)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        array.sort((x, y) -> {\n           \
    \ if (sum % 2 == 0) {\n                return y.compareTo(x);\n            } else\
    \ {\n                return x.compareTo(y);\n            }\n        });\n    \
    \    return array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpvxb83_qd.java:24)\n\tat Problem.main(tmpvxb83_qd.java:35)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        ArrayList<Long> odds = new ArrayList<Long>();\n\
    \        for (Long value : array) {\n            if (value % 2l == 0l) {\n   \
    \             evens.add(value);\n            } else {\n                odds.add(value);\n\
    \            }\n        }\n        Collections.sort(evens);\n        Collections.sort(odds);\n\
    \        Collections.reverse(odds);\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        ret.addAll(odds);\n        ret.addAll(evens);\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp18snbfjl.java:44)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn9vp7u2.java:28)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ s = new ArrayList<Long>();\n        if (array.size() < 1l) {\n            return\
    \ s;\n        }\n        else {\n            if (array.size() < 2l) {\n      \
    \          return array;\n            }\n            else {\n                if\
    \ (array.get(0l).longValue() + array.get(array.size() - 1l).longValue() % 2l ==\
    \ 0l) {\n                    array.sort(Comparator.reverseOrder());\n        \
    \        }\n                else {\n                    array.sort(Comparator.naturalOrder());\n\
    \                }\n                return array;\n            }\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqua9wk3v.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if (array.get(0l).longValue() + array.get(array.size()\
    \ - 1l).longValue() % 2l == 0l) {\n                              ^\n/tmp/tmpqua9wk3v.java:33:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            if (array.get(0l).longValue() + array.get(array.size() - 1l).longValue()\
    \ % 2l == 0l) {\n                                                            \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn9vp7u2.java:28)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int index = 0;index < (array.size());index\
    \ += 1) {\n            Long value = array.get(index);\n            result.add(value);\n\
    \        }\n        int lastIndex = (result.size()) - 1;\n        Long firstValue\
    \ = result.get(0);\n        Long lastValue = result.get(lastIndex);\n        Long\
    \ firstPlusLast = firstValue + lastValue;\n        if ((firstPlusLast % 2) ==\
    \ 0) {\n            Collections.sort(result, Collections.reverseOrder());\n  \
    \      } else {\n            Collections.sort(result);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp62jd33fi.java:30)\n\tat Problem.main(tmp62jd33fi.java:41)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long t = array.get(0)\
    \ + array.get(array.size() - 1);\n        Collections.sort(array);\n        if\
    \ (t % 2 == 0) {\n            Collections.reverse(array);\n        }\n       \
    \ return array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp4ao99fwz.java:24)\n\tat Problem.main(tmp4ao99fwz.java:32)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int length = array.size();\n\
    \        if (length == 0) {\n            return array;\n        }\n        if\
    \ (length == 1) {\n            return array;\n        }\n        if (length %\
    \ 2 == 0) {\n            int middle = length / 2;\n            ArrayList<Long>\
    \ left = new ArrayList<Long>();\n            ArrayList<Long> right = new ArrayList<Long>();\n\
    \            for (int i = 0; i < middle; i++) {\n                left.add(array.get(i));\n\
    \            }\n            for (int i = middle; i < length; i++) {\n        \
    \        right.add(array.get(i));\n            }\n            Collections.sort(left);\n\
    \            Collections.sort(right);\n            int leftIndex = 0;\n      \
    \      int rightIndex = 0;\n            int resultIndex = 0;\n            while\
    \ (leftIndex < left.size() && rightIndex < right.size()) {\n                if\
    \ (left.get(leftIndex) < right.get(rightIndex)) {\n                    array.set(resultIndex,\
    \ left.get(leftIndex));\n                    leftIndex++;\n                } else\
    \ {\n                    array.set(resultIndex, right.get(rightIndex));\n    \
    \                rightIndex++;\n                }\n                resultIndex++;\n\
    \            }\n            while (leftIndex < left.size()) {\n              \
    \  array.set(resultIndex, left.get(leftIndex));\n                leftIndex++;\n\
    \                resultIndex++;\n            }\n            while (rightIndex\
    \ < right.size()) {\n                array.set(resultIndex, right.get(rightIndex));\n\
    \                rightIndex++;\n                resultIndex++;\n            }\n\
    \            Collections.reverse(array);\n            return array;\n        }\
    \ else {\n            int middle = length / 2;\n            ArrayList<Long> left\
    \ = new ArrayList<Long>();\n            ArrayList<Long> right = new ArrayList<Long>();\n\
    \            for (int i = 0; i < middle; i++) {\n                left.add(array.get(i));\n\
    \            }\n            for (int i = middle; i < length; i++) {\n        \
    \        right.add(array.get(i));\n            }\n            Collections.sort(left);\n\
    \            Collections.sort(\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkct3fssn.java:80: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpkct3fssn.java:81: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // return (new ArrayList<Long>(Arrays.asList()));\n\
    \        // return (new ArrayList<Long>(Arrays.asList((long)5l)));\n        //\
    \ return (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l)));\n        return (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8u047gs.java:30)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int n = array.size();\n\
    \        if (n <= 1) {\n            return array;\n        }\n        Long sum\
    \ = 0l;\n        for (Long el : array) {\n            sum += el;\n        }\n\
    \        Comparator<Long> comp = null;\n        if (sum % 2 == 0) {\n        \
    \    comp = (Long a, Long b) -> {\n                if (a > b) {\n            \
    \        return -1;\n                } else if (a < b) {\n                   \
    \ return 1;\n                } else {\n                    return 0;\n       \
    \         }\n            };\n        } else {\n            comp = (Long a, Long\
    \ b) -> {\n                if (a > b) {\n                    return 1;\n     \
    \           } else if (a < b) {\n                    return -1;\n            \
    \    } else {\n                    return 0;\n                }\n            };\n\
    \        }\n        Collections.sort(array, comp);\n        return array;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcd385r3h.java:61)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ answer = (new ArrayList<Long>(Arrays.asList()));\n        if ((array.size())\
    \ < 2) {\n            return array;\n        } else {\n            ArrayList<Long>\
    \ left = (new ArrayList<Long>(Arrays.asList()));\n            ArrayList<Long>\
    \ right = (new ArrayList<Long>(Arrays.asList()));\n            long pivot = array.get(0);\n\
    \            for (long i = 0; (i < (array.size())); i++) {\n                long\
    \ elem = array.get(((int)(i)));\n                if ((elem < pivot)) {\n     \
    \               left.add(elem);\n                } else {\n                  \
    \  right.add(elem);\n                }\n            }\n            left = sortArray(left);\n\
    \            right = sortArray(right);\n            answer.addAll(left);\n   \
    \         answer.add(pivot);\n            answer.addAll(right);\n            if\
    \ (((answer.get(0)) + (answer.get((answer.size()) - 1))) % 2 == 0) {\n       \
    \         Collections.reverse(answer);\n            }\n            return answer;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.util.ArrayList.<init>(ArrayList.java:181)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:24)\n\tat Problem.sortArray(tmp9kyic1yn.java:39)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:40)\n\tat Problem.sortArray(tmp9kyic1yn.java:40)\n\
    \tat Problem.sortArray(tmp9kyic1yn.java:"
  stdout: ''
  timestamp: 1660011679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()\
    \ == 0) {\n            return array;\n        }\n        else if(array.size()\
    \ == 1) {\n            return array;\n        }\n        else {\n            long\
    \ lastValue = array.get(array.size() - 1);\n            long firstValue = array.get(0);\n\
    \            long total = lastValue + firstValue;\n            if(total % 2 ==\
    \ 0) {\n                Collections.sort(array, Collections.reverseOrder());\n\
    \            }\n            else {\n                Collections.sort(array);\n\
    \            }\n            return array;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n    return null;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpkysj2f44.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n    // Write your code here\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnof051xb.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        final long sum =\
    \ array.get(0) + array.get(array.size() - 1);\n        array.sort((a, b) -> sum\
    \ % 2 == 0 ? b.compareTo(a) : a.compareTo(b));\n        return array;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp3y5ivrq_.java:24)\n\tat Problem.main(tmp3y5ivrq_.java:29)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Good luck :)\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7g42qnmc.java:30)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // 1\n        //\
    \ return (array.stream().sorted().collect(Collectors.toCollection(ArrayList::new)));\n\
    \        // 2\n        ArrayList<Long> res = new ArrayList<Long>();\n        Long\
    \ first = array.get(0);\n        Long last = array.get(array.size() - 1);\n  \
    \      if ((first + last) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpq4hhr7ty.java:28)\n\tat Problem.main(tmpq4hhr7ty.java:38)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        throw new UnsupportedOperationException(\"\
    Solution not completed\");\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Solution\
    \ not completed\n\tat Problem.sortArray(tmpqh62zk6c.java:24)\n\tat Problem.main(tmpqh62zk6c.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        throw new RuntimeException(\"\
    Not Implemented\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.sortArray(tmpaj6hch8l.java:24)\n\tat Problem.main(tmpaj6hch8l.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        final ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        final ArrayList<Long> sorted;\n   \
    \     sorted = (ArrayList<Long>) array.stream().sorted().collect(Collectors.toList());\n\
    \        final String str = String.valueOf(array.get(0)).concat(String.valueOf(array.get(array.size()\
    \ - 1)));\n        final BigInteger bigint = new BigInteger(str);\n        final\
    \ boolean odd = bigint.testBit(0);\n        if (odd) {\n            result.addAll(sorted);\n\
    \        } else {\n            final int last = array.size() - 1;\n          \
    \  for (int i = last; i >= 0; i--) {\n                result.add(sorted.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpi0zao44w.java:27)\n\tat Problem.main(tmpi0zao44w.java:41)\n"
  stdout: ''
  timestamp: 1660011680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int l = array.size();\n\
    \        if (l <= 1) {\n            return array;\n        }\n        int m =\
    \ l / 2;\n        ArrayList<Long> left = sortArray(new ArrayList<Long>(array.subList(0,\
    \ m)));\n        ArrayList<Long> right = sortArray(new ArrayList<Long>(array.subList(m,\
    \ l)));\n        return merge(left, right);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshe_sqjg.java:31: error: cannot find symbol\n        return merge(left,\
    \ right);\n               ^\n  symbol:   method merge(ArrayList<Long>,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // write your code\
    \ here\n        return array;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphims6ah2.java:30)\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long lastIndex =\
    \ array.size() - 1;\n        return (array.get(0) + array.get(lastIndex)) % 2\
    \ == 0 ? sortByDescending(array) : sortByAscending(array);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2ff616b.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return (array.get(0) + array.get(lastIndex)) % 2 ==\
    \ 0 ? sortByDescending(array) : sortByAscending(array);\n                    \
    \                     ^\n/tmp/tmpt2ff616b.java:25: error: cannot find symbol\n\
    \        return (array.get(0) + array.get(lastIndex)) % 2 == 0 ? sortByDescending(array)\
    \ : sortByAscending(array);\n                                                \
    \                ^\n  symbol:   method sortByDescending(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpt2ff616b.java:25: error: cannot find symbol\n       \
    \ return (array.get(0) + array.get(lastIndex)) % 2 == 0 ? sortByDescending(array)\
    \ : sortByAscending(array);\n                                                \
    \                                          ^\n  symbol:   method sortByAscending(ArrayList<Long>)\n\
    \  location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        long sum = array.get(0).longValue()\
    \ + array.get(array.size() - 1).longValue();\n        for (int i = 0; i < array.size();\
    \ i++) {\n            if (isOdd(array.get(i).longValue())) {\n               \
    \ odd.add(array.get(i));\n            } else {\n                even.add(array.get(i));\n\
    \            }\n        }\n        Collections.sort(odd);\n        Collections.sort(even);\n\
    \        if (isOdd(sum)) {\n            result.addAll(odd);\n            result.addAll(even);\n\
    \        } else {\n            result.addAll(even);\n            result.addAll(odd);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_598ebp.java:29: error: cannot find symbol\n            if (isOdd(array.get(i).longValue()))\
    \ {\n                ^\n  symbol:   method isOdd(long)\n  location: class Problem\n\
    /tmp/tmp6_598ebp.java:37: error: cannot find symbol\n        if (isOdd(sum)) {\n\
    \            ^\n  symbol:   method isOdd(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (true) {\n  \
    \          throw new UnsupportedOperationException();\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException\n\t\
    at Problem.sortArray(tmpa496jojx.java:25)\n\tat Problem.main(tmpa496jojx.java:30)\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Your code goes\
    \ here\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpxoexlsbi.java:28)\n"
  stdout: ''
  timestamp: 1660011681
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long firstIndex\
    \ = array.get(0);\n        long lastIndex = array.get(array.size() - 1);\n   \
    \     BigInteger firstAndLastIndex = BigInteger.valueOf(firstIndex + lastIndex);\n\
    \        ArrayList<Long> oddNumbers = new ArrayList<Long>();\n        ArrayList<Long>\
    \ evenNumbers = new ArrayList<Long>();\n        for (long i : array) {\n     \
    \       if (BigInteger.valueOf(i).mod(BigInteger.valueOf(2)).equals(BigInteger.valueOf(0)))\
    \ {\n                evenNumbers.add(i);\n            } else {\n             \
    \   oddNumbers.add(i);\n            }\n        }\n        Collections.sort(oddNumbers);\n\
    \        Collections.sort(evenNumbers);\n        Collections.reverse(evenNumbers);\n\
    \        ArrayList<Long> finalArray = new ArrayList<Long>();\n        if (firstAndLastIndex.mod(BigInteger.valueOf(2)).equals(BigInteger.valueOf(0)))\
    \ {\n            finalArray.addAll(evenNumbers);\n            finalArray.addAll(oddNumbers);\n\
    \        } else {\n            finalArray.addAll(oddNumbers);\n            finalArray.addAll(evenNumbers);\n\
    \        }\n        return finalArray;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1hmsv17b.java:24)\n\tat Problem.main(tmp1hmsv17b.java:50)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ list = new ArrayList<Long>();\n        int size = array.size();\n        if\
    \ (size == 0) {\n            return list;\n        }\n        if (size == 1) {\n\
    \            list.add(array.get(0));\n            return list;\n        }\n  \
    \      boolean isOdd = (array.get(0) + array.get(size - 1)) % 2 == 1;\n      \
    \  if (isOdd) {\n            Collections.sort(array);\n        } else {\n    \
    \        Collections.sort(array, Collections.reverseOrder());\n        }\n   \
    \     return array;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011682
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        Collections.sort(array);\n\
    \        if (array.size() > 1 && (array.get(0) + array.get(array.size() - 1))\
    \ % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011682
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        Collections.sort(array);\n\
    \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
    \      Collections.reverse(array);\n        }\n        return array;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        Collections.sort(array);\n\
    \        int sum = array.get(0).intValue() + array.get(array.size() - 1).intValue();\n\
    \        if (sum % 2 == 0) {\n            Collections.reverse(array);\n      \
    \  }\n        return array;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp45j4gf74.java:25)\n\tat Problem.main(tmp45j4gf74.java:32)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn9vp7u2.java:28)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int l = 0;\n   \
    \     int r = array.size() - 1;\n        long temp = 0;\n        while (l < r)\
    \ {\n            if ((array.get(l) + array.get(r)) % 2 == 0) {\n             \
    \   temp = array.get(l);\n                array.set(l, array.get(r));\n      \
    \          array.set(r, temp);\n            }\n            l++;\n            r--;\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpev57jjhz.java:41)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ <= 1) {\n            return array;\n        }\n        if (array.get(0) + array.get(array.size()\
    \ - 1) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbbnaci0t.java:38)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        else if (array.size()\
    \ == 1) {\n            return array;\n        }\n        else {\n            ArrayList<Long>\
    \ newArray = new ArrayList<Long>();\n            int left = 0;\n            int\
    \ right = array.size() - 1;\n            ArrayList<Long> leftArray = new ArrayList<Long>();\n\
    \            ArrayList<Long> rightArray = new ArrayList<Long>();\n           \
    \ for (int i = 0; i < array.size(); i++) {\n                if (i % 2 == 0) {\n\
    \                    leftArray.add(array.get(i));\n                }\n       \
    \         else {\n                    rightArray.add(array.get(i));\n        \
    \        }\n            }\n            Collections.sort(leftArray);\n        \
    \    Collections.sort(rightArray);\n            Collections.reverse(rightArray);\n\
    \            for (int i = 0; i < leftArray.size(); i++) {\n                newArray.add(leftArray.get(i));\n\
    \            }\n            for (int i = 0; i < rightArray.size(); i++) {\n  \
    \              newArray.add(rightArray.get(i));\n            }\n            return\
    \ newArray;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgqvdcyfk.java:59)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        Long lastIndexValue\
    \ = array.get(array.size() - 1);\n        Long firstIndexValue = array.get(0);\n\
    \        Long sum = firstIndexValue + lastIndexValue;\n        // System.out.println(array);\n\
    \        if (sum % 2 == 0) {\n            // System.out.println(\"descending order\"\
    );\n            Collections.sort(array, Collections.reverseOrder());\n       \
    \ } else {\n            // System.out.println(\"ascending order\");\n        \
    \    Collections.sort(array);\n        }\n        return array;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpy261kjys.java:24)\n\tat Problem.main(tmpy261kjys.java:38)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ <= 1) {\n            return array;\n        }\n        long sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        boolean isOdd = sum % 2 == 1;\n    \
    \    if (isOdd) {\n            array.sort(Comparator.naturalOrder());\n      \
    \  } else {\n            array.sort(Comparator.reverseOrder());\n        }\n \
    \       return array;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // we're going to\
    \ be using this a lot...\n        ArrayList<Long> result = array;\n        //\
    \ ... and this too\n        boolean odd = (((Long)(array.get(0)) + (Long)(array.get(array.size()\
    \ - 1))).intValue() % 2) == 1;\n        // start with an empty result and add\
    \ the first element\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        sorted.add(array.get(0));\n        // pop the first element off the result\
    \ so we can process it\n        result.remove(0);\n        // we need to go through\
    \ the rest of the elements and\n        // insert them into the sorted list\n\
    \        while (result.size() > 0) {\n            Long element = result.get(0);\n\
    \            // for each element, start at the beginning of the\n            //\
    \ sorted list and try to find a place to insert it\n            for (int i = 0;\
    \ i < sorted.size(); i += 1) {\n                // if the element we're processing\
    \ is less than the\n                // element at index i, then insert the element\n\
    \                // at index i\n                if (odd && element.compareTo(sorted.get(i))\
    \ < 0 || !odd && element.compareTo(sorted.get(i)) > 0) {\n                   \
    \ sorted.add(i, element);\n                    break;\n                }\n   \
    \             // if we've reached the end of the list, then append\n         \
    \       // the element\n                if (i == sorted.size() - 1) {\n      \
    \              sorted.add(element);\n                    break;\n            \
    \    }\n            }\n            // remove the element from the result to ensure\
    \ we\n            // don't process it again\n            result.remove(0);\n \
    \       }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdl8ad1wp.java:27: error: long cannot be dereferenced\n        boolean\
    \ odd = (((Long)(array.get(0)) + (Long)(array.get(array.size() - 1))).intValue()\
    \ % 2) == 1;\n                                                               \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        //implement\n  \
    \      ArrayList<Long> _return = new ArrayList<Long>();\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        else if (array.size()\
    \ == 1) {\n            return array;\n        }\n        else {\n            if\
    \ ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n                Collections.sort(array,\
    \ Collections.reverseOrder());\n                return array;\n            }\n\
    \            else {\n                Collections.sort(array);\n              \
    \  return array;\n            }\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ answer = new ArrayList<Long>();\n        List<Long> evens = new ArrayList<Long>();\n\
    \        List<Long> odds = new ArrayList<Long>();\n        for (Long aLong : array)\
    \ {\n            if (aLong % 2 == 0) {\n                evens.add(aLong);\n  \
    \          } else {\n                odds.add(aLong);\n            }\n       \
    \ }\n        Collections.sort(evens);\n        Collections.sort(odds);\n     \
    \   Collections.reverse(odds);\n        answer.addAll(odds);\n        answer.addAll(evens);\n\
    \        return answer;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbawt_h91.java:44)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        List<Long> evens\
    \ = array.stream().filter(e -> e % 2 == 0).sorted().collect(Collectors.toList());\n\
    \        List<Long> odds = array.stream().filter(e -> e % 2 == 1).sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n\
    \        evens.addAll(odds);\n        return new ArrayList<Long>(evens);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ekj3q4e.java:32)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        boolean odd = true;\n\
    \        if (1 == (array.get(0) + array.get(array.size() - 1)) % 2) {\n      \
    \      odd = false;\n        }\n        if (odd) {\n            long[] temp =\
    \ new long[array.size()];\n            int i = 0;\n            for (long v : array)\
    \ {\n                temp[i] = v;\n                i += 1;\n            }\n  \
    \          Arrays.sort(temp);\n            ArrayList<Long> ret = new ArrayList<Long>();\n\
    \            for (long v : temp) {\n                ret.add(v);\n            }\n\
    \            return ret;\n        } else {\n            long[] temp = new long[array.size()];\n\
    \            int i = 0;\n            for (long v : array) {\n                temp[i]\
    \ = v;\n                i += 1;\n            }\n            Arrays.sort(temp);\n\
    \            ArrayList<Long> ret = new ArrayList<Long>();\n            for (int\
    \ j = temp.length - 1; j >= 0; j--) {\n                ret.add(temp[j]);\n   \
    \         }\n            return ret;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpdy0n3ssu.java:25)\n\tat Problem.main(tmpdy0n3ssu.java:57)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int firstIndex =\
    \ 0;\n        int lastIndex = array.size() - 1;\n        if (array.size() == 0)\
    \ {\n            return array;\n        }\n        else if (array.size() == 1)\
    \ {\n            return array;\n        }\n        else if (array.size() > 1)\
    \ {\n            ArrayList<Long> sortedArray = new ArrayList<Long>();\n      \
    \      for (int i = 0; i < array.size(); i++) {\n                if ((array.get(firstIndex)\
    \ + array.get(lastIndex)) % 2 == 0) {\n                    sortedArray.add(array.get(lastIndex));\n\
    \                    lastIndex = lastIndex - 1;\n                }\n         \
    \       else {\n                    sortedArray.add(array.get(firstIndex));\n\
    \                    firstIndex = firstIndex + 1;\n                }\n       \
    \     }\n            return sortedArray;\n        }\n        else {\n        \
    \    throw new IllegalArgumentException();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp681ji8s9.java:53)\n"
  stdout: ''
  timestamp: 1660011682
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int odd = 0;\n \
    \       int even = array.size() - 1;\n        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \        for (Long element : array) {\n            if (element % 2 == 0) {\n \
    \               sorted.add(even, element);\n                even -= 1;\n     \
    \       } else {\n                sorted.add(odd, element);\n                odd\
    \ += 1;\n            }\n        }\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 5, Size: 0\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:756)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:481)\n\tat Problem.sortArray(tmpc54p9cok.java:29)\n\
    \tat Problem.main(tmpc54p9cok.java:41)\n"
  stdout: ''
  timestamp: 1660011683
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Reading ArrayList\n\
    \        Object[] myArray = array.toArray();\n        int length = myArray.length;\n\
    \        // Sorting ArrayList\n        if (length > 0) {\n            if ((length\
    \ % 2) == 0) {\n                // Insertion sort\n                for (int i\
    \ = 1; i < length; i++) {\n                    for (int j = i; j > 0; j--) {\n\
    \                        if ((long)myArray[j - 1] < (long)myArray[j]) {\n    \
    \                        long temp = (long)myArray[j - 1];\n                 \
    \           myArray[j - 1] = myArray[j];\n                            myArray[j]\
    \ = temp;\n                        }\n                    }\n                }\n\
    \            } else {\n                // Insertion sort\n                for\
    \ (int i = 1; i < length; i++) {\n                    for (int j = i; j > 0; j--)\
    \ {\n                        if ((long)myArray[j - 1] > (long)myArray[j]) {\n\
    \                            long temp = (long)myArray[j - 1];\n             \
    \               myArray[j - 1] = myArray[j];\n                            myArray[j]\
    \ = temp;\n                        }\n                    }\n                }\n\
    \            }\n        }\n        // Returning ArrayList\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        for (int i = 0; i < length; i++)\
    \ {\n            sortedArray.add((long)myArray[i]);\n        }\n        return\
    \ sortedArray;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph5ongx28.java:63)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result=new ArrayList<Long>();\n        int n=array.size();\n        if(n%2==0){\n\
    \            for(int i=0;i<n;i++){\n                if(i%2==0){\n            \
    \        result.add(0,array.get(i));\n                }\n                else{\n\
    \                    result.add(array.get(i));\n                }\n          \
    \  }\n        }\n        else{\n            for(int i=0;i<n;i++){\n          \
    \      if(i%2==0){\n                    result.add(array.get(i));\n          \
    \      }\n                else{\n                    result.add(0,array.get(i));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ojaxt41.java:51)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        throw new RuntimeException(\"\
    solution failed\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: solution failed\n\
    \tat Problem.sortArray(tmpai8ajg7a.java:24)\n\tat Problem.main(tmpai8ajg7a.java:27)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ new_array = (new ArrayList<Long>(array));\n        if (new_array.size() < 1)\
    \ {\n            return new_array;\n        }\n        if (new_array.size() <\
    \ 2) {\n            return new_array;\n        }\n        boolean sort_ascending\
    \ = (new_array.get(0).longValue() + new_array.get(new_array.size() - 1).longValue())\
    \ % 2l != 0l;\n        if (sort_ascending) {\n            new_array.sort(Comparator.naturalOrder());\n\
    \        } else {\n            new_array.sort(Comparator.reverseOrder());\n  \
    \      }\n        return new_array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        ArrayList<Long>  even = new ArrayList<>();\n\
    \        ArrayList<Long>  odd = new ArrayList<>();\n        for (Long a: array)\
    \ {\n            if (a % 2 == 0) even.add(a);\n            else odd.add(a);\n\
    \        }\n        Collections.sort(even);\n        Collections.sort(odd);\n\
    \        if (array.size() % 2 == 0) {\n            for (Long a: even) sorted.add(a);\n\
    \            for (Long a: odd) sorted.add(a);\n        } else {\n            for\
    \ (Long a: odd) sorted.add(a);\n            for (Long a: even) sorted.add(a);\n\
    \        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2db80f4z.java:45)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long first = array.get(0);\n\
    \        long last = array.get(array.size() - 1);\n        long sum = first +\
    \ last;\n        if (sum % 2 == 0) {\n            return array.stream().sorted(Collections.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n\
    \        } else {\n            return array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp46eaom7p.java:24)\n\tat Problem.main(tmp46eaom7p.java:34)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        LongPair<ArrayList<Long>,\
    \ ArrayList<Long>> pair = new LongPair<ArrayList<Long>, ArrayList<Long>>(array,\
    \ new ArrayList<Long>());\n        while(!pair.getValue0().isEmpty()) {\n    \
    \        int length = pair.getValue0().size();\n            long first = pair.getValue0().get(0);\n\
    \            long last = pair.getValue0().get(length - 1);\n            if((first\
    \ + last) % 2 == 0) {\n                pair.getValue1().add(last);\n         \
    \       pair.getValue0().remove(length - 1);\n            } else {\n         \
    \       pair.getValue1().add(first);\n                pair.getValue0().remove(0);\n\
    \            }\n        }\n        return pair.getValue1();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xcdrmde.java:24: error: cannot find symbol\n        LongPair<ArrayList<Long>,\
    \ ArrayList<Long>> pair = new LongPair<ArrayList<Long>, ArrayList<Long>>(array,\
    \ new ArrayList<Long>());\n        ^\n  symbol:   class LongPair\n  location:\
    \ class Problem\n/tmp/tmp6xcdrmde.java:24: error: cannot find symbol\n       \
    \ LongPair<ArrayList<Long>, ArrayList<Long>> pair = new LongPair<ArrayList<Long>,\
    \ ArrayList<Long>>(array, new ArrayList<Long>());\n                          \
    \                                    ^\n  symbol:   class LongPair\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here...\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9f_t6dfz.java:30)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int len = array.size();\n\
    \        if (len < 2) {\n            return array;\n        }\n        ArrayList<Long>\
    \ left = new ArrayList<Long>();\n        ArrayList<Long> right = new ArrayList<Long>();\n\
    \        int middle = (int)Math.floor(len / 2);\n        int i = 0;\n        while\
    \ (i < middle) {\n            left.add(array.get(i));\n            i = i + 1;\n\
    \        }\n        while (i < len) {\n            right.add(array.get(i));\n\
    \            i = i + 1;\n        }\n        return merge(sortArray(left), sortArray(right));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03c22ouz.java:40: error: cannot find symbol\n        return merge(sortArray(left),\
    \ sortArray(right));\n               ^\n  symbol:   method merge(ArrayList<Long>,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return (new ArrayList<Long>(Arrays.asList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzhtelh2.java:28)\n"
  stdout: ''
  timestamp: 1660011684
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                Long a = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, a);\n\
    \            }\n            return array;\n        }\n        ArrayList<Long>\
    \ neg = new ArrayList<Long>();\n        ArrayList<Long> pos = new ArrayList<Long>();\n\
    \        for (Long i : array) {\n            if (i < 0) {\n                neg.add(i);\n\
    \            } else {\n                pos.add(i);\n            }\n        }\n\
    \        Collections.sort(neg);\n        Collections.sort(pos);\n        if (neg.size()\
    \ > 0) {\n            if (neg.get(0) < 0) {\n                neg.set(0, -neg.get(0));\n\
    \            }\n        }\n        neg.addAll(pos);\n        if (neg.size() >\
    \ 0) {\n            if (neg.get(0) + neg.get(neg.size() - 1) % 2 == 0) {\n   \
    \             Collections.reverse(neg);\n            }\n        }\n        return\
    \ neg;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87oou1hm.java:69)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int first = 0;\n\
    \        int last = array.size() - 1;\n        long first_value = array.get(first);\n\
    \        long last_value = array.get(last);\n        int sum = (int)(first_value\
    \ + last_value);\n        int is_odd = sum % 2;\n        ArrayList<Long> array_result\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < array.size(); i++) {\n\
    \            if (is_odd == 1) {\n                array_result.add(array.get(i));\n\
    \            } else {\n                array_result.add(array.get(array.size()\
    \ - 1 - i));\n            }\n        }\n        return array_result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpujluoz8n.java:26)\n\tat Problem.main(tmpujluoz8n.java:41)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        if(array.size() <= 1) {\n    \
    \        return array;\n        }\n        for(int i = 0; i < array.size(); i++)\
    \ {\n            sortedArray.add(array.get(i));\n        }\n        Collections.sort(sortedArray);\n\
    \        if((sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1)) % 2\
    \ == 0) {\n            Collections.reverse(sortedArray);\n        }\n        return\
    \ sortedArray;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ answer = new ArrayList<Long>();\n        ArrayList<Long> oddArray = new ArrayList<Long>();\n\
    \        ArrayList<Long> evenArray = new ArrayList<Long>();\n        int sum =\
    \ 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n\
    \            if (array.get(i) % 2 == 0) {\n                evenArray.add(array.get(i));\n\
    \            } else {\n                oddArray.add(array.get(i));\n         \
    \   }\n        }\n        Collections.sort(oddArray);\n        Collections.sort(evenArray);\n\
    \        if (sum % 2 == 0) {\n            Collections.reverse(evenArray);\n  \
    \      }\n        for (int i = 0; i < oddArray.size(); i++) {\n            answer.add(oddArray.get(i));\n\
    \        }\n        for (int i = 0; i < evenArray.size(); i++) {\n           \
    \ answer.add(evenArray.get(i));\n        }\n        return answer;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn9od7nc7.java:52)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ r = new ArrayList<>();\n        r.addAll(array);\n        Collections.sort(r);\n\
    \        if (array.size() > 0 && ((array.get(0) + array.get(array.size() - 1))\
    \ % 2 == 0)) {\n            Collections.reverse(r);\n        }\n        return\
    \ r;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return (new Tuple(array.get(0),\
    \ array.get(array.size() - 1)).getValue(0).longValue() % 2 == 0) ? (new ArrayList<Long>(array.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())))\
    \ : (new ArrayList<Long>(array.stream().sorted().collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxcextr7.java:24: error: Tuple is abstract; cannot be instantiated\n\
    \        return (new Tuple(array.get(0), array.get(array.size() - 1)).getValue(0).longValue()\
    \ % 2 == 0) ? (new ArrayList<Long>(array.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())))\
    \ : (new ArrayList<Long>(array.stream().sorted().collect(Collectors.toList())));\n\
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ < 2) {\n            return array;\n        }\n        Integer lastIndex = array.size()\
    \ - 1;\n        Integer firstValue = (int)Math.round(array.get(0));\n        Integer\
    \ lastValue = (int)Math.round(array.get(lastIndex));\n        if (((firstValue\
    \ + lastValue) % 2) == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        } else {\n            Collections.sort(array);\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        Long sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
    \ new Comparator<Long>() {\n                @Override\n                public\
    \ int compare(Long a, Long b) {\n                    return (int)(b - a);\n  \
    \              }\n            });\n        } else {\n            Collections.sort(array,\
    \ new Comparator<Long>() {\n                @Override\n                public\
    \ int compare(Long a, Long b) {\n                    return (int)(a - b);\n  \
    \              }\n            });\n        }\n        return array;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp1t2mo17_.java:24)\n\tat Problem.main(tmp1t2mo17_.java:43)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // write your code\
    \ here\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpq2ruatfy.java:28)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ < 2) {\n            return array;\n        }\n        ArrayList<Long> l = new\
    \ ArrayList<>();\n        ArrayList<Long> r = new ArrayList<>();\n        for\
    \ (int i = 1; i < array.size(); i++) {\n            if (array.get(i) < array.get(0))\
    \ {\n                l.add(array.get(i));\n            } else {\n            \
    \    r.add(array.get(i));\n            }\n        }\n        l = sortArray(l);\n\
    \        r = sortArray(r);\n        int sum = (int) (array.get(0) + array.get(array.size()\
    \ - 1));\n        ArrayList<Long> result = new ArrayList<>();\n        if (sum\
    \ % 2 == 0) {\n            result.addAll(r);\n            result.add(array.get(0));\n\
    \            result.addAll(l);\n        } else {\n            result.addAll(l);\n\
    \            result.add(array.get(0));\n            result.addAll(r);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdp6bt38h.java:55)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // your code here\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmdnjgox6.java:28)\n"
  stdout: ''
  timestamp: 1660011685
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return (ArrayList<Long>)array.stream().sorted((x,\
    \ y) -> Long.compare(x, y)).collect(Collectors.toList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhic1t_9.java:30)\n"
  stdout: ''
  timestamp: 1660011686
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ <= 1) {\n            return array;\n        }\n        ArrayList<Long> even\
    \ = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        for (Long a : array) {\n            if (a % 2 == 0) {\n             \
    \   even.add(a);\n            } else {\n                odd.add(a);\n        \
    \    }\n        }\n        even.sort(null);\n        odd.sort(null);\n       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        result.addAll(even);\n\
    \        result.addAll(odd);\n        if (array.get(0) % 2 == 0) {\n         \
    \   Collections.reverse(result);\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2wjzw9qa.java:49)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int l=0;\n     \
    \   int r=array.size()-1;\n        if(array.size()>1) {\n            int diff=array.get(l).intValue()-array.get(r).intValue();\n\
    \            if(diff%2==0) {\n                while(l<r) {\n                 \
    \   while(l<r&&array.get(l).intValue()<array.get(r).intValue()) l++;\n       \
    \             while(l<r&&array.get(l).intValue()>=array.get(r).intValue()) r--;\n\
    \                    if(l<r) {\n                        long temp=array.get(l);\n\
    \                        array.set(l, array.get(r));\n                       \
    \ array.set(r, temp);\n                    }\n                }\n            }\n\
    \            else {\n                while(l<r) {\n                    while(l<r&&array.get(l).intValue()>array.get(r).intValue())\
    \ l++;\n                    while(l<r&&array.get(l).intValue()<=array.get(r).intValue())\
    \ r--;\n                    if(l<r) {\n                        long temp=array.get(l);\n\
    \                        array.set(l, array.get(r));\n                       \
    \ array.set(r, temp);\n                    }\n                }\n            }\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4q0xft9.java:56)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long first = array.get(0);\n\
    \        long last = array.get(array.size() - 1);\n        if ((first + last)\
    \ % 2 == 0) {\n            array.sort(Collections.reverseOrder());\n        }\
    \ else {\n            array.sort(null);\n        }\n        return array;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp9uisfofo.java:24)\n\tat Problem.main(tmp9uisfofo.java:34)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ newArray = new ArrayList<Long>();\n        for (int i = 0; i < array.size();\
    \ i++) {\n            newArray.add(array.get(i));\n        }\n        if (array.size()\
    \ > 0) {\n            newArray.sort(Long::compareTo);\n            if ((array.get(0)\
    \ + array.get(array.size() - 1)) % 2 == 0) {\n                Collections.reverse(newArray);\n\
    \            }\n        }\n        return newArray;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn9vp7u2.java:28)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (array.size() == 0) {\n            return\
    \ result;\n        }\n        if (array.size() == 1) {\n            result.add(array.get(0));\n\
    \            return result;\n        }\n        if (array.size() == 2) {\n   \
    \         result.add(array.get(0));\n            result.add(array.get(1));\n \
    \           return result;\n        }\n        int i = 0;\n        int j = array.size()\
    \ - 1;\n        int flag = 0;\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 == 0) {\n            flag = 1;\n        }\n        while (i < j) {\n\
    \            if (flag == 0) {\n                if (array.get(i) > array.get(j))\
    \ {\n                    long num = array.get(i);\n                    array.set(i,\
    \ array.get(j));\n                    array.set(j, num);\n                }\n\
    \            } else {\n                if (array.get(i) < array.get(j)) {\n  \
    \                  long num = array.get(i);\n                    array.set(i,\
    \ array.get(j));\n                    array.set(j, num);\n                }\n\
    \            }\n            i++;\n            j--;\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyk0m9ha9.java:65)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long first = array.get(0);\n\
    \        long last = array.get(array.size() - 1);\n        if((first + last) %\
    \ 2 == 0) {\n            array.sort(Collections.reverseOrder());\n        } else\
    \ {\n            array.sort(Collections.naturalOrder());\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2i8ny7dv.java:29: error: cannot find symbol\n            array.sort(Collections.naturalOrder());\n\
    \                                  ^\n  symbol:   method naturalOrder()\n  location:\
    \ class Collections\n1 error\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // IMPLEMENT ME\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkfpehbuc.java:30)\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        boolean odd_even\
    \ = false;\n        if ((array.get(0) + array.get(array.size() - 1)) % 2l == 0l)\
    \ {\n            odd_even = true;\n        }\n        List<Long> sorted = array.stream().sorted().collect(Collectors.toList());\n\
    \        if (odd_even) {\n            Collections.reverse(sorted);\n        }\n\
    \        return new ArrayList<Long>(sorted);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp2t08328y.java:25)\n\tat Problem.main(tmp2t08328y.java:35)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        try {\n        \
    \    // Start of user code sortArray\n            if(array.size()<=1) return array;\n\
    \            ArrayList<Long> arrayOdd = new ArrayList<Long>();\n            ArrayList<Long>\
    \ arrayEven = new ArrayList<Long>();\n            for(Long num: array){\n    \
    \            if(num%2==0)\n                    arrayEven.add(num);\n         \
    \       else\n                    arrayOdd.add(num);\n            }\n        \
    \    Collections.sort(arrayOdd);\n            Collections.sort(arrayEven);\n \
    \           Collections.reverse(arrayEven);\n            arrayOdd.addAll(arrayEven);\n\
    \            return arrayOdd;\n            // End of user code\n        } catch\
    \ (Exception e) {\n            throw new RuntimeException(e);\n        }\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqz3mnkrj.java:48)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ copy = new ArrayList<Long>(array);\n        boolean odd = ((Long)array.get(0)).longValue()\
    \ + ((Long)array.get(array.size() - 1)).longValue() % 2l == 1l;\n        Collections.sort(copy);\n\
    \        return odd ? copy : new ArrayList<Long>(Lists.reverse(copy));\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzs06ztxm.java:27: error: cannot find symbol\n        return odd\
    \ ? copy : new ArrayList<Long>(Lists.reverse(copy));\n                       \
    \                         ^\n  symbol:   variable Lists\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        Long one = (long)1l;\n\
    \        Long two = (long)2l;\n        Long three = (long)3l;\n        Pair<ArrayList<Long>,\
    \ ArrayList<Long>> partition = Problem.arrayListPartitionBy(array, (Long x) ->\
    \ {\n            return Problem.equals((Long)(Problem.mod(Problem.plus(Problem.first(array),\
    \ Problem.last(array)), two)), (Long)zero);\n        });\n        if (Problem.equals((Long)(Problem.mod(Problem.plus(Problem.first(array),\
    \ Problem.last(array)), two)), (Long)zero)) {\n            return Problem.arrayListSortBy(Problem.second(partition),\
    \ (Long x) -> {\n                return x;\n            });\n        } else {\n\
    \            return Problem.arrayListSortBy(Problem.first(partition), (Long x)\
    \ -> {\n                return x;\n            });\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphli7wdin.java:27: error: cannot find symbol\n        Pair<ArrayList<Long>,\
    \ ArrayList<Long>> partition = Problem.arrayListPartitionBy(array, (Long x) ->\
    \ {\n                                                                  ^\n  symbol:\
    \   method arrayListPartitionBy(ArrayList<Long>,(Long x)->[...]o); })\n  location:\
    \ class Problem\n/tmp/tmphli7wdin.java:28: error: cannot find symbol\n       \
    \     return Problem.equals((Long)(Problem.mod(Problem.plus(Problem.first(array),\
    \ Problem.last(array)), two)), (Long)zero);\n                                \
    \                                         ^\n  symbol:   method first(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmphli7wdin.java:28: error: cannot find symbol\n\
    \            return Problem.equals((Long)(Problem.mod(Problem.plus(Problem.first(array),\
    \ Problem.last(array)), two)), (Long)zero);\n                                \
    \                                                               ^\n  symbol: \
    \  method last(ArrayList<Long>)\n  location: class Problem\n/tmp/tmphli7wdin.java:28:\
    \ error: cannot find symbol\n            return Problem.equals((Long)(Problem.mod(Problem.plus(Problem.first(array),\
    \ Problem.last(array)), two)), (Long)zero);\n                                \
    \                                                                            \
    \               ^\n  symbol:   variable zero\n  location: class Problem\n/tmp/tmphli7wdin.java:28:\
    \ error: method equals in class Object cannot be applied to given types;\n   \
    \         return Problem.equals((Long)(Problem.mod(Problem.plus(Problem.first(array),\
    \ Problem.last(array)), two)), (Long)zero);\n                          ^\n  required:\
    \ Object\n  found:    Long,Long\n  reason: actual and formal argument lists differ\
    \ in length\n/tmp/tmphli7wdin.java:30: error: cannot find symbol\n        if (Problem.equals((Long)(Problem.mod(Problem.plus(Problem.first(array),\
    \ Problem.last(array)), two)), (Long)zero)) {\n                              \
    \                                    ^\n  symbol:   method first(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmphli7wdin"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ <= 1) {\n            return array;\n        }\n        List<Long> odd = new\
    \ ArrayList<Long>();\n        List<Long> even = new ArrayList<Long>();\n     \
    \   for (Long i : array) {\n            if (i % 2 == 0) {\n                even.add(i);\n\
    \            } else {\n                odd.add(i);\n            }\n        }\n\
    \        Collections.sort(odd);\n        Collections.sort(even);\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.get(0) % 2 == 0) {\n    \
    \        Collections.reverse(even);\n        } else {\n            Collections.reverse(odd);\n\
    \        }\n        result.addAll(odd);\n        result.addAll(even);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgkrxrv6t.java:51)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppsavbbd8.java:29)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()\
    \ > 1){\n            int low = 0;\n            int high = array.size() - 1;\n\
    \            quickSort(array, low, high);\n        }\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5z9d_u_8.java:27: error: cannot find symbol\n            quickSort(array,\
    \ low, high);\n            ^\n  symbol:   method quickSort(ArrayList<Long>,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011687
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long first = array.get(0);\n\
    \        long last = array.get(array.size() - 1);\n        long sum = first +\
    \ last;\n        if (sum % 2 == 0) {\n            array.sort(Comparator.reverseOrder());\n\
    \        } else {\n            array.sort(Comparator.naturalOrder());\n      \
    \  }\n        return array;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp5m9ol7rr.java:24)\n\tat Problem.main(tmp5m9ol7rr.java:35)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ tmp = new ArrayList<>();\n        Integer i = array.size();\n        if (i ==\
    \ 0)\n            return tmp;\n        else {\n            Collections.sort(array);\n\
    \            if (array.get(0) + array.get(i - 1) % 2 == 0)\n                Collections.reverse(array);\n\
    \            return array;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wummm16.java:42)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ ret = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n\
    \            ret.add(array.get(i));\n        }\n        int[] idx = new int[array.size()];\n\
    \        for (int i = 0; i < array.size(); i++) {\n            idx[i] = i;\n \
    \       }\n        for (int i = array.size() - 1; i >= 0; i--) {\n           \
    \ for (int j = 0; j < i; j++) {\n                if (array.get(idx[j]).compareTo(array.get(idx[j\
    \ + 1])) > 0) {\n                    int t = idx[j];\n                    idx[j]\
    \ = idx[j + 1];\n                    idx[j + 1] = t;\n                }\n    \
    \        }\n        }\n        if ((array.get(idx[0]) + array.get(idx[array.size()\
    \ - 1])) % 2 == 0) {\n            int i = 0;\n            int j = array.size()\
    \ - 1;\n            while (i < j) {\n                long t = ret.get(i);\n  \
    \              ret.set(i, ret.get(j));\n                ret.set(j, t);\n     \
    \           i++;\n                j--;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 0 out of bounds for length 0\n\tat Problem.sortArray(tmplpmdxd6g.java:41)\n\
    \tat Problem.main(tmplpmdxd6g.java:55)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        ArrayList<Long> sortedArray = new ArrayList<>(array);\n\
    \        Collections.sort(sortedArray);\n        if (sum % 2 == 0) {\n       \
    \     Collections.reverse(sortedArray);\n        }\n        return sortedArray;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpicgv1tid.java:24)\n\tat Problem.main(tmpicgv1tid.java:33)\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long n = array.size();\n\
    \        if (n == 0l) {\n            return (new ArrayList<Long>(Arrays.asList()));\n\
    \        }\n        if (n == 1l) {\n            return (new ArrayList<Long>(Arrays.asList(array.get(0l))));\n\
    \        }\n        ArrayList<Long> l = new ArrayList<Long>();\n        ArrayList<Long>\
    \ r = new ArrayList<Long>();\n        Long k = array.get(0l);\n        for (long\
    \ i = 1l; i < n; i++) {\n            Long c = array.get(i);\n            if (c\
    \ < k) {\n                l.add(c);\n            } else {\n                r.add(c);\n\
    \            }\n        }\n        if (((array.get(0l) + array.get(n - 1l)) %\
    \ 2l) == 0l) {\n            l = sortArray(l);\n            r = sortArray(r);\n\
    \            Collections.reverse(r);\n            l.add(k);\n            l.addAll(r);\n\
    \            return l;\n        } else {\n            l = sortArray(l);\n    \
    \        r = sortArray(r);\n            l.add(k);\n            l.addAll(r);\n\
    \            return l;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppkt57264.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n            return (new ArrayList<Long>(Arrays.asList(array.get(0l))));\n\
    \                                                                ^\n/tmp/tmppkt57264.java:33:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    Long k = array.get(0l);\n                           ^\n/tmp/tmppkt57264.java:35:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        Long c = array.get(i);\n                               ^\n/tmp/tmppkt57264.java:42:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    if (((array.get(0l) + array.get(n - 1l)) % 2l) == 0l) {\n               \
    \         ^\n/tmp/tmppkt57264.java:42: error: incompatible types: possible lossy\
    \ conversion from long to int\n        if (((array.get(0l) + array.get(n - 1l))\
    \ % 2l) == 0l) {\n                                          ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Type your answer\
    \ right here.\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpux4kmt6c.java:28)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Missing code\
    \ here\n        return array;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8sfvlwjc.java:30)\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long i = 0l;\n \
    \       long length = array.size();\n        if (length <= 1l) {\n           \
    \ return array;\n        }\n        ArrayList<Long> left = new ArrayList<Long>();\n\
    \        ArrayList<Long> right = new ArrayList<Long>();\n        for (i = 0l;\
    \ i < length; i++) {\n            if (i < length / 2l) {\n                left.add(array.get((int)i));\n\
    \            } else {\n                right.add(array.get((int)i));\n       \
    \     }\n        }\n        left = sortArray(left);\n        right = sortArray(right);\n\
    \        return mergeArray(left, right);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5bkwa08q.java:40: error: cannot find symbol\n        return mergeArray(left,\
    \ right);\n               ^\n  symbol:   method mergeArray(ArrayList<Long>,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        sorted.addAll(array);\n        int length\
    \ = sorted.size();\n        if (length <= 1) {\n            return sorted;\n \
    \       }\n        long firstElement = sorted.get(0);\n        long lastElement\
    \ = sorted.get(length - 1);\n        boolean isOdd = ((firstElement + lastElement)\
    \ % 2) == 1;\n        if (isOdd) {\n            sorted.sort(Long::compareTo);\n\
    \        } else {\n            sorted.sort(Collections.reverseOrder());\n    \
    \    }\n        return sorted;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()\
    \ <= 1) {\n            return array;\n        }\n        long firstIndexValue\
    \ = array.get(0);\n        long lastIndexValue = array.get(array.size() - 1);\n\
    \        ArrayList<Long> left = new ArrayList<Long>();\n        ArrayList<Long>\
    \ right = new ArrayList<Long>();\n        for(int i = 1; i < array.size() - 1;\
    \ i++) {\n            long currentValue = array.get(i);\n            if(currentValue\
    \ < firstIndexValue) {\n                left.add(currentValue);\n            }\
    \ else {\n                right.add(currentValue);\n            }\n        }\n\
    \        if((firstIndexValue + lastIndexValue) % 2l == 0l) {\n            return\
    \ mergeDescending(sortArray(left), firstIndexValue, sortArray(right), lastIndexValue);\n\
    \        } else {\n            return mergeAscending(sortArray(left), firstIndexValue,\
    \ sortArray(right), lastIndexValue);\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcxxr0twi.java:40: error: cannot find symbol\n            return\
    \ mergeDescending(sortArray(left), firstIndexValue, sortArray(right), lastIndexValue);\n\
    \                   ^\n  symbol:   method mergeDescending(ArrayList<Long>,long,ArrayList<Long>,long)\n\
    \  location: class Problem\n/tmp/tmpcxxr0twi.java:42: error: cannot find symbol\n\
    \            return mergeAscending(sortArray(left), firstIndexValue, sortArray(right),\
    \ lastIndexValue);\n                   ^\n  symbol:   method mergeAscending(ArrayList<Long>,long,ArrayList<Long>,long)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011689
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        Pair<ArrayList<Long>,\
    \ ArrayList<Long>> split = split(array);\n        ArrayList<Long> list1 = split.getValue0();\n\
    \        ArrayList<Long> list2 = split.getValue1();\n        ArrayList<Long> sorted1\
    \ = sort(list1);\n        ArrayList<Long> sorted2 = sort(list2);\n        return\
    \ merge(sorted1, sorted2);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp91rfq5mm.java:24: error: cannot find symbol\n        Pair<ArrayList<Long>,\
    \ ArrayList<Long>> split = split(array);\n                                   \
    \                    ^\n  symbol:   method split(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmp91rfq5mm.java:27: error: cannot find symbol\n       \
    \ ArrayList<Long> sorted1 = sort(list1);\n                                  ^\n\
    \  symbol:   method sort(ArrayList<Long>)\n  location: class Problem\n/tmp/tmp91rfq5mm.java:28:\
    \ error: cannot find symbol\n        ArrayList<Long> sorted2 = sort(list2);\n\
    \                                  ^\n  symbol:   method sort(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmp91rfq5mm.java:29: error: cannot find symbol\n\
    \        return merge(sorted1, sorted2);\n               ^\n  symbol:   method\
    \ merge(ArrayList<Long>,ArrayList<Long>)\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> odd = new ArrayList<>();\n\
    \        ArrayList<Long> even = new ArrayList<>();\n        for (Long i : array)\
    \ {\n            if (i % 2 == 0) {\n                even.add(i);\n           \
    \ } else {\n                odd.add(i);\n            }\n        }\n        Collections.sort(odd);\n\
    \        Collections.sort(even);\n        Collections.reverse(even);\n       \
    \ odd.addAll(even);\n        return odd;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwy0xe3r.java:43)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2iutd8j.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // We are given\
    \ an array list of non-negative integers.\n        boolean isOdd = (array.get(0)\
    \ + array.get(array.size() - 1)) % 2 != 0;\n        // we will sort the given\
    \ array list in ascending order if the sum( first index value, last index value)\
    \ is odd.\n        if (isOdd) {\n            // We will use a comparator for a\
    \ given array list.\n            Collections.sort(array);\n        } else {\n\
    \            // We will use a comparator for a given array list.\n           \
    \ Collections.sort(array, Collections.reverseOrder());\n        }\n        //\
    \ We will return the given array list after sorting.\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpsih8v8r6.java:25)\n\tat Problem.main(tmpsih8v8r6.java:38)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        long sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        int i = 0;\n        while (i < array.size())\
    \ {\n            int j = i + 1;\n            while (j < array.size()) {\n    \
    \            if (sum % 2 == 0 && array.get(i) < array.get(j)) {\n            \
    \        long temp = array.get(i);\n                    array.set(i, array.get(j));\n\
    \                    array.set(j, temp);\n                } else if (sum % 2 !=\
    \ 0 && array.get(i) > array.get(j)) {\n                    long temp = array.get(i);\n\
    \                    array.set(i, array.get(j));\n                    array.set(j,\
    \ temp);\n                }\n                j = j + 1;\n            }\n     \
    \       i = i + 1;\n        }\n        return array;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpqf6mq294.java:24)\n\tat Problem.main(tmpqf6mq294.java:45)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n        ArrayList<Long> oddNumbers = new\
    \ ArrayList<Long>();\n        ArrayList<Long> evenNumbers = new ArrayList<Long>();\n\
    \        if (array.size() == 0) {\n            return array;\n        }\n    \
    \    if (array.size() == 1) {\n            return array;\n        }\n        for\
    \ (int index = 0; index < array.size(); index++) {\n            if (array.get(index)\
    \ % 2 == 0) {\n                evenNumbers.add(array.get(index));\n          \
    \  } else {\n                oddNumbers.add(array.get(index));\n            }\n\
    \        }\n        Collections.sort(oddNumbers);\n        Collections.sort(evenNumbers);\n\
    \        if (oddNumbers.size() > 0) {\n            sortedArray.add(oddNumbers.get(0));\n\
    \        }\n        if (evenNumbers.size() > 0) {\n            sortedArray.add(evenNumbers.get(evenNumbers.size()\
    \ - 1));\n        }\n        for (int index = 1; index < oddNumbers.size(); index++)\
    \ {\n            sortedArray.add(oddNumbers.get(index));\n        }\n        for\
    \ (int index = evenNumbers.size() - 2; index >= 0; index--) {\n            sortedArray.add(evenNumbers.get(index));\n\
    \        }\n        return sortedArray;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ak0ji56.java:59)\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // insert your code\
    \ here\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpi1mssg.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sarray = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return sarray;\n        }\n        int sum = array.get(0).intValue() + array.get(array.size()\
    \ - 1).intValue();\n        if (sum % 2 == 0) {\n            sarray = new ArrayList<Long>(array);\n\
    \            Collections.sort(sarray, Collections.reverseOrder());\n        }\
    \ else {\n            sarray = new ArrayList<Long>(array);\n            Collections.sort(sarray);\n\
    \        }\n        return sarray;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn9vp7u2.java:28)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() == 2) {\n\
    \            if (array.get(0) > array.get(1)) {\n                array.set(0,\
    \ array.get(0) + array.get(1));\n                array.set(1, array.get(0) - array.get(1));\n\
    \                array.set(0, array.get(0) - array.get(1));\n            }\n \
    \           return array;\n        }\n        if ((array.get(0) + array.get(array.size()\
    \ - 1)) % 2 != 0) {\n            Collections.sort(array);\n        } else {\n\
    \            Collections.sort(array, Collections.reverseOrder());\n        }\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()\
    \ == 0) return array;\n        Pair<ArrayList<Long>, ArrayList<Long>> ans = sortArrayHelper(array);\n\
    \        return (array.get(0) + array.get(array.size() - 1)) % 2 == 0 ? ans.getValue1()\
    \ : ans.getValue0();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x7xlfz8.java:25: error: cannot find symbol\n        Pair<ArrayList<Long>,\
    \ ArrayList<Long>> ans = sortArrayHelper(array);\n                           \
    \                          ^\n  symbol:   method sortArrayHelper(ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ arrayList = new ArrayList<Long>();\n        if (array.size() == 0l) {\n    \
    \        return arrayList;\n        }\n        for (long i = 0l; i < array.size();\
    \ i++) {\n            if (i % 2l == 0l) {\n                arrayList.add(i, array.get((int)i));\n\
    \            } else {\n                arrayList.add(0l, array.get((int)i));\n\
    \            }\n        }\n        Collections.sort(arrayList);\n        return\
    \ arrayList;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzjvv8dh3.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n                arrayList.add(i, array.get((int)i));\n   \
    \                           ^\n/tmp/tmpzjvv8dh3.java:32: error: incompatible types:\
    \ possible lossy conversion from long to int\n                arrayList.add(0l,\
    \ array.get((int)i));\n                              ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ _array = new ArrayList<Long>(array);\n        if (((_array.size()) > (1l)))\
    \ {\n            for (Long _index = (0l); (_index) < ((_array.size()) - (1l));\
    \ _index++) {\n                for (Long _innerIndex = (_index); (_innerIndex)\
    \ < ((_array.size()) - (1l)); _innerIndex++) {\n                    if (((_array.get(_index))\
    \ % (2l)) == ((_array.get((_innerIndex) + (1l))) % (2l))) {\n                \
    \        if (((_array.get(_index)) > (_array.get((_innerIndex) + (1l)))) && (((_array.get(_index))\
    \ % (2l)) == (0l))) {\n                            Collections.swap(_array, _index,\
    \ (_innerIndex) + (1l));\n                        } else {\n                 \
    \           if (((_array.get(_index)) < (_array.get((_innerIndex) + (1l)))) &&\
    \ (((_array.get(_index)) % (2l)) == (1l))) {\n                               \
    \ Collections.swap(_array, _index, (_innerIndex) + (1l));\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        return _array;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75k6vg78.java:28: error: incompatible types: Long cannot be converted\
    \ to int\n                    if (((_array.get(_index)) % (2l)) == ((_array.get((_innerIndex)\
    \ + (1l))) % (2l))) {\n                                     ^\n/tmp/tmp75k6vg78.java:28:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \                if (((_array.get(_index)) % (2l)) == ((_array.get((_innerIndex)\
    \ + (1l))) % (2l))) {\n                                                      \
    \                              ^\n/tmp/tmp75k6vg78.java:29: error: incompatible\
    \ types: Long cannot be converted to int\n                        if (((_array.get(_index))\
    \ > (_array.get((_innerIndex) + (1l)))) && (((_array.get(_index)) % (2l)) == (0l)))\
    \ {\n                                         ^\n/tmp/tmp75k6vg78.java:29: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \             if (((_array.get(_index)) > (_array.get((_innerIndex) + (1l))))\
    \ && (((_array.get(_index)) % (2l)) == (0l))) {\n                            \
    \                                                  ^\n/tmp/tmp75k6vg78.java:29:\
    \ error: incompatible types: Long cannot be converted to int\n               \
    \         if (((_array.get(_index)) > (_array.get((_innerIndex) + (1l)))) && (((_array.get(_index))\
    \ % (2l)) == (0l))) {\n                                                      \
    \                                                   ^\n/tmp/tmp75k6vg78.java:30:\
    \ error: no suitable method found for swap(ArrayList<Long>,Long,long)\n      \
    \                      Collections.swap(_array, _index, (_innerIndex) + (1l));\n\
    \                                       ^\n    method Collections.swap(List<?>,int,int)\
    \ is not applicable\n      (argument mismatch; Long cannot be converted to int)\n\
    \    method Collections.swap(Object[],int,int) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n/tmp/tmp75k6vg78.java:32:\
    \ error: incompatible types: Long cannot be converted to int\n               \
    \             if (((_array.get(_index)) < (_array.get((_i"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // STUDENT CODE\
    \ GOES HERE\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz8lnixr2.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Implement me!\n\
    \        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa93whbxg.java:29)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // your code goes\
    \ here\n        return array;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zpdttfw.java:30)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted_array;\n        long first_value;\n        long last_value;\n       \
    \ long sum;\n        if ((array.isEmpty())) {\n            sorted_array = (new\
    \ ArrayList<Long>(Arrays.asList()));\n        } else {\n            first_value\
    \ = array.get(0);\n            last_value = array.get((array.size() - 1));\n \
    \           sum = (first_value + last_value);\n            if ((sum % 2l) == 0l)\
    \ {\n                sorted_array = array;\n                sorted_array.sort(Comparator.reverseOrder());\n\
    \            } else {\n                sorted_array = array;\n               \
    \ sorted_array.sort(Comparator.naturalOrder());\n            }\n        }\n  \
    \      return sorted_array;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        throw new UnsupportedOperationException(\"\
    Not supported yet.\");\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ supported yet.\n\tat Problem.sortArray(tmpnuct7dd9.java:24)\n\tat Problem.main(tmpnuct7dd9.java:27)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        Collections.sort(array);\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1fc44tg8.java:31)\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return cojava.exec.Exercises.sortArray(array);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoi6qu2ub.java:24: error: package cojava.exec does not exist\n \
    \       return cojava.exec.Exercises.sortArray(array);\n                     \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0)\n            return new ArrayList<Long>();\n        else if (array.size()\
    \ == 1)\n            return array;\n        else if (array.size() == 2) {\n  \
    \          if ((array.get(0) + array.get(1)) % 2 == 0) {\n                if (array.get(0)\
    \ < array.get(1)) {\n                    long temp = array.get(0);\n         \
    \           array.set(0, array.get(1));\n                    array.set(1, temp);\n\
    \                }\n            } else {\n                if (array.get(0) > array.get(1))\
    \ {\n                    long temp = array.get(0);\n                    array.set(0,\
    \ array.get(1));\n                    array.set(1, temp);\n                }\n\
    \            }\n            return array;\n        } else {\n            boolean\
    \ isOdd = false;\n            if ((array.get(0) + array.get(array.size() - 1))\
    \ % 2 == 0)\n                isOdd = true;\n            ArrayList<Long> left =\
    \ new ArrayList<Long>();\n            ArrayList<Long> right = new ArrayList<Long>();\n\
    \            for (int i = 0; i < array.size() / 2; i++)\n                left.add(array.get(i));\n\
    \            for (int i = array.size() / 2; i < array.size(); i++)\n         \
    \       right.add(array.get(i));\n            left = sortArray(left);\n      \
    \      right = sortArray(right);\n            ArrayList<Long> result = new ArrayList<Long>();\n\
    \            for (int i = 0; i < array.size(); i++) {\n                if (isOdd)\
    \ {\n                    if (left.size() > 0 && (right.size() == 0 || right.get(0)\
    \ < left.get(0))) {\n                        result.add(left.get(0));\n      \
    \                  left.remove(0);\n                    } else {\n           \
    \             result.add(right.get(0));\n                        right.remove(0);\n\
    \                    }\n                } else {\n                    if (left.size()\
    \ > 0 && (right.size() == 0 ||\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6oca07o0.java:67: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp6oca07o0.java:68: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ foo= new ArrayList<>();\n        ArrayList<Long> bar= new ArrayList<>();\n \
    \       ArrayList<Long> loo= new ArrayList<>();\n        ArrayList<Long> lar=\
    \ new ArrayList<>();\n        ArrayList<Long> poo= new ArrayList<>();\n      \
    \  long foobar = (long) 0l;\n        long barfoo = (long) 0l;\n        long loopoo\
    \ = (long) 0l;\n        long loopar = (long) 0l;\n        long poofoo = (long)\
    \ 0l;\n        long poobar = (long) 0l;\n        long foofoo = (long) 0l;\n  \
    \      long foobar1 = (long) 0l;\n        long barfoo1 = (long) 0l;\n        long\
    \ loopoo1 = (long) 0l;\n        long loopar1 = (long) 0l;\n        long poofoo1\
    \ = (long) 0l;\n        long poobar1 = (long) 0l;\n        long foofoo1 = (long)\
    \ 0l;\n        long foobar2 = (long) 0l;\n        long barfoo2 = (long) 0l;\n\
    \        long loopoo2 = (long) 0l;\n        long loopar2 = (long) 0l;\n      \
    \  long poofoo2 = (long) 0l;\n        long poobar2 = (long) 0l;\n        long\
    \ foofoo2 = (long) 0l;\n        long foobar3 = (long) 0l;\n        long barfoo3\
    \ = (long) 0l;\n        long loopoo3 = (long) 0l;\n        long loopar3 = (long)\
    \ 0l;\n        long poofoo3 = (long) 0l;\n        long poobar3 = (long) 0l;\n\
    \        long foofoo3 = (long) 0l;\n        long foobar4 = (long) 0l;\n      \
    \  long barfoo4 = (long) 0l;\n        long loopoo4 = (long) 0l;\n        long\
    \ loopar4 = (long) 0l;\n        long poofoo4 = (long) 0l;\n        long po\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpngjt0x7k.java:62: error: ';' expected\n        long po\n      \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011690
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()==0){\n\
    \            return new ArrayList<Long>();\n        }\n        if(array.size()==1){\n\
    \            return array;\n        }\n        if(array.size()==2){\n        \
    \    if(array.get(0)+array.get(1)%2==0){\n                ArrayList<Long> sortedArray\
    \ = new ArrayList<Long>();\n                sortedArray.add(array.get(1));\n \
    \               sortedArray.add(array.get(0));\n                return sortedArray;\n\
    \            }\n            else{\n                return array;\n           \
    \ }\n        }\n        if(array.get(0)+array.get(array.size()-1)%2==0){\n   \
    \         ArrayList<Long> sortedArray = new ArrayList<Long>();\n            sortedArray.add(array.get(array.size()-1));\n\
    \            ArrayList<Long> sortedSubArray = sortArray(array.subList(1, array.size()-1));\n\
    \            sortedArray.addAll(sortedSubArray);\n            sortedArray.add(array.get(0));\n\
    \            return sortedArray;\n        }\n        else{\n            ArrayList<Long>\
    \ sortedArray = new ArrayList<Long>();\n            sortedArray.add(array.get(0));\n\
    \            ArrayList<Long> sortedSubArray = sortArray(array.subList(1, array.size()-1));\n\
    \            sortedArray.addAll(sortedSubArray);\n            sortedArray.add(array.get(array.size()-1));\n\
    \            return sortedArray;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2vq9p1l2.java:44: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n            ArrayList<Long> sortedSubArray\
    \ = sortArray(array.subList(1, array.size()-1));\n                           \
    \                                         ^\n/tmp/tmp2vq9p1l2.java:52: error:\
    \ incompatible types: List<Long> cannot be converted to ArrayList<Long>\n    \
    \        ArrayList<Long> sortedSubArray = sortArray(array.subList(1, array.size()-1));\n\
    \                                                                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if ((array.size())\
    \ == 0) {\n            return array;\n        }\n        List<Long> sorted = (array.stream().map((a)\
    \ -> a).sorted((a, b) -> a.compareTo(b)).collect(Collectors.toList()));\n    \
    \    ArrayList<Long> res = new ArrayList<Long>();\n        int first = 0;\n  \
    \      int last = ((sorted.size()) - 1);\n        boolean reverse = ((sorted.get(first))\
    \ + (sorted.get(last))) % 2 == 0;\n        while ((first <= last)) {\n       \
    \     if (reverse) {\n                res.add(sorted.get(last));\n           \
    \     last--;\n            } else {\n                res.add(sorted.get(first));\n\
    \                first++;\n            }\n            reverse = !reverse;\n  \
    \      } \n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5v4_nzs.java:47)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int len = array.size();\n\
    \        if (len == 0) {\n            return array;\n        }\n        if (len\
    \ == 1) {\n            return array;\n        }\n        if (len == 2) {\n   \
    \         if (array.get(0) > array.get(1)) {\n                long tmp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, tmp);\n\
    \            }\n            return array;\n        }\n        if (len == 3) {\n\
    \            if (array.get(0) > array.get(1)) {\n                long tmp = array.get(0);\n\
    \                array.set(0, array.get(1));\n                array.set(1, tmp);\n\
    \            }\n            if (array.get(1) > array.get(2)) {\n             \
    \   long tmp = array.get(1);\n                array.set(1, array.get(2));\n  \
    \              array.set(2, tmp);\n            }\n            if (array.get(0)\
    \ > array.get(1)) {\n                long tmp = array.get(0);\n              \
    \  array.set(0, array.get(1));\n                array.set(1, tmp);\n         \
    \   }\n            return array;\n        }\n        if (len > 3) {\n        \
    \    ArrayList<Long> back = new ArrayList<Long>();\n            ArrayList<Long>\
    \ front = new ArrayList<Long>();\n            for (int i = 0; i < len / 2; i++)\
    \ {\n                front.add(array.get(i));\n            }\n            for\
    \ (int i = len / 2; i < len; i++) {\n                back.add(array.get(i));\n\
    \            }\n            front = sortArray(front);\n            back = sortArray(back);\n\
    \            ArrayList<Long> new_array = new ArrayList<Long>();\n            while\
    \ ((front.size() > 0) && (back.size() > 0)) {\n                if (front.get(0)\
    \ < back.get(0)) {\n                    new_array.add(front.get(0));\n       \
    \             front.remove(0);\n                } else {\n                   \n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gz4ea_e.java:76: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011691
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if(array.size()>1){\n\
    \            int sum=0;\n            for(int i=0;i<array.size();i++){\n      \
    \          sum+=array.get(i);\n            }\n            if(sum%2==0){\n    \
    \            for(int i=0;i<array.size();i++){\n                    for(int j=0;j<array.size()-1;j++){\n\
    \                        if(array.get(j)<array.get(j+1)){\n                  \
    \          long a=array.get(j);\n                            array.set(j,array.get(j+1));\n\
    \                            array.set(j+1,a);\n                        }\n  \
    \                  }\n                }\n            }\n            else{\n  \
    \              for(int i=0;i<array.size();i++){\n                    for(int j=0;j<array.size()-1;j++){\n\
    \                        if(array.get(j)>array.get(j+1)){\n                  \
    \          long a=array.get(j);\n                            array.set(j,array.get(j+1));\n\
    \                            array.set(j+1,a);\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ array;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02aiafzl.java:58)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ <= 1) {\n            return array;\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        ArrayList<Long> new_list = new ArrayList<Long>();\n\
    \        ArrayList<Long> l1 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ l2 = new ArrayList<Long>();\n        if (array.size() <= 1) {\n            return\
    \ array;\n        }\n        Long v1 = array.get(0);\n        Long v2 = array.get(array.size()\
    \ - 1);\n        for (int i = 1; i < array.size() - 1; i++) {\n            new_list.add(array.get(i));\n\
    \        }\n        if ((v1 + v2) % 2 == 0) {\n            l1 = sortArray(new_list);\n\
    \            result.add(v2);\n            result.addAll(l1);\n            result.add(v1);\n\
    \        } else {\n            l1 = sortArray(new_list);\n            result.add(v1);\n\
    \            result.addAll(l1);\n            result.add(v2);\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_76dy5ws.java:55)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n    // Your code goes here\n\
    \        if(array.size()==0)\n            return array;\n        if(array.size()==1)\n\
    \            return array;\n        int startIndex=0;\n        int endIndex=array.size()-1;\n\
    \        long startNum=array.get(startIndex);\n        long endNum=array.get(endIndex);\n\
    \        if((startNum+endNum)%2==0)\n        {\n            // Sort in reverse\n\
    \            Collections.sort(array, Collections.reverseOrder());\n        }\n\
    \        else\n        {\n            // Sort in ascending order\n           \
    \ Collections.sort(array);\n        }\n        return array;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here!\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqklpq37.java:29)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ temp = (new ArrayList<Long>(array));\n        Collections.sort(temp);\n    \
    \    long first = array.get(0);\n        long last = array.get(array.size() -\
    \ 1);\n        long sum = first + last;\n        if (sum % 2 == 0) {\n       \
    \     Collections.reverse(temp);\n        }\n        return temp;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpntmc8vbd.java:26)\n\tat Problem.main(tmpntmc8vbd.java:35)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        ArrayList<Long> odd = new ArrayList<Long>();\n        for (Long n : array)\
    \ {\n            if (n % 2 == 0) {\n                even.add(n);\n           \
    \ } else {\n                odd.add(n);\n            }\n        }\n        Collections.sort(even);\n\
    \        Collections.sort(odd);\n        Collections.reverse(odd);\n        for\
    \ (Long n : odd) {\n            sorted.add(n);\n        }\n        for (Long n\
    \ : even) {\n            sorted.add(n);\n        }\n        return sorted;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcyg1f08a.java:48)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ array_ = new ArrayList<>();\n        ArrayList<Long> array__ = new ArrayList<>();\n\
    \        boolean flag = (array.size() == 0 || array.size() == 1);\n        if\
    \ (flag) {\n            return array;\n        }\n        boolean flag_ = (array.get(0).longValue()\
    \ + array.get(array.size() - 1).longValue()) % 2l == 0l;\n        if (flag_) {\n\
    \            long min = (long)Long.MAX_VALUE;\n            long index = (long)0l;\n\
    \            for (long i = (long)0l; i < array.size(); i++) {\n              \
    \  boolean flag__ = array.get((int)i).longValue() < min;\n                if (flag__)\
    \ {\n                    min = array.get((int)i).longValue();\n              \
    \      index = i;\n                }\n            }\n            array__.add(array.get((int)index));\n\
    \            array.remove((int)index);\n            for (long i = (long)0l; i\
    \ < array.size(); i++) {\n                boolean flag__ = (array.get((int)i).longValue()\
    \ + array.get(array.size() - 1).longValue()) % 2l == 0l;\n                if (flag__)\
    \ {\n                    long min_ = (long)Long.MAX_VALUE;\n                 \
    \   long index_ = (long)0l;\n                    for (long j = (long)0l; j < array.size();\
    \ j++) {\n                        boolean flag___ = array.get((int)j).longValue()\
    \ < min_;\n                        if (flag___) {\n                          \
    \  min_ = array.get((int)j).longValue();\n                            index_ =\
    \ j;\n                        }\n                    }\n                    array__.add(array.get((int)index_));\n\
    \                    array.remove((int)index_);\n                } else {\n  \
    \                  long max = (long)Long.MIN_VALUE;\n                    long\
    \ index_ = (long)0l;\n                    for (long j = (long)0l; j < array.size();\
    \ j++) {\n                        boolean flag___ = array.get((int)j\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe7hy9d1d.java:61: error: ')' expected\n                       \
    \ boolean flag___ = array.get((int)j\n                                       \
    \                   ^\n/tmp/tmpe7hy9d1d.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Good luck!\n\
    \        ArrayList<Long> evens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ odds = new ArrayList<Long>();\n        for (int index = 0; index < array.size();\
    \ index += 1) {\n            Long currentNumber = array.get(index);\n        \
    \    if (currentNumber % 2l == 0l) {\n                evens.add(currentNumber);\n\
    \            } else {\n                odds.add(currentNumber);\n            }\n\
    \        }\n        Collections.sort(evens);\n        Collections.sort(odds);\n\
    \        Collections.reverse(odds);\n        Long oddIndex = 0l;\n        Long\
    \ evenIndex = 0l;\n        ArrayList<Long> sortedArray = new ArrayList<Long>();\n\
    \        for (int index = 0; index < array.size(); index += 1) {\n           \
    \ if (index % 2l == 0l) {\n                if (oddIndex < odds.size()) {\n   \
    \                 sortedArray.add(odds.get(oddIndex.intValue()));\n          \
    \          oddIndex += 1l;\n                } else {\n                    sortedArray.add(evens.get(evenIndex.intValue()));\n\
    \                    evenIndex += 1l;\n                }\n            } else {\n\
    \                if (evenIndex < evens.size()) {\n                    sortedArray.add(evens.get(evenIndex.intValue()));\n\
    \                    evenIndex += 1l;\n                } else {\n            \
    \        sortedArray.add(odds.get(oddIndex.intValue()));\n                   \
    \ oddIndex += 1l;\n                }\n            }\n        }\n        return\
    \ sortedArray;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqlpw_qc6.java:65)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        Long first = array.get(0);\n      \
    \  Long last = array.get(array.size() - 1);\n        if ((first + last) % 2 ==\
    \ 0) {\n            List<Long> reversed = array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n\
    \            sorted.addAll(reversed);\n        } else {\n            sorted =\
    \ (ArrayList<Long>) array.stream().sorted().collect(Collectors.toList());\n  \
    \      }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmptl3msq18.java:25)\n\tat Problem.main(tmptl3msq18.java:36)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ == 0) {\n            return array;\n        }\n        if (array.size() == 1)\
    \ {\n            return array;\n        }\n        if (array.size() > 1) {\n \
    \           Long head = array.get(0);\n            Long last = array.get(array.size()\
    \ - 1);\n            if ((head + last) % 2 == 0) {\n                return Utils.sort(array,\
    \ (x, y) -> Long.compare(y, x));\n            } else {\n                return\
    \ Utils.sort(array, (x, y) -> Long.compare(x, y));\n            }\n        }\n\
    \        return array;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1ctehob.java:34: error: cannot find symbol\n                return\
    \ Utils.sort(array, (x, y) -> Long.compare(y, x));\n                       ^\n\
    \  symbol:   variable Utils\n  location: class Problem\n/tmp/tmpn1ctehob.java:36:\
    \ error: cannot find symbol\n                return Utils.sort(array, (x, y) ->\
    \ Long.compare(x, y));\n                       ^\n  symbol:   variable Utils\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        ArrayList<Long> odds = new ArrayList<Long>();\n        for (long element\
    \ : array) {\n            if (element % 2 == 0) {\n                evens.add(element);\n\
    \            } else {\n                odds.add(element);\n            }\n   \
    \     }\n        Collections.sort(evens);\n        Collections.sort(odds);\n \
    \       Collections.reverse(odds);\n        if (array.size() == 0) {\n       \
    \     return array;\n        } else if (array.size() == 1) {\n            return\
    \ array;\n        } else if (array.size() == 2) {\n            if (array.get(0)\
    \ + array.get(1) % 2 == 0) {\n                return new ArrayList<Long>(Arrays.asList(array.get(1),\
    \ array.get(0)));\n            } else {\n                return array;\n     \
    \       }\n        } else {\n            if (array.get(0) + array.get(array.size()\
    \ - 1) % 2 == 0) {\n                for (long element : odds) {\n            \
    \        result.add(element);\n                }\n                for (long element\
    \ : evens) {\n                    result.add(element);\n                }\n  \
    \          } else {\n                for (long element : evens) {\n          \
    \          result.add(element);\n                }\n                for (long\
    \ element : odds) {\n                    result.add(element);\n              \
    \  }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdcygcgw1.java:69)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ r = new ArrayList<Long>();\n        r.addAll(array);\n        int len = r.size();\n\
    \        boolean order = (array.get(0) + array.get(len - 1)) % 2 != 0;\n     \
    \   if (order) {\n            Collections.sort(r);\n        } else {\n       \
    \     Collections.sort(r, Collections.reverseOrder());\n        }\n        return\
    \ r;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmp5s2u1eu7.java:27)\n\tat Problem.main(tmp5s2u1eu7.java:36)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        int sum = 0;\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            sum += array.get(i);\n        }\n    \
    \    if (sum % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--)\
    \ {\n                ret.add(array.get(i));\n            }\n        } else {\n\
    \            for (int i = 0; i < array.size(); i++) {\n                ret.add(array.get(i));\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3at92ef.java:43)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        int n = array.size();\n\
    \        boolean isOdd = (array.get(0) + array.get(n - 1)) % 2 == 1;\n       \
    \ List<Long> odd = new ArrayList<>();\n        List<Long> even = new ArrayList<>();\n\
    \        for (int i = 0; i < n; i++) {\n            if (array.get(i) % 2 == 1)\
    \ odd.add(array.get(i));\n            else even.add(array.get(i));\n        }\n\
    \        Collections.sort(odd);\n        Collections.sort(even);\n        if (isOdd)\
    \ {\n            Collections.reverse(odd);\n            Collections.reverse(even);\n\
    \        }\n        for (int i = 0; i < n; i++) {\n            if (i < odd.size())\
    \ array.set(i, odd.get(i));\n            else array.set(i, even.get(i - odd.size()));\n\
    \        }\n        return array;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortArray(tmpb7463ytv.java:25)\n\tat Problem.main(tmpb7463ytv.java:45)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn9vp7u2.java:28)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // write your solution\
    \ here...\n        int index = 0;\n        if (array.size() < 2) {\n         \
    \   return array;\n        }\n        long sum = array.get(0) + array.get(array.size()\
    \ - 1);\n        boolean odd = (sum % 2) == 1;\n        ArrayList<Long> newArray\
    \ = new ArrayList<Long>();\n        while (array.size() > 0) {\n            int\
    \ indexToAdd = index % array.size();\n            newArray.add(array.get(indexToAdd));\n\
    \            array.remove(indexToAdd);\n            index++;\n        }\n    \
    \    if (odd) {\n            newArray.sort(null);\n        } else {\n        \
    \    newArray.sort(Collections.reverseOrder());\n        }\n        return newArray;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        // Write your code\
    \ here, return your final answer.\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpkn0b6zxp.java:28)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return array;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm0186nfv.java:29)\n"
  stdout: ''
  timestamp: 1660011676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (Problem.sorted(array))\n\
    \            return array;\n        if (Problem.sortedInDescendingOrder(array))\n\
    \            return array;\n        if (Problem.sortedInAscendingOrder(array))\n\
    \            return array;\n        if (Problem.sum((array.get(0)), (array.get(Problem.lastIndex(array))))\
    \ % (long)2l == (long)0l)\n            return Problem.sortInDescendingOrder(array);\n\
    \        else\n            return Problem.sortInAscendingOrder(array);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6k3mu3y.java:24: error: cannot find symbol\n        if (Problem.sorted(array))\n\
    \                   ^\n  symbol:   method sorted(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmpl6k3mu3y.java:26: error: cannot find symbol\n       \
    \ if (Problem.sortedInDescendingOrder(array))\n                   ^\n  symbol:\
    \   method sortedInDescendingOrder(ArrayList<Long>)\n  location: class Problem\n\
    /tmp/tmpl6k3mu3y.java:28: error: cannot find symbol\n        if (Problem.sortedInAscendingOrder(array))\n\
    \                   ^\n  symbol:   method sortedInAscendingOrder(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmpl6k3mu3y.java:30: error: cannot find symbol\n\
    \        if (Problem.sum((array.get(0)), (array.get(Problem.lastIndex(array))))\
    \ % (long)2l == (long)0l)\n                                                  \
    \        ^\n  symbol:   method lastIndex(ArrayList<Long>)\n  location: class Problem\n\
    /tmp/tmpl6k3mu3y.java:31: error: cannot find symbol\n            return Problem.sortInDescendingOrder(array);\n\
    \                          ^\n  symbol:   method sortInDescendingOrder(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmpl6k3mu3y.java:33: error: cannot find symbol\n\
    \            return Problem.sortInAscendingOrder(array);\n                   \
    \       ^\n  symbol:   method sortInAscendingOrder(ArrayList<Long>)\n  location:\
    \ class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ other = new ArrayList<Long>();\n        for (Long element : array) {\n     \
    \       other.add(element);\n        }\n        Collections.sort(other);\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        int size = other.size();\n\
    \        int increment = -1;\n        if (size == 0) {\n            return result;\n\
    \        }\n        if (size == 1) {\n            result.add(other.get(0));\n\
    \            return result;\n        }\n        if ((size % 2) == 0) {\n     \
    \       increment = 1;\n        }\n        for (int i = 0; i < size; i++) {\n\
    \            if ((i % 2) == 0) {\n                result.add(other.get(i / 2));\n\
    \            } else {\n                result.add(other.get(size - (i / 2) - 1));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9864oih.java:54)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ s = new ArrayList<Long>();\n        for (long a : array) {\n            s.add(a);\n\
    \        }\n        int l = s.size();\n        if (l == 0 || l == 1) {\n     \
    \       return s;\n        }\n        Comparator<Long> c;\n        int first =\
    \ s.get(0).intValue();\n        int last = s.get(l - 1).intValue();\n        if\
    \ ((first + last) % 2 == 0) {\n            c = new Comparator<Long>() {\n    \
    \            public int compare(Long o1, Long o2) {\n                    return\
    \ o2.compareTo(o1);\n                }\n            };\n        } else {\n   \
    \         c = new Comparator<Long>() {\n                public int compare(Long\
    \ o1, Long o2) {\n                    return o1.compareTo(o2);\n             \
    \   }\n            };\n        }\n        Collections.sort(s, c);\n        return\
    \ s;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        return null;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpmbmf82b5.java:27)\n"
  stdout: ''
  timestamp: 1660011679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        if (array.size()\
    \ > 0) {\n            List<Long> smallerList = array.subList(1, array.size());\n\
    \            int sum = (int) (array.get(0) + array.get(array.size() - 1));\n \
    \           ArrayList<Long> answer = new ArrayList<Long>();\n            if (sum\
    \ % 2 == 0) {\n                answer.addAll(sortArray(smallerList));\n      \
    \          answer.add(array.get(0));\n            } else {\n                answer.add(array.get(0));\n\
    \                answer.addAll(sortArray(smallerList));\n            }\n     \
    \       return answer;\n        } else {\n            return array;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgez8r8wf.java:29: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n                answer.addAll(sortArray(smallerList));\n\
    \                                        ^\n/tmp/tmpgez8r8wf.java:33: error: incompatible\
    \ types: List<Long> cannot be converted to ArrayList<Long>\n                answer.addAll(sortArray(smallerList));\n\
    \                                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        List<Long> sortedArray\
    \ = new ArrayList<Long>(array);\n        Collections.sort(sortedArray);\n    \
    \    ArrayList<Long> sortedArrayAsc = new ArrayList<Long>(sortedArray);\n    \
    \    Collections.reverse(sortedArray);\n        ArrayList<Long> sortedArrayDesc\
    \ = new ArrayList<Long>(sortedArray);\n        if ((array.size() < 2) || ((array.get(0).longValue()\
    \ + array.get(array.size() - 1).longValue()) % 2l) == 1l) {\n            return\
    \ sortedArrayAsc;\n        } else {\n            return sortedArrayDesc;\n   \
    \     }\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppsavbbd8.java:29)\n"
  stdout: ''
  timestamp: 1660011688
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (array.size() == 0) {\n        \
    \    return result;\n        }\n        else if (array.size() == 1) {\n      \
    \      result.add(array.get(0));\n            return result;\n        }\n    \
    \    else {\n            if ((array.get(0) + array.get(array.size() - 1)) % 2\
    \ == 0) {\n                ArrayList<Long> copiedArray = new ArrayList<Long>(array);\n\
    \                Collections.sort(copiedArray, new Comparator<Long>() {\n    \
    \                @Override\n                    public int compare(Long arg0,\
    \ Long arg1) {\n                        return (arg1).compareTo(arg0);\n     \
    \               }\n                });\n                return copiedArray;\n\
    \            }\n            else {\n                ArrayList<Long> copiedArray\
    \ = new ArrayList<Long>(array);\n                Collections.sort(copiedArray,\
    \ new Comparator<Long>() {\n                    @Override\n                  \
    \  public int compare(Long arg0, Long arg1) {\n                        return\
    \ (arg0).compareTo(arg1);\n                    }\n                });\n      \
    \          return copiedArray;\n            }\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of non-negative integers, return\
    \ a cojava of the given array array list after sorting,\n    // you will sort\
    \ the given array array list in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    // Note:\n    // * don't\
    \ change the given array array list.\n    // Examples:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n    //\
    \ (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
    \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        while (array.size() > 0) {\n          \
    \  if (array.size() == 1) {\n                result.add(array.get(0));\n     \
    \           array.remove(0);\n            } else {\n                long min =\
    \ array.get(0);\n                long max = array.get(0);\n                int\
    \ minIndex = 0;\n                int maxIndex = 0;\n                for (int i\
    \ = 0; i < array.size(); i++) {\n                    if (array.get(i) < min) {\n\
    \                        min = array.get(i);\n                        minIndex\
    \ = i;\n                    }\n                    if (array.get(i) > max) {\n\
    \                        max = array.get(i);\n                        maxIndex\
    \ = i;\n                    }\n                }\n                if ((min + max)\
    \ % 2 == 0) {\n                    result.add(max);\n                    array.remove(maxIndex);\n\
    \                } else {\n                    result.add(min);\n            \
    \        array.remove(minIndex);\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
    \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
    \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
    \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6nx8twv.java:58)\n"
  stdout: ''
  timestamp: 1660011694
