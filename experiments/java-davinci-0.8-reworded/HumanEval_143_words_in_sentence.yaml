name: HumanEval_143_words_in_sentence
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a string representing a sentence,\n    //\
  \ the sentence contains some words separated by a space,\n    // and you have to\
  \ return a string that contains the words from the original sentence,\n    // whose\
  \ lengths are prime numbers,\n    // the order of the words in the new string should\
  \ be the same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
  This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
  lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <=\
  \ len(sentence) <= 100\n    // * sentence contains only letters\n    public static\
  \ String wordsInSentence(String sentence) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
  This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
  \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no\
  \ place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
  Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
  go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\
  \")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n\
  }\n"
completions: ["        // Your code here!\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        List<String> sList = Arrays.asList(sentence.split(\"\
    \ \"));\n        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n\
    \            String s = words[i];\n            if (isPrime(s.length())) {\n  \
    \              sb.append(s + \" \");\n            }\n        }\n        String\
    \ s = sb.toString();\n        if (s.length() > 0) {\n            s = s.substring(0,\
    \ s.length() - 1);\n        }\n        return s;", "        // your code here\n\
    \        return \"\";", "        String[] words = sentence.split(\" \");\n   \
    \     StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int l = word.length();\n            boolean isPrime = true;\n\
    \            for (int i = 2; i <= Math.sqrt(l); i++) {\n                if (l\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  sb.append(word + \" \");\n            }\n        }\n        return sb.toString().trim();",
  "        String result = \"\";\n        String[] words = sentence.split(\" \");\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\n\
    \                result += word + \" \";\n        }\n        return result.trim();",
  '        return "Answer";', "        char[] sentenceArray = sentence.toCharArray();\n\
    \        StringBuilder newSentence = new StringBuilder();\n        for (int i\
    \ = 0; i < sentenceArray.length; i++) {\n            StringBuilder word = new\
    \ StringBuilder();\n            while (i < sentenceArray.length && sentenceArray[i]\
    \ != ' ') {\n                word.append(sentenceArray[i]);\n                i++;\n\
    \            }\n            if (word.length() != 0 && isPrime(word.length()))\
    \ {\n                newSentence.append(word);\n                newSentence.append('\
    \ ');\n            }\n        }\n        return newSentence.toString().trim();",
  "        String[] words = sentence.split(\" \");\n        String[] prime_words =\
    \ Arrays.stream(words).filter(e -> isPrime(e.length())).toArray(String[]::new);\n\
    \        return String.join(\" \", prime_words);", '        return "";', "   \
    \     StringBuilder ans = new StringBuilder();\n        String[] words = sentence.split(\"\
    \ \");\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        boolean isPrime;\n\
    \        for (String word : words) {\n            isPrime = false;\n         \
    \   for (int prime : primes) {\n                if (word.length() == prime) {\n\
    \                    isPrime = true;\n                    break;\n           \
    \     }\n            }\n            if (isPrime) {\n                ans.append(word\
    \ + \" \");\n            }\n        }\n        if (ans.length() > 0) {\n     \
    \       ans.deleteCharAt(ans.length() - 1);\n        }\n        return ans.toString();",
  "        String[] words = sentence.split(\" \");\n        String res = \"\";\n \
    \       for (String word : words) {\n            if (word.length() > 1 && isPrime(word.length()))\n\
    \                res += word + \" \";\n        }\n        return res.substring(0,\
    \ res.length() - 1);", '        return null;', "        // Can you code up a solution\
    \ for this?\n        return null;", "        String[] words = sentence.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
  "        String[] words = sentence.split(\" \");\n        StringBuilder result =\
    \ new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.append(word + \" \");\n            }\n        }\n\
    \        return result.toString().trim();", "        // TODO: implement your solution\n\
    \        return null;", '        throw new UnsupportedOperationException("Not
    implemented yet.");', "        String[] words = sentence.split(\" \");\n     \
    \   StringBuffer sb = new StringBuffer();\n        for (String w : words) {\n\
    \            if (isPrime(w.length())) {\n                sb.append(w);\n     \
    \           sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
  "      int[] a = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97};\n      ArrayList<Integer> is = new ArrayList<Integer>();\n\
    \      ArrayList<String> s = new ArrayList<String>();\n      for (int i = 0; i\
    \ < a.length; i++) {\n        is.add(a[i]);\n      }\n      sentence = sentence.replaceAll(\"\
    [^a-zA-Z ]\", \"\");\n      String[] arr = sentence.split(\" \");\n      for (int\
    \ i = 0; i < arr.length; i++) {\n        if (is.contains(arr[i].length())) {\n\
    \          s.add(arr[i]);\n        }\n      }\n      return String.join(\" \"\
    , s);", "        // Your code here\n        return \"\";", "        if (sentence\
    \ == null) return null;\n        return Arrays.stream(sentence.split(\" \"))\n\
    \        .filter(word -> BigInteger.valueOf(word.length()).isProbablePrime(100))\n\
    \        .collect(Collectors.joining(\" \"));", "        // Write your code here\n\
    \        return \"\";", '        return null;', "        // TIP:\n        // *\
    \ prime numbers are numbers that only have two divisors: 1 and itself\n      \
    \  // * you can use the function IntStream.rangeClosed(2, 100).boxed().collect(Collectors.toList());\n\
    \        // * to get a list of integer from 2 to 100\n        // * You can check\
    \ this website for how to get prime numbers from 2 to 100\n        // * https://www.educative.io/edpresso/how-to-determine-if-a-number-is-prime-in-java\n\
    \        // * You can check this website for more information about streams\n\
    \        // * https://www.javacodegeeks.com/2014/05/java-8-streams-api-tutorial.html\n\
    \        // * You can check this website for more information about String class\n\
    \        // * https://docs.oracle.com/javase/7/docs/api/java/lang/String.html\n\
    \        // {Write your code here...}\n        \n        //split sentence to words\n\
    \        String [] words = sentence.split(\" \");\n        //list of prime numbers\n\
    \        List<Integer> prime_numbers = new ArrayList<Integer>();\n        for(int\
    \ i = 2; i <= 100; i++){\n            boolean isPrime = true;\n            for(int\
    \ j = 2; j <= Math.sqrt(i); j++){\n                if(i % j == 0){\n         \
    \           isPrime = false;\n                    break;\n                }\n\
    \            }\n            if(isPrime){\n                prime_numbers.add(i);\n\
    \            }\n        }\n        String result = \"\";\n        for(int i =\
    \ 0; i < words.length; i++){\n            int len = words[i].length();\n     \
    \       if(prime_numbers.contains(len)){\n                result += words[i] +\
    \ \" \";\n            }\n        }\n        return result.trim();", "        //\
    \ TODO\n        return null;", "        String[] a = sentence.split(\" \");\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.length; i++) {\n            if (isPrime(a[i].length())) {\n              \
    \  sb.append(a[i] + \" \");\n            }\n        }\n        return sb.toString().trim();",
  "        // Implement me!\n        throw new RuntimeException(\"Method not implemented!\"\
    );", "        String[] words = sentence.split(\" \");\n        String result =\
    \ \"\";\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();", "        String[] words = sentence.split(\" \");\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word);\n\
    \                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
  "        return Arrays.stream(sentence.split(\" \"))\n            .filter(s -> isPrime(s.length()))\n\
    \            .collect(Collectors.joining(\" \"));", "        // write your code\
    \ here\n        return null;", "        // write your code here.\n        String[]\
    \ splitted = sentence.split(\" \");\n        String toBeReturned = \"\";\n   \
    \     for (int i = 0; i < splitted.length; i++) {\n            String word = splitted[i];\n\
    \            if (isPrime(word.length()))\n                toBeReturned += word\
    \ + \" \";\n        }\n        return toBeReturned.trim();", "        String result\
    \ = \"\";\n        StringTokenizer tokenizer = new StringTokenizer(sentence);\n\
    \        while (tokenizer.hasMoreTokens()) {\n            String token = tokenizer.nextToken();\n\
    \            if (prime(token.length())) {\n                result += token + \"\
    \ \";\n            }\n        }\n        return result.trim();", '        return
    "";', "        // hint: you might need to use Character.isLetter(), String.valueOf(),\
    \ String.split(), String.join(), String.length(), String.trim(), String.contains(),\
    \ String.valueOf(), Array.stream(), and IntStream.anyMatch().\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        // Show\
    \ me some code!\n        return \"\";", "        String[] arr = sentence.split(\"\
    \ \");\n        List<String> list = new ArrayList<>();\n        for (String s\
    \ : arr) {\n            if (isPrime(s.length())) {\n                list.add(s);\n\
    \            }\n        }\n        return String.join(\" \", list);", "      \
    \  // Implement the function here\n        return \"\";", "        String[] words\
    \ = sentence.split(\" \");\n        String result = \"\";\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ result += word + \" \";\n            }\n        }\n        return result.substring(0,\
    \ result.length() - 1);", "        String[] words = sentence.split(\" \");\n \
    \       String result = \"\";\n        for (String word : words) {\n         \
    \   if (isPrime(word.length())) {\n                result += word + \" \";\n \
    \           }\n        }\n        return result.trim();", "        String[] words\
    \ = sentence.split(\" \");\n        String result = \"\";\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ result += word + \" \";\n            }\n        }\n        return result.trim();",
  "        //Write your code here\n        return \"\";", "        return Arrays.stream(sentence.split(\"\
    \ \"))\n            .filter(w -> isPrime(w.length()))\n            .collect(Collectors.joining(\"\
    \ \"));", "        String[] words = sentence.split(\" \");\n        List<String>\
    \ primes = new ArrayList<>();\n        for (String word : words) {\n         \
    \   if (isPrime(word.length())) {\n                primes.add(word);\n       \
    \     }\n        }\n        return String.join(\" \", primes);", "        // your\
    \ code goes here\n        return \"\";", '        return null;', "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return null;", "        String result = \"\";\n        String[] words\
    \ = sentence.split(\" \");\n        for (String word : words) {\n            if\
    \ (isPrime(word.length())) {\n                result += word + \" \";\n      \
    \      }\n        }\n        return result.trim();", "        String[] a = sentence.split(\"\
    \ \");\n        String res = \"\";\n        for (int i = 0; i < a.length; i++)\
    \ {\n            if (isPrime(a[i].length())) {\n                res += a[i] +\
    \ \" \";\n            }\n        }\n        return res.trim();", "        String[]\
    \ words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        return sb.toString().trim();", "        String[]\
    \ words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                primeWords.add(word);\n            }\n        }\n       \
    \ return String.join(\" \", primeWords);", "        // write your code here\n\
    \        String[] words = sentence.split(\" \");\n        String res = \"\";\n\
    \        for (String word : words) {\n            boolean isPrime = true;\n  \
    \          for (int i = 2; i < word.length(); i++) {\n                if (word.length()\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  res += word + \" \";\n            }\n        }\n        return res.trim();",
  "        String newSentence = \"\";\n        String[] sentenceArr = sentence.split(\"\
    \ \");\n        // int[] primeNums = getPrimeNumbers(100);\n        // for (int\
    \ i = 0; i < sentenceArr.length; i++) {\n        //     String word = sentenceArr[i];\n\
    \        //     for (int j = 0; j < primeNums.length; j++) {\n        //     \
    \    if (word.length() == primeNums[j]) {\n        //             newSentence\
    \ += word + \" \";\n        //         }\n        //     }\n        // }\n   \
    \     // return newSentence.trim();\n        for (int i = 0; i < sentenceArr.length;\
    \ i++) {\n            String word = sentenceArr[i];\n            if (isPrime(word.length()))\
    \ {\n                newSentence += word + \" \";\n            }\n        }\n\
    \        return newSentence.trim();", '        throw new UnsupportedOperationException("Not
    Implemented");', '        return "";', '        return "";', "        String[]\
    \ arr = sentence.split(\" \");\n        String str = \"\";\n        for (int i\
    \ = 0; i < arr.length; i++) {\n            if (isPrime(arr[i].length())) {\n \
    \               str += arr[i] + \" \";\n            }\n        }\n        return\
    \ str.trim();", "        return Arrays.stream(sentence.split(\" \"))\n       \
    \              .filter(word -> isPrime(word.length()))\n                     .collect(Collectors.joining(\"\
    \ \"));", "        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ result = new StringBuilder();\n        int wordCount = 0;\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ if (wordCount > 0) result.append(\" \");\n                result.append(word);\n\
    \                wordCount++;\n            }\n        }\n        return result.toString();",
  "        String[] words = sentence.split(\" \");\n        String[] finalWords =\
    \ new String[words.length];\n        int count = 0;\n        for (int i = 0; i\
    \ < words.length; i++) {\n            int length = words[i].length();\n      \
    \      if (isPrime(length)) {\n                finalWords[count] = words[i];\n\
    \                count++;\n            }\n        }\n        String s = \"\";\n\
    \        for (int i = 0; i < count; i++) {\n            s += finalWords[i] + \"\
    \ \";\n        }\n        return s.trim();", "        StringTokenizer st = new\
    \ StringTokenizer(sentence);\n        StringBuffer sb = new StringBuffer();\n\
    \        while (st.hasMoreTokens()) {\n            String s = st.nextToken();\n\
    \            if (isPrime(s.length())) {\n                sb.append(s + \" \");\n\
    \            }\n        }\n        return sb.toString().trim();", "        List<String>\
    \ sentenceList = Arrays.asList(sentence.split(\" \"));\n        List<String> primeLengthList\
    \ = new ArrayList<>();\n        for (String word : sentenceList) {\n         \
    \   if (isPrime(word.length())) {\n                primeLengthList.add(word);\n\
    \            }\n        }\n        return String.join(\" \", primeLengthList);",
  "        Set<Integer> primeNumbers = new HashSet<Integer>();\n        primeNumbers.add(2);\n\
    \        primeNumbers.add(3);\n        primeNumbers.add(5);\n        primeNumbers.add(7);\n\
    \        primeNumbers.add(11);\n        primeNumbers.add(13);\n        primeNumbers.add(17);\n\
    \        primeNumbers.add(19);\n        primeNumbers.add(23);\n        primeNumbers.add(29);\n\
    \        primeNumbers.add(31);\n        primeNumbers.add(37);\n        primeNumbers.add(41);\n\
    \        primeNumbers.add(43);\n        primeNumbers.add(47);\n        primeNumbers.add(53);\n\
    \        primeNumbers.add(59);\n        primeNumbers.add(61);\n        primeNumbers.add(67);\n\
    \        primeNumbers.add(71);\n        primeNumbers.add(73);\n        primeNumbers.add(79);\n\
    \        primeNumbers.add(83);\n        primeNumbers.add(89);\n        primeNumbers.add(97);\n\
    \        primeNumbers.add(101);\n        primeNumbers.add(103);\n        primeNumbers.add(107);\n\
    \        primeNumbers.add(109);\n        primeNumbers.add(113);\n        primeNumbers.add(127);\n\
    \        primeNumbers.add(131);\n        primeNumbers.add(137);\n        primeNumbers.add(139);\n\
    \        primeNumbers.add(149);\n        primeNumbers.add(151);\n        primeNumbers.add(157);\n\
    \        primeNumbers.add(163);\n        primeNumbers.add(167);\n        primeNumbers.add(173);\n\
    \        primeNumbers.add(179);\n        primeNumbers.add(181);\n        primeNumbers.add(191);\n\
    \        primeNumbers.add(193);\n        primeNumbers.add(197);\n        primeNumbers.add(199);\n\
    \        primeNumbers.add(211);\n        primeNumbers.add(223);\n        primeNumbers.add(227);\n\
    \        primeNumbers.add(229);\n        primeNumbers.add(233);\n        primeNumbers.add(239);\n\
    \        primeNumbers.add(241);\n        primeNumbers.add(251);\n        primeNumbers.add(257);\n",
  "        // write your solution here\n        String[] words = sentence.split(\"\
    \ \");\n        String result = \"\";\n        for (String word : words) {\n \
    \           if (isPrime(word.length())) {\n                result += word + \"\
    \ \";\n            }\n        }\n        return result.trim();", "        String[]\
    \ words = sentence.split(\" \");\n        String primeWord = \"\";\n        for\
    \ (String word : words) {\n            boolean isPrime = true;\n            for\
    \ (int i = 2; i < word.length(); i++) {\n                if (word.length() % i\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime && word.length() >\
    \ 1) {\n                primeWord += word + \" \";\n            }\n        }\n\
    \        return primeWord.trim();", "        String[] words = sentence.split(\"\
    \ \");\n        String ans = \"\";\n        int num = 0;\n        for (String\
    \ w : words) {\n            if (isPrime(w.length())) {\n                if (num\
    \ > 0) {\n                    ans += \" \";\n                }\n             \
    \   ans += w;\n                num++;\n            }\n        }\n        return\
    \ ans;", "        String[] arr = sentence.split(\" \");\n        String result\
    \ = \"\";\n        for (int i = 0; i < arr.length; i++) {\n            if (isPrime(arr[i].length()))\
    \ {\n                result += arr[i] + \" \";\n            }\n        }\n   \
    \     if (result.length() > 0) {\n            result = result.substring(0, result.length()\
    \ - 1);\n        }\n        return result;", "        return \"(\" + Arrays.stream(sentence.split(\"\
    \ \"))\n                .filter(word -> Utils.isPrime(word.length()))\n      \
    \          .collect(Collectors.joining(\" \")) + \")\";", "        // HashMap<Integer,\
    \ ArrayList<String>>\n        return null;", "        String[] words = sentence.split(\"\
    \ \");\n        List<String> res = new ArrayList<>();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                res.add(word);\n\
    \            }\n        }\n        return String.join(\" \", res);", "       \
    \ // return \"\";\n        return Arrays.stream(sentence.split(\" \"))\n     \
    \       .filter(word -> isPrime(word.length()))\n            .collect(Collectors.joining(\"\
    \ \"));", "        String[] words = sentence.split(\" \");\n        List<String>\
    \ primes = new ArrayList<>();\n        for (String word : words) {\n         \
    \   if (isPrime(word.length())) {\n                primes.add(word);\n       \
    \     }\n        }\n        return String.join(\" \", primes);", "        //your\
    \ code here\n        //the sentence's words are separated by a space\n       \
    \ int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        String[] words = sentence.split(\"\
    \ \");\n        String result = \"\";\n        for (int i = 0; i < words.length;\
    \ i++) {\n            for (int j = 0; j < primes.length; j++) {\n            \
    \    if (words[i].length() == primes[j]) {\n                    result += words[i]\
    \ + \" \";\n                }\n            }\n        }\n        return result.trim();",
  "        String[] words = sentence.split(\" \");\n        List<String> primes =\
    \ new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                primes.add(word);\n            }\n        }\n        return\
    \ String.join(\" \", primes);", "        // your code here\n        return \"\"\
    ;", "        // Type your code here!\n        return \"\";", '        throw new
    RuntimeException("Not Implemented");', '        return new Sentence(sentence).wordsWhoseLengthIsPrime();',
  "        String[] words = sentence.split(\" \");\n        String answer = \"\";\n\
    \        List<Integer> primes = new ArrayList<Integer>();\n        primes.add(2);\n\
    \        for (int number = 3; number < 1000; number++) {\n            boolean\
    \ isPrime = true;\n            for (int prime : primes) {\n                if\
    \ (number % prime == 0) {\n                    isPrime = false;\n            \
    \        break;\n                }\n            }\n            if (isPrime) {\n\
    \                primes.add(number);\n            }\n        }\n        for (String\
    \ word : words) {\n            for (int prime : primes) {\n                if\
    \ (word.length() == prime) {\n                    answer += word + \" \";\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   if (answer.isEmpty()) {\n            return \"\";\n        }\n        return\
    \ answer.substring(0, answer.length() - 1);", '        throw new NotImplementedException();',
  "        // Implement this function.\n        List<String> list = new ArrayList<String>();\n\
    \        for (String str : sentence.split(\" \")) {\n            if (isPrime(str.length()))\
    \ {\n                list.add(str);\n            }\n        }\n        return\
    \ String.join(\" \", list);", '        return "this is a test";', "        //\
    \ returns a string that contains the words from the original sentence,\n     \
    \   // whose lengths are prime numbers,\n        // the order of the words in\
    \ the new string should be the same as the original one.\n        return \"\";",
  "        String[] wordList = sentence.split(\" \");\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean isFirst = true;\n        for (String word\
    \ : wordList) {\n            if (isPrime(word.length())) {\n                if\
    \ (isFirst) {\n                    sb.append(word);\n                    isFirst\
    \ = false;\n                } else {\n                    sb.append(\" \" + word);\n\
    \                }\n            }\n        }\n        return sb.toString();",
  "        // Write your code here.\n        return \"\";", "        String[] words\
    \ = sentence.split(\" \");\n        String result = \"\";\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ result += word + \" \";\n            }\n        }\n        return result.trim();",
  "        int length = sentence.length();\n        if (length == 0) return sentence;\n\
    \        String[] s = sentence.split(\" \");\n        StringBuilder strBuilder\
    \ = new StringBuilder();\n        int[] primes = new int[]{2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\
    \        for (int i = 0; i < s.length; i++) {\n            for (int j = 0; j <\
    \ primes.length; j++) {\n                if (s[i].length() == primes[j]) {\n \
    \                   strBuilder.append(s[i]);\n                    strBuilder.append(\"\
    \ \");\n                }\n            }\n        }\n        return strBuilder.toString().trim();",
  "        String[] str = sentence.split(\" \");\n        String result = \"\";\n\
    \        int counter = 0;\n        for (int i = 0; i < str.length; i++) {\n  \
    \          if (isPrime(str[i].length())) {\n                result += str[i] +\
    \ \" \";\n                counter++;\n            }\n        }\n        if (counter\
    \ == 0) {\n            return result;\n        }\n        return result.substring(0,\
    \ result.length() - 1);", "        sentence = sentence.toLowerCase();\n      \
    \  String ans = \"\";\n        for (String word : sentence.split(\" \")) {\n \
    \           boolean isPrime = true;\n            for (int i = 2; i <= Math.sqrt(word.length());\
    \ i++) {\n                if (word.length() % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                ans += word + \" \";\n            }\n\
    \        }\n        return ans.trim();", "        String[] words = sentence.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        boolean first\
    \ = true;\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                if (!first) {\n                    sb.append(\" \");\n  \
    \              }\n                sb.append(word);\n                first = false;\n\
    \            }\n        }\n        return sb.toString();", "        String res\
    \ = \"\";\n        String[] sarr = sentence.split(\" \");\n        for (int i\
    \ = 0; i < sarr.length; i++) {\n            if (isPrime(sarr[i].length())) {\n\
    \                res += sarr[i] + \" \";\n            }\n        }\n        return\
    \ res.trim();", "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        StringBuilder result = new StringBuilder();\n\
    \        String[] words = sentence.split(\" \");\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                result.append(word).append(\"\
    \ \");\n            }\n        }\n        return result.toString().trim();", " \
    \       return Arrays.stream(sentence.split(\" \"))\n            .filter(w ->\
    \ {\n                int len = w.length();\n                if (len == 1) return\
    \ true;\n                for (int i = 2; i < len; i++)\n                    if\
    \ (len % i == 0) return false;\n                return true;\n            })\n\
    \            .collect(Collectors.joining(\" \"));", "      // Write your code\
    \ here\n      // Please enter the constructor only\n      // Stworz klase WordsInSentence\n\
    \      // i tam umiesc swoj kod,\n      // a nastepnie rozwiazania wyslij jako\
    \ String\n      // w metodzie Solution.solution()\n      //\n      // Aby zwrocic\
    \ String, uzyj:\n      // return \"twoj string\";\n      //\n      // Aby zwrocic\
    \ Integer, uzyj:\n      // return x;\n      // gdzie x jest Twoim Integerem\n\
    \      return null;", "        // YOUR CODE HERE\n        throw new UnsupportedOperationException(\"\
    Not Implemented Yet!\");", "        String[] parts = sentence.split(\" \");\n\
    \        String[] ans = new String[parts.length];\n        int j = 0;\n      \
    \  for (int i = 0; i < parts.length; i++) {\n            if (isPrime(parts[i].length()))\
    \ {\n                ans[j] = parts[i];\n                j++;\n            }\n\
    \        }\n        return Arrays.toString(ans);", "        // Good luck!\n  \
    \      return null;", "        String[] words = sentence.split(\" \");\n     \
    \   List<String> to_ret = new ArrayList<>();\n        for (String w : words) {\n\
    \            if (isPrime(w.length())) {\n                to_ret.add(w);\n    \
    \        }\n        }\n        return String.join(\" \", to_ret);", "        //\
    \ Your code here\n        return null;", "        String[] words = sentence.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\"\
    \ \");\n            }\n        }\n        return sb.toString().trim();", "   \
    \     // Your code goes here\n        int len = sentence.length();\n        if\
    \ (len == 0) return \"\";\n        if (len == 1) return sentence;\n        boolean\
    \ isPrime = false;\n        String[] w = sentence.split(\" \");\n        String\
    \ ret = \"\";\n        for (int i = 0; i < w.length; i++) {\n            isPrime\
    \ = true;\n            for (int j = 2; j < w[i].length(); j++) {\n           \
    \     if (w[i].length() % j == 0) {\n                    isPrime = false;\n  \
    \                  break;\n                }\n            }\n            if (isPrime\
    \ && w[i].length() > 1) {\n                ret += w[i] + \" \";\n            }\n\
    \        }\n        return ret.substring(0, ret.length() - 1);", "        // Your\
    \ code here\n        return null;", '        return "";', "        String[] splitSentence\
    \ = sentence.split(\" \");\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        for (String s : splitSentence) {\n            if (isPrime(s.length()))\
    \ {\n                words.add(s);\n            }\n        }\n        return String.join(\"\
    \ \", words);", "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        List<String> words = Arrays.asList(sentence.split(\"\
    \ \"));\n        List<String> result = new ArrayList<>();\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ result.add(word);\n            }\n        }\n        return String.join(\" \"\
    , result);", "        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String w : words) {\n            if\
    \ (isPrime(w.length())) {\n                sb.append(w);\n                sb.append(\"\
    \ \");\n            }\n        }\n        return sb.toString().trim();", "   \
    \     List<String> words = new ArrayList<>();\n        for (String word : sentence.split(\"\
    \ \")) {\n            if (isPrime(word.length())) {\n                words.add(word);\n\
    \            }\n        }\n        return String.join(\" \", words);", "     \
    \   // Implement the method\n        return null;", "        String[] str_arr\
    \ = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String str : str_arr) {\n            if (isPrime(str.length()))\
    \ {\n                sb.append(str + \" \");\n            }\n        }\n     \
    \   return sb.toString().trim();", '        return null;', "        String[] words\
    \ = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            int len = word.length();\n \
    \           boolean isPrime = len >= 2;\n            for (int i = 2; i < len;\
    \ i++) {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                sb.append(word);\n                sb.append(\"\
    \ \");\n            }\n        }\n        return sb.toString().trim();", "   \
    \     String[] words = sentence.split(\" \");\n        String answer = \"\";\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                answer += word + \" \";\n            }\n        }\n     \
    \   return answer.trim();", "        var sb = new StringBuilder();\n        var\
    \ words = sentence.split(\" \");\n        var list = new ArrayList<Pair<String,\
    \ Integer>>();\n        for (var word : words) {\n            list.add(new Pair<>(word,\
    \ word.length()));\n        }\n        for (var pair : list) {\n            var\
    \ word = pair.getValue0();\n            var length = pair.getValue1();\n     \
    \       if (isPrime(length)) {\n                sb.append(word).append(\" \");\n\
    \            }\n        }\n        return sb.toString().trim();", '        return
    null;', "        // TODO: Write code here to pass the test\n        // <-start-\n\
    \        return \"\";\n        // --end-->", "        // Your code here\n    \
    \    return \"\";", "        final String[] words = sentence.split(\" \");\n \
    \       final int[] lengths = new int[words.length];\n        for (int i = 0;\
    \ i < words.length; i++) {\n            lengths[i] = words[i].length();\n    \
    \    }\n        final StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < words.length; i++) {\n            if (isPrime(lengths[i])) {\n  \
    \              sb.append(words[i]);\n                sb.append(\" \");\n     \
    \       }\n        }\n        return sb.toString().trim();", "        String[]\
    \ words = sentence.split(\" \");\n        String primes = \"\";\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ primes += word + \" \";\n            }\n        }\n        primes = primes.trim();\n\
    \        return primes;", "      String[] words = sentence.split(\" \");\n   \
    \   String result = \"\";\n      for (int i = 0; i < words.length; i++) {\n  \
    \      if (isPrime(words[i].length())) {\n          result += words[i] + \" \"\
    ;\n        }\n      }\n      return result.trim();", "        String [] words\
    \ = sentence.split(\" \");\n        boolean [] filter = new boolean[words.length];\n\
    \        Arrays.fill(filter, false);\n        for (int i = 0; i < words.length;\
    \ i++) {\n            filter[i] = Prime.isPrime(words[i].length());\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ words.length; i++) {\n            if (filter[i]) {\n                sb.append(words[i]\
    \ + \" \");\n            }\n        }\n        return sb.toString().trim();",
  "        ArrayList<Integer> primes = new ArrayList<Integer>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        primes.add(2);\n        for (int i\
    \ = 3; i < 100; i += 2) {\n            int sq = (int) Math.sqrt(i);\n        \
    \    boolean isPrime = true;\n            for (int p: primes) {\n            \
    \    if (p > sq) break;\n                if (i % p == 0) {\n                 \
    \   isPrime = false;\n                    break;\n                }\n        \
    \    }\n            if (isPrime) {\n                primes.add(i);\n         \
    \   }\n        }\n        String[] wordArray = sentence.split(\" \");\n      \
    \  for (String w: wordArray) {\n            int size = w.length();\n         \
    \   if (primes.contains(size)) {\n                words.add(w);\n            }\n\
    \        }\n        String result = String.join(\" \", words);\n        return\
    \ result;", "        // Your code here\n        return null;", '        return
    "";', "        String s = \"\";\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n\
    \        primes.add(2);\n        primes.add(3);\n        primes.add(5);\n    \
    \    primes.add(7);\n        primes.add(11);\n        primes.add(13);\n      \
    \  primes.add(17);\n        primes.add(19);\n        primes.add(23);\n       \
    \ primes.add(29);\n        primes.add(31);\n        primes.add(37);\n        primes.add(41);\n\
    \        primes.add(43);\n        primes.add(47);\n        primes.add(53);\n \
    \       primes.add(59);\n        primes.add(61);\n        primes.add(67);\n  \
    \      primes.add(71);\n        primes.add(73);\n        primes.add(79);\n   \
    \     primes.add(83);\n        primes.add(89);\n        primes.add(97);\n    \
    \    primes.add(101);\n        primes.add(103);\n        primes.add(107);\n  \
    \      primes.add(109);\n        primes.add(113);\n        primes.add(127);\n\
    \        primes.add(131);\n        primes.add(137);\n        primes.add(139);\n\
    \        primes.add(149);\n        primes.add(151);\n        primes.add(157);\n\
    \        primes.add(163);\n        primes.add(167);\n        primes.add(173);\n\
    \        primes.add(179);\n        primes.add(181);\n        primes.add(191);\n\
    \        primes.add(193);\n        primes.add(197);\n        primes.add(199);\n\
    \        primes.add(211);\n        primes.add(223);\n        primes.add(227);\n\
    \        primes.add(229);\n        primes.add(233);\n        primes.add(239);\n\
    \        primes.add(241);\n        primes.add(251);\n       ", "        String[]\
    \ words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.append(word + \" \");\n            }\n        }\n\
    \        return result.toString().trim();", '        return null;', '        throw
    new UnsupportedOperationException("Remove this line, and write your own implementation.");',
  "        StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                sb.append(word);\n                sb.append(\" \");\n   \
    \         }\n        }\n        return sb.toString().trim();", "        List<String>\
    \ words = Arrays.asList(sentence.split(\" \"));\n        List<String> res = new\
    \ ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                res.add(word);\n            }\n        }\n        return\
    \ String.join(\" \", res);", '        return "";', "        if (sentence == null)\
    \ {\n            return \"\";\n        }\n\n        String[] words = sentence.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrimeNumber(word.length())) {\n              \
    \  sb.append(word);\n                sb.append(\" \");\n            }\n      \
    \  }\n\n        if (sb.length() == 0) {\n            return \"\";\n        }\n\
    \n        return sb.toString().trim();", "        StringBuilder sb = new StringBuilder();\n\
    \        String[] words = sentence.split(\" \");\n        for (String word : words)\
    \ {\n            if (isPrime(word.length())) {\n                sb.append(word\
    \ + \" \");\n            }\n        }\n        return sb.toString().trim();",
  "        // Implement your solution here.\n        return \"\";", "        return\
    \ Arrays.stream(sentence.split(\" \"))\n            .filter(word -> isPrime(word.length()))\n\
    \            .collect(Collectors.joining(\" \"));", "        StringBuilder sb\
    \ = new StringBuilder();\n        boolean isPrime;\n        for (String word :\
    \ sentence.split(\" \")) {\n            isPrime = true;\n            for (int\
    \ i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                sb.append(word\
    \ + \" \");\n            }\n        }\n        return sb.toString().trim();",
  "        String[] words = sentence.split(\" \");\n        String result = \"\";\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();", "        String result = \"\";\n        String[] s\
    \ = sentence.split(\" \");\n        for (int i = 0; i < s.length; i++) {\n   \
    \         if (isPrime(s[i].length())) {\n                result += s[i] + \" \"\
    ;\n            }\n        }\n        return result.trim();", "        String[]\
    \ arr = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String s : arr) {\n            if (isPrime(s.length())) {\n    \
    \            sb.append(s);\n                sb.append(\" \");\n            }\n\
    \        }\n        return sb.toString().trim();", "        String[] words = sentence.split(\"\
    \ \");\n        String new_sentence = \"\";\n        for (String word : words)\
    \ {\n            if (isPrime(word.length()))\n                new_sentence +=\
    \ word + \" \";\n        }\n        return new_sentence.trim();", "        //\
    \ return sentence.trim().split(\"\\\\s+\")\n        //     .stream()\n       \
    \ //     .filter(p -> BigInteger.valueOf(p.length()).isProbablePrime(1))\n   \
    \     //     .collect(Collectors.joining(\" \"));\n        String[] words = sentence.trim().split(\"\
    \\\\s+\");\n        String newSentence = \"\";\n        for (String word : words)\
    \ {\n            if (BigInteger.valueOf(word.length()).isProbablePrime(1)) {\n\
    \                newSentence += word + \" \";\n            }\n        }\n    \
    \    return newSentence.trim();", "        String[] words = sentence.split(\"\
    \ \");\n        String[] res = new String[words.length];\n        int numRes =\
    \ 0;\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i].length()))\
    \ {\n                res[numRes] = words[i];\n                numRes++;\n    \
    \        }\n        }\n        return (numRes == 0 ? \"\" : String.join(\" \"\
    , Arrays.copyOfRange(res, 0, numRes)));", "        // Write your code here\n \
    \       // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        List<Integer>\
    \ len = new ArrayList<>();\n        String[] words = sentence.split(\" \");\n\
    \        for (String w : words) {\n            len.add(w.length());\n        }\n\
    \        List<Integer> p = prime(len);\n        String result = \"\";\n      \
    \  for (int i = 0; i < p.size(); i++) {\n            result += words[p.get(i)]\
    \ + \" \";\n        }\n        return result.trim();", "        String[] words\
    \ = sentence.split(\" \");\n        String ret = \"\";\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                ret +=\
    \ word + \" \";\n            }\n        }\n        return ret.substring(0, ret.length()\
    \ - 1);", "        // Start typing your code here...\n        StringBuffer buffer\
    \ = new StringBuffer();\n        String[] words = sentence.split(\" \");\n   \
    \     for (String word : words) {\n            if (isPrime(word.length())) {\n\
    \                buffer.append(word);\n                buffer.append(\" \");\n\
    \            }\n        }\n        return buffer.toString().trim();", "      \
    \  String[] words = sentence.split(\" \");\n        String result = \"\";\n  \
    \      for (String word : words) {\n            if (isPrime(word.length())) {\n\
    \                result += word + \" \";\n            }\n        }\n        return\
    \ result.trim();", "        String[] words = sentence.split(\" \");\n        String\
    \ result = \"\";\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.trim();", "        return Stream.of(sentence.split(\" \"))\n\
    \            .filter(word -> isPrime(word.length()))\n            .collect(Collectors.joining(\"\
    \ \"));", "        // convert the sentence to a list of words\n        List<String>\
    \ words = Arrays.asList(sentence.split(\" \"));\n        // set to store the words\
    \ whose length is prime\n        Set<String> primes = new HashSet<>();\n     \
    \   // check each word, if the length is prime then add to the set\n        for\
    \ (String word : words) {\n            if (isPrime(word.length())) {\n       \
    \         primes.add(word);\n            }\n        }\n        // convert the\
    \ set to a string, separated by a space\n        String s = String.join(\" \"\
    , primes);\n        return s;", "        String[] words = sentence.split(\" \"\
    );\n        String res = \"\";\n        for (String word : words) {\n        \
    \    if (isPrime(word.length())) {\n                res += word + \" \";\n   \
    \         }\n        }\n        return res.trim();", "        // Good luck!\n\
    \        return \"\";", "        String s = \"\";\n        String[] words = sentence.split(\"\
    \ \");\n        for (int i = 0; i < words.length; i++) {\n            int len\
    \ = words[i].length();\n            if (isPrime(len)) {\n                s +=\
    \ words[i] + \" \";\n            }\n        }\n        return s.trim();", '        return
    null;', "        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ if (isPrime(word.length())) {\n                sb.append(word).append(\" \"\
    );\n            }\n        }\n        return sb.toString().trim();", '        return
    null;', "        // Your code here\n        return null;", "        // Your code\
    \ here\n        return \"\";", "        // YOUR CODE HERE\n        return null;",
  '        return null;', "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        return \"\";", "        StringBuilder\
    \ result = new StringBuilder();\n        String[] words = sentence.split(\" \"\
    );\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.append(word + \" \");\n            }\n        }\n\
    \        return result.toString().trim();", "        String[] words = sentence.split(\"\
    \ \");\n        String[] primes = Arrays.stream(words)\n            .filter(x\
    \ -> isPrime(x.length()))\n            .toArray(String[]::new);\n        return\
    \ String.join(\" \", primes);", '        return "";', "        return Arrays.stream(sentence.split(\"\
    \ \"))\n            .filter(word -> {\n                int length = word.length();\n\
    \                if (length < 2) return false;\n                if (length ==\
    \ 2) return true;\n                if (length % 2 == 0) return false;\n      \
    \          for (int i = 3; i <= Math.sqrt(length); i += 2) {\n               \
    \     if (length % i == 0) return false;\n                }\n                return\
    \ true;\n            })\n            .collect(Collectors.joining(\" \"));", " \
    \       // construct a list of words\n        List<String> words = new ArrayList<>();\n\
    \        for (String word : sentence.split(\" \")) {\n            words.add(word);\n\
    \        }\n        List<String> primeWords = new ArrayList<>();\n        // iterate\
    \ over the list, and\n        // check if the length of each word is a prime number\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                primeWords.add(word);\n            }\n        }\n       \
    \ // construct the returned string\n        StringBuilder output = new StringBuilder();\n\
    \        for (String word : primeWords) {\n            output.append(word);\n\
    \            output.append(\" \");\n        }\n        if (output.length() > 0)\
    \ {\n            output.deleteCharAt(output.length() - 1);\n        }\n      \
    \  return output.toString();", "        String[] words = sentence.split(\" \"\
    );\n        String[] result = new String[100];\n        int counter = 0;\n   \
    \     for (int i = 0; i < words.length; i++) {\n            if (prime(words[i].length()))\
    \ {\n                result[counter] = words[i];\n                counter++;\n\
    \            }\n        }\n        String finalResult = \"\";\n        for (int\
    \ i = 0; i < counter; i++) {\n            finalResult += result[i] + \" \";\n\
    \        }\n        return finalResult;", "        // TODO: implement me\n   \
    \     //throw new RuntimeException(\"not implemented yet\");\n        String[]\
    \ words = sentence.split(\" \");\n        String res = \"\";\n        int[] temp\
    \ = new int[words.length];\n        int count = 0;\n        for(int i = 0; i <\
    \ words.length; i++){\n            if(isPrime(words[i].length())){\n         \
    \       temp[count] = i;\n                count++;\n            }\n        }\n\
    \        for(int i = 0; i < count; i++){\n            res += words[temp[i]] +\
    \ \" \";\n        }\n        return res.trim();", '        return null;', "  \
    \      //Write your code here\n        return null;", "        var words = sentence.split(\"\
    \ \");\n        var primeWords = new ArrayList<String>();\n        for (String\
    \ word : words) {\n            if (isPrime(word.length())) {\n               \
    \ primeWords.add(word);\n            }\n        }\n        return String.join(\"\
    \ \", primeWords);", "        // write your code here\n        return \"\";",
  "        String[] words = sentence.split(\" \");\n        String s = \"\";\n   \
    \     for (String word : words) {\n            if (isPrime(word.length())) {\n\
    \                s += word + \" \";\n            }\n        }\n        return\
    \ s.trim();", '        return null;', "        // Your Code here\n        return\
    \ null;", "        // your code here\n        boolean test = false;\n        String[]\
    \ words = sentence.split(\" \");\n        for (int i = 0; i < words.length; i++)\
    \ {\n            for (int j = 2; j < words[i].length(); j++) {\n             \
    \   if (words[i].length() % j == 0) {\n                    test = true;\n    \
    \                break;\n                }\n            }\n            if (test\
    \ == false) {\n                System.out.print(words[i] + \" \");\n         \
    \   }\n            test = false;\n        }\n        return \"\";", "        String[]\
    \ words = sentence.split(\" \");\n        ArrayList<String> new_words = new ArrayList<String>();\n\
    \        for (String word : words) {\n            int len = word.length();\n \
    \           if (isPrime(len)) {\n                new_words.add(word);\n      \
    \      }\n        }\n        return String.join(\" \", new_words);", "       \
    \ String[] words = sentence.split(\" \");\n        String[] result = new String[words.length];\n\
    \        int[] wordLengths = new int[words.length];\n        int primeCount =\
    \ 0;\n        for (int i = 0; i < words.length; i++) {\n            wordLengths[i]\
    \ = words[i].length();\n            if (isPrime(wordLengths[i])) {\n         \
    \       result[primeCount] = words[i];\n                primeCount++;\n      \
    \      }\n        }\n        StringBuilder sb = new StringBuilder();\n       \
    \ for (int i = 0; i < primeCount; i++) {\n            sb.append(result[i]);\n\
    \            if (i < primeCount - 1) {\n                sb.append(\" \");\n  \
    \          }\n        }\n        return sb.toString();", "        String[] tokens\
    \ = sentence.split(\" \");\n        int[] lens = Arrays.stream(tokens).mapToInt(String::length).toArray();\n\
    \        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] indexes = IntStream.range(0,\
    \ lens.length).filter(x -> Arrays.binarySearch(primes, lens[x]) >= 0).toArray();\n\
    \        return Arrays.stream(indexes).mapToObj(x -> tokens[x]).collect(Collectors.joining(\"\
    \ \"));", "        String[] words = sentence.split(\" \");\n        StringBuilder\
    \ answer = new StringBuilder();\n        for (String word : words) {\n       \
    \     if (isPrime(word.length())) {\n                answer.append(word);\n  \
    \              answer.append(\" \");\n            }\n        }\n        return\
    \ answer.toString().trim();", '        throw new UnsupportedOperationException("Not
    implemented yet");', "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");", "        // Write your code here\n \
    \       return \"\";", "        // Your code here\n        return \"\";", "  \
    \      String[] arr = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String s : arr) {\n            if (isPrime(s.length())) {\n    \
    \            sb.append(s + \" \");\n            }\n        }\n        return sb.toString().trim();",
  "        String[] words = sentence.split(\" \");\n        String new_sentence =\
    \ \"\";\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                new_sentence += word + \" \";\n            }\n        }\n\
    \        return new_sentence.trim();", '        throw new UnsupportedOperationException("Not
    implemented");', "        return Stream.of(sentence.split(\" \"))\n          \
    \  .filter(word -> isPrime(word.length()))\n            .collect(Collectors.joining(\"\
    \ \"));", "        // TODO: implement me\n        return \"\";", '        return
    null;', "        String[] wordList = sentence.split(\" \");\n        StringBuilder\
    \ result = new StringBuilder();\n        for (String word : wordList) {\n    \
    \        if (isPrime(word.length())) {\n                result.append(word);\n\
    \                result.append(\" \");\n            }\n        }\n        if (result.length()\
    \ == 0) {\n            return \"\";\n        }\n        return result.substring(0,\
    \ result.length() - 1);", '        throw new UnsupportedOperationException("Not
    Implemented Yet.");', "        // ...\n        return \"\";", "        String\
    \ result = \"\";\n        String[] words = sentence.split(\" \");\n        for\
    \ (String word : words) {\n            if (isPrime(word.length())) {\n       \
    \         result += \" \" + word;\n            }\n        }\n        return result.substring(1);",
  "        // Your code here, you can use the isPrime() function below\n        String[]\
    \ words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.append(word);\n                result.append(\" \"\
    );\n            }\n        }\n        return result.toString().trim();", "   \
    \     String[] words = sentence.split(\" \");\n        String res = \"\";\n  \
    \      for (String word : words) {\n            if (isPrime(word.length())) {\n\
    \                res += word + \" \";\n            }\n        }\n        return\
    \ res.trim();", '        return null;', "        // write your code here\n   \
    \     // extract all words from the sentence\n        // build a new string with\
    \ the same order of the words\n        // in the original sentence\n        //\
    \ but whose words length are prime numbers\n        // return the new string\n\
    \        List<String> words = new ArrayList<>();\n        boolean foundPrime =\
    \ false;\n        for (String word : sentence.split(\" \")) {\n            if\
    \ (word.length() == 0) {\n                continue;\n            }\n         \
    \   int len = word.length();\n            boolean prime = true;\n            for\
    \ (int i = 2; i <= len / 2; i++) {\n                if (len % i == 0) {\n    \
    \                prime = false;\n                    break;\n                }\n\
    \            }\n            if (prime) {\n                foundPrime = true;\n\
    \                words.add(word);\n            }\n        }\n        return foundPrime\
    \ ? String.join(\" \", words) : \"\";", "        String[] words = sentence.split(\"\
    \ \");\n        String result = \"\";\n        for (String word : words) {\n \
    \           if (word.length() > 1 && isPrime(word.length())) {\n             \
    \   result += word + \" \";\n            }\n        }\n        return result.substring(0,\
    \ result.length() - 1);", "        String res = \"\";\n        StringTokenizer\
    \ st = new StringTokenizer(sentence);\n        String s;\n        while (st.hasMoreTokens())\
    \ {\n            s = st.nextToken();\n            if (isPrime(s.length())) {\n\
    \                res += s + \" \";\n            }\n        }\n        return res.trim();"]
stop_tokens:
- "\n    }\n"
