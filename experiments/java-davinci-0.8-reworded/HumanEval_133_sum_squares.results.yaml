language: java
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.size() == 0) {\n            return 0;\n        }\n \
    \       long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      sum += (long)Math.ceil(lst.get(i)) * (long)Math.ceil(lst.get(i));\n   \
    \     }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo15o6e_.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976974
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        List<Long> l = lst.stream().map(e -> (long)Math.ceil(e)).map(e\
    \ -> e * e).collect(Collectors.toList());\n        return l.stream().reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(n -> Math.round(n) * Math.round(n)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfmw0fre.java:30)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(e -> (long)Math.ceil(e)).map(e -> e\
    \ * e).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // write code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpunlqjvge.java:28)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Write your code here.\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeznjtlnx.java:28)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(i -> (long)Math.ceil(i)).map(i -> i\
    \ * i).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int len = lst.size();\n        // Note that you need to convert\
    \ from float to int using \"intValue()\"\n        int[] arr = new int[len];\n\
    \        for (int i = 0; i < len; i++) {\n            arr[i] = (int) Math.ceil(lst.get(i));\n\
    \        }\n        long sum = 0;\n        for (int i = 0; i < len; i++) {\n \
    \           sum += arr[i] * arr[i];\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpndgb_e0y.java:24: error: incompatible types: <null> cannot be converted\
    \ to long\n        return null;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaj28azu.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return IntStream.range(0, lst.size()).mapToLong(i -> Math.round(Math.pow(Math.ceil(lst.get(i)),\
    \ 2))).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float x : lst) {\n            sum\
    \ += Math.round(x) * Math.round(x);\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfbsf8ta.java:34)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(i -> (long)Math.ceil(i)).map(i -> i\
    \ * i).reduce(0l, (a,b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(a -> a * a).reduce(0L, (acc, a) -> (long)Math.ceil(acc)\
    \ + (long)Math.ceil(a));\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8prjpyh8.java:24: error: no suitable method found for reduce(long,(acc,a)->([...]il(a))\n\
    \        return lst.stream().map(a -> a * a).reduce(0L, (acc, a) -> (long)Math.ceil(acc)\
    \ + (long)Math.ceil(a));\n                                           ^\n    method\
    \ Stream.reduce(Float,BinaryOperator<Float>) is not applicable\n      (argument\
    \ mismatch; long cannot be converted to Float)\n    method Stream.<U>reduce(U,BiFunction<U,?\
    \ super Float,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        final class Java {\n            static long sumSquares(ArrayList<Float>\
    \ lst) {\n                long acc = 0;\n                for (int i = 0; i < lst.size();\
    \ i += 1) {\n                    acc += Math.ceil(lst.get(i)) * Math.ceil(lst.get(i));\n\
    \                }\n                return acc;\n            }\n        }\n  \
    \      return Java.sumSquares(lst);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).reduce(0L,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(n -> (long)Math.ceil(n)).map(n -> n\
    \ * n).reduce(0l, (m, n) -> m + n);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        throw new UnsupportedOperationException(\"Not Implemented Yet\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ Implemented Yet\n\tat Problem.sumSquares(tmpykprqzzk.java:24)\n\tat Problem.main(tmpykprqzzk.java:27)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo15o6e_.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(p -> Math.round(p)).map(p -> p * p).mapToLong(p\
    \ -> p).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoag8s2do.java:30)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Type your code here\n        long sum = 0;\n        int len\
    \ = lst.size();\n        for (int i = 0; i < len; i++) {\n            sum += Math.ceil(lst.get(i))\
    \ * Math.ceil(lst.get(i));\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw10sx5dg.java:27)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflxr9qoe.java:27)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwh5n6plb.java:27)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)lst.stream().map(n -> Math.round(n)).map(n -> Math.pow(n,\
    \ 2)).reduce((a, b) -> a + b).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcc6_mk5.java:24: error: incompatible types: Double cannot be converted\
    \ to long\n        return (long)lst.stream().map(n -> Math.round(n)).map(n ->\
    \ Math.pow(n, 2)).reduce((a, b) -> a + b).get();\n                           \
    \                                                                            \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float number : lst) {\n        \
    \    sum += Math.round(Math.pow(number, 2));\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqy8beakl.java:34)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwh5n6plb.java:27)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToInt(x -> Math.round(x)).mapToLong(x\
    \ -> x * x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf69_xw0u.java:30)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return Math.round(lst.stream().mapToDouble(x -> Math.pow(Math.ceil(x),\
    \ 2)).sum());\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> new BigDecimal(x).setScale(0, BigDecimal.ROUND_CEILING).multiply(new\
    \ BigDecimal(x)).setScale(0, BigDecimal.ROUND_CEILING).longValue()).reduce(0L,\
    \ Long::sum);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlshujs5.java:30)\n"
  stdout: ''
  timestamp: 1659976977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(n -> Math.round(n) * Math.round(n)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfmw0fre.java:30)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // if the list is empty return the value 0\n        if (lst.size()\
    \ == 0) {\n            return 0;\n        }\n        // if the list is not empty\
    \ then square each item in the list and sum them up\n        long result = 0;\n\
    \        for (Float i : lst) {\n            // cast the float to a long\n    \
    \        result += (long) (Math.ceil(i.doubleValue()) * Math.ceil(i.doubleValue()));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // floor = Math.floor(float)\n        // ceil = Math.ceil(float)\n\
    \        // round = Math.round(float)\n        return lst.stream().map(e -> (long)Math.ceil(e)\
    \ * (long)Math.ceil(e)).reduce(0l, (a, b) -> a + b);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaj28azu.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum += Math.round(Math.pow(lst.get(i), 2));\n        }\n    \
    \    return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvsy50mx0.java:34)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(i -> (long)Math.ceil(i)).map(i -> i\
    \ * i).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // YOUR CODE HERE\n        ArrayList<Long> f = new ArrayList<Long>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            f.add(Math.round(Math.ceil(lst.get(i))));\n\
    \        }\n        long sum = 0;\n        for (int i = 0; i < f.size(); i++)\
    \ {\n            sum += Math.pow(f.get(i), 2);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int sum = 0;\n        for (Float number : lst) {\n         \
    \   int squared = (int) Math.ceil(number) * (int) Math.ceil(number);\n       \
    \     sum += squared;\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // >>>>> YOUR CODE GOES HERE <<<<<\n        return 0l;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkwq3hhb2.java:28)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw10sx5dg.java:27)\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long) lst.stream().mapToDouble(x -> x * x).map(x ->\
    \ Math.ceil(x)).sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyczqqa92.java:30)\n"
  stdout: ''
  timestamp: 1659976977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ret = 0l;\n        for (Float item : lst) {\n         \
    \   ret += Math.round(Math.pow(item, 2.0f));\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe07xojom.java:34)\n"
  stdout: ''
  timestamp: 1659976977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)lst.stream().map((Float x) -> Math.round(x)).map((long\
    \ x) -> x * x).reduce(0l, (long x, long y) -> x + y);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp77m3f_07.java:24: error: method map in interface Stream<T> cannot\
    \ be applied to given types;\n        return (long)lst.stream().map((Float x)\
    \ -> Math.round(x)).map((long x) -> x * x).reduce(0l, (long x, long y) -> x +\
    \ y);\n                                                                 ^\n  required:\
    \ Function<? super Integer,? extends R>\n  found:    (long x)->x * x\n  reason:\
    \ cannot infer type-variable(s) R\n    (argument mismatch; cannot infer functional\
    \ interface descriptor for Function<? super Integer,? extends R>)\n  where R,T\
    \ are type-variables:\n    R extends Object declared in method <R>map(Function<?\
    \ super T,? extends R>)\n    T extends Object declared in interface Stream\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total=0;\n        for(Float f: lst)\n            total+=Math.round(f)*Math.round(f);\n\
    \        return total;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9ykfueo.java:33)\n"
  stdout: ''
  timestamp: 1659976977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(num -> Math.round(num)).map(num -> Math.pow(num,\
    \ 2)).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprvvi5a6m.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(num -> Math.round(num)).map(num -> Math.pow(num,\
    \ 2)).reduce(0l, (x, y) -> x + y);\n                                         \
    \                                           ^\n    method Stream.reduce(Double,BinaryOperator<Double>)\
    \ is not applicable\n      (argument mismatch; long cannot be converted to Double)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Double,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        //TODO: Write your code here\n        return 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67v1_igf.java:28)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Implement your code here\n        long sum = 0;\n       \
    \ for (Float f : lst) {\n            sum += Math.ceil(f) * Math.ceil(f);\n   \
    \     }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976977
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return lst.stream().map(v -> (long)\
    \ Math.ceil(v))\n                            .map(v -> v * v)\n              \
    \              .reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976977
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // input:  array list of numbers\n        // output: sum of\
    \ squared numbers in the given array list,\n        // round each element in the\
    \ array list to the upper int(Ceiling) first.\n        long r = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            r += (long)Math.ceil(lst.get(i))\
    \ * (long)Math.ceil(lst.get(i));\n        }\n        return r;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Float::longValue).map(i -> (long) Math.ceil(i)).map(i\
    \ -> i * i).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqz9vy7d.java:30)\n"
  stdout: ''
  timestamp: 1659976977
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToInt(i -> (int)Math.ceil(i)).mapToLong(i\
    \ -> i * i).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum += Math.round(Math.pow(lst.get(i), 2));\n        }\n    \
    \    return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvsy50mx0.java:34)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwv0z95n7.java:30)\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> (long)Math.ceil(f) * (long)Math.ceil(f)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(e -> new BigDecimal(e).setScale(0,\
    \ RoundingMode.CEILING).longValue()).map(e -> e * e).sum();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long res = 0;\n        for (Float f : lst) {\n            f\
    \ = Math.ceil(f);\n            res += f * f;\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98539yaw.java:26: error: incompatible types: double cannot be converted\
    \ to Float\n            f = Math.ceil(f);\n                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long res = 0;\n        for (float n : lst) {\n            res\
    \ += (long)Math.pow(Math.ceil(n), 2);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Write your code here.\n        return lst.stream().map(d->Math.round(d)).map(d->(long)d*d).reduce(0l,(a,b)->a+b);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqqza6o4i.java:31)\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)*(long)Math.ceil(x)).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x))\n         \
    \   .map(x -> x*x)\n            .reduce(0L, (x, y) -> x + y);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        lst.replaceAll(number -> (long)Math.ceil(number));\n       \
    \ return lst.stream().map(x -> x * x).reduce(0L, (a, b) -> a + b);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvty88vh7.java:24: error: incompatible types: bad return type in\
    \ lambda expression\n        lst.replaceAll(number -> (long)Math.ceil(number));\n\
    \                                 ^\n    long cannot be converted to Float\n/tmp/tmpvty88vh7.java:25:\
    \ error: no suitable method found for reduce(long,(a,b)->a + b)\n        return\
    \ lst.stream().map(x -> x * x).reduce(0L, (a, b) -> a + b);\n                \
    \                           ^\n    method Stream.reduce(Float,BinaryOperator<Float>)\
    \ is not applicable\n      (argument mismatch; long cannot be converted to Float)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Float,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwh5n6plb.java:27)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> Math.round(f) * Math.round(f)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_q89op_.java:30)\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(Float::longValue).map(i -> i *\
    \ i).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99_hb0o2.java:30)\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(i -> Math.round(i) * Math.round(i)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbl06mr_c.java:30)\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum += Math.round(Math.pow(lst.get(i), 2));\n        }\n    \
    \    return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvsy50mx0.java:34)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(e -> (long)Math.ceil(e)*(long)Math.ceil(e)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(e -> (long)Math.ceil(e)).map(e\
    \ -> e * e).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Float> rounded = lst.stream().map(f -> (float)Math.ceil(f)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return (long)rounded.stream().map(f -> f * f).reduce(0f, (a, b) -> a\
    \ + b);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd5f4jrx2.java:25: error: incompatible types: Float cannot be converted\
    \ to long\n        return (long)rounded.stream().map(f -> f * f).reduce(0f, (a,\
    \ b) -> a + b);\n                                                            ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ret = 0;\n        for (Float x : lst) {\n            ret\
    \ += (long) Math.ceil(x) * (long) Math.ceil(x);\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        final long arg = 0;\n        final long[] result = { arg };\n\
    \        lst.stream().map(i -> (long)Math.ceil(i)).forEach(i -> result[0] += i\
    \ * i);\n        return result[0];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Write your code here\n        return lst.stream().map(it\
    \ -> Math.round(Math.ceil(it))).map(it -> it * it).reduce(0l, (a, b) -> a + b);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976979
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return lst.stream().mapToLong(Float::floatToIntBits).reduce(0,(acc,x)->acc+(long)Math.pow(x,2));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp653tk5fx.java:28)\n"
  stdout: ''
  timestamp: 1659976979
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(p -> BigDecimal.valueOf(p).divide(BigDecimal.valueOf(1l),\
    \ BigDecimal.ROUND_CEILING)).map(p -> p.multiply(p)).mapToLong(p -> p.longValue()).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_53i746.java:30)\n"
  stdout: ''
  timestamp: 1659976979
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)lst.stream().map(Float::new).map(x -> x * x).map(Math::ceil).mapToInt(x\
    \ -> x.intValue()).sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmk21qeyf.java:30)\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float el : lst) {\n            sum\
    \ += Math.ceil(el) * Math.ceil(el);\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(num -> Math.round(num) * Math.round(num)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b03cd7s.java:30)\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaj28azu.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (acc, x) -> acc + x);\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8wqw82v.java:24: error: no suitable method found for reduce(long,(acc,x)->acc\
    \ + x)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (acc, x) -> acc + x);\n                                                    \
    \               ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is\
    \ not applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> {\n            var num = Math.ceil(x);\n\
    \            return (long) Math.pow(num, 2);\n        }).reduce(0l, (x, y) ->\
    \ x + y);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return (long) lst.stream().mapToDouble(Double::valueOf).map(x\
    \ -> Math.ceil(x)).map(x -> x * x).sum();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n      return lst.stream().map(x -> (int)Math.ceil(x)).map(x -> x*x).reduce(0,\
    \ (x,y) -> x+y);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        throw new NotImplementedException();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp748d68zy.java:24: error: cannot find symbol\n        throw new\
    \ NotImplementedException();\n                  ^\n  symbol:   class NotImplementedException\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaj28azu.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)lst.stream().map((f) -> java.lang.Math.ceil(f)).map((ceil)\
    \ -> ceil * ceil).reduce(0.0, (acc, cur) -> acc + cur);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp90pu7ve6.java:24: error: incompatible types: Double cannot be converted\
    \ to long\n        return (long)lst.stream().map((f) -> java.lang.Math.ceil(f)).map((ceil)\
    \ -> ceil * ceil).reduce(0.0, (acc, cur) -> acc + cur);\n                    \
    \                                                                            \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(f -> Math.round(f)).map(Math::round).map(x\
    \ -> x * x).reduce(0L, Long::sum);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpasog51cq.java:24: error: no suitable method found for reduce(long,Long::sum)\n\
    \        return lst.stream().map(f -> Math.round(f)).map(Math::round).map(x ->\
    \ x * x).reduce(0L, Long::sum);\n                                            \
    \                                        ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>)\
    \ is not applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> new Float(Math.ceil(x))).map(y\
    \ -> y * y).mapToLong(z -> z).sum();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ruwb1et.java:24: warning: [removal] Float(double) in Float has\
    \ been deprecated and marked for removal\n        return lst.stream().map(x ->\
    \ new Float(Math.ceil(x))).map(y -> y * y).mapToLong(z -> z).sum();\n        \
    \                             ^\n/tmp/tmp3ruwb1et.java:24: error: incompatible\
    \ types: bad return type in lambda expression\n        return lst.stream().map(x\
    \ -> new Float(Math.ceil(x))).map(y -> y * y).mapToLong(z -> z).sum();\n     \
    \                                                                            \
    \            ^\n    Float cannot be converted to long\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n\
    1 warning\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(n -> n.longValue()).map(n -> n * n).reduce(0L,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpna3vavr_.java:30)\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)lst.stream().map((x) -> (long)Math.ceil(x)*(long)Math.ceil(x)).reduce((a,\
    \ b) -> a + b).get();\n    }\n    public static void main(String[] args) {\n \
    \   assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum += (long)Math.ceil(lst.get(i)) * (long)Math.ceil(lst.get(i));\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst) {\n            int\
    \ v = (int)Math.ceil(f);\n            sum += v * v;\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(a -> Math.round(a)*Math.round(a)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl8xd7chy.java:30)\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(i -> (long) Math.ceil(i)).map(i -> i\
    \ * i).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(l -> (long)Math.ceil(l) * (long)Math.ceil(l)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x * x)).reduce(0l, (x,\
    \ y) -> x + y);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpno99h0p8.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x * x)).reduce(0l, (x,\
    \ y) -> x + y);\n                                                       ^\n  \
    \  method Stream.reduce(Integer,BinaryOperator<Integer>) is not applicable\n \
    \     (argument mismatch; long cannot be converted to Integer)\n    method Stream.<U>reduce(U,BiFunction<U,?\
    \ super Integer,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // we sum the squared numbers of each element of the list.\n\
    \        // we should round it to the upper integer first,\n        // we will\
    \ use the method Math.ceil() to get the next integer\n        // from the element.\n\
    \        // e.g. Math.ceil(1.4) => 2.0\n        //      Math.ceil(4.2) => 5.0\n\
    \        //      Math.ceil(0.0) => 1.0\n        //      Math.ceil(-2.4) => -2.0\n\
    \        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n     \
    \       sum += (long) Math.pow(Math.ceil(lst.get(i)), 2);\n        }\n       \
    \ return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976980
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // >>> your code goes here <<<\n        long sum = 0;\n    \
    \    for (Float f : lst) {\n            sum += Math.round(f * f);\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9cx5ewol.java:35)\n"
  stdout: ''
  timestamp: 1659976980
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(a -> (long) Math.ceil(a)).map(a -> a\
    \ * a).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976981
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long x = 0;\n        for (Float f : lst) {\n            x +=\
    \ (long)Math.ceil(f) * (long)Math.ceil(f);\n        }\n        return x;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976981
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float t = 0;\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            float f = lst.get(i);\n            t += f * f;\n        }\n     \
    \   return Math.round(t);\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fqfvr66.java:35)\n"
  stdout: ''
  timestamp: 1659976981
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976977
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)IntStream.range(0, lst.size()).mapToDouble(i ->\
    \ Math.pow(Math.ceil(lst.get(i)), 2)).sum();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(i -> (long) Math.ceil(i) * (long)\
    \ Math.ceil(i)).sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0L,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwipxwet.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0L,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976981
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Float> result = new ArrayList<Float>();\n        for\
    \ (Float el : lst) {\n            result.add((float)Math.ceil(el));\n        }\n\
    \        // System.out.println(result);\n        long total = 0;\n        for\
    \ (Float el : result) {\n            total += el * el;\n        }\n        return\
    \ total;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976981
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total = 0l;\n        for (Float num : lst) {\n        \
    \    float ceil = Math.ceil(num);\n            long squared = Math.round(ceil\
    \ * ceil);\n            total += squared;\n        }\n        return total;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqug8lqso.java:26: error: incompatible types: possible lossy conversion\
    \ from double to float\n            float ceil = Math.ceil(num);\n           \
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659976981
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo15o6e_.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.round(x * x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qj13v1g.java:30)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // The first thing to look at is our list of floats.\n     \
    \   // We need to map the elements of the list to their upper int(Ceiling).\n\
    \        // We can use the lst_map function to do this.\n        // We also need\
    \ to square each of the elements in the result of the lst_map,\n        // so\
    \ we can use lst_map again to square each element.\n        // The final step\
    \ is to return the sum of the new lst.\n        // There's a function for that\
    \ too, called lst_sum.\n        // The whole expression looks like:\n        //\
    \ lst_sum(lst_map(x -> x * x, lst_map(Math::ceil, lst)))\n        return 0l;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb__pe31w.java:36)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).mapToLong(x\
    \ -> x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0iw4f6g1.java:30)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(i -> i.longValue()).map(i -> i * i).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpur9ep6lk.java:30)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaj28azu.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        int[] arr = new int[lst.size()];\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            arr[i] = (int) Math.ceil(lst.get(i));\n\
    \        }\n        for (int j = 0; j < arr.length; j++) {\n            result\
    \ += Math.pow(arr[j], 2);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> x.intValue()).map(x -> x * x).reduce(0,\
    \ Integer::sum);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4r3fkf45.java:30)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        for (Float f : lst) {\n          \
    \  long num = new BigDecimal(f.doubleValue()).setScale(0, BigDecimal.ROUND_CEILING).longValue();\n\
    \            num = num * num;\n            result += num;\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(f -> (long)Math.ceil(f)).map(f -> f\
    \ * f).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Integer> list = lst.stream().map(it -> (int)Math.ceil(it)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return list.stream().map(it -> it * it).reduce(0, (it, other) -> it +\
    \ other);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        throw new RuntimeException(\"Not Implemented\");\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.sumSquares(tmppec6ndps.java:24)\n\tat Problem.main(tmppec6ndps.java:27)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Problem::ceil).map(Problem::square).reduce(0l,\
    \ Long::sum);\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5q6x6jz9.java:24: error: invalid method reference\n        return\
    \ lst.stream().map(Problem::ceil).map(Problem::square).reduce(0l, Long::sum);\n\
    \                                ^\n  cannot find symbol\n    symbol:   method\
    \ ceil()\n    location: class Problem\n/tmp/tmp5q6x6jz9.java:24: error: invalid\
    \ method reference\n        return lst.stream().map(Problem::ceil).map(Problem::square).reduce(0l,\
    \ Long::sum);\n                                                   ^\n  cannot\
    \ find symbol\n    symbol:   method square()\n    location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float i : lst) {\n            i\
    \ = Math.round(i);\n            long a = (long) Math.pow(i, 2);\n            sum\
    \ += a;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dwsl_pl.java:26: error: incompatible types: int cannot be converted\
    \ to Float\n            i = Math.round(i);\n                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sumSquares = 0;\n        for (float val : lst) {\n    \
    \        sumSquares += Math.round(Math.pow(val, 2));\n        }\n        return\
    \ sumSquares;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9cuc1p4.java:34)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(y\
    \ -> y * y).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.round(f) * Math.round(f);\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mn6rjea.java:34)\n"
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> x.intValue()).map(x -> (long) x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpirlmv15p.java:30)\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long) Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976982
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0l;\n        for (float f : lst) {\n            sum\
    \ += Math.round(f) * Math.round(f);\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0oluarj.java:34)\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float elem : lst) {\n          \
    \  sum += Math.round(elem) * Math.round(elem);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9mrg5fg.java:34)\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long) Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (acc, x) -> acc + x);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaj28azu.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n      return lst.stream().mapToLong(n -> (long)Math.ceil(n)*(long)Math.ceil(n)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> Math.round(f)).map(l -> l\
    \ * l).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3w6bh8x.java:30)\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Integer> ints = new ArrayList<Integer>();\n      \
    \  long sum = 0;\n        for (Float i : lst) {\n            ints.add(java.lang.Math.round(i));\n\
    \        }\n        for (Integer i : ints) {\n            sum += i * i;\n    \
    \    }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_1289uc.java:38)\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToInt(Math::round).mapToLong(x -> x *\
    \ x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp2_cmwap.java:30)\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToInt(e -> (int)Math.ceil(e)).mapToDouble(Math::pow).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6uly_lor.java:24: error: incompatible types: invalid method reference\n\
    \        return lst.stream().mapToInt(e -> (int)Math.ceil(e)).mapToDouble(Math::pow).sum();\n\
    \                                                                         ^\n\
    \    method pow in class Math cannot be applied to given types\n      required:\
    \ double,double\n      found:    int\n      reason: actual and formal argument\
    \ lists differ in length\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return Math.round(lst.stream().map(v -> Math.ceil(v)).map(v\
    \ -> Math.pow(v, 2)).reduce((a, b) -> a + b).get());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // insert your code here\n        return lst.stream().map(f\
    \ -> Math.round(f)).map(n -> n * n).reduce(0l, (a, b) -> a + b);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplvuzmz_4.java:25: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(f -> Math.round(f)).map(n -> n * n).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n      \
    \  for (Float num : lst) {\n            nums.add((int)Math.ceil(num));\n     \
    \   }\n        return nums.stream().mapToInt(num -> num * num).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n      lst.replaceAll(x -> (float)Math.ceil(x));\n      lst.replaceAll(x\
    \ -> x * x);\n      return lst.stream().mapToLong(v -> (long)v).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2mofgpj.java:26: error: incompatible types: Float cannot be converted\
    \ to long\n      return lst.stream().mapToLong(v -> (long)v).sum();\n        \
    \                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659976983
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(e -> (long)Math.ceil(e)).map(e -> e\
    \ * e).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976984
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        //for(float i : lst) System.out.println(Math.ceil(i));\n   \
    \     BigInteger r = BigInteger.ZERO;\n        for(float i : lst) r = r.add(BigInteger.valueOf((long)Math.ceil(i)).pow(2));\n\
    \        return r.longValue();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> f.longValue() * f.longValue()).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbgd0he2c.java:30)\n"
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        throw new UnsupportedOperationException(\"Not Implemented Yet.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ Implemented Yet.\n\tat Problem.sumSquares(tmpvek7o48t.java:24)\n\tat Problem.main(tmpvek7o48t.java:27)\n"
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.round(x) * Math.round(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwv0z95n7.java:30)\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long) Math.ceil(x) * (long)\
    \ Math.ceil(x)).sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long r = 0;\n        for (Float f : lst) {\n            r +=\
    \ Math.round(f) * Math.round(f);\n        }\n        return r;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptpj7nh_7.java:34)\n"
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long)lst.stream().map(x -> Math.round(x) * Math.round(x)).reduce((a,\
    \ b) -> a + b).get();\n    }\n    public static void main(String[] args) {\n \
    \   assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjdbr3xp.java:30)\n"
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        lst.replaceAll(f -> (long)Math.ceil(f));\n        lst.replaceAll(f\
    \ -> (long)Math.pow(f, 2));\n        long sum = lst.stream().mapToLong(Long::longValue).sum();\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_4j6jxv.java:24: error: incompatible types: bad return type in\
    \ lambda expression\n        lst.replaceAll(f -> (long)Math.ceil(f));\n      \
    \                      ^\n    long cannot be converted to Float\n/tmp/tmp2_4j6jxv.java:25:\
    \ error: incompatible types: bad return type in lambda expression\n        lst.replaceAll(f\
    \ -> (long)Math.pow(f, 2));\n                            ^\n    long cannot be\
    \ converted to Float\n/tmp/tmp2_4j6jxv.java:26: error: incompatible types: invalid\
    \ method reference\n        long sum = lst.stream().mapToLong(Long::longValue).sum();\n\
    \                                          ^\n    method longValue in class Long\
    \ cannot be applied to given types\n      required: no arguments\n      found:\
    \    Float\n      reason: actual and formal argument lists differ in length\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo15o6e_.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976974
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code goes here.\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwqp75ly.java:28)\n"
  stdout: ''
  timestamp: 1659976984
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x)*(long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976984
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ret = 0l;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            ret += Math.pow(Math.ceil(lst.get(i)), 2);\n        }\n     \
    \   return ret;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976984
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(e -> Math.round(e)*Math.round(e)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjbsndtnv.java:30)\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> (long) Math.ceil(f)).map(i\
    \ -> i * i).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Implement the method\n        long res = 0;\n        for\
    \ (Float fl : lst) {\n            res += Math.ceil(fl) * Math.ceil(fl);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // your code here:\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqw7iinm.java:28)\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long) Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> (long)Math.ceil(f) * (long)Math.ceil(f)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwh5n6plb.java:27)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // YOUR CODE HERE\n        long res = 0;\n        for (float\
    \ f : lst) {\n            int x = (int)Math.ceil(f);\n            res += x * x;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.size() == 0) {\n            return 0;\n        }\n \
    \       double sum = 0;\n        for (Float number : lst) {\n            sum +=\
    \ Math.pow(Math.ceil(number), 2);\n        }\n        return Math.round(sum);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        //TODO: Your code here\n        return lst.stream().map(i ->\
    \ Math.round(i)).map(i -> i * i).reduce(0L, (a, b) -> a + b);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytx0ape2.java:25: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(i -> Math.round(i)).map(i -> i * i).reduce(0L,\
    \ (a, b) -> a + b);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(i -> Math.round(i)).map(i -> i * i).reduce(0l,\
    \ (i, j) -> i + j);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_k0uo3fk.java:24: error: no suitable method found for reduce(long,(i,j)->i\
    \ + j)\n        return lst.stream().map(i -> Math.round(i)).map(i -> i * i).reduce(0l,\
    \ (i, j) -> i + j);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return Math.round(lst.stream().mapToDouble(x -> Math.pow(Math.ceil(x),\
    \ 2)).sum());\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.size() == 0) {\n            return 0;\n        }\n \
    \       return lst.stream().mapToInt(f -> (int)Math.ceil(f)).map(x -> x * x).reduce(0,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long res = 0;\n        for (float f : lst) {\n            res\
    \ += (int) Math.ceil(f) * (int) Math.ceil(f);\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // your code here\n        long sum = 0l;\n        for (Float\
    \ val : lst) {\n            sum += Math.round(Math.pow(val, 2.0f));\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9ufrwrl.java:35)\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long) lst.stream().map(n -> (long) Math.ceil(n) * (long)\
    \ Math.ceil(n)).mapToDouble(n -> n).sum();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(a->Math.round(a)).map(a->Math.round(a*a)).reduce(0l,(a,b)->a+b);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbz1tb_r6.java:24: error: no suitable method found for reduce(long,(a,b)->a\
    \ + b)\n        return lst.stream().map(a->Math.round(a)).map(a->Math.round(a*a)).reduce(0l,(a,b)->a+b);\n\
    \                                                                         ^\n\
    \    method Stream.reduce(Integer,BinaryOperator<Integer>) is not applicable\n\
    \      (argument mismatch; long cannot be converted to Integer)\n    method Stream.<U>reduce(U,BiFunction<U,?\
    \ super Integer,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return sumSquares1(lst, 0l);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqw1u3_u_.java:24: error: cannot find symbol\n        return sumSquares1(lst,\
    \ 0l);\n               ^\n  symbol:   method sumSquares1(ArrayList<Float>,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(e -> Math.round(e)).map(e -> Math.pow(e,\
    \ 2.0)).mapToLong(e -> (long)e).sum();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60n4gnfp.java:24: error: incompatible types: Double cannot be converted\
    \ to long\n        return lst.stream().map(e -> Math.round(e)).map(e -> Math.pow(e,\
    \ 2.0)).mapToLong(e -> (long)e).sum();\n                                     \
    \                                                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(f -> Math.round(f) * Math.round(f)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_q89op_.java:30)\n"
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // your code here\n        Long sum = 0l;\n        for (Float\
    \ n : lst) {\n            sum += Math.round(Math.pow(n, 2));\n        }\n    \
    \    return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgi5upx9u.java:35)\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Problem::ceil).map(Problem::squared).reduce(0l,\
    \ (a, b) -> a + b);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0qgxqo14.java:24: error: invalid method reference\n        return\
    \ lst.stream().map(Problem::ceil).map(Problem::squared).reduce(0l, (a, b) -> a\
    \ + b);\n                                ^\n  cannot find symbol\n    symbol:\
    \   method ceil()\n    location: class Problem\n/tmp/tmp0qgxqo14.java:24: error:\
    \ invalid method reference\n        return lst.stream().map(Problem::ceil).map(Problem::squared).reduce(0l,\
    \ (a, b) -> a + b);\n                                                   ^\n  cannot\
    \ find symbol\n    symbol:   method squared()\n    location: class Problem\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1659976985
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(a -> Math.round(a)).map(b -> (long)\
    \ Math.pow(b, 2)).reduce(0l, (a, b) -> a + b);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjnqggbrf.java:30)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(num -> (long) Math.ceil(num) * (long)\
    \ Math.ceil(num)).reduce(0l, (total, num) -> total + num);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        throw new RuntimeException(\"Please implment me.\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Please implment\
    \ me.\n\tat Problem.sumSquares(tmpz80yvuy8.java:24)\n\tat Problem.main(tmpz80yvuy8.java:27)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaj28azu.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976975
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwh5n6plb.java:27)\n"
  stdout: ''
  timestamp: 1659976976
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        //throw new java.lang.UnsupportedOperationException(\"Please\
    \ implement the sumSquares function\");\n        long sum=0;\n        for(int\
    \ i=0;i<lst.size();i++){\n            sum+=(long)Math.ceil(lst.get(i))*(long)Math.ceil(lst.get(i));\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(n -> (long) Math.ceil(n) * (long)\
    \ Math.ceil(n)).sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code goes here!\n        //return null;\n        long\
    \ ret = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            ret +=\
    \ Math.round(Math.pow(lst.get(i), 2));\n        }\n        return ret;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkb7lq2tt.java:36)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl5cbvg_a.java:28)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(n -> (long)Math.ceil(n)).map(n -> n\
    \ * n).reduce(0l, (sum, n) -> sum + n);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // >>> YOUR CODE HERE <<<\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpda6c2mhi.java:28)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976977
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // return Stream.of(lst).map(x -> Math.round(x * x)).mapToLong(x\
    \ -> x).sum();\n        long ans = 0;\n        for (Float x : lst) {\n       \
    \     ans += Math.round(x * x);\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpllzxwji6.java:35)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(v -> (long)Math.ceil(v)).map(v -> v\
    \ * v).reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        long sum = 0;\n        for (float\
    \ x : lst) {\n            sum += Math.round(x) * Math.round(x);\n        }\n \
    \       return sum;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbzhwyyyf.java:35)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0L,\
    \ (x, y) -> x + y);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwipxwet.java:24: error: no suitable method found for reduce(long,(x,y)->x\
    \ + y)\n        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0L,\
    \ (x, y) -> x + y);\n                                                        \
    \           ^\n    method Stream.reduce(Integer,BinaryOperator<Integer>) is not\
    \ applicable\n      (argument mismatch; long cannot be converted to Integer)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Integer,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659976981
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Implement your solution here\n        return 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1jlxk1dt.java:28)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976978
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return (long) lst.stream().map(new Function<Float, Long>() {\n\
    \            public Long apply(Float x) {\n                return (((long) Math.ceil(x))\
    \ * ((long) Math.ceil(x)));\n            }\n        }).reduce(0l, new BinaryOperator<Long>()\
    \ {\n            public Long apply(Long a, Long b) {\n                return a\
    \ + b;\n            }\n        });\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpirs_5tg6.java:28: error: cannot find symbol\n        }).reduce(0l,\
    \ new BinaryOperator<Long>() {\n                          ^\n  symbol:   class\
    \ BinaryOperator\n  location: class Problem\n/tmp/tmpirs_5tg6.java:24: error:\
    \ cannot find symbol\n        return (long) lst.stream().map(new Function<Float,\
    \ Long>() {\n                                           ^\n  symbol:   class Function\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return Math.round(lst.stream().map(f -> f*f).reduce((a, b) ->\
    \ a + b).get());\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpur3ae6is.java:30)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // try {\n        //     for (Method method : lst.getClass().getMethods())\
    \ {\n        //         if (method.getName().equals(\"map\")) {\n        //  \
    \           return (long)lst.stream().map(v -> Math.ceil(v)).map(v -> Math.pow(v,\
    \ 2)).reduce(0d, (total, value) -> total + value);\n        //         }\n   \
    \     //     }\n        // } catch (Exception e) {\n        //     System.out.println(e);\n\
    \        // }\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7f0dgy4.java:36)\n"
  stdout: ''
  timestamp: 1659976986
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x\
    \ * x).reduce(0l, (x, y) -> x + y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976977
