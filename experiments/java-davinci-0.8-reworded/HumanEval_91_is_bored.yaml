name: HumanEval_91_is_bored
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky\
  \ is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    public\
  \ static long isBored(String S) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(isBored((\"\
  Hello world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n\
  \    assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\"))\
  \ == (0l));\n    assert(isBored((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\"\
  )) == (0l));\n    }\n\n}\n"
completions: ["        S = S.replace(\".\", \".\");\n        S = S.replace(\"!\",\
    \ \"!\");\n        S = S.replace(\"?\", \"?\");\n        String[] a = S.split(\"\
    [\\\\.|\\\\?|\\\\!]\");\n        return Arrays.stream(a).filter(x -> x.length()\
    \ > 0 && x.trim().charAt(0) == 'I').count();", '        return S.matches("(.*)I(.*)[.!?](.*)")
    ? 1l : 0l;', "        return Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n \
    \           .filter(s -> s.trim().startsWith(\"I\"))\n            .count();",
  "        return Stream.of(S.split(\"\\\\.|\\\\?|\\\\!\"))\n            .filter(i\
    \ -> i.trim().startsWith(\"I\"))\n            .count();", '        return Arrays.stream(S.split("[.!?]")).filter(x
    -> x.startsWith("I")).count();', "        final String[] words = S.split(\"[.?!]\"\
    );\n        long boredoms = 0;\n        for (final String word : words) {\n  \
    \          if (word.startsWith(\"I\")) {\n                boredoms++;\n      \
    \      }\n        }\n        return boredoms;", "        return Arrays.stream(S.split(\"\
    [.?!]\"))\n                     .filter(s -> s.trim().startsWith(\"I\"))\n   \
    \                  .count();", "        long n = 0;\n        for (String sentence\
    \ : S.split(\"[.?!]\")) {\n            if (sentence.startsWith(\"I\")) {\n   \
    \             n += 1;\n            }\n        }\n        return n;", "       \
    \ return Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n                .filter(s\
    \ -> s.startsWith(\"I\"))\n                .count();", "        return Stream.of(S.split(\"\
    [.?!]\"))\n            .filter(s -> s.length() != 0)\n            .filter(s ->\
    \ s.split(\"\\\\s+\")[0].equals(\"I\"))\n            .count();", "        return\
    \ Arrays.stream(S.split(\"[.!?]\"))\n            .filter(x -> x.length() >= 2\
    \ && x.substring(0, 2).equals(\"I \"))\n            .count();", "        String[]\
    \ sentences = S.split(\"\\\\.|\\\\?|!\");\n        long boredoms = 0l;\n     \
    \   for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", '        return Arrays.stream(S.split("[.?!]")).filter(s -> s.startsWith("I")).count();',
  "      long n = 0;\n      char[] str = S.toCharArray();\n      boolean bored = false;\n\
    \      int index = 0;\n      while (index < str.length) {\n        if (str[index]\
    \ == 'I') {\n          bored = true;\n        }\n        if (str[index] == '.'\
    \ || str[index] == '?' || str[index] == '!') {\n          if (bored) {\n     \
    \       n++;\n          }\n          bored = false;\n        }\n        index++;\n\
    \      }\n      return n;", "        return Arrays.stream(S.split(\"\\\\.|\\\\\
    ?|\\\\!\"))\n            .filter(e -> e.startsWith(\"I\")).count();", "      \
    \  // Your code here\n        int i = 0;\n        long boredom = 0;\n        while\
    \ (i < S.length()) {\n            char c = S.charAt(i);\n            if (c ==\
    \ 'I') {\n                String sub = S.substring(i);\n                if (sub.startsWith(\"\
    I am\")) {\n                    i = i + \"I am\".length();\n                }\
    \ else if (sub.startsWith(\"I am not\")) {\n                    i = i + \"I am\
    \ not\".length();\n                } else if (sub.startsWith(\"I will\")) {\n\
    \                    i = i + \"I will\".length();\n                } else if (sub.startsWith(\"\
    I will not\")) {\n                    i = i + \"I will not\".length();\n     \
    \           } else if (sub.startsWith(\"I\")) {\n                    i = i + \"\
    I\".length();\n                }\n                boredom++;\n            } else\
    \ {\n                i++;\n            }\n        }\n        return boredom;",
  "        StringTokenizer st = new StringTokenizer(S, \"!.?\");\n        long c =\
    \ 0;\n        while (st.hasMoreTokens()) {\n            String s = st.nextToken();\n\
    \            String[] toks = s.split(\" \");\n            if (toks.length > 0\
    \ && toks[0].equals(\"I\")) {\n                c++;\n            }\n        }\n\
    \        return c;", "        // Implement me\n        return null;", "      \
    \  String[] sentences = S.split(\"[.?!]\");\n        return Arrays.stream(sentences)\n\
    \            .filter(s -> !s.isEmpty())\n            .filter(s -> s.trim().startsWith(\"\
    I\"))\n            .count();", "        String[] sa = S.split(\"[.?!]\");\n  \
    \      long sum = 0;\n        for (String s : sa) {\n            String[] sa2\
    \ = s.split(\" \");\n            if (sa2.length > 0 && sa2[0].equals(\"I\"))\n\
    \                sum++;\n        }\n        return sum;", "        String[] sentences\
    \ = S.split(\"[.?!]\");\n        long bored = Arrays.stream(sentences)\n     \
    \       .filter(x -> x.trim().startsWith(\"I\"))\n            .count();\n    \
    \    return bored;", "        return Arrays.stream(S.split(\"[.!?]\"))\n     \
    \          .filter(s -> s.startsWith(\"I\") || s.startsWith(\"i\"))\n        \
    \       .count();", "        Scanner scanner = new Scanner(S);\n        long count\
    \ = 0;\n        while (scanner.hasNext()) {\n            String cur = scanner.next();\n\
    \            if (cur.equals(\"I\")) {\n                count++;\n            }\n\
    \        }\n        return count;", "        // Your code goes here.\n       \
    \ String[] split = S.split(\"(\\\\?|\\\\.|!)\");\n        long count = 0;\n  \
    \      for (String sentence : split) {\n            if (sentence.startsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        // Your code here.\n        return Stream.of(S.split(\"\\\\.\"))\n    \
    \        .map(s -> s.split(\"\\\\!\"))\n            .flatMap(Arrays::stream)\n\
    \            .map(s -> s.split(\"\\\\?\"))\n            .flatMap(Arrays::stream)\n\
    \            .filter(s -> s.split(\" \")[0].equals(\"I\"))\n            .count();",
  "        String[] sentences = S.split(\"[\\\\.!?]\");\n        long count = 0;\n\
    \        for (String s : sentences) {\n            String[] words = s.split(\"\
    \ \");\n            if (!words[0].equals(\"I\")) {\n                continue;\n\
    \            }\n            count++;\n        }\n        return count;", '        return
    Arrays.stream(S.split("\\.")).filter(s -> s.trim().startsWith("I")).count();',
  "        String[] words = S.split(\"[?!.]\");\n        long boredoms = 0;\n    \
    \    for (String word : words) {\n            if (word.startsWith(\"I\")) {\n\
    \                boredoms++;\n            }\n        }\n        return boredoms;",
  '        // Your code here', "        // Implement this function\n        return\
    \ -1;", "        Pattern pattern = Pattern.compile(\"\\\\.|\\\\?|!\");\n     \
    \   String[] sentences = pattern.split(S);\n        return Arrays.stream(sentences)\n\
    \                .filter(sentence -> sentence.startsWith(\"I\"))\n           \
    \     .count();", "        Pattern pattern = Pattern.compile(\"I[^.!?]*[.!?]\"\
    );\n        Matcher matcher = pattern.matcher(S);\n        long count = 0;\n \
    \       while (matcher.find()) {\n            count++;\n        }\n        return\
    \ count;", '        return Arrays.stream(S.split("[.?!]")).map(String::trim).filter(s
    -> s.startsWith("I")).count();', '        return Arrays.stream(S.split("[!?.]")).filter(s
    -> s.matches("^I.*")).count();', '        return Arrays.stream(S.split("[?!.]")).map(x
    -> x.trim()).filter(x -> x.startsWith("I")).count();', "        return (long)\
    \ Arrays.stream(S.split(\"[.!?]\"))\n        .filter(x -> x.contains(\"I\"))\n\
    \        .count();", "        String[] sentences = S.split(\"[.?!]\");\n     \
    \   long count = 0;\n        for (String sentence : sentences) {\n           \
    \ String[] words = sentence.split(\"\\\\s+\");\n            if (words.length >\
    \ 0 && words[0].equals(\"I\")) {\n                count++;\n            }\n  \
    \      }\n        return count;", "        boolean isBoring = false;\n       \
    \ int counter = 0;\n        for (int i = 0; i < S.length(); i++) {\n         \
    \   char c = S.charAt(i);\n            if (c == 'I') {\n                isBoring\
    \ = true;\n            } else if (c == '.' || c == '?' || c == '!') {\n      \
    \          if (isBoring) {\n                    counter++;\n                }\n\
    \                isBoring = false;\n            }\n        }\n        return counter;",
  "        List<String> list = Arrays.asList(S.split(\"(?<=[.?!])\\\\s*\"));\n   \
    \     return list.stream().filter(s -> s.startsWith(\"I\")).count();", '        return
    Stream.of(S.split("[.!?]")).filter(x -> x.startsWith("I")).count();', "      \
    \  S = S.replaceAll(\"\\\\p{Punct}\", \" \");\n        String[] a = S.split(\"\
    \ \");\n        long boredoms = 0;\n        for (int i = 0; i < a.length; i++)\
    \ {\n            if (a[i].equals(\"I\")) boredoms++;\n        }\n        return\
    \ boredoms;", "        String regex = \"([a-zA-Z]+\\\\.|[a-zA-Z]+\\\\?|[a-zA-Z]+\\\
    \\!)\";\n        String[] sentence = S.split(regex);\n        long count = 0;\n\
    \        for (String s : sentence) {\n            if (s.startsWith(\"I\")) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       String[] strs = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long nboredoms\
    \ = 0;\n        for (String s : strs) {\n            if (s.trim().startsWith(\"\
    I\")) {\n                nboredoms += 1;\n            }\n        }\n        return\
    \ nboredoms;", "        return Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n\
    \                .filter(s -> s.trim().startsWith(\"I\"))\n                .count();",
  "        return Arrays.stream(S.split(\"[\\\\.\\\\?\\\\!]\\\\s+\"))\n          \
    \  .filter(p -> p.startsWith(\"I\"))\n            .count();", "        String[]\
    \ sentence = S.split(\"[\\\\?\\\\.\\\\!]\");\n        return Arrays.stream(sentence).filter(i\
    \ -> i.trim().startsWith(\"I\")).count();", "        String[] sentences = S.split(\"\
    [.?!]\");\n        long sum = 0;\n        for (String sentence : sentences) {\n\
    \            if (sentence.startsWith(\"I\")) {\n                sum++;\n     \
    \       }\n        }\n        return sum;", "        final long N = S.length();\n\
    \        long result = 0;\n        // Implement your solution here\n        return\
    \ result;", "        return Stream.of(S.split(\"\\\\.|\\\\?|\\\\!\"))\n      \
    \      .filter(w -> w.startsWith(\"I\"))\n            .count();", "        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return Arrays.stream(S.split(\"[!?.]\")).filter(s -> s.trim().startsWith(\"\
    I\")).count();", "        long count = 0;\n        String[] words = S.split(\"\
    \\\\.|\\\\?|\\\\!\");\n        for (String word : words) {\n            String[]\
    \ tokens = word.split(\" \");\n            if (tokens.length > 0 && tokens[0].equals(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  '        return Arrays.stream(S.split("[\\?\\.\\!]")).filter(x -> x.startsWith("I")).count();',
  "        return Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n                \
    \     .filter(x -> x.startsWith(\"I\"))\n                     .count();", "  \
    \      long boredoms = 0;\n        long n = S.length();\n        // Put code here\n\
    \        return boredoms;", '        // Your code goes here.', "        return\
    \ Arrays.stream(S.split(\"[.?!]\"))\n                     .filter(s -> s.startsWith(\"\
    I\"))\n                     .count();", "        // Your code here.\n        long\
    \ count = 0;\n        boolean start = false;\n        for (int i = 0; i < S.length();\
    \ i++) {\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i)\
    \ == '!') {\n                start = false;\n            }\n            if (start)\
    \ {\n                count++;\n            }\n            if (S.charAt(i) == 'I')\
    \ {\n                start = true;\n            }\n        }\n        return count;",
  "        return Stream.of(S.split(\"\\\\.|\\\\?|\\\\!\"))\n                .filter(s\
    \ -> s.trim().startsWith(\"I\"))\n                .count();", '        return
    Long.valueOf(Arrays.stream(S.split("[!?.]")).filter(s -> s.startsWith("I")).count());',
  "        boolean isBored = false;\n        long result = 0;\n        for (int i\
    \ = 0; i < S.length(); i++) {\n            char c = S.charAt(i);\n           \
    \ if (c == 'I') {\n                if (isBored) {\n                    result++;\n\
    \                }\n                isBored = true;\n            } else if (c\
    \ == '.' || c == '?' || c == '!') {\n                isBored = false;\n      \
    \      }\n        }\n        return result;", "        String[] str = S.split(\"\
    [.?!]\");\n        long num = 0;\n        for (String i : str) {\n           \
    \ String[] s = i.split(\" \");\n            if (s[0].equals(\"I\")) {\n      \
    \          num += 1;\n            }\n        }\n        return num;", "      \
    \  String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        return Arrays.stream(sentences)\n\
    \          .filter(sentence -> sentence.startsWith(\"I\"))\n          .count();",
  "        long boredoms = 0;\n        char[] cs = S.toCharArray();\n        boolean\
    \ start = false;\n        for (int i = 0; i < cs.length; i++) {\n            if\
    \ (cs[i] == '.' || cs[i] == '?' || cs[i] == '!') {\n                start = false;\n\
    \            } else if (start) {\n                continue;\n            } else\
    \ if (cs[i] == 'I') {\n                boredoms++;\n                start = true;\n\
    \            }\n        }\n        return boredoms;", "        // This is one\
    \ of the shortest wrong solutions I can think of:\n        // return S.split(\"\
    [.?!]\").length;\n        // Because we could have sentences like this:\n    \
    \    // \"I eat potato!!! I just love the way my mouth feels when I eat them....\"\
    \n        // In this case, the above solution would count 6 sentences, but \"\
    I love\n        // the way my mouth feels when I eat them.\" is a single sentence.\n\
    \        // I'm going to go with some sort of greedy parser.\n        int l =\
    \ S.length();\n        int c = 0;\n        int i = 0;\n        while (i < l) {\n\
    \            while (i < l && S.charAt(i) != 'I')\n                i++;\n     \
    \       i++;\n            while (i < l && S.charAt(i) != '.' && S.charAt(i) !=\
    \ '?' && S.charAt(i) != '!')\n                i++;\n            i++;\n       \
    \     c++;\n        }\n        return c;", '      return Arrays.stream(S.split("[\\?\\.\\!]")).filter(i
    -> i.startsWith("I")).count();', "        return Arrays.stream(S.split(\"\\\\\
    .|\\\\?|\\\\!\"))\n            .filter(s -> s.trim().startsWith(\"I\")).count();",
  "        String[] tokens = S.split(\"[!?.]\");\n        return Arrays.stream(tokens).filter(token\
    \ -> token.trim().startsWith(\"I\")).count();", "        return Arrays.stream(S.split(\"\
    [.?!]\"))\n            .filter(s -> s.startsWith(\"I\"))\n            .count();",
  '        return Stream.of(S.split("\\.")).filter(a -> a.startsWith("I")).count();',
  "        // ...\n        long boredoms = 0;\n        // Split the string into sentences\
    \ first\n        String[] sentences = S.split(\"\\\\.\\\\s|\\\\?\\\\s|\\\\!\\\\\
    s\");\n        //System.out.println(Arrays.toString(sentences));\n        for\
    \ (String sentence : sentences) {\n            //System.out.println(sentence);\n\
    \            // For each sentence, split them into words\n            String[]\
    \ words = sentence.split(\"\\\\s\");\n            if (words.length > 0 && words[0].equals(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        S = S.replaceAll(\"\\\\!\", \".\");\n        S = S.replaceAll(\"\
    \\\\?\", \".\");\n        String[] sentences = S.split(\"\\\\.\");\n        long\
    \ count = 0;\n        for (String sentence : sentences) {\n            String[]\
    \ words = sentence.split(\" \");\n            if (words.length > 0 && words[0].equals(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        String[] sentences = S.split(\"[.?!]\");\n        return Arrays.stream(sentences)\n\
    \            .filter(s -> s.length() > 0)\n            .filter(s -> s.trim().startsWith(\"\
    I\"))\n            .count();", "        // IMPLEMENT ME\n        return 0l;",
  "        long boredoms = 0;\n        String[] str = S.split(\"[.!?]\");\n      \
    \  for (String s : str) {\n            if (s.startsWith(\"I\"))\n            \
    \    boredoms++;\n        }\n        return boredoms;", "        //long x = Long.valueOf(0);\n\
    \        String[] parts = S.split(\"[.?!]\");\n        //for (String w : parts)\
    \ {\n            //if (w.startsWith(\"I\")) {\n              //  x++;\n      \
    \      //}\n        //}\n        //return x;\n        List<String> partsList =\
    \ Arrays.asList(parts);\n        long x = partsList.stream().filter(w -> w.startsWith(\"\
    I\")).count();\n        return x;", "        String[] tokens = S.split(\"[.?!]\"\
    );\n        long boredom = 0;\n        for (String token : tokens) {\n       \
    \     if (token.matches(\"^\\\\s*I.*\"))\n                boredom++;\n       \
    \ }\n        return boredom;", "        return Arrays.stream(S.split(\"[.?!]\"\
    ))\n            .filter(s -> s.trim().startsWith(\"I\"))\n            .count();",
  "        String[] sentences = S.split(\"\\\\.\");\n        return Arrays.stream(sentences)\n\
    \            .map(x -> x.trim())\n            .filter(x -> x.length() > 0)\n \
    \           .filter(x -> x.startsWith(\"I\"))\n            .count();", "     \
    \   long count = 0;\n        for (String sentence : S.split(\"[.?!]\")) {\n  \
    \          if (sentence.startsWith(\"I\")) count++;\n        }\n        return\
    \ count;", "        // Replace the '?' with your code\n        long count = 0;\n\
    \        // System.out.println(S);\n        int index = S.indexOf(\"I\");\n  \
    \      while (index != -1) {\n            if (index == 0 || S.charAt(index - 1)\
    \ == ' ') {\n                count++;\n            }\n            index = S.indexOf(\"\
    I\", index + 1);\n        }\n        return count;", "        return Arrays.stream(S.split(\"\
    [.?!]\"))\n            .filter(S::startsWith)\n            .count();", '        return
    -1;', "        // Convert to lowercase, split by sentence boundaries and filter\
    \ for\n        // sentences that start with \"I\".\n        long boredoms = Arrays.stream(S.toLowerCase().split(\"\
    [.?!]\")).filter(s -> s.startsWith(\"i\")).count();\n        return boredoms;",
  "        String[] sentences = S.split(\"[.?!]\");\n        List<String> allWords\
    \ = Arrays.asList(S.split(\"[, ]\"));\n        long boredoms = 0;\n        for\
    \ (String sentence : sentences) {\n            String[] words = sentence.split(\"\
    [, ]\");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n    \
    \            boredoms++;\n            }\n        }\n        return boredoms;",
  "        return Stream.of(S.split(\"[\\\\.!?]\"))\n                .filter(x ->\
    \ x.matches(\"^\\\\s*I\\\\s.*\"))\n                .count();", "        String[]\
    \ s = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long boredoms = 0;\n        for\
    \ (String s1 : s) {\n            if (s1.startsWith(\"I\")) {\n               \
    \ boredoms++;\n            }\n        }\n        return boredoms;", "        String[]\
    \ s = S.split(\"[\\\\.\\\\?!]\");\n        long n = 0l;\n        for (String str\
    \ : s) {\n            if (str.startsWith(\"I\")) {\n                n++;\n   \
    \         }\n        }\n        return n;", "        String [] words = S.split(\"\
    [.!?]\");\n        long boredoms = Arrays.stream(words)\n            .filter(word\
    \ -> word.startsWith(\"I\"))\n            .count();\n        return boredoms;",
  "        String[] strs = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long count = 0;\n\
    \        for (String str : strs) {\n            String[] words = str.split(\"\
    \ \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n      \
    \          count++;\n            }\n        }\n        return count;", '        return
    Stream.of(S.split("[!?.]")).filter(s -> s.trim().startsWith("I")).count();', " \
    \       String[] sentences = S.split(\"[.?!]\");\n        long numBoredoms = 0;\n\
    \        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                numBoredoms++;\n            }\n        }\n        return\
    \ numBoredoms;", "        return Arrays.stream(S.split(\"[.!?]\"))\n         \
    \   .filter(s -> s.length() > 0)\n            .filter(s -> s.charAt(0) == 'I')\n\
    \            .count();", "        return Arrays.stream(S.split(\"[.!?]\"))\n \
    \                    .filter(str -> str.startsWith(\"I\"))\n                 \
    \    .count();", "        // Your code goes here.\n        return Stream.of(S.split(\"\
    [\\\\.!\\\\?]\"))\n                .filter(s -> s.split(\" \")[0].equals(\"I\"\
    ))\n                .count();", "        long boredoms = 0;\n        String[]\
    \ sentences = S.split(\"[!?.]\");\n        for (String sentence : sentences) {\n\
    \            if (sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n\
    \            }\n        }\n        return boredoms;", "        String[] sentences\
    \ = S.split(\"[.?!]\");\n        long count = 0;\n        for (String sentence\
    \ : sentences) {\n            if (sentence.startsWith(\"I\")) {\n            \
    \    count++;\n            }\n        }\n        return count;", "        S =\
    \ S.replaceAll(\"[.!?]\", \"$0 \");\n        String[] strings = S.split(\" \"\
    );\n        return Arrays.stream(strings).filter(w -> w.length() > 0 && w.charAt(0)\
    \ == 'I').count();", '        return 0;', '        return Arrays.stream(S.split("[\\.\\?!]")).filter(w
    -> w.startsWith("I")).count();', "        String[] arr = S.split(\"[.!?]\");\n\
    \        long boredoms = 0;\n        for (String e : arr) {\n            String[]\
    \ words = e.split(\" \");\n            if (words.length > 0 && words[0].equals(\"\
    I\"))\n                boredoms++;\n        }\n        return boredoms;", "  \
    \      String[] arr = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long count = 0;\n\
    \        for (String s : arr) {\n            if (s.startsWith(\"I\")) count++;\n\
    \        }\n        return count;", '        return Arrays.stream(S.split("[!?.]")).filter(s
    -> s.startsWith("I")).count();', "        final long cnt = 0;\n        for (String\
    \ s : S.split(\"[.?!]\")) {\n            if (s.startsWith(\"I\"))\n          \
    \      cnt++;\n        }\n        return cnt;", "        // You have to write\
    \ this.\n        return S.split(\"[.?!]\").stream().filter(a -> a.trim().startsWith(\"\
    I\")).count();", "        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n \
    \       return Arrays.stream(sentences)\n            .filter(s -> s.startsWith(\"\
    I\"))\n            .count();", "        return Arrays.stream(S.split(\"[.?!]\"\
    ))\n            .filter(x -> x.trim().startsWith(\"I\"))\n            .count();",
  "        long result = 0l;\n        String[] words = S.split(\"[\\\\.\\\\?\\\\!]\"\
    );\n        for (String word : words) {\n            if (word.startsWith(\"I\"\
    )) {\n                result += 1;\n            }\n        }\n        return result;",
  "        return Stream.of(S.split(\"[.!?]\"))\n            .filter(x -> x.trim().startsWith(\"\
    I\"))\n            .count();", "        long boredoms = 0;\n        String[] sentences\
    \ = S.split(\"[?.!]\");\n        for (String sentence : sentences) {\n       \
    \     String[] words = sentence.split(\"\\\\s+\");\n            if (words.length\
    \ > 0 && words[0].equals(\"I\")) {\n                boredoms++;\n            }\n\
    \        }\n        return boredoms;", "        // Fill in your code here\n  \
    \      String [] sentences = S.split(\"[.?!]\");\n        long count = 0;\n  \
    \      for (String s : sentences) {\n            if (s.trim().startsWith(\"I\"\
    )) {\n                count++;\n            }\n        }\n        return count;",
  "        S = S.replaceAll(\"[.?!]\", \"$0 \");\n        S = S.replaceAll(\"\\\\\
    s+\", \" \");\n        String[] tokens = S.split(\" \");\n        return Arrays.stream(tokens).filter(s\
    \ -> s.equals(\"I\")).count();", "        final long I = (long) 'I';\n       \
    \ final long BORED = (long) 'B';\n        long isBored = 0;\n        long total\
    \ = 0;\n        long i = 0;\n        while (i < S.length()) {\n            char\
    \ ch = S.charAt((int) i);\n            total += (long) ch;\n            if (ch\
    \ == '.' || ch == '?' || ch == '!') {\n                if (total == I) {\n   \
    \                 isBored++;\n                }\n                total = 0;\n\
    \            }\n            i++;\n        }\n        return isBored;", "     \
    \   int count = 0;\n        for (String sentence : S.split(\"\\\\.|\\\\?|\\\\\
    !\")) {\n            if (sentence.trim().startsWith(\"I\")) {\n              \
    \  count++;\n            }\n        }\n        return count;", "        return\
    \ Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n                     .filter(s\
    \ -> s.startsWith(\"I\"))\n                     .count();", "        List<String>\
    \ sentences = Arrays.asList(S.split(\"[.!?]\"));\n        return sentences.stream().filter(s\
    \ -> s.startsWith(\"I\")).count();", "        String[] sentences = S.split(\"\
    [.?!]\");\n        long total = 0;\n        for (String sentence : sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                total += 1;\n\
    \            }\n        }\n        return total;", "        long n = 0l;\n   \
    \     String[] sentences = S.split(\"[.?!]\");\n        for (String sentence :\
    \ sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n       \
    \         n++;\n            }\n        }\n        return n;", "        // Write\
    \ your code here.\n        String startWith = \"\";\n        String[] words =\
    \ S.split(\"[.?!]\");\n        String[] boredWords = new String[words.length];\n\
    \        int i = 0;\n        for (String word : words) {\n            String[]\
    \ wordsArr = word.split(\" \");\n            if (wordsArr.length > 0) {\n    \
    \            startWith = wordsArr[0];\n            } else {\n                startWith\
    \ = \"\";\n            }\n            if (startWith.equals(\"I\")) {\n       \
    \         boredWords[i] = word;\n                i++;\n            }\n       \
    \ }\n        return boredWords.length;", "        String[] sentences = S.split(\"\
    [\\\\.?!]\");\n        long cnt = 0;\n        for (String sentence : sentences)\
    \ {\n            String[] words = sentence.split(\" \");\n            if (words.length\
    \ > 0 && words[0].equals(\"I\")) {\n                cnt++;\n            }\n  \
    \      }\n        return cnt;", "      long count = 0;\n      for (String s :\
    \ S.split(\"[.?!]\")) {\n        if (s.startsWith(\"I\")) count++;\n      }\n\
    \      return count;", '        return S.split("\\.|\\?|\\!").length;', '        return
    (long) Arrays.stream(S.split("[.?!]")).filter(s -> s.trim().startsWith("I")).count();',
  "        List<String> sentences = Arrays.asList(S.split(\"[.!?]\"));\n        return\
    \ sentences.stream().filter(s -> !s.isEmpty() && s.trim().startsWith(\"I\")).count();",
  "        int result = 0;\n        String[] splitS = S.split(\"[\\\\.|\\\\?|!]\"\
    );\n        for (String x : splitS) {\n            String[] splitX = x.split(\"\
    \ \");\n            if (splitX[0].equals(\"I\")) {\n                result +=\
    \ 1;\n            }\n        }\n        return result;", "        return Stream.of(S.split(\"\
    [.!?]\"))\n                     .filter(sentence -> sentence.trim().startsWith(\"\
    I\"))\n                     .count();", "        long count = 0;\n        String[]\
    \ words = S.split(\"[.?!]\");\n        for (String word : words) {\n         \
    \   String[] words2 = word.split(\" \");\n            if (words2.length == 0)\
    \ continue;\n            if (words2[0].equals(\"I\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        return Stream.of(S.split(\"\
    [.?!]\"))\n                .filter(x -> !x.isEmpty())\n                .filter(x\
    \ -> x.trim().toLowerCase().startsWith(\"i\"))\n                .count();", " \
    \       String regex = \"(?i)^I\\\\b.*\\\\.$\";\n        String[] sentence = S.split(\"\
    \\\\s*[!?.]\\\\s*\");\n        long boredom = 0;\n        for (String word : sentence)\
    \ {\n            Pattern pattern = Pattern.compile(regex);\n            Matcher\
    \ matcher = pattern.matcher(word);\n            if (matcher.find())\n        \
    \        boredom++;\n        }\n        return boredom;", '        return Arrays.stream(S.split("\\.")).map(s
    -> s.split("!")).flatMap(Arrays::stream).map(s -> s.split("\\?")).flatMap(Arrays::stream).filter(s
    -> s.trim().startsWith("I")).count();', "        return (long) Arrays.stream(S.split(\"\
    [\\\\.\\\\?!]\"))\n            .filter(s -> s.trim().startsWith(\"I\"))\n    \
    \        .count();", "        long count = 0;\n        String[] sentences = S.split(\"\
    [.?!]\");\n        for (String sentence : sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  '        return Arrays.stream(S.split("[.?!]")).filter(s -> s.trim().startsWith("I")).count();',
  "        long boredoms = 0;\n        String[] sentences = S.split(\"\\\\?\");\n\
    \        for (String sentence : sentences) {\n            // System.out.println(sentence);\n\
    \            String[] words = sentence.split(\" \");\n            String firstWord\
    \ = words[0];\n            // System.out.println(firstWord);\n            if (firstWord.equals(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        return Arrays.stream(S.split(\"[?!.]\"))\n            .filter(s\
    \ -> !s.isEmpty())\n            .filter(s -> s.trim().startsWith(\"I\"))\n   \
    \         .count();", '        return Stream.of(S.split("[?!.]")).filter(x ->
    x.startsWith("I")).count();', "        long cnt = 0;\n        boolean bored =\
    \ false;\n        for (int i = 0; i < S.length(); i++) {\n            if (bored)\
    \ {\n                if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i)\
    \ == '!')\n                    bored = false;\n            } else {\n        \
    \        if (S.charAt(i) == 'I')\n                    bored = true;\n        \
    \    }\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i)\
    \ == '!')\n                cnt++;\n        }\n        return cnt;", "        return\
    \ Arrays.stream(S.split(\"[\\\\.\\\\?!]\"))\n            .filter(s -> s.startsWith(\"\
    I\"))\n            .count();", "        S = S.trim();\n        return Arrays.stream(S.split(\"\
    \\\\.|\\\\?|!\"))\n            .filter(p -> p.trim().startsWith(\"I\"))\n    \
    \        .count();", "        // Input:\n        // S - A string of words\n  \
    \      // Output:\n        // The number of boredoms in the string\n        int\
    \ boredoms = 0;\n        for (String sentence : S.split(\"\\\\.|\\\\?|\\\\!\"\
    )) {\n            String[] words = sentence.split(\" \");\n            if (words.length\
    \ > 0 && words[0].equals(\"I\")) {\n                boredoms++;\n            }\n\
    \        }\n        return boredoms;", "        return Stream.of(S.split(\"[.?!]\"\
    ))\n            .filter(s -> !s.isEmpty())\n            .filter(s -> s.split(\"\
    \ \")[0].equals(\"I\"))\n            .count();", "        return Arrays.stream(S.split(\"\
    \\\\.|\\\\?|\\\\!\"))\n                .filter(s -> s.matches(\"(^\\\\s*)?I.*\"\
    ))\n                .count();", '        return Arrays.stream(S.split("[.?!]")).filter(s
    -> s.startsWith("I")).count();', "        if (S == null || S.isEmpty()) {\n  \
    \          return 0;\n        }\n        long boredoms = 0;\n        String[]\
    \ array = S.split(\"[.?!]\");\n        for (String str : array) {\n          \
    \  if (str.trim().startsWith(\"I\")) {\n                boredoms++;\n        \
    \    }\n        }\n        return boredoms;", "        return Arrays.stream(S.split(\"\
    [.?!]\"))\n                .filter(s -> s.trim().startsWith(\"I\")).count();",
  "        return Stream.of(S.split(\"[.!?]\"))\n            .filter(s -> s.trim().startsWith(\"\
    I\"))\n            .count();", "        return Arrays.stream(S.split(\"[.!?]\"\
    ))\n        .filter(v -> v.trim().startsWith(\"I\"))\n        .count();", "  \
    \      S = S.trim();\n        S = S.toLowerCase();\n        String[] words = S.split(\"\
    [.?!]+\");\n        return Arrays.stream(words).filter(word -> word.startsWith(\"\
    i\")).count();", "        return Arrays.stream(S.split(\"[!?.]\"))\n         \
    \   .filter(s -> s.matches(\"\\\\s*I.*\"))\n            .count();", '        return
    Arrays.stream(S.split("[.?!]")).map(String::trim).filter(s -> s.length() > 0).filter(s
    -> s.startsWith("I")).count();', "        return Stream.of(S.split(\"\\\\.|\\\\\
    ?|\\\\!\"))\n            .filter(s -> s.startsWith(\"I\"))\n            .count();",
  "        // TODO: Implement me\n        return 0l;", "        return Arrays.stream(S.split(\"\
    \\\\.|\\\\?|\\\\!\"))\n            .filter(s -> !s.trim().isEmpty())\n       \
    \     .filter(s -> s.trim().startsWith(\"I\")).count();", '        return Arrays.stream(S.split("[.?!]")).filter(i
    -> i.trim().startsWith("I")).count();', '        return Arrays.stream(S.split("[.?!]")).filter(s
    -> s.startsWith("I")).count();', "        var sen = S.split(\"[.!?]\");\n    \
    \    return Stream.of(sen).filter(s -> s.trim().startsWith(\"I\")).count();",
  "        int count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n    \
    \    for (String s : sentences) {\n            if (s.length() > 0 && s.charAt(0)\
    \ == 'I') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        return Arrays.stream(S.split(\"[.?!]\"))\n               \
    \ .filter(s -> s.startsWith(\"I\"))\n                .count();", "        String[]\
    \ st = S.split(\"\\\\.\");\n        int i = 0;\n        for (String s : st) {\n\
    \            if (s.indexOf(\"I\") == 0) {\n                i++;\n            }\n\
    \        }\n        return i;", '        return Stream.of(S.split("[?!.]")).filter(s
    -> s.trim().startsWith("I")).count();', "        if(S.length() == 0) return 0;\n\
    \        String[] splitted = S.split(\"\\\\.\");\n        int count = 0;\n   \
    \     for(String s : splitted) {\n            if(s.startsWith(\"I\")) {\n    \
    \            count++;\n            }\n        }\n        return count;", '        return
    Arrays.stream(S.split("[.!?]")).filter(s -> s.startsWith("I")).count();', "  \
    \      // long res = 0;\n        // long i = 0;\n        // long len = S.length();\n\
    \        // while (i < len) {\n        //     if (S.charAt((int)i) == 'I') {\n\
    \        //         res = res + 1;\n        //     }\n        //     else if (S.charAt((int)i)\
    \ == '.' || S.charAt((int)i) == '?' || S.charAt((int)i) == '!') {\n        //\
    \         ;\n        //     }\n        //     else {\n        //         while\
    \ (i < len && S.charAt((int)i) != '.' && S.charAt((int)i) != '?' && S.charAt((int)i)\
    \ != '!') {\n        //             i = i + 1;\n        //         }\n       \
    \ //     }\n        //     i = i + 1;\n        // }\n        // return res;\n\
    \        String[] words = S.split(\"[.?!]\");\n        long res = 0;\n       \
    \ for (int i = 0; i < words.length; i++) {\n            String[] letters = words[i].split(\"\
    \ \");\n            if (letters.length > 0 && letters[0].equals(\"I\")) {\n  \
    \              res = res + 1;\n            }\n        }\n        return res;",
  "        String[] sentences = S.split(\"\\\\?|\\\\.|!\");\n        int count = 0;\n\
    \        for (String sentence : sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        int count = 0;\n        String[] arr = S.split(\"[.?!]\");\n        for\
    \ (String s : arr) {\n            String[] arr2 = s.split(\" \");\n          \
    \  for (String s2 : arr2) {\n                if (s2.equals(\"I\")) {\n       \
    \             count++;\n                    break;\n                }\n      \
    \      }\n        }\n        return count;", "        long count = 0;\n      \
    \  for (String sentence : S.split(\"\\\\.|\\\\?|\\\\!\")) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  '        return 0;', "        return Arrays.stream(S.split(\"[.?!]\"))\n       \
    \         .filter(s -> s.matches(\"^(?i)i.*\"))\n                .count();", '        return
    Stream.of(S.split("[.?!]")).filter(s -> s.trim().startsWith("I")).count();', " \
    \       long c=0;\n        int i=0;\n        while(i<S.length()){\n          \
    \  while(i<S.length() && S.charAt(i)!='I')\n                i++;\n           \
    \ if(i>=S.length())\n                break;\n            c++;\n            while(i<S.length()\
    \ && S.charAt(i)!='.' && S.charAt(i)!='?' && S.charAt(i)!='!')\n             \
    \   i++;\n            if(i>=S.length())\n                break;\n            i++;\n\
    \        }\n        return c;", "        return Arrays.stream(S.split(\"[!?.]\"\
    ))\n            .filter(x -> x.trim().startsWith(\"I\"))\n            .count();",
  '        return Arrays.stream(S.split("[.!?]")).filter(x -> x.startsWith("I")).count();',
  "        return Arrays.stream(S.split(\"[.?!]\"))\n            .filter(s -> s.trim().startsWith(\"\
    I\")).count();", '        return Arrays.stream(S.split("[.!?]")).filter(x -> x.startsWith("I")).count();',
  "        String[] a = S.split(\"[.!?]\");\n        long c = 0;\n        for (String\
    \ s : a) {\n            if (s.trim().startsWith(\"I\")) {\n                c++;\n\
    \            }\n        }\n        return c;", "        // ...\n        return\
    \ Stream.of(S.split(\"[!?.]\"))\n                     .filter(s -> s.trim().startsWith(\"\
    I\")).count();", "      return Stream.of(S.split(\"[!?.]\"))\n        .filter(s\
    \ -> s.trim().startsWith(\"I\"))\n        .count();", '        return Stream.of(S.split("[.?!]")).map(s
    -> s.trim()).filter(s -> s.startsWith("I")).count();', "        var x = Arrays.stream(S.split(\"\
    \\\\.|\\\\?|!\"))\n            .filter(y -> y.startsWith(\"I\")).count();\n  \
    \      return x;", "        return Arrays.stream(S.split(\"[.?!]\"))\n       \
    \              .filter(s -> s.matches(\"^\\\\s*I.+\"))\n                     .count();",
  "        List<String> words = Arrays.asList(S.split(\" \"));\n        long num =\
    \ 0;\n        for (int i = 0; i < words.size(); i++) {\n            if (words.get(i).equals(\"\
    I\")) {\n                num++;\n            }\n        }\n        return num;",
  "        return Stream.of(S.split(\"[.?!]\"))\n            .filter(s -> s.trim().startsWith(\"\
    I\"))\n            .count();", "        // Your code here.\n        String[] strings\
    \ = S.split(\"\\\\.\");\n        long num = 0;\n        for (String str : strings)\
    \ {\n            String[] arr = str.split(\" \");\n            String first =\
    \ arr[0];\n            if (first.equals(\"I\")) {\n                num++;\n  \
    \          }\n        }\n        return num;", "        long ret = 0l;\n     \
    \   for (String s : S.split(\"[.!?]\")) {\n            if (s.trim().startsWith(\"\
    I\"))\n                ret++;\n        }\n        return ret;", '        // Your
    code here', "        String[] arr = S.split(\"[.?!]\");\n        return Arrays.stream(arr).filter(x\
    \ -> x.startsWith(\"I\")).count();", "        // BEGIN SOLUTION\n        return\
    \ Stream.of(S.split(\"[.?!]\")).map(s -> s.trim()).filter(s -> s.startsWith(\"\
    I\")).count();\n        // END SOLUTION", '        return Stream.of(S.split("[?!.]")).map(s
    -> s.trim()).filter(s -> s.startsWith("I")).count();', "        long result =\
    \ 0;\n        for (String sentence : S.split(\"[.?!]\")) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                result++;\n            }\n        }\n        return result;",
  '        return 0;', "        return Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"\
    ))\n                .filter(x -> x.trim().length() > 0)\n                .filter(x\
    \ -> x.trim().startsWith(\"I\"))\n                .count();", "        return\
    \ Stream.of(S.split(\"[.?!]\"))\n                     .filter(w -> w.trim().startsWith(\"\
    I\"))\n                     .count();", "        String[] words = S.split(\"\\\
    \\.|\\\\?|\\\\!\");\n        int total = 0;\n        for (String word : words)\
    \ {\n            if (word.startsWith(\"I\")) {\n                total++;\n   \
    \         }\n        }\n        return total;", "        List<String> sa = Arrays.asList(S.split(\"\
    [!?.]\"));\n        List<String> sb = new ArrayList<>();\n        for (String\
    \ s : sa) {\n            if (s.length() > 0) {\n                sb.add(s);\n \
    \           }\n        }\n        return sb.stream().filter(x -> x.trim().startsWith(\"\
    I\")).count();", "        return Arrays.stream(S.split(\"\\\\.|\\\\?|\\\\!\"))\n\
    \                .filter(s -> s.startsWith(\"I\"))\n                .count();",
  '        return Arrays.stream(S.split("[.!?]")).filter(x -> x.startsWith("I")).count();',
  "        final long N = S.length();\n        long count = 0;\n        // No need\
    \ to do anything fancy. Just scan the string and count\n        // the number\
    \ of 'I'\n        for (int i = 0; i < N; i++) {\n            if (S.charAt(i) ==\
    \ 'I') {\n                count++;\n            }\n        }\n        return count;",
  "        // Replace the next line with your solution.\n        return 0l;", "  \
    \      long boredoms = 0;\n        char[] chars = S.toCharArray();\n        String\
    \ buffer = \"\";\n        for (int i = 0; i < chars.length; i++) {\n         \
    \   if (chars[i] == '.' || chars[i] == '?' || chars[i] == '!') {\n           \
    \     if (buffer.startsWith(\"I\")) {\n                    boredoms++;\n     \
    \           }\n                buffer = \"\";\n            } else {\n        \
    \        buffer += chars[i];\n            }\n        }\n        return boredoms;",
  "        long count = 0;\n        for (String sentence : S.split(\"[.?!]\")) {\n\
    \            String[] words = sentence.split(\" \");\n            if (words.length\
    \ >= 1 && words[0].equals(\"I\")) {\n                count++;\n            }\n\
    \        }\n        return count;", "        Pattern p = Pattern.compile(\"I.+?[.?!]\"\
    );\n        Matcher m = p.matcher(S);\n        long s = 0;\n        while (m.find())\
    \ {\n            s++;\n        }\n        return s;"]
stop_tokens:
- "\n    }\n"
