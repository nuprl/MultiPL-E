language: java
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] split = s.split(\" \");\n        ArrayList<String> list\
    \ = new ArrayList<String>();\n        for (String word : split) {\n          \
    \  if (countConsonants(word) == n) {\n                list.add(word);\n      \
    \      }\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzlpuefpp.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            long\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_x278eet.java:46)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        //TODO\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmp7l71pcdh.java:30)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new RuntimeException(\"not implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.selectWords(tmpqf2kayqi.java:26)\n\tat Problem.main(tmpqf2kayqi.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  if (getNumberOfConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyliktdaf.java:29: error: cannot find symbol\n            if (getNumberOfConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method getNumberOfConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // t: O(N), s: O(N)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        long cons = 0;\n        boolean b = false;\n        String word = \"\"\
    ;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i)\
    \ == ' ') {\n                if (cons == n) {\n                    words.add(word);\n\
    \                }\n                cons = 0;\n                word = \"\";\n\
    \                b = false;\n            } else {\n                if (!isVowel(s.charAt(i)))\
    \ {\n                    cons++;\n                }\n                word += s.charAt(i);\n\
    \            }\n        }\n        if (cons == n) {\n            words.add(word);\n\
    \        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptpikxra4.java:40: error: cannot find symbol\n                if\
    \ (!isVowel(s.charAt(i))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ str = s.split(\" \");\n        for (int i = 0; i < str.length; i++) {\n    \
    \        int len = 0;\n            String word = str[i];\n            char[] chars\
    \ = word.toCharArray();\n            for (int j = 0; j < chars.length; j++) {\n\
    \                if (!isVowel(chars[j])) {\n                    len++;\n     \
    \           }\n            }\n            if (len == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan0cqxnr.java:33: error: cannot find symbol\n                if\
    \ (!isVowel(chars[j])) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] a = s.split(\" \");\n        ArrayList<String> L = new ArrayList<String>();\n\
    \        for (String w : a) {\n            if (w.length() == n) {\n          \
    \      L.add(w);\n            }\n        }\n        return L;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0s33bkr3.java:36)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String [] splittedString = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ wordsWithNConsonants = new ArrayList<String>();\n        for (String word :\
    \ splittedString) {\n            long numberOfConsonants = countConsonants(word);\n\
    \            if (numberOfConsonants == n) {\n                wordsWithNConsonants.add(word);\n\
    \            }\n        }\n        return wordsWithNConsonants;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpinv7ck41.java:29: error: cannot find symbol\n            long numberOfConsonants\
    \ = countConsonants(word);\n                                      ^\n  symbol:\
    \   method countConsonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        List<String>\
    \ words = Arrays.asList(s.split(\"\\\\s+\"));\n        for (String w : words)\
    \ {\n            long count = 0l;\n            char[] chs = w.toCharArray();\n\
    \            for (char c : chs) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    count += 1l;\n    \
    \            }\n            }\n            if (count == n) {\n               \
    \ res.add(w);\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoz9xw6t5.java:47)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ consonants = new ArrayList<String>(Arrays.asList(\"B\", \"C\", \"D\", \"F\"\
    , \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"));\n        String[] array = s.split(\"\
    \ \");\n        for (String word : array) {\n            int counter = 0;\n  \
    \          for (String c : consonants) {\n                counter += (int) word.chars().filter(ch\
    \ -> ch == c.charAt(0)).count();\n            }\n            if (counter == n)\
    \ {\n                words.add(word);\n            }\n        }\n        return\
    \ words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6r0dxx11.java:41)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    long num_consonants = 0;\n            char[] chars = word.toCharArray();\n\
    \            for (char ch : chars) {\n                if (ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u') {\n                    continue;\n \
    \               }\n                num_consonants += 1;\n            }\n     \
    \       if (num_consonants == n) {\n                result.add(word);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ssouatp.java:48)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Implement this function\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5j5d8pzl.java:30)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmp9w9cru6r.java:32)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your implementation here\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqnkez1cb.java:30)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ans = new ArrayList<String>();\n        // Write\
    \ your code here\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_9zlke0.java:31)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String word : s.split(\" \")) {\n            if (consonantsCount(word) == n)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwv2shd1d.java:28: error: cannot find symbol\n            if (consonantsCount(word)\
    \ == n) {\n                ^\n  symbol:   method consonantsCount(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Assume the input string contains only letters and spaces.\n  \
    \      if (s.length() == 0) {\n            return new ArrayList<String>();\n \
    \       }\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         long consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (isConsonant(word.charAt(i))) {\n               \
    \     consonants++;\n                }\n            }\n            if (consonants\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpanvo3ijw.java:35: error: cannot find symbol\n                if\
    \ (isConsonant(word.charAt(i))) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.isEmpty())\
    \ return words;\n        String[] wordsInS = s.split(\"\\\\s+\");\n        for\
    \ (String word : wordsInS) {\n            if (isConsonant(word, n)) words.add(word);\n\
    \        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnsrywva5.java:30: error: cannot find symbol\n            if (isConsonant(word,\
    \ n)) words.add(word);\n                ^\n  symbol:   method isConsonant(String,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> arr = new ArrayList<String>();\n        String[]\
    \ strs = s.split(\"\\\\s+\");\n        for (String str : strs) {\n           \
    \ if (numConsonants(str) == n) {\n                arr.add(str);\n            }\n\
    \        }\n        return arr;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_bp_rpw.java:29: error: cannot find symbol\n            if (numConsonants(str)\
    \ == n) {\n                ^\n  symbol:   method numConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            String\
    \ wordInLowerCase = word.toLowerCase();\n            long consonants = 0l;\n \
    \           for (char c : wordInLowerCase.toCharArray()) {\n                switch\
    \ (c) {\n                    case 'a':\n                    case 'e':\n      \
    \              case 'i':\n                    case 'o':\n                    case\
    \ 'u':\n                        break;\n                    default:\n       \
    \                 consonants++;\n                        break;\n            \
    \    }\n            }\n            if (consonants == n) {\n                ret.add(word);\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String w : words) {\n           \
    \ int count = 0;\n            for (int i = 0; i < w.length(); i++) {\n       \
    \         if (\"aeiou\".indexOf(w.charAt(i)) == -1) count++;\n            }\n\
    \            if (count == n) res.add(w);\n        }\n        return res;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1c6xclb8.java:42)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        Stream.of(s.split(\"\
    \\\\s\")).filter(s1 -> {\n            long numberOfConsonants = s1.toLowerCase().chars().filter(c\
    \ -> c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').count();\n    \
    \        return numberOfConsonants == n;\n        }).forEach(result::add);\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new RuntimeException(\"Not implemented!\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented!\n\
    \tat Problem.selectWords(tmpf1s79su6.java:26)\n\tat Problem.main(tmpf1s79su6.java:29)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Implement the function here\n        return null;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmp4pgi6jdk.java:30)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String\
    \ [] words = s.split(\" \");\n        for (String word : words) {\n          \
    \  if (word.length() != 0 && getNumOfConsonants(word) == n) {\n              \
    \  result.add(word);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxttrvdd2.java:29: error: cannot find symbol\n            if (word.length()\
    \ != 0 && getNumOfConsonants(word) == n) {\n                                 \
    \     ^\n  symbol:   method getNumOfConsonants(String)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ans = new ArrayList<String>();\n        for (String\
    \ w : s.split(\"\\\\s+\"))\n            if (countConsonants(w) == n)\n       \
    \         ans.add(w);\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplf4132_9.java:28: error: cannot find symbol\n            if (countConsonants(w)\
    \ == n)\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> arr = new ArrayList<String>();\n        // write\
    \ your code here ...\n        return arr;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpel02k958.java:31)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        int\
    \ counter = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if\
    \ (counter == n) {\n                counter = 0;\n                String word\
    \ = \"\";\n                while (i < s.length() && Character.isLetter(s.charAt(i)))\
    \ {\n                    word += s.charAt(i);\n                    i++;\n    \
    \            }\n                result.add(word);\n            }\n           \
    \ counter += isVowel(s.charAt(i)) ? -1 : 1;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprcjktvtj.java:38: error: cannot find symbol\n            counter\
    \ += isVowel(s.charAt(i)) ? -1 : 1;\n                       ^\n  symbol:   method\
    \ isVowel(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n    }\n}\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7habttg9.java:28: error: class, interface, enum, or record expected\n\
    \    }\n    ^\n/tmp/tmp7habttg9.java:29: error: class, interface, enum, or record\
    \ expected\n    public static void main(String[] args) {\n                  ^\n\
    /tmp/tmp7habttg9.java:31: error: as of release 1.4, 'assert' is a keyword, and\
    \ may not be used as an identifier\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Mary\"\
    , (String)\"lamb\")))));\n    ^\n/tmp/tmp7habttg9.java:32: error: as of release\
    \ 1.4, 'assert' is a keyword, and may not be used as an identifier\n    assert(selectWords((\"\
    simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    ^\n/tmp/tmp7habttg9.java:33: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"Hello world\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\")))));\n\
    \    ^\n/tmp/tmp7habttg9.java:34: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"Uncle sam\"\
    ), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"Uncle\")))));\n\
    \    ^\n/tmp/tmp7habttg9.java:35: error: as of release 1.4, 'assert' is a keyword,\
    \ and may not be used as an identifier\n    assert(selectWords((\"\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList()))));\n    ^\n/tmp/tmp7habttg9.java:36: error:\
    \ as of release 1.4, 'assert' is a keyword, and may not be used as an identifier\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    ^\n/tmp/tmp7habttg9.java:37:\
    \ error: class, interface, enum, or record expected\n    }\n    ^\n9 errors\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> xs = new ArrayList<String>();\n        String x\
    \ = new String(\"\");\n        for (int j = 0; j < s.length(); j++) {\n      \
    \      String y = String.valueOf(s.charAt(j));\n            if (y.equals(\" \"\
    )) {\n                xs.add(x);\n                x = new String(\"\");\n    \
    \        } else {\n                x = x + y;\n            }\n        }\n    \
    \    xs.add(x);\n        ArrayList<String> rs = new ArrayList<String>();\n   \
    \     for (int i = 0; i < xs.size(); i++) {\n            String t = xs.get(i);\n\
    \            int c = 0;\n            for (int j = 0; j < t.length(); j++) {\n\
    \                String y = String.valueOf(t.charAt(j));\n                if (y.equals(\"\
    a\") || y.equals(\"e\") || y.equals(\"i\") || y.equals(\"o\") || y.equals(\"u\"\
    )) {\n                    c = c + 1;\n                }\n            }\n     \
    \       if (c == n) {\n                rs.add(t);\n            }\n        }\n\
    \        return rs;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_pz27oa2.java:55)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        if (s.length()\
    \ == 0) {\n            return res;\n        }\n        char[] consonants = new\
    \ char[]{'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'z'};\n        List<Character> cons = new ArrayList<Character>();\n\
    \        for (char c : consonants) {\n            cons.add(c);\n        }\n  \
    \      String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            long count = 0;\n            for (char c : word.toCharArray()) {\n\
    \                if (cons.contains(c)) {\n                    count++;\n     \
    \           }\n            }\n            if (count == n) {\n                res.add(word);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuu65kou3.java:51)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (n\
    \ == 0) {\n            return result;\n        }\n        if (s.equals(\"\"))\
    \ {\n            return result;\n        }\n        char[] arr = s.toCharArray();\n\
    \        int start = 0;\n        int end = 0;\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (arr[i] == ' ') {\n                end = i;\n       \
    \         String word = s.substring(start, end);\n                if (consonants(word)\
    \ == n) {\n                    result.add(word);\n                }\n        \
    \        start = i + 1;\n            }\n        }\n        if (start < arr.length)\
    \ {\n            String word = s.substring(start, arr.length);\n            if\
    \ (consonants(word) == n) {\n                result.add(word);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiii9dvy2.java:40: error: cannot find symbol\n                if\
    \ (consonants(word) == n) {\n                    ^\n  symbol:   method consonants(String)\n\
    \  location: class Problem\n/tmp/tmpiii9dvy2.java:48: error: cannot find symbol\n\
    \            if (consonants(word) == n) {\n                ^\n  symbol:   method\
    \ consonants(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String word : s.split(\"\\\\s+\")) {\n            long c = Arrays.stream(word.split(\"\
    \")).filter(e -> !\"aeiouAEIOU\".contains(e)).count();\n            if (c == n)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        ArrayList<String> list\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  if (consonantsInWord(word) == n) {\n                list.add(word);\n     \
    \       }\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2951k0c5.java:29: error: cannot find symbol\n            if (consonantsInWord(word)\
    \ == n) {\n                ^\n  symbol:   method consonantsInWord(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> t = new ArrayList<String>();\n        s = s.toLowerCase();\n\
    \        for (String word : s.split(\" \")) {\n            long c = 0;\n     \
    \       for (int i = 0; i < word.length(); i++) {\n                char ch = word.charAt(i);\n\
    \                if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch !=\
    \ 'u')\n                    c++;\n            }\n            if (c == n)\n   \
    \             t.add(word);\n        }\n        return t;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vno464r.java:42)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ supported yet.\n\tat Problem.selectWords(tmpuy2c1spq.java:26)\n\tat Problem.main(tmpuy2c1spq.java:29)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> al = new ArrayList<String>();\n        String[]\
    \ temp = s.split(\" \");\n        for (String s : temp) {\n            if (countConsonants(s)\
    \ == n) {\n                al.add(s);\n            }\n        }\n        return\
    \ al;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6i65r7zp.java:28: error: variable s is already defined in method\
    \ selectWords(String,long)\n        for (String s : temp) {\n                \
    \    ^\n/tmp/tmp6i65r7zp.java:29: error: cannot find symbol\n            if (countConsonants(s)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String w : s.split(\" \")) {\n            if (w.length() - countVowels(w) ==\
    \ n) {\n                result.add(w);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyrcmnky.java:28: error: cannot find symbol\n            if (w.length()\
    \ - countVowels(w) == n) {\n                             ^\n  symbol:   method\
    \ countVowels(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> output = new ArrayList<String>();\n        if (s.length()\
    \ == 0l) return output;\n        String[] strings = s.split(\" \");\n        String\
    \ vowels = \"AEIOUaeiou\";\n        for (String word : strings) {\n          \
    \  int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n   \
    \             if (vowels.indexOf(word.charAt(i)) == -1) count++;\n           \
    \ }\n            if (count == n) output.add(word);\n        }\n        return\
    \ output;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> r = new ArrayList<String>();\n        ArrayList<String>\
    \ w = new ArrayList<String>(Arrays.asList(s.split(\" \")));\n        for (String\
    \ v : w) {\n            if (v.replaceAll(\"[aeiouAEIOU]\", \"\").length() == n)\
    \ {\n                r.add(v);\n            }\n        }\n        return r;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        // Implementation\
    \ of selectWords here\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy35_qtnw.java:31)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \n        // \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \n        // \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \n        // \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \n        // \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \n       \
    \ return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiu5k9pix.java:34)\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        ArrayList<String> list\
    \ = new ArrayList<String>();\n        for (String w : words) {\n            if\
    \ (consonants(w) == n) {\n                list.add(w);\n            }\n      \
    \  }\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeo_conce.java:29: error: cannot find symbol\n            if (consonants(w)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> consonants = new ArrayList<String>();\n       \
    \ if (s.length() > 0) {\n            String[] words = s.split(\"\\\\s+\");\n \
    \           for (String word : words) {\n                int count = 0;\n    \
    \            for (int i = 0; i < word.length(); i++) {\n                    switch\
    \ (word.charAt(i)) {\n                        case 'b':\n                    \
    \    case 'c':\n                        case 'd':\n                        case\
    \ 'f':\n                        case 'g':\n                        case 'h':\n\
    \                        case 'j':\n                        case 'k':\n      \
    \                  case 'l':\n                        case 'm':\n            \
    \            case 'n':\n                        case 'p':\n                  \
    \      case 'q':\n                        case 'r':\n                        case\
    \ 's':\n                        case 't':\n                        case 'v':\n\
    \                        case 'w':\n                        case 'x':\n      \
    \                  case 'y':\n                        case 'z':\n            \
    \                count++;\n                            break;\n              \
    \          default:\n                            break;\n                    }\n\
    \                }\n                if (count == n) {\n                    consonants.add(word);\n\
    \                }\n            }\n        }\n        return consonants;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrsm5d8x.java:69)\n"
  stdout: ''
  timestamp: 1659977182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String\
    \ cons = \"bcdfghjklmnpqrstvwxyz\";\n        String vowels = \"aeiou\";\n    \
    \    ArrayList<String> selected = new ArrayList<String>();\n        int count\
    \ = 0;\n        for (String word : s.split(\" \")) {\n            for (int i =\
    \ 0; i < word.length(); i++) {\n                if (cons.contains(word.substring(i,\
    \ i + 1))) {\n                    count++;\n                }\n            }\n\
    \            if (count == n) {\n                selected.add(word);\n        \
    \    }\n            count = 0;\n        }\n        return selected;\n    }\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6ypyrva.java:46)\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // type your solution here\n        ArrayList<String> list = new\
    \ ArrayList<String>();\n        String[] words = s.split(\" \");\n        for\
    \ (String word : words) {\n            if (consonants(word) == n) {\n        \
    \        list.add(word);\n            }\n        }\n        return list;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxo6ej5m1.java:30: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> selectedWords = new ArrayList<String>();\n    \
    \    String[] words = s.split(\" \");\n        for (String word : words) {\n \
    \           if (countConsonants(word) == n) {\n                selectedWords.add(word);\n\
    \            }\n        }\n        return selectedWords;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2pc1d46.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // // write the body of your function here\n        // return new\
    \ ArrayList<String>();\n        List<String> splitStr = Arrays.asList(s.split(\"\
    \ \"));\n        ArrayList<String> resList = new ArrayList<String>();\n      \
    \  for (String str : splitStr) {\n            if (str.chars().filter(ch -> \"\
    aeiouAEIOU\".indexOf(ch) < 0).count() == n) {\n                resList.add(str);\n\
    \            }\n        }\n        return resList;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ return result;\n        String[] words = s.split(\" \");\n        for (String\
    \ word : words) {\n            if (conutConsonants(word) == n) result.add(word);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppnf_ca5s.java:30: error: cannot find symbol\n            if (conutConsonants(word)\
    \ == n) result.add(word);\n                ^\n  symbol:   method conutConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // { write your code here }\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpze9zyr1f.java:30)\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code goes here\n        ArrayList<String> r = new ArrayList<String>();\n\
    \        String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            long nc = 0l;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    continue;\n\
    \                }\n                nc += 1l;\n            }\n            if (nc\
    \ == n) {\n                r.add(word);\n            }\n        }\n        return\
    \ r;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1lkykzo.java:49)\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (Problem.countConsonants(word) == n) {\n                ret.add(word);\n   \
    \         }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq7v8nyq9.java:29: error: cannot find symbol\n            if (Problem.countConsonants(word)\
    \ == n) {\n                       ^\n  symbol:   method countConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> l = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String w : words) {\n            String[]\
    \ letters = w.split(\"\");\n            String[] cons = new String[letters.length];\n\
    \            int cons_idx = 0;\n            for (String letter : letters) {\n\
    \                if (!(\"aeiou\".contains(letter))) {\n                    cons[cons_idx]\
    \ = letter;\n                    cons_idx += 1;\n                }\n         \
    \   }\n            if (cons_idx == n) {\n                l.add(w);\n         \
    \   }\n        }\n        return l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6rh1dlcv.java:49)\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubsjm50m.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    if (consonants(word) == n) {\n                res.add(word);\n          \
    \  }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_3i9weio.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // your code goes here\n        ArrayList<String> ans = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            long count = 0;\n            for (char ch : word.toCharArray()) {\n\
    \                if (isConsonant(ch)) {\n                    count++;\n      \
    \          }\n            }\n            if (count == n) {\n                ans.add(word);\n\
    \            }\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt6f99kwc.java:32: error: cannot find symbol\n                if\
    \ (isConsonant(ch)) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        // Your\
    \ solution here\n        // Create a local variable words, to hold the result.\n\
    \        // Iterate over the words in the string s (delimited by space).\n   \
    \     // For each word, check if it contains exactly n consonants.\n        //\
    \ If yes, then append the word to the list words.\n        // Return the list\
    \ words.\n        return words;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnlimw7ec.java:36)\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countVowels(word) == n) {\n                result.add(word);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj46vcph2.java:29: error: cannot find symbol\n            if (countVowels(word)\
    \ == n) {\n                ^\n  symbol:   method countVowels(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(s.length() == 0) {\n            return new ArrayList<String>();\n\
    \        } else {\n            // Creates a stream where each element is a word\
    \ from s.\n            Stream<String> stream = Arrays.stream(s.split(\" \"));\n\
    \            // Filters out the words that do not contain exactly n consonants.\n\
    \            Stream<String> filtered = stream.filter(e -> Problem.countConsonants(e)\
    \ == n);\n            // Returns an array list of the filtered words.\n      \
    \      return filtered.collect(Collectors.toCollection(ArrayList::new));\n   \
    \     }\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpco89hq8l.java:32: error: cannot find symbol\n            Stream<String>\
    \ filtered = stream.filter(e -> Problem.countConsonants(e) == n);\n          \
    \                                                      ^\n  symbol:   method countConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.length() == 0) {\n            return new ArrayList<String>();\n\
    \        }\n        List<String> words = Arrays.asList(s.split(\" \"));\n    \
    \    List<String> selectedWords = new ArrayList<String>();\n        for (String\
    \ word : words) {\n            if (countConsonants(word) == n) {\n           \
    \     selectedWords.add(word);\n            }\n        }\n        return new ArrayList<String>(selectedWords);\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp487o8s30.java:32: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here.\n        ArrayList<String> ret = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>(Arrays.asList(s.split(\"\
    \ \")));\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                ret.add(word);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1vrt_nqz.java:30: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (isConsonant(word.charAt(i))) {\n               \
    \     consonants++;\n                }\n            }\n            if (consonants\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfoer5sn.java:31: error: cannot find symbol\n                if\
    \ (isConsonant(word.charAt(i))) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        String[] arrOfStr = s.split(\" \", 0); \n        for (String a : arrOfStr)\
    \ {\n            if (consonantsInWord(a) == n) {\n                words.add(a);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppoy_y66k.java:32: error: cannot find symbol\n            if (consonantsInWord(a)\
    \ == n) {\n                ^\n  symbol:   method consonantsInWord(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.length() == 0) {\n            return new ArrayList<String>();\n\
    \        } else {\n            String[] words = s.split(\"\\\\s+\");\n       \
    \     // List<String> words = Arrays.asList(s.split(\"\\\\s+\"));\n          \
    \  ArrayList<String> res = new ArrayList<String>();\n            for (String word\
    \ : words) {\n                if (Problem.countConsonants(word) == n) {\n    \
    \                res.add(word);\n                }\n            }\n          \
    \  return res;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpexxi7u7l.java:33: error: cannot find symbol\n                if\
    \ (Problem.countConsonants(word) == n) {\n                           ^\n  symbol:\
    \   method countConsonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return Problem1.selectWords(s, n);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf67qbh9d.java:26: error: cannot find symbol\n        return Problem1.selectWords(s,\
    \ n);\n               ^\n  symbol:   variable Problem1\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        ArrayList<String> vowels\
    \ = new ArrayList<String>(Arrays.asList(new String[]{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}));\n        ArrayList<String> selectedWords = new ArrayList<String>();\n\
    \        for (String word : words) {\n            int numConsonants = 0;\n   \
    \         for (char c : word.toCharArray()) {\n                if (!vowels.contains(String.valueOf(c)))\
    \ {\n                    numConsonants++;\n                }\n            }\n\
    \            if (numConsonants == n) {\n                selectedWords.add(word);\n\
    \            }\n        }\n        return selectedWords;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquq1r636.java:47)\n"
  stdout: ''
  timestamp: 1659977183
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ll = new ArrayList<String>();\n        // Iterate\
    \ through each string in the array\n        for (String word : s.split(\" \"))\
    \ {\n            // Check that every character is a consonant\n            if\
    \ (word.chars().mapToObj(i -> (char) i).filter(c -> !\"aeiouAEIOU\".contains(c\
    \ + \"\")).count() == n) {\n                ll.add(word);\n            }\n   \
    \     }\n        return ll;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    long cons = 0;\n            for (char c : word.toCharArray()) {\n       \
    \         switch (c) {\n                    case 'b':\n                    case\
    \ 'c':\n                    case 'd':\n                    case 'f':\n       \
    \             case 'g':\n                    case 'h':\n                    case\
    \ 'j':\n                    case 'k':\n                    case 'l':\n       \
    \             case 'm':\n                    case 'n':\n                    case\
    \ 'p':\n                    case 'q':\n                    case 'r':\n       \
    \             case 's':\n                    case 't':\n                    case\
    \ 'v':\n                    case 'w':\n                    case 'x':\n       \
    \             case 'y':\n                    case 'z':\n                     \
    \   cons += 1;\n                        break;\n                    default:\n\
    \                        break;\n                }\n            }\n          \
    \  if (cons == n) {\n                ret.add(word);\n            }\n        }\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9hg7xvs.java:67)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> matches = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    int result = 0;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i)\
    \ == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n              \
    \      result++;\n                }\n            }\n            if (result ==\
    \ n) {\n                matches.add(word);\n            }\n        }\n       \
    \ return matches;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_pno0wz8.java:42)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Good luck!\n        return new ArrayList<String>();\n    }\n \
    \   public static void main(String[] args) {\n    assert(selectWords((\"Mary had\
    \ a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpivddi1xz.java:30)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Implementation goes here\n        // You can write your own helper\
    \ functions. \n        // You can also write private classes, or \n        //\
    \ declare private variables in this file.\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_sa3ki7g.java:33)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<String>();\n        int sum\
    \ = 0;\n        int k = 0;\n        boolean inWord = false;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (!inWord && s.charAt(i) != ' ')\
    \ {\n                inWord = true;\n                sum = 0;\n              \
    \  k = i;\n            }\n            if (inWord && s.charAt(i) == ' ') {\n  \
    \              inWord = false;\n                if (sum == n) {\n            \
    \        ret.add(s.substring(k, i));\n                }\n            }\n     \
    \       if (inWord && s.charAt(i) != ' ') {\n                sum += isConsonant(s.charAt(i))\
    \ ? 1 : 0;\n            }\n        }\n        if (inWord && sum == n) {\n    \
    \        ret.add(s.substring(k, s.length()));\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8gk8psu.java:43: error: cannot find symbol\n                sum\
    \ += isConsonant(s.charAt(i)) ? 1 : 0;\n                       ^\n  symbol:  \
    \ method isConsonant(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Implement this placeholder.\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpme0a4iwo.java:30)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> out = new ArrayList<String>();\n        String[]\
    \ tmp = s.split(\" \");\n        for (String word : tmp) {\n            int vowelcount\
    \ = 0;\n            String vowels = \"aeiouAEIOU\";\n            for (int i =\
    \ 0; i < word.length(); i++) {\n                if (vowels.indexOf(word.charAt(i))\
    \ == -1) {\n                    vowelcount++;\n                }\n           \
    \ }\n            if (vowelcount == n) {\n                out.add(word);\n    \
    \        }\n        }\n        return out;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Initialize an empty array list.\n        ArrayList<String> rs\
    \ = new ArrayList<String>();\n        // Split the input string on spaces.\n \
    \       String[] words = s.split(\" \");\n        // For each word in the array,\
    \ we want to count the number of consonants.\n        for (String word : words)\
    \ {\n            // Initialize the counter.\n            long count = 0;\n   \
    \         // For each letter in the word, we want to check if it is a consonant.\n\
    \            for (char letter : word.toCharArray()) {\n                // Check\
    \ if the letter is a consonant.\n                if (letter != 'a' && letter !=\
    \ 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n                \
    \    // If so, increment the counter.\n                    count++;\n        \
    \        }\n            }\n            // Check if the word has exactly n consonants.\n\
    \            if (count == n) {\n                // If so, add the word to the\
    \ list.\n                rs.add(word);\n            }\n        }\n        // Return\
    \ the list.\n        return rs;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxztptc9.java:56)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // YOUR CODE HERE\n        return new ArrayList<String>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjyt_caaw.java:30)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // \u2193\u2193\u2193\u2193 your code goes here \u2193\u2193\u2193\
    \u2193\n        \n        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o7y4881.java:29: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    long count = 0;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                if (isConsonant(word.charAt(i))) {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     result.add(word);\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzhy19b3.java:31: error: cannot find symbol\n                if\
    \ (isConsonant(word.charAt(i))) {\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> list = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            long\
    \ counter = 0;\n            for (int i = 0; i < word.length(); i++) {\n      \
    \          if (\"bcdfghjklmnpqrstvwxyz\".contains(word.substring(i, i + 1))) {\n\
    \                    counter++;\n                }\n            }\n          \
    \  if (counter == n) {\n                list.add(word);\n            }\n     \
    \   }\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3dlhto_l.java:43)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n    throw new RuntimeException(\"replace this line with your solution\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: replace this line\
    \ with your solution\n\tat Problem.selectWords(tmpdambam0x.java:26)\n\tat Problem.main(tmpdambam0x.java:29)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        long countConsonants = 0l;\n        ArrayList<String> words = new\
    \ ArrayList<String>();\n        String[] individualWords = s.split(\" \");\n \
    \       for (int i = 0; i < individualWords.length; i++) {\n            String\
    \ word = individualWords[i];\n            for (int j = 0; j < word.length(); j++)\
    \ {\n                if (!isVowel(word.charAt(j))) {\n                    countConsonants\
    \ += 1l;\n                }\n            }\n            if (countConsonants ==\
    \ n) {\n                words.add(word);\n            }\n            countConsonants\
    \ = 0l;\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpese16akx.java:32: error: cannot find symbol\n                if\
    \ (!isVowel(word.charAt(j))) {\n                     ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    long numConsonants = getNumConsonants(word);\n            if (numConsonants\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0_hicczh.java:29: error: cannot find symbol\n            long numConsonants\
    \ = getNumConsonants(word);\n                                 ^\n  symbol:   method\
    \ getNumConsonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: implement me\n        ArrayList<String> output = new ArrayList<String>();\n\
    \        if(s.isEmpty()) {\n            return output;\n        }\n        String[]\
    \ words = s.split(\" \");\n        for(String word : words) {\n            if(checkConsonants(word)\
    \ == n) {\n                output.add(word);\n            }\n        }\n     \
    \   return output;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2f3zw2np.java:33: error: cannot find symbol\n            if(checkConsonants(word)\
    \ == n) {\n               ^\n  symbol:   method checkConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        int count = 0;\n        ArrayList<String> al = new ArrayList<String>();\n\
    \        String[] array = s.split(\" \");\n        for (int i = 0; i < array.length;\
    \ i++) {\n            for (int j = 0; j < array[i].length(); j++) {\n        \
    \        if (isConsonant(array[i].charAt(j))) {\n                    count++;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     al.add(array[i]);\n            }\n            count = 0;\n        }\n  \
    \      return al;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63brr5pq.java:31: error: cannot find symbol\n                if\
    \ (isConsonant(array[i].charAt(j))) {\n                    ^\n  symbol:   method\
    \ isConsonant(char)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(s.length() == 0) return new ArrayList<String>();\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for(String word : words) {\n            if(consonantsCount(word) == n)\
    \ result.add(word);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8nvs21_.java:30: error: cannot find symbol\n            if(consonantsCount(word)\
    \ == n) result.add(word);\n               ^\n  symbol:   method consonantsCount(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code goes here.\n        String[] words = s.split(\" \");\n\
    \        List<String> res = new ArrayList<>();\n        for (String w : words)\
    \ {\n            if (countConsonants(w) == n) {\n                res.add(w);\n\
    \            }\n        }\n        return new ArrayList<String>(res);\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpikdhtacj.java:30: error: cannot find symbol\n            if (countConsonants(w)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return Stream.of(s.split(\" \"))\n            .filter(x -> countCon(x)\
    \ == n)\n            .collect(Collectors.toCollection(ArrayList::new));\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj44xmnwv.java:27: error: cannot find symbol\n            .filter(x\
    \ -> countCon(x) == n)\n                         ^\n  symbol:   method countCon(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\"\\\\s+\")) {\n            if (word.chars().filter(x -> \"aeiou\"\
    .indexOf(x) == -1).count() == n) {\n                words.add(word);\n       \
    \     }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zlplm4q.java:39)\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return selectWords(new Scanner(s), n);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7iuef7y.java:26: error: incompatible types: Scanner cannot be\
    \ converted to String\n        return selectWords(new Scanner(s), n);\n      \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Use the \n        // // stream API to implement this function.\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpdh7o0u86.java:31)\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // IMPLEMENT ME\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpczwy9e_s.java:30)\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new UnsupportedOperationException(\"Not implemented\");\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.selectWords(tmp5fyezo1w.java:26)\n\tat Problem.main(tmp5fyezo1w.java:29)\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        s = s.toLowerCase();\n        ArrayList<String> results = new ArrayList<String>();\n\
    \        for (String word : s.split(\" \")) {\n            if (word.length() -\
    \ word.replaceAll(\"[aeiou]\", \"\").length() == n) {\n                results.add(word);\n\
    \            }\n        }\n        return results;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3oe__ex5.java:36)\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: Implement solution\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpsx0ydeec.java:30)\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (n < 0 || n > 10) {\n            return null;\n        }\n   \
    \     ArrayList<String> res = new ArrayList<String>();\n        for (String w\
    \ : s.split(\" \")) {\n            if (consonants(w) == n) {\n               \
    \ res.add(w);\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7siwyh1v.java:31: error: cannot find symbol\n            if (consonants(w)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] split = s.split(\" \");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String word : split) {\n          \
    \  if (getNumConsonants(word) == n) {\n                result.add(word);\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjlx5d708.java:29: error: cannot find symbol\n            if (getNumConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method getNumConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] arr = s.split(\" \");\n        ArrayList<String> ret = new\
    \ ArrayList<String>();\n        for (String word : arr) {\n            if (countConsonants(word)\
    \ == n) {\n                ret.add(word);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpov43o43z.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new RuntimeException(\"Not implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.selectWords(tmp355gmh46.java:26)\n\tat Problem.main(tmp355gmh46.java:29)\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] tokens = s.split(\" \");\n        ArrayList<String> out\
    \ = new ArrayList<String>();\n        for (String token : tokens) {\n        \
    \    if (numConsonants(token) == n) {\n                out.add(token);\n     \
    \       }\n        }\n        return out;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4jczacdm.java:29: error: cannot find symbol\n            if (numConsonants(token)\
    \ == n) {\n                ^\n  symbol:   method numConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] strs = s.split(\" \");\n        String vowels = \"aeiouAEIOU\"\
    ;\n        ArrayList<String> res = new ArrayList<String>();\n        for (String\
    \ str : strs) {\n            int sum = 0;\n            for (int i = 0; i < str.length();\
    \ i++) {\n                if (vowels.indexOf(str.charAt(i)) == -1) {\n       \
    \             sum++;\n                }\n            }\n            if (sum ==\
    \ n) {\n                res.add(str);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        ArrayList<String> selectedWords\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  int consCount = 0;\n            for (char ch : word.toCharArray()) {\n    \
    \            if (!chIn(ch, \"aeiouAEIOU\")) {\n                    consCount++;\n\
    \                }\n            }\n            if (consCount == n) {\n       \
    \         selectedWords.add(word);\n            }\n        }\n        return selectedWords;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_73np56.java:31: error: cannot find symbol\n                if\
    \ (!chIn(ch, \"aeiouAEIOU\")) {\n                     ^\n  symbol:   method chIn(char,String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // IMPLEMENT ME\n        return new ArrayList<String>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdf0ljy_b.java:30)\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\"\\\\s+\")) {\n            if (isConsonantCount(word, n)) {\n\
    \                words.add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzy00k39q.java:28: error: cannot find symbol\n            if (isConsonantCount(word,\
    \ n)) {\n                ^\n  symbol:   method isConsonantCount(String,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // your code here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmp51l55n56.java:30)\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<>();\n        String[] split\
    \ = s.split(\" \");\n        for (String word : split) {\n            if (countCon(word)\
    \ == n) {\n                words.add(word);\n            }\n        }\n      \
    \  return words;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp050lqr7r.java:29: error: cannot find symbol\n            if (countCon(word)\
    \ == n) {\n                ^\n  symbol:   method countCon(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ array = s.split(\" \");\n        for (String word : array) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu289ll5c.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            int\
    \ consonants = 0;\n            for (char c : word.toCharArray()) {\n         \
    \       if (\"bcdfghjklmnpqrstvwxyz\".indexOf(c) > -1) {\n                   \
    \ consonants++;\n                }\n            }\n            if (consonants\
    \ == n) {\n                ret.add(word);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7akxm9ap.java:43)\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        if (s.length()\
    \ == 0) {\n            return res;\n        }\n        String[] words = s.split(\"\
    \ \");\n        for (String word : words) {\n            if (consonants(word)\
    \ == n) {\n                res.add(word);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb185x8te.java:32: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ wordsToReturn = new ArrayList<String>();\n        for (String word : words)\
    \ {\n            if (consonantsInWord(word) == n) {\n                wordsToReturn.add(word);\n\
    \            }\n        }\n        return wordsToReturn;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnmt4try_.java:29: error: cannot find symbol\n            if (consonantsInWord(word)\
    \ == n) {\n                ^\n  symbol:   method consonantsInWord(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    if (countConsonants(word) == n) {\n                result.add(word);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ln_0f50.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> t = new ArrayList<String>();\n        Pattern p\
    \ = Pattern.compile(\"\\\\b[^aeiouAEIOU\\\\s]+\\\\b\");\n        Matcher m = p.matcher(s);\n\
    \        while (m.find()) {\n            t.add(m.group());\n        }\n      \
    \  ArrayList<String> r = new ArrayList<String>();\n        for (String c : t)\
    \ {\n            if (c.length() == n) {\n                r.add(c);\n         \
    \   }\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaza0nw_2.java:27: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"\\\\b[^aeiouAEIOU\\\\s]+\\\\b\");\n        ^\n  symbol:\
    \   class Pattern\n  location: class Problem\n/tmp/tmpaza0nw_2.java:27: error:\
    \ cannot find symbol\n        Pattern p = Pattern.compile(\"\\\\b[^aeiouAEIOU\\\
    \\s]+\\\\b\");\n                    ^\n  symbol:   variable Pattern\n  location:\
    \ class Problem\n/tmp/tmpaza0nw_2.java:28: error: cannot find symbol\n       \
    \ Matcher m = p.matcher(s);\n        ^\n  symbol:   class Matcher\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> a = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (numberOfConsonants(word) == n) {\n\
    \                a.add(word);\n            }\n        }\n        return a;\n \
    \   }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5t4ncsq.java:28: error: cannot find symbol\n            if (numberOfConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method numberOfConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> output = new ArrayList<String>();\n        for\
    \ (String word : s.split(\" \")) {\n            if (countConsonants(word) == n)\
    \ {\n                output.add(word);\n            }\n        }\n        return\
    \ output;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi4ijd76a.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) return new ArrayList<String>();\n        // Code\
    \ here ^^\n        return new ArrayList<String>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45v3sxlo.java:31)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        int\
    \ vowelCount = 0;\n        int consonantCount = 0;\n        boolean word = false;\n\
    \        int start = 0;\n        int end = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n                vowelCount++;\n  \
    \          else if (c != ' ')\n                consonantCount++;\n           \
    \ if (c == ' ' || i == s.length() - 1) {\n                if (word) {\n      \
    \              if (consonantCount == n) {\n                        result.add(s.substring(start,\
    \ end));\n                    }\n                    word = false;\n         \
    \           vowelCount = 0;\n                    consonantCount = 0;\n       \
    \         }\n            } else if (!word) {\n                word = true;\n \
    \               start = i;\n                end = i + 1;\n            } else {\n\
    \                end++;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphkxd5qu3.java:59)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] arr = s.split(\" \");\n        ArrayList<String> res = new\
    \ ArrayList<String>();\n        for (String x : arr) {\n            if (x.replaceAll(\"\
    [^aeiou]\", \"\").length() == n) {\n                res.add(x);\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5wtrzm4v.java:36)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // >>>YOUR CODE HERE<<<\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzli5tmot.java:30)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Put your code here.\n        // It should return an array list.\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyy879223.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here!\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpge1ijisx.java:30)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new UnsupportedOperationException(\"Method not implemented\
    \ yet\");\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Method\
    \ not implemented yet\n\tat Problem.selectWords(tmptr3skd2z.java:26)\n\tat Problem.main(tmptr3skd2z.java:29)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return new ArrayList<String>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1b77t8w.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (countConsonants(word) == n) {\n  \
    \              words.add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo57aksd.java:28: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new RuntimeException(\"Not implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.selectWords(tmp355gmh46.java:26)\n\tat Problem.main(tmp355gmh46.java:29)\n"
  stdout: ''
  timestamp: 1659977186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9cub13r.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // WRITE YOUR CODE HERE\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj16t_hz2.java:30)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String vowels = \"aeiouAEIOU\";\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        String[] words = s.split(\" \");\n     \
    \   for (String word : words) {\n            if (word.length() == 0) continue;\n\
    \            long counter = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (vowels.indexOf(c) == -1) counter++;\n            }\n\
    \            if (counter == n) result.add(word);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if(n == 0) {\n            return new ArrayList<String>();\n     \
    \   }\n        String[] array = s.split(\" \");\n        ArrayList<String> arr\
    \ = new ArrayList<String>();\n        for(String str : array) {\n            if(str.length()\
    \ - str.replaceAll(\"[aeiou]\", \"\").length() == n) {\n                arr.add(str);\n\
    \            }\n        }\n        return arr;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpch8j7jf0.java:39)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String\
    \ [] words = s.split(\" \");\n        for (String word : words) {\n          \
    \  if (consonants(word) == n) {\n                result.add(word);\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0i7urj88.java:29: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Hint: implement allStringFromArrayList\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmp21etaatw.java:30)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ret = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                ret.add(word);\n           \
    \ }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyq_hd67v.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> res = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    long count = 0;\n            for (char ch : word.toCharArray()) {\n     \
    \           if (isConsonant(ch)) count++;\n            }\n            if (count\
    \ == n) res.add(word);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxm0la5pf.java:31: error: cannot find symbol\n                if\
    \ (isConsonant(ch)) count++;\n                    ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        int\
    \ consonants = 0;\n        String word = \"\";\n        String[] words = s.split(\"\
    \ \");\n        for (int i = 0; i < words.length; i++) {\n            word = words[i];\n\
    \            for (int j = 0; j < word.length(); j++) {\n                if (word.charAt(j)\
    \ != 'a' && word.charAt(j) != 'e' && word.charAt(j) != 'i' && word.charAt(j) !=\
    \ 'o' && word.charAt(j) != 'u') {\n                    consonants++;\n       \
    \         }\n            }\n            if (consonants == n) {\n             \
    \   result.add(word);\n            }\n            consonants = 0;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9b5n6i_.java:49)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // write your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcjosjgp.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        String[]\
    \ wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n   \
    \         int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (!\"AEIOUaeiou\".contains(word.substring(i, i + 1)))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> l = new ArrayList<String>();\n        for (String\
    \ a : s.split(\" \")) {\n            if (countConsonants(a) == n) {\n        \
    \        l.add(a);\n            }\n        }\n        return l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihf9xcef.java:28: error: cannot find symbol\n            if (countConsonants(a)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // WRITE YOUR CODE HERE\n        String[] words = s.split(\" \");\n\
    \        long consonants = 0;\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String word : words) {\n            consonants = 0;\n          \
    \  for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0j87gn09.java:49)\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  if (isConsonant(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp447jre1s.java:29: error: cannot find symbol\n            if (isConsonant(word)\
    \ == n) {\n                ^\n  symbol:   method isConsonant(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> $ = new ArrayList<String>();\n        String[]\
    \ arr = s.split(\" \");\n        for (String el : arr) {\n            long c =\
    \ consonants(el);\n            if (c == n) {\n                $.add(el);\n   \
    \         }\n        }\n        return $;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyiiqnre1.java:29: error: cannot find symbol\n            long c\
    \ = consonants(el);\n                     ^\n  symbol:   method consonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9cub13r.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<>();\n        for (String\
    \ w : s.split(\"\\\\s+\")) {\n            long consonants = w.chars().filter(c\
    \ -> \"bcdfghjklmnpqrstvwxyz\".indexOf(c) >= 0).count();\n            if (consonants\
    \ == n) words.add(w);\n        }\n        return words;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rimyz9t.java:35)\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: Implement me\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50tgv624.java:30)\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            int vowel = 0;\n            for (int i\
    \ = 0; i < word.length(); i++) {\n                char ch = word.charAt(i);\n\
    \                if (Arrays.asList('a', 'e', 'i', 'o', 'u').contains(ch)) {\n\
    \                    vowel++;\n                }\n            }\n            if\
    \ (word.length() - vowel == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmvspe3ty.java:46)\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        result.addAll(Arrays.asList(s.split(\"\
    \ \")));\n        result.removeIf(word -> consonants(word).length() != n);\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4n39idz.java:28: error: cannot find symbol\n        result.removeIf(word\
    \ -> consonants(word).length() != n);\n                                ^\n  symbol:\
    \   method consonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Write your code here.\n        // Return an array list of the\
    \ required words.\n        ArrayList<String> words = new ArrayList<>();\n    \
    \    String[] arr = s.split(\" \");\n        for (String word : arr) {\n     \
    \       if (word.length() - consonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv06w11y1.java:31: error: cannot find symbol\n            if (word.length()\
    \ - consonants(word) == n) {\n                                ^\n  symbol:   method\
    \ consonants(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (consonants(word) == n) {\n       \
    \         words.add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrtlzejv.java:28: error: cannot find symbol\n            if (consonants(word)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        // Write your code here\n        for (String\
    \ word : words) {\n            if (word.length() >= n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprv4s5rb7.java:37)\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // BEGIN \n        // END\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8exr46f5.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        throw new UnsupportedOperationException(\"Not implemented yet.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented yet.\n\tat Problem.selectWords(tmprank_kml.java:26)\n\tat Problem.main(tmprank_kml.java:29)\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> arr = new ArrayList<String>();\n        if (s ==\
    \ null || s.length() == 0) {\n            return arr;\n        }\n        if (s.trim().length()\
    \ == 0) {\n            return arr;\n        }\n        String[] words = s.split(\"\
    \ \");\n        for (String word : words) {\n            int numOfConst = 0;\n\
    \            for (int i = 0; i < word.length(); i++) {\n                if (isConst(word.charAt(i)))\
    \ {\n                    numOfConst++;\n                }\n            }\n   \
    \         if (numOfConst == n) {\n                arr.add(word);\n           \
    \ }\n        }\n        return arr;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1svet6t.java:37: error: cannot find symbol\n                if\
    \ (isConst(word.charAt(i))) {\n                    ^\n  symbol:   method isConst(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> a = new ArrayList<String>();\n        int i = 0;\n\
    \        int j = 0;\n        int k = 0;\n        int count = 0;\n        boolean\
    \ insideWord = false;\n        for (char c : s.toCharArray()) {\n            if\
    \ (c == ' ' && insideWord) {\n                insideWord = false;\n          \
    \      count = 0;\n                j = i;\n            } else if (c != ' ' &&\
    \ !insideWord) {\n                insideWord = true;\n                k = i;\n\
    \            }\n            if (insideWord) {\n                switch (c) {\n\
    \                    case 'B':\n                    case 'C':\n              \
    \      case 'D':\n                    case 'F':\n                    case 'G':\n\
    \                    case 'H':\n                    case 'J':\n              \
    \      case 'K':\n                    case 'L':\n                    case 'M':\n\
    \                    case 'N':\n                    case 'P':\n              \
    \      case 'Q':\n                    case 'R':\n                    case 'S':\n\
    \                    case 'T':\n                    case 'V':\n              \
    \      case 'W':\n                    case 'X':\n                    case 'Y':\n\
    \                    case 'Z':\n                    case 'b':\n              \
    \      case 'c':\n                    case 'd':\n                    case 'f':\n\
    \                    case 'g':\n                    case 'h':\n              \
    \      case 'j':\n                    case 'k':\n                    case 'l':\n\
    \                    case 'm':\n                    case 'n':\n              \
    \      case 'p':\n                    case 'q':\n                    case 'r':\n\
    \                    case 's':\n                    case 't':\n              \
    \      case 'v':\n                    case 'w':\n                    case 'x':\n\
    \                    case 'y':\n                    case 'z':\n              \
    \          count++;\n                }\n            }\n            if (!insideWord\
    \ && count == n) {\n                a.add(s.substring(k, j));\n            }\n\
    \            i++;\n        }\n        if (insideWord && count == n) {\n      \
    \      a.add(s.substring(k, i));\n        }\n        return a;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(selectWords((\"Mary had a little\
    \ lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\"\
    )))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pnixgzz.java:99)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Your code here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmp1tx7x7b7.java:30)\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> arrayList = new ArrayList<String>();\n        Pattern\
    \ pattern = Pattern.compile(\"((?i)[b-df-hj-np-tv-z])\");\n        String[] split\
    \ = s.split(\" \");\n        for (String word : split) {\n            Matcher\
    \ matcher = pattern.matcher(word);\n            if (matcher.results().count()\
    \ == n) {\n                arrayList.add(word);\n            }\n        }\n  \
    \      return arrayList;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yeaa6ek.java:27: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"((?i)[b-df-hj-np-tv-z])\");\n        ^\n  symbol:   class\
    \ Pattern\n  location: class Problem\n/tmp/tmp7yeaa6ek.java:27: error: cannot\
    \ find symbol\n        Pattern pattern = Pattern.compile(\"((?i)[b-df-hj-np-tv-z])\"\
    );\n                          ^\n  symbol:   variable Pattern\n  location: class\
    \ Problem\n/tmp/tmp7yeaa6ek.java:30: error: cannot find symbol\n            Matcher\
    \ matcher = pattern.matcher(word);\n            ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9cub13r.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977187
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        String vowels = \"aeiouAEIOU\"\
    ;\n        ArrayList<String> results = new ArrayList<String>();\n        for (String\
    \ word : words) {\n            long consonants = word.length() - word.chars().filter(ch\
    \ -> vowels.indexOf(ch) != -1).count();\n            if (consonants == n) {\n\
    \                results.add(word);\n            }\n        }\n        return\
    \ results;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String w : s.split(\" \")) {\n            long cn = w.chars().filter(c -> !\"\
    aeiou\".contains(\"\" + (char)c)).count();\n            if (cn == n) result.add(w);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo91p_j6m.java:38)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // your code goes here\n        if (s.equals(\"\")) {\n         \
    \   return new ArrayList<String>();\n        } else {\n            String[] words\
    \ = s.split(\" \");\n            ArrayList<String> result = new ArrayList<String>();\n\
    \            for (String word : words) {\n                if (isValid(word, n))\
    \ {\n                    result.add(word);\n                }\n            }\n\
    \            return result;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc28zgwmh.java:33: error: cannot find symbol\n                if\
    \ (isValid(word, n)) {\n                    ^\n  symbol:   method isValid(String,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (getNumberOfConsonants(word) == n) {\n                result.add(word);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsg1wx5u6.java:29: error: cannot find symbol\n            if (getNumberOfConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method getNumberOfConsonants(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        String[] words = s.split(\" \");\n        ArrayList<String> out =\
    \ new ArrayList<String>();\n        for (String word : words) {\n            int\
    \ consonants = 0;\n            for (char c : word.toCharArray()) {\n         \
    \       if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n    \
    \                consonants++;\n                }\n            }\n           \
    \ if (consonants == n) {\n                out.add(word);\n            }\n    \
    \    }\n        return out;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21pzahyl.java:46)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        //#############################\n        // Please implement this\
    \ method\n        //#############################\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_6d2xap.java:32)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         long count = 0;\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                if (\"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\".indexOf(word.charAt(i))\
    \ != -1) {\n                    count++;\n                }\n            }\n \
    \           if (count == n) {\n                result.add(word);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // TODO: implement this function\n        return new ArrayList<String>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpng2o84op.java:30)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        var vowels = Set.of(\"a\", \"e\", \"i\", \"o\", \"u\");\n       \
    \ var words = List.of(s.split(\" \"));\n        var result = new ArrayList<String>();\n\
    \        for (var word : words) {\n            var count = 0;\n            for\
    \ (var charr : word.toCharArray()) {\n                if (!vowels.contains(String.valueOf(charr).toLowerCase()))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.add(word);\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    if (word.length() == n) {\n                result.add(word);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxfg2gp5.java:36)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // Type your code here and return the result\n        String[] words\
    \ = s.split(\" \");\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String word : words) {\n            if (getConsonantCount(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp699ixhpn.java:30: error: cannot find symbol\n            if (getConsonantCount(word)\
    \ == n) {\n                ^\n  symbol:   method getConsonantCount(String)\n \
    \ location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        // >>> YOUR CODE HERE <<<\n        ArrayList<String> selectedWords\
    \ = new ArrayList<String>();\n        String[] words = s.split(\" \");\n     \
    \   for (String word : words) {\n            if (word.length() == n) {\n     \
    \           boolean isWord = true;\n                for (char c : word.toCharArray())\
    \ {\n                    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                        isWord = false;\n                       \
    \ break;\n                    }\n                }\n                if (isWord)\
    \ {\n                    selectedWords.add(word);\n                }\n       \
    \     }\n        }\n        return selectedWords;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"),\
    \ (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5i004mw1.java:46)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> output = new ArrayList<String>();\n        for\
    \ (String word : s.split(\" \")) {\n            int count = 0;\n            for\
    \ (char ch : word.toCharArray()) {\n                if (ch != 'a' && ch != 'e'\
    \ && ch != 'i' && ch != 'o' && ch != 'u') {\n                    count++;\n  \
    \              }\n            }\n            if (count == n) {\n             \
    \   output.add(word);\n            }\n        }\n        return output;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcc371o_w.java:45)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n        ArrayList<String> ret = new ArrayList<String>();\n       \
    \ String[] words = s.split(\" \");\n        for (String word : words) {\n    \
    \        if (countConsonants(word) == n) {\n                ret.add(word);\n \
    \           }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcmayw_cq.java:32: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpmjqq7hir.java:29)\n"
  stdout: ''
  timestamp: 1659977180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String w : s.split(\" \")) {\n            if (consonants(w) == n) {\n     \
    \           result.add(w);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ib411ul.java:28: error: cannot find symbol\n            if (consonants(w)\
    \ == n) {\n                ^\n  symbol:   method consonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> ans = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (countConsonants(word) == n) {\n                ans.add(word);\n           \
    \ }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6f0u3m1.java:29: error: cannot find symbol\n            if (countConsonants(word)\
    \ == n) {\n                ^\n  symbol:   method countConsonants(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n\
    \        }\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
    Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.selectWords(String,\
    \ long)\" is null\n\tat Problem.main(tmpjsa286_8.java:32)\n"
  stdout: ''
  timestamp: 1659977189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns an array array list of\
    \ all words from string s that contain exactly \n    // n consonants, in order\
    \ these words appear in the string s.\n    // If the string s is empty then the\
    \ function should return an empty array list.\n    // Note: you may assume the\
    \ input string contains only letters and spaces.\n    // Examples:\n    // >>>\
    \ selectWords((\"Mary had a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
    \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n\
    \    // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
    \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> words = new ArrayList<String>();\n        if (s.length()\
    \ != 0) {\n            int spaces = 0;\n            int current = 0;\n       \
    \     int index = 0;\n            while (index < s.length()) {\n             \
    \   char ch = s.charAt(index);\n                if (ch == ' ') {\n           \
    \         if (current == n) {\n                        words.add(s.substring(index\
    \ - current, index));\n                    }\n                    current = 0;\n\
    \                    spaces += 1;\n                } else {\n                \
    \    current += 1;\n                }\n                index += 1;\n         \
    \   }\n            if (current == n) {\n                words.add(s.substring(index\
    \ - current, index));\n            }\n        }\n        return words;\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeboe_e_o.java:51)\n"
  stdout: ''
  timestamp: 1659977189
