language: java
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        //\
    \ copy list l into a new list of longs\n        ArrayList<Long> sortedList = new\
    \ ArrayList<Long>(l);\n        // sort the new list of longs using Collections.sort()\n\
    \        Collections.sort(sortedList);\n        for (int i = 0; i < sortedList.size()\
    \ - 2; i++) {\n            int j = i + 1;\n            int k = sortedList.size()\
    \ - 1;\n            while (j < k) {\n                long currSum = sortedList.get(i)\
    \ + sortedList.get(j) + sortedList.get(k);\n                if (currSum == 0)\
    \ {\n                    return true;\n                } else if (currSum < 0)\
    \ {\n                    j++;\n                } else {\n                    k--;\n\
    \                }\n            }\n        }\n        return false;\n    }\n \
    \   public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \     for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n          for (int k = j + 1; k < l.size(); k++) {\n            if (l.get(i)\
    \ + l.get(j) + l.get(k) == 0) {\n              return true;\n            }\n \
    \         }\n        }\n      }\n      return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size() < 3) {\n            return false;\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                for(int k = j + 1; k < l.size(); k++) {\n               \
    \     if(l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // find triplet that sums to zero\n        // brute force O(n^3)\n   \
    \     // sort array, then check for triplet sum to zero by working inward from\
    \ ends.\n        // O(n^2log(n))\n        for (int i = 0; i < l.size(); i++) {\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                for (int\
    \ k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j)\
    \ + l.get(k) == 0) {\n                        return true;\n                 \
    \   }\n                }\n            }\n        }\n        return false;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvmv1qwl4.java:26)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Long sum=0l;\n        for(int i=0;i<l.size();i++){\n            sum+=l.get(i);\n\
    \        }\n        if(sum==0){\n            return true;\n        }\n       \
    \ else{\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnqi9v85d.java:37)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Collections.sort(l);\n        for (int i = 0; i < l.size(); i++) {\n \
    \           for (int j = i + 1; j < l.size(); j++) {\n                for (int\
    \ k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j)\
    \ + l.get(k) == 0) {\n                        return true;\n                 \
    \   }\n                }\n            }\n        }\n        return false;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // we need to check every possible combination of three numbers in l\n\
    \        // we can do this by selecting the first element, then selecting the\
    \ second element\n        // and then checking if there is an element in l that\
    \ is equal to the negative sum of the two elements.\n        // to save us the\
    \ effort of checking this combination more than once, we can sort the array list\n\
    \        // at the end we want to make sure that the array list has at least three\
    \ elements before we attempt this\n        // algorithm\n        if (l.size()\
    \ >= 3) {\n            Collections.sort(l);\n            for (int i = 0; i < l.size()\
    \ - 2; i++) {\n                for (int j = i + 1; j < l.size() - 1; j++) {\n\
    \                    if (Collections.binarySearch(l, -(l.get(i) + l.get(j))) >=\
    \ 0) {\n                        return true;\n                    }\n        \
    \        }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int n = l.size();\n        if (n < 3) {\n            return false;\n \
    \       }\n        Collections.sort(l);\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = i + 1; j < n; j++) {\n                for (int k = j\
    \ + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) ==\
    \ 0) {\n                        return true;\n                    }\n        \
    \        }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // Write your code here!!!\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qvfbq3_.java:27)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       long[] a = new long[l.size()];\n        for (int i = 0; i < l.size();\
    \ i++)\n            a[i] = l.get(i);\n        for (int i = 0; i < a.length; i++)\n\
    \            for (int j = i + 1; j < a.length; j++)\n                for (int\
    \ k = j + 1; k < a.length; k++)\n                    if (a[i] + a[j] + a[k] ==\
    \ 0)\n                        return true;\n        return false;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       assert l.size() >= 3;\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ubit07r.java:29)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return triplesSumToZero(l, 0, l.size() - 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe83z2gb5.java:23: error: method triplesSumToZero in class Problem\
    \ cannot be applied to given types;\n        return triplesSumToZero(l, 0, l.size()\
    \ - 1);\n               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,int,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int n = l.size();\n        for (int i = 0; i < n; i++) {\n           \
    \ for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n;\
    \ k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n   \
    \                     return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        } else {\n   \
    \         for (int i = 0; i < l.size(); i++) {\n                for (int j = i\
    \ + 1; j < l.size(); j++) {\n                    for (int k = j + 1; k < l.size();\
    \ k++) {\n                        if (l.get(i) + l.get(j) + l.get(k) == 0) {\n\
    \                            return true;\n                        }\n       \
    \             }\n                }\n            }\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.triplesSumToZero(tmp4x3keq53.java:23)\n\tat Problem.main(tmp4x3keq53.java:26)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // your code here\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpollxryei.java:24: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n\
    \        long n = l.size();\n        for(int i = 0; i < n - 2; i++) {\n      \
    \      int j = i + 1;\n            int k = (int)n - 1;\n            while(j <\
    \ k) {\n                long sum = l.get(i) + l.get(j) + l.get(k);\n         \
    \       if(sum == 0) {\n                    return true;\n                }\n\
    \                else if(sum < 0) {\n                    j += 1;\n           \
    \     }\n                else {\n                    k -= 1;\n               \
    \ }\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n\t\
    \tCollections.sort(l);\n\t\tint n = l.size();\n\t\tfor (int i = 0; i < n; i++)\
    \ {\n\t\t\tint j = i + 1;\n\t\t\tint k = n - 1;\n\t\t\twhile (j < k) {\n\t\t\t\
    \tlong sum = l.get(i) + l.get(j) + l.get(k);\n\t\t\t\tif (sum == 0) {\n\t\t\t\t\
    \treturn true;\n\t\t\t\t} else if (sum < 0) {\n\t\t\t\t\tj++;\n\t\t\t\t} else\
    \ {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) return false;\n        Map<Long, Long> counts = new\
    \ HashMap<Long, Long>();\n        for (Long x : l) {\n            counts.put(x,\
    \ counts.getOrDefault(x, (long)0) + (long)1);\n        }\n        for (Long x\
    \ : l) {\n            for (Long y : l) {\n                if (x.equals(y)) continue;\n\
    \                Long z = -x - y;\n                if (z.equals(x) || z.equals(y))\
    \ {\n                    if (counts.get(z) >= 2) return true;\n              \
    \  } else {\n                    if (counts.containsKey(z)) return true;\n   \
    \             }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // CUT AND PASTE YOUR CODE FROM THE PREVIOUS PROBLEM HERE:\n        //\
    \ triplesSumToZero takes an array list of integers as an input.\n        // it\
    \ returns true if there are three distinct elements in the array list that\n \
    \       // sum to zero, and false otherwise.\n        // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \       // (false)\n        // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n        // (true)\n        // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \       // (false)\n        // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n        // (true)\n \
    \       // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n\
    \        // (false)\n        // This can be done by \"brute force\" by trying\
    \ all combinations of three\n        // distinct elements of the array list and\
    \ checking if they sum to zero.\n        // However, a more efficient solution\
    \ is to sort the list of integers,\n        // and then to use a similar algorithm\
    \ to the one used in the merge sort\n        // to choose three integers whose\
    \ sum is zero.\n        // To sort a list, we can use the array list sort method,\n\
    \        // taking as an argument the Comparator object which will be used to\
    \ determine\n        // the order of the list.  This object must have a compare\
    \ method\n        // which takes two longs and returns -1 if the first long is\
    \ less than the second,\n        // 1 if the first long is greater than the second,\
    \ and 0 if the two longs are equal.\n        // One way to sort is just to use\
    \ the compare method for\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuacuwucv.java:48: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // your code here\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa68fwnpu.java:29)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       l.sort(null);\n        for (int i = 0; i < l.size(); i++) {\n        \
    \    if (triplesSumToZero(l, i + 1, l.size() - 1, -l.get(i))) {\n            \
    \    return true;\n            }\n        }\n        return false;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2bgz2erp.java:25: error: method triplesSumToZero in class Problem\
    \ cannot be applied to given types;\n            if (triplesSumToZero(l, i + 1,\
    \ l.size() - 1, -l.get(i))) {\n                ^\n  required: ArrayList<Long>\n\
    \  found:    ArrayList<Long>,int,int,long\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        long[]\
    \ a = new long[l.size()];\n        for (int i = 0; i < l.size(); i += 1) {\n \
    \           a[i] = l.get(i);\n        }\n        boolean[] b = new boolean[l.size()];\n\
    \        for (int i = 0; i < l.size(); i += 1) {\n            b[i] = false;\n\
    \        }\n        long tmp;\n        for (int i = 0; i < l.size(); i += 1) {\n\
    \            for (int j = i + 1; j < l.size(); j += 1) {\n                if (a[i]\
    \ > a[j]) {\n                    tmp = a[i];\n                    a[i] = a[j];\n\
    \                    a[j] = tmp;\n                }\n            }\n        }\n\
    \        long sum;\n        for (int i = 0; i < l.size(); i += 1) {\n        \
    \    for (int j = i + 1; j < l.size(); j += 1) {\n                for (int k =\
    \ j + 1; k < l.size(); k += 1) {\n                    sum = a[i] + a[j] + a[k];\n\
    \                    if (sum == 0) {\n                        return true;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       long temp;\n        ArrayList<Long> tempList = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l.size(); i++) {\n            temp = l.get(i);\n\
    \            tempList.add(temp);\n            if (tempList.size() > 3) {\n   \
    \             tempList.remove(0);\n            }\n            if (tempList.size()\
    \ == 3) {\n                long sum = tempList.get(0) + tempList.get(1) + tempList.get(2);\n\
    \                if (sum == 0) {\n                    return true;\n         \
    \       }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9h8dgdp.java:43)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() == 0) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size();\
    \ j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n         \
    \           if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                     \
    \   return true;\n                    }\n                }\n            }\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            long a = l.get(i);\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                long b\
    \ = l.get(j);\n                for (int k = j + 1; k < l.size(); k++) {\n    \
    \                long c = l.get(k);\n                    if (a + b + c == 0) {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.size(); i += 1) {\n            for (int j = i + 1; j < l.size();\
    \ j += 1) {\n                for (int k = j + 1; k < l.size(); k += 1) {\n   \
    \                 if (l.get(i) + l.get(j) + l.get(k) == 0) {\n               \
    \         return true;\n                    }\n                }\n           \
    \ }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return (l.size() > 2 && noDups(l)) && ((l.get(0) + l.get(1) + l.get(2))\
    \ == 0l);\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8ipkp6d.java:23: error: cannot find symbol\n        return (l.size()\
    \ > 2 && noDups(l)) && ((l.get(0) + l.get(1) + l.get(2)) == 0l);\n           \
    \                     ^\n  symbol:   method noDups(ArrayList<Long>)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"Not Implemented!\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented!\n\
    \tat Problem.triplesSumToZero(tmpvgoguqrl.java:23)\n\tat Problem.main(tmpvgoguqrl.java:26)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // input: ArrayList<Long>\n        // output: boolean\n        // constraints:\
    \ none\n        // edge cases: empty ArrayList\n        // known: none\n     \
    \   // goal: return true if there are three distinct elements in the array list\
    \ that\n        // sum to zero, and false otherwise.\n        // assumptions:\
    \ none\n        // candidate: (1) sort the ArrayList, then check if the sum of\
    \ each pair of elements is\n        // in the remainder of the ArrayList\n   \
    \     // (2) for each distinct pair of elements, check if the sum is in the remainder\
    \ of the\n        // ArrayList.\n        // (3) for each element in the ArrayList,\
    \ check if the sum of the other two elements\n        // is in the remainder of\
    \ the ArrayList.\n        // analysis: (1) if the ArrayList is sorted, we can\
    \ check if the sum of each pair of\n        // elements is in the remainder of\
    \ the ArrayList in O(n) time by running a binary\n        // search on the remainder\
    \ of the ArrayList for each pair. the total time is O(n^2*log(n))\n        //\
    \ (2) for each distinct pair of elements, we can check if the sum is in the remainder\n\
    \        // of the ArrayList in O(n) time by running a binary search on the remainder\
    \ of the\n        // ArrayList for each pair. the total time is O(n^3*log(n))\n\
    \        // (3) for each element in the ArrayList, we can check if the sum of\
    \ the other two\n        // elements is in the remainder of the ArrayList in O(n)\
    \ time by running a binary\n        // search on the remainder of the ArrayList\
    \ for each pair. the total time is O(n^3*log(n))\n        // if the ArrayList\
    \ is sorted (1) is the best option.\n        // plan: implement (1)\n        //\
    \ tests: see above\n\n        if (l.size() < 3) {\n            return false;\n\
    \        }\n\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size()\
    \ - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n    \
    \            if (Collections.binarySearch(l.subList(j +\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnckduxfp.java:59: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpnckduxfp.java:60: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) return false;\n        Collections.sort(l);\n      \
    \  for (int i = 0; i < l.size() - 2; i++) {\n            int j = i + 1;\n    \
    \        int k = l.size() - 1;\n            while (j < k) {\n                long\
    \ sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0) return\
    \ true;\n                else if (sum < 0) j++;\n                else k--;\n \
    \           }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Set<Long> set = new HashSet<>();\n        for (Long x : l) {\n       \
    \     if (set.contains(-x)) {\n                return true;\n            }\n \
    \           set.add(x);\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyawgm29c.java:34)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       long[] a = new long[l.size()];\n        for (int i = 0; i < l.size();\
    \ i++) {\n            a[i] = l.get(i);\n        }\n        return triplesSumToZero(a);\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx5zkcvb.java:27: error: incompatible types: long[] cannot be converted\
    \ to ArrayList<Long>\n        return triplesSumToZero(a);\n                  \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new java.lang.UnsupportedOperationException(\"Not yet implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ yet implemented\n\tat Problem.triplesSumToZero(tmp4gfmtkse.java:23)\n\tat Problem.main(tmp4gfmtkse.java:26)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // write your code here.\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36y7m7c7.java:29)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // YOUR CODE HERE\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvurpp1s.java:29)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"Problem not solved\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Problem not solved\n\
    \tat Problem.triplesSumToZero(tmp0hnrunar.java:23)\n\tat Problem.main(tmp0hnrunar.java:26)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // Your code goes here.\n        if (l.size() < 3) {\n            return\
    \ false;\n        }\n        HashSet<Long> seen = new HashSet<Long>();\n     \
    \   HashSet<Long> seen_twice = new HashSet<Long>();\n        for (Long el : l)\
    \ {\n            if (seen.contains(el)) {\n                seen_twice.add(el);\n\
    \            }\n            seen.add(el);\n        }\n        for (Long el : l)\
    \ {\n            if (seen_twice.contains(el*-1)) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2rcqh2n.java:45)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       //find all possible pairs\n        //try each possible pair and see if\
    \ it can be added to a third value\n        //if so, return true\n        //otherwise,\
    \ return false\n        if (l.size() < 3) {\n            return false;\n     \
    \   }\n        for (int i = 0; i < l.size(); i++) {\n            long n1 = l.get(i);\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                long n2\
    \ = l.get(j);\n                long n3 = -n1 - n2;\n                // System.out.printf(\"\
    triplesSumToZero: n1: %d, n2: %d, n3: %d\\n\",\n                //     n1, n2,\
    \ n3);\n                if (l.contains(n3)) {\n                    return true;\n\
    \                }\n            }\n        }\n        return false;\n    }\n \
    \   public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       boolean result;\n        if (l.size() < 3) {\n            result = false;\n\
    \        } else {\n            HashSet<Long> set = new HashSet<Long>();\n    \
    \        HashSet<Long> triplets = new HashSet<Long>();\n            for (int i\
    \ = 0; i < l.size(); i++) {\n                for (int j = i + 1; j < l.size();\
    \ j++) {\n                    if (set.contains(l.get(i) + l.get(j))) {\n     \
    \                   triplets.add(l.get(i));\n                        triplets.add(l.get(j));\n\
    \                        triplets.add(l.get(i) + l.get(j));\n                \
    \    } else {\n                        set.add(l.get(i) + l.get(j));\n       \
    \             }\n                }\n            }\n            result = (triplets.size()\
    \ >= 3);\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwr9db9q.java:46)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Set<Long> numSet = new HashSet<Long>();\n        for (int i = 0; i < l.size();\
    \ i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n             \
    \   Long curSum = l.get(i) + l.get(j);\n                if (numSet.contains(curSum))\
    \ {\n                    return true;\n                }\n                numSet.add(-curSum);\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       assert l != null : \"Failed precondition: triplesSumToZero, l is null\"\
    ;\n        if(l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n\
    \        for(int i = 0; i < l.size() - 2; i++) {\n            for(int j = i +\
    \ 1; j < l.size() - 1; j++) {\n                for(int k = j + 1; k < l.size();\
    \ k++) {\n                    if(l.get(i) + l.get(j) + l.get(k) == 0) {\n    \
    \                    return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l,\
    \ (long)0l))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l,\
    \ (long)0l))));\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fto5fad.java:26)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int size = l.size();\n        if (size < 3) {\n            return false;\n\
    \        }\n        Collections.sort(l);\n        int i = 0;\n        while (i\
    \ < size) {\n            int j = i + 1;\n            int k = size - 1;\n     \
    \       while (j < k) {\n                long curSum = l.get(i) + l.get(j) + l.get(k);\n\
    \                if (curSum == 0) {\n                    return true;\n      \
    \          }\n                if (curSum < 0) {\n                    j++;\n  \
    \              } else {\n                    k--;\n                }\n       \
    \     }\n            i++;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i = i + 1) {\n            for (int j = i\
    \ + 1; j < l.size(); j = j + 1) {\n                for (int k = j + 1; k < l.size();\
    \ k = k + 1) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0l)\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size()<3) {\n            return false;\n        }\n        for (int\
    \ i=0; i<l.size()-2; i++) {\n            for (int j=i+1; j<l.size()-1; j++) {\n\
    \                for (int k=j+1; k<l.size(); k++) {\n                    if (l.get(i)+l.get(j)+l.get(k)==0)\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() <= 2) {\n            return false;\n        }\n        ArrayList<Long>\
    \ l2 = new ArrayList<Long>();\n        l2.addAll(l);\n        Collections.sort(l2);\n\
    \        int i = 0;\n        while (i < l2.size() - 2) {\n            int k =\
    \ i + 1;\n            int j = l2.size() - 1;\n            while (k < j) {\n  \
    \              long sum = l2.get(i) + l2.get(k) + l2.get(j);\n               \
    \ if (sum == 0) {\n                    return true;\n                }\n     \
    \           if (sum > 0) {\n                    j = j - 1;\n                }\
    \ else {\n                    k = k + 1;\n                }\n            }\n \
    \           i = i + 1;\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       HashSet<Long> s = new HashSet<Long>();\n        for (int i = 0; i < l.size();\
    \ i++) {\n            s.add(l.get(i));\n        }\n        for (int i = 0; i <\
    \ l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n   \
    \             if (s.contains(-(l.get(i) + l.get(j)))) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvmv1qwl4.java:26)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Long p = null;\n        Long q = null;\n        Long r = null;\n     \
    \   for (Long k : l) {\n            for (Long j : l) {\n                for (Long\
    \ i : l) {\n                    if (i.equals(j) || i.equals(k) || j.equals(k))\
    \ {\n                        continue;\n                    }\n              \
    \      if (i + j + k == 0) {\n                        return true;\n         \
    \           }\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiq6smh5i.java:43)\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // really this is just a brute force solution\n        // that is O(n^3)\
    \ time and O(1) space.\n        int n = l.size();\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) +\
    \ l.get(k) == 0) {\n                        return true;\n                   \
    \ }\n                }\n            }\n        }\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // this function is already implemented. you do not need to change it.\n\
    \        return Solution.triplesSumToZero(l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m7z3e72.java:24: error: cannot find symbol\n        return Solution.triplesSumToZero(l);\n\
    \               ^\n  symbol:   variable Solution\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new UnsupportedOperationException(\"Please implement me.\");\n \
    \   }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement me.\n\tat Problem.triplesSumToZero(tmpo8kqr8b6.java:23)\n\tat Problem.main(tmpo8kqr8b6.java:26)\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size() < 3) {\n            return false;\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                for(int k = j + 1; k < l.size(); k++) {\n               \
    \     if(l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"Not Implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.triplesSumToZero(tmpz3x2dj8w.java:23)\n\tat Problem.main(tmpz3x2dj8w.java:26)\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Map<Long, List<Triplet<Long, Long, Long>>> pairs = new HashMap<>();\n\
    \        for (int i = 0; i < l.size(); i++) {\n            long a = l.get(i);\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                long b\
    \ = l.get(j);\n                long sum = a + b;\n                if (pairs.containsKey(sum))\
    \ {\n                    List<Triplet<Long, Long, Long>> v = pairs.get(sum);\n\
    \                    v.add(new Triplet<Long, Long, Long>(a, b, (long) 0));\n \
    \               } else {\n                    pairs.put(sum, new ArrayList<Triplet<Long,\
    \ Long, Long>>(Arrays.asList(new Triplet<Long, Long, Long>(a, b, (long) 0))));\n\
    \                }\n            }\n        }\n        for (long i : l) {\n   \
    \         if (pairs.containsKey(-i)) {\n                for (Triplet<Long, Long,\
    \ Long> t : pairs.get(-i)) {\n                    if (t.getValue0() != i && t.getValue1()\
    \ != i) {\n                        return true;\n                    }\n     \
    \           }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Triplet\n\
    \tat Problem.triplesSumToZero(tmpu9mhq0wz.java:33)\n\tat Problem.main(tmpu9mhq0wz.java:49)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Triplet\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // find all the unique two-tuples and put them in the map m\n        HashMap<Long,\
    \ HashSet<Long>> m = new HashMap<Long, HashSet<Long>>();\n        HashSet<Long>\
    \ s = new HashSet<Long>();\n        for (int i = 0; i < l.size(); i++) {\n   \
    \         for (int j = i + 1; j < l.size(); j++) {\n                Long sum =\
    \ l.get(i) + l.get(j);\n                if (m.containsKey(sum)) {\n          \
    \          m.get(sum).add(l.get(i));\n                    m.get(sum).add(l.get(j));\n\
    \                } else {\n                    HashSet<Long> p = new HashSet<Long>();\n\
    \                    p.add(l.get(i));\n                    p.add(l.get(j));\n\
    \                    m.put(sum, p);\n                }\n            }\n      \
    \  }\n        // for each element in the array list check if its inverse is in\
    \ the map\n        // if it is, then check if the inverse key's set is not the\
    \ same as the\n        // two elements that were originally summed to form the\
    \ inverse.\n        for (int i = 0; i < l.size(); i++) {\n            if (m.containsKey(-l.get(i)))\
    \ {\n                if (!m.get(-l.get(i)).contains(l.get(i))) {\n           \
    \         return true;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       boolean result = false;\n        // Insert your code here, and remove\
    \ the exception\n        int sz = l.size();\n        if (sz < 3)\n           \
    \ return result;\n        long hash = 0;\n        for (int i = 0; i < sz; i++)\
    \ {\n            long e = l.get(i);\n            for (int j = i + 1; j < sz; j++)\
    \ {\n                e += l.get(j);\n                for (int k = j + 1; k < sz;\
    \ k++) {\n                    e += l.get(k);\n                    if (e == 0)\
    \ {\n                        result = true;\n                        break;\n\
    \                    }\n                    e -= l.get(k);\n                }\n\
    \                e -= l.get(j);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int i = 0;\n        int j = 1;\n        int k = 2;\n        for (int n\
    \ = 0; n < l.size(); n++) {\n            for (int m = n + 1; m < l.size(); m++)\
    \ {\n                for (int o = m + 1; o < l.size(); o++) {\n              \
    \      if (l.get(n) + l.get(m) + l.get(o) == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0)\n          \
    \              return true;\n                }\n            }\n        }\n   \
    \     return false;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Collections.sort(l);\n        for (int i = 0; i < l.size(); i++) {\n \
    \           int j = i + 1;\n            int k = l.size() - 1;\n            while\
    \ (j < k) {\n                long sum = l.get(i) + l.get(j) + l.get(k);\n    \
    \            if (sum == 0) {\n                    return true;\n             \
    \   } else if (sum < 0) {\n                    j++;\n                } else {\n\
    \                    k--;\n                }\n            }\n        }\n     \
    \   return false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // input: {1, 3, 5, 0}\n        // output: true\n        // input: {1,\
    \ 3, -2, 1}\n        // output: true\n        // input: {1, 2, 3, 7}\n       \
    \ // output: false\n        // input: {2, 4, -5, 3, 9, 7}\n        // output:\
    \ true\n        // input: {1}\n        // output: false\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfj3rltvj.java:38)\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return new Object() {\n            boolean temp = false;\n           \
    \ {\n                for (int i = 0; i < l.size(); i++) {\n                  \
    \  for (int j = i + 1; j < l.size(); j++) {\n                        for (int\
    \ k = j + 1; k < l.size(); k++) {\n                            if (l.get(i) +\
    \ l.get(j) + l.get(k) == 0) {\n                                temp = true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }.temp;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx431lkdr.java:29)\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int x = 0; x < l.size(); x++) {\n            for (int y = x + 1;\
    \ y < l.size(); y++) {\n                for (int z = y + 1; z < l.size(); z++)\
    \ {\n                    if (l.get(x) + l.get(y) + l.get(z) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       boolean result = false;\n        long zero = 0l;\n        long sum = 0l;\n\
    \        long left = 0l;\n        long right = 0l;\n        int length = l.size();\n\
    \        if (length > 2) {\n            for (int k = 0; k < length - 2; k++) {\n\
    \                left = l.get(k);\n                for (int j = k + 1; j < length\
    \ - 1; j++) {\n                    right = l.get(j);\n                    sum\
    \ = left + right;\n                    for (int i = j + 1; i < length; i++) {\n\
    \                        if (l.get(i) == (zero - sum)) {\n                   \
    \         result = true;\n                            return result;\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       boolean result = false;\n        int i = 0;\n        int j = 1;\n    \
    \    int k = 2;\n        while (i < l.size() - 2) {\n            while (j < l.size()\
    \ - 1) {\n                while (k < l.size()) {\n                    if (i !=\
    \ j && j != k && i != k) {\n                        if (l.get(i) + l.get(j) +\
    \ l.get(k) == 0) {\n                            result = true;\n             \
    \           }\n                    }\n                    k += 1;\n          \
    \      }\n                j += 1;\n                k = j + 1;\n            }\n\
    \            i += 1;\n            j = i + 1;\n            k = j + 1;\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011495
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \     for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n          for (int k = j + 1; k < l.size(); k++) {\n            if (l.get(i)\
    \ + l.get(j) + l.get(k) == 0) {\n              return true;\n            }\n \
    \         }\n        }\n      }\n      return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // Your code here\n        int sum;\n        for(int i = 0; i < l.size();\
    \ i++){\n            for(int j = i+1; j < l.size(); j++){\n                for(int\
    \ k = j+1; k < l.size(); k++){\n                    sum = (int)(l.get(i) + l.get(j)\
    \ + l.get(k));\n                    if(sum == 0){\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.triplesSumToZero(tmp4x3keq53.java:23)\n\tat Problem.main(tmp4x3keq53.java:26)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"not yet implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not yet implemented\n\
    \tat Problem.triplesSumToZero(tmpv4imncm0.java:23)\n\tat Problem.main(tmpv4imncm0.java:26)\n"
  stdout: ''
  timestamp: 1660011495
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        else\
    \ {\n            Collections.sort(l);\n            for (int i = 0; i < l.size()\
    \ - 2; i++) {\n                int j = i + 1;\n                int k = l.size()\
    \ - 1;\n                while (j < k) {\n                    long sum = l.get(i)\
    \ + l.get(j) + l.get(k);\n                    if (sum == 0) {\n              \
    \          return true;\n                    }\n                    else if (sum\
    \ > 0) {\n                        k--;\n                    }\n              \
    \      else {\n                        j++;\n                    }\n         \
    \       }\n            }\n            return false;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011495
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size()<3) {\n            return false;\n        }\n        HashSet<Long>\
    \ h = new HashSet<Long>();\n        for(int i=0; i<l.size(); i++) {\n        \
    \    for(int j=i+1; j<l.size(); j++) {\n                for(int k=j+1; k<l.size();\
    \ k++) {\n                    if(l.get(i)+l.get(j)+l.get(k)==0) {\n          \
    \              return true;\n                    }\n                }\n      \
    \      }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011495
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size() < 3) {\n            return false;\n        }\n        Set<Long>\
    \ s = new HashSet<Long>();\n        for(int i = 0; i < l.size(); i++) {\n    \
    \        for(int j = i + 1; j < l.size(); j++) {\n                if(s.contains(-(l.get(i)\
    \ + l.get(j)))) {\n                    return true;\n                }\n     \
    \       }\n            s.add(l.get(i));\n        }\n        return false;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n\t\
    long a, b, c;\n\tfor (a = 0; a < l.size(); a++) {\n\t    for (b = a + 1; b < l.size();\
    \ b++) {\n\t\tfor (c = b + 1; c < l.size(); c++) {\n\t\t    if (l.get((int)a)\
    \ + l.get((int)b) + l.get((int)c) == 0) {\n\t\t\treturn true;\n\t\t    }\n\t\t\
    }\n\t    }\n\t}\n\treturn false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       HashSet<Long> s = new HashSet<Long>();\n        for (int i = 0; i < l.size();\
    \ i++) {\n            s.add(l.get(i));\n        }\n        for (int i = 0; i <\
    \ l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n   \
    \             if (s.contains(-l.get(i) - l.get(j))) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size() < 3) {\n            return false;\n        }\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++)\
    \ {\n                for(int k = j + 1; k < l.size(); k++) {\n               \
    \     if(l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0l) {\n       \
    \                 return true;\n                    }\n                }\n   \
    \         }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       long[] a = new long[l.size()];\n        for (int i = 0; i < l.size();\
    \ i++)\n            a[i] = l.get(i);\n        for (int i = 0; i < a.length; i++)\n\
    \            for (int j = i + 1; j < a.length; j++)\n                for (int\
    \ k = j + 1; k < a.length; k++)\n                    if (a[i] + a[j] + a[k] ==\
    \ 0)\n                        return true;\n        return false;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0l) {\n       \
    \                 return true;\n                    }\n                }\n   \
    \         }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0l) {\n       \
    \                 return true;\n                    }\n                }\n   \
    \         }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // your code here\n        if (l.size() < 3) {\n            return false;\n\
    \        }\n        Collections.sort(l);\n        long sum = 0;\n        int left\
    \ = 0;\n        int right = 0;\n        for (int i = 0; i < l.size() - 2; i++)\
    \ {\n            left = i + 1;\n            right = l.size() - 1;\n          \
    \  while (left < right) {\n                sum = l.get(i) + l.get(left) + l.get(right);\n\
    \                if (sum == 0) {\n                    return true;\n         \
    \       } else if (sum < 0) {\n                    left++;\n                }\
    \ else {\n                    right--;\n                }\n            }\n   \
    \     }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i = i + 1) {\n            for (int j = i\
    \ + 1; j < l.size(); j = j + 1) {\n                for (int k = j + 1; k < l.size();\
    \ k = k + 1) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        else\
    \ {\n            Collections.sort(l);\n            for (int i = 0; i < l.size()\
    \ - 2; i++) {\n                int j = i + 1;\n                int k = l.size()\
    \ - 1;\n                while (j < k) {\n                    if (l.get(i) + l.get(j)\
    \ + l.get(k) == 0) {\n                        return true;\n                 \
    \   }\n                    else if (l.get(i) + l.get(j) + l.get(k) < 0) {\n  \
    \                      j++;\n                    }\n                    else {\n\
    \                        k--;\n                    }\n                }\n    \
    \        }\n            return false;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int n = l.size();\n        // \n        if (n < 3) {\n            return\
    \ false;\n        }\n        // \n        Collections.sort(l);\n        int i\
    \ = 0;\n        while (i < n - 2) {\n            int j = i + 1;\n            int\
    \ k = n - 1;\n            while (j < k) {\n                long triple_sum = l.get(i)\
    \ + l.get(j) + l.get(k);\n                if (triple_sum == 0) {\n           \
    \         return true;\n                }\n                if (triple_sum < 0)\
    \ {\n                    j += 1;\n                } else {\n                 \
    \   k -= 1;\n                }\n            }\n            i += 1;\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // insert your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_trf899.java:29)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // IMPLEMENT ME\n        long sum = 0;\n        long counter = 0;\n  \
    \      if (l.size() <= 2) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.size(); i++) {\n            sum = l.get(i);\n            for\
    \ (int j = i + 1; j < l.size(); j++) {\n                sum += l.get(j);\n   \
    \             for (int k = j + 1; k < l.size(); k++) {\n                    sum\
    \ += l.get(k);\n                    if (sum == 0) {\n                        return\
    \ true;\n                    }\n                    sum -= l.get(k);\n       \
    \         }\n                sum -= l.get(j);\n            }\n        }\n    \
    \    return false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        Map<Long,\
    \ Integer> map = new HashMap<Long, Integer>();\n        for (Long i : l) {\n \
    \           if (map.containsKey(i)) {\n                int x = map.get(i);\n \
    \               map.put(i, x + 1);\n            } else {\n                map.put(i,\
    \ 1);\n            }\n        }\n        for (Long i : l) {\n            for (Long\
    \ j : l) {\n                if (!i.equals(j)) {\n                    if (map.containsKey(-(i\
    \ + j))) {\n                        if (i == -(i + j) && map.get(i) < 2) {\n \
    \                           continue;\n                        }\n           \
    \             if (j == -(i + j) && map.get(j) < 2) {\n                       \
    \     continue;\n                        }\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n\t\
    \tCollections.sort(l);\n\t\tfor (int i = 0; i < l.size() - 2; i++) {\n\t\t\tif\
    \ (twoSumToZero(l, i + 1, l.size() - 1, -l.get(i))) {\n\t\t\t\treturn true;\n\t\
    \t\t}\n\t\t}\n\t\treturn false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkewsty2t.java:25: error: cannot find symbol\n\t\t\tif (twoSumToZero(l,\
    \ i + 1, l.size() - 1, -l.get(i))) {\n\t\t\t    ^\n  symbol:   method twoSumToZero(ArrayList<Long>,int,int,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n\t\
    return true;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8iqt5er.java:26)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new java.lang.UnsupportedOperationException(\"Not Implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ Implemented\n\tat Problem.triplesSumToZero(tmp80umuwft.java:23)\n\tat Problem.main(tmp80umuwft.java:26)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       long[] a = new long[l.size()];\n        for (int i = 0; i < l.size();\
    \ i++) {\n            a[i] = l.get(i);\n        }\n        for (int i = 0; i <\
    \ a.length; i++) {\n            for (int j = i + 1; j < a.length; j++) {\n   \
    \             for (int k = j + 1; k < a.length; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] == 0) {\n                        return true;\n        \
    \            }\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \     // code your solution to problem here\n      return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptn9493iz.java:29)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                pairs.add(new Pair<Long, Long>(l.get(i),\
    \ l.get(j)));\n            }\n        }\n        for (int i = 0; i < pairs.size();\
    \ i++) {\n            for (int j = i + 1; j < pairs.size(); j++) {\n         \
    \       Pair<Long, Long> pair1 = pairs.get(i);\n                Pair<Long, Long>\
    \ pair2 = pairs.get(j);\n                if (pair1.getValue0().equals(pair2.getValue0())\
    \ || pair1.getValue0().equals(pair2.getValue1()) || pair1.getValue1().equals(pair2.getValue0())\
    \ || pair1.getValue1().equals(pair2.getValue1())) {\n                    continue;\n\
    \                }\n                if (pair1.getValue0() + pair1.getValue1()\
    \ + pair2.getValue0() + pair2.getValue1() == 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.triplesSumToZero(tmph2_85ymk.java:26)\n\tat Problem.main(tmph2_85ymk.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // your code here\n        //return false;\n        int n = l.size();\n\
    \        for(int i = 0; i < n - 2; i++) {\n            for(int j = i + 1; j <\
    \ n - 1; j++) {\n                for(int k = j + 1; k < n; k++) {\n          \
    \          if(l.get(i) + l.get(j) + l.get(k) == 0) {\n                       \
    \ return true;\n                    }\n                }\n            }\n    \
    \    }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"Erase this line and replace with your own\
    \ code\");\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Erase this line\
    \ and replace with your own code\n\tat Problem.triplesSumToZero(tmp4btfcf4g.java:23)\n\
    \tat Problem.main(tmp4btfcf4g.java:26)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        l.sort(null);\n\
    \        for (int i = 0; i < l.size() - 2; i++) {\n            int j = i + 1;\n\
    \            int k = l.size() - 1;\n            while (j < k) {\n            \
    \    long sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0)\
    \ {\n                    return true;\n                } else if (sum < 0) {\n\
    \                    j += 1;\n                } else {\n                    k\
    \ -= 1;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size() < 3) return false;\n        long first = l.get(0);\n     \
    \   long second = l.get(1);\n        long third = l.get(2);\n        if(first\
    \ + second + third == 0) return true;\n        else if(l.size() < 4) return false;\n\
    \        else {\n            ArrayList<Long> tail = new ArrayList<Long>(l.subList(1,\
    \ l.size()));\n            return triplesSumToZero(tail);\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfnf244yq.java:37)\n"
  stdout: ''
  timestamp: 1660011497
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        Set<Long>\
    \ set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n     \
    \       for (int j = i + 1; j < l.size(); j++) {\n                if (set.contains(-(l.get(i)\
    \ + l.get(j)))) {\n                    return true;\n                }\n     \
    \       }\n            set.add(l.get(i));\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011497
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // we need to sort the list to apply the algorithm:\n        Collections.sort(l);\n\
    \        // we iterate through every pair in the list:\n        for (int i = 0;\
    \ i < l.size() - 1; i++) {\n            for (int j = i + 1; j < l.size(); j++)\
    \ {\n                // we only need to search for the list for elements greater\
    \ than or equal to the pair, since\n                // the list is sorted\n  \
    \              long pairSum = l.get(i) + l.get(j);\n                if (l.subList(j,\
    \ l.size()).contains(-pairSum)) {\n                    return true;\n        \
    \        }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011497
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) return false;\n        Collections.sort(l);\n      \
    \  for (int i = 0; i < l.size() - 2; i++) {\n            int j = i + 1;\n    \
    \        int k = l.size() - 1;\n            while (j < k) {\n                long\
    \ sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum < 0) {\n    \
    \                j += 1;\n                } else if (sum > 0) {\n            \
    \        k -= 1;\n                } else {\n                    return true;\n\
    \                }\n            }\n        }\n        return false;\n    }\n \
    \   public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011497
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"Do not write main(). Read instructions carefully.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Do not write main().\
    \ Read instructions carefully.\n\tat Problem.triplesSumToZero(tmpnk712pg5.java:23)\n\
    \tat Problem.main(tmpnk712pg5.java:26)\n"
  stdout: ''
  timestamp: 1660011497
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) return false;\n        for (int i = 0; i < l.size()\
    \ - 2; i += 1) {\n            for (int j = i + 1; j < l.size() - 1; j += 1) {\n\
    \                for (int k = j + 1; k < l.size(); k += 1) {\n               \
    \     if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011497
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n\t\
    HashSet<Long> set = new HashSet<Long>();\n\tfor (Long e : l) {\n\t    if (set.contains(-e))\
    \ {\n\t\treturn true;\n\t    }\n\t    set.add(e);\n\t}\n\treturn false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjcvqxeri.java:34)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new UnsupportedOperationException(\"Problem's triplesSumToZero hasn't\
    \ been implemented yet.\");\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem's\
    \ triplesSumToZero hasn't been implemented yet.\n\tat Problem.triplesSumToZero(tmpvzewy3o3.java:23)\n\
    \tat Problem.main(tmpvzewy3o3.java:26)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        l.sort(Comparator.naturalOrder());\n\
    \        for (int i = 0; i < l.size() - 2; i++) {\n            int j = i + 1;\n\
    \            int k = l.size() - 1;\n            while (j < k) {\n            \
    \    long sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0)\
    \ {\n                    return true;\n                } else if (sum < 0) {\n\
    \                    j++;\n                } else {\n                    k--;\n\
    \                }\n            }\n        }\n        return false;\n    }\n \
    \   public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // YOUR CODE HERE\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvurpp1s.java:29)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       boolean triplets = false;\n        for (int i = 0; i < l.size(); i++){\n\
    \            for (int j = i + 1; j < l.size(); j++){\n                for (int\
    \ k = j + 1; k < l.size(); k++){\n                    if (l.get(i) + l.get(j)\
    \ + l.get(k) == 0){\n                        triplets = true;\n              \
    \      }\n                }\n            }\n        }\n        return triplets;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011497
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        l.sort(null);\n\
    \        for (int i = 0; i < l.size() - 2; i++) {\n            int a = l.get(i).intValue();\n\
    \            int j = i + 1;\n            int k = l.size() - 1;\n            while\
    \ (j < k) {\n                int b = l.get(j).intValue();\n                int\
    \ c = l.get(k).intValue();\n                if (a + b + c == 0) {\n          \
    \          return true;\n                } else if (a + b + c < 0) {\n       \
    \             j++;\n                } else {\n                    k--;\n     \
    \           }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new UnsupportedOperationException(\"Replace this exception with\
    \ your code.\");\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Replace\
    \ this exception with your code.\n\tat Problem.triplesSumToZero(tmpnyoxhbou.java:23)\n\
    \tat Problem.main(tmpnyoxhbou.java:26)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // find the index of the first non-zero element\n        int zeroIdx =\
    \ 0;\n        for (Long i : l) {\n            if (i != 0l) {\n               \
    \ break;\n            }\n            zeroIdx++;\n        }\n        // check if\
    \ the remaining list has length 3 or greater\n        if (l.size() < zeroIdx +\
    \ 3) {\n            return false;\n        }\n        // sort the list\n     \
    \   Collections.sort(l.subList(zeroIdx, l.size()));\n        // check each triple\
    \ (a, b, c) in the list of non-zero elements\n        // in ascending order\n\
    \        // if a + b + c == 0, return true\n        int start = zeroIdx;\n   \
    \     while (start + 2 < l.size()) {\n            long a = l.get(start);\n   \
    \         long b = l.get(start + 1);\n            long c = l.get(start + 2);\n\
    \            if (a + b + c == 0) {\n                return true;\n           \
    \ }\n            start++;\n        }\n        // if no such triple is found, return\
    \ false\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0l) {\n       \
    \                 return true;\n                    }\n                }\n   \
    \         }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"Not yet implemented.\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not yet implemented.\n\
    \tat Problem.triplesSumToZero(tmp491notyb.java:23)\n\tat Problem.main(tmp491notyb.java:26)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return l.size() >= 3 &&\n            (IntStream.range(0, l.size()).anyMatch(\n\
    \                i -> IntStream.range(i + 1, l.size()).anyMatch(\n           \
    \         j -> IntStream.range(j + 1, l.size()).anyMatch(\n                  \
    \      k -> l.get(i) + l.get(j) + l.get(k) == 0))));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int n = l.size();\n        HashSet<Long> set = new HashSet<Long>();\n\
    \        for (int i = 0; i < n; i++) {\n            long x = l.get(i);\n     \
    \       for (int j = i + 1; j < n; j++) {\n                long y = l.get(j);\n\
    \                long val = -(x + y);\n                if (set.contains(val))\
    \ {\n                    return true;\n                }\n            }\n    \
    \        set.add(x);\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // fill in this function\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgg3raf3r.java:27)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // your code here\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa68fwnpu.java:29)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // fill in code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp261vthl0.java:29)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        Long[]\
    \ a = new Long[l.size()];\n        a = l.toArray(a);\n        Arrays.sort(a);\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i + 1;\
    \ j < a.length; j++) {\n                for (int k = j + 1; k < a.length; k++)\
    \ {\n                    if (a[i] + a[j] + a[k] == 0) {\n                    \
    \    return true;\n                    }\n                }\n            }\n \
    \       }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // IMPLEMENT\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jbykbl0.java:29)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // put your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvy63apbd.java:29)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n\t\
    \tif (l.size() < 3) {\n\t\t\treturn false;\n\t\t}\n\t\tlong[] l_arr = l.stream().mapToLong(x\
    \ -> x).toArray();\n\t\tlong[] l_arr_cp = Arrays.copyOf(l_arr, l_arr.length);\n\
    \t\tArrays.sort(l_arr);\n\t\tfor (int i = 0; i < l_arr.length; i++) {\n\t\t\t\
    int j = i + 1;\n\t\t\tint k = l_arr.length - 1;\n\t\t\twhile (j < k) {\n\t\t\t\
    \tif (l_arr[i] + l_arr[j] + l_arr[k] == 0) {\n\t\t\t\t\tif (Stream.of(l_arr[i],\
    \ l_arr[j], l_arr[k]).distinct().count() == 3) {\n\t\t\t\t\t\treturn true;\n\t\
    \t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tj++;\n\t\t\t\t\t\tk--;\n\t\t\t\t\t}\n\
    \t\t\t\t}\n\t\t\t\telse if (l_arr[i] + l_arr[j] + l_arr[k] < 0) {\n\t\t\t\t\t\
    j++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    \treturn false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmg9na01t.java:55)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       ArrayList<Long> a = new ArrayList<>();\n        for (int i = 0; i < l.size();\
    \ i += 1) {\n            a.add(l.get(i));\n        }\n        a.sort(null);\n\
    \        int i = 0;\n        while (i < a.size() - 2) {\n            int j = i\
    \ + 1;\n            int k = a.size() - 1;\n            while (j < k) {\n     \
    \           if (a.get(i) + a.get(j) + a.get(k) == 0) {\n                    return\
    \ true;\n                } else if (a.get(i) + a.get(j) + a.get(k) < 0) {\n  \
    \                  j += 1;\n                } else {\n                    k -=\
    \ 1;\n                }\n            }\n            i += 1;\n        }\n     \
    \   return false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (Long x: l) {\n            for (Long y: l) {\n                for\
    \ (Long z: l) {\n                    if (x != y && x != z && y != z && x + y +\
    \ z == 0) {\n                        return true;\n                    }\n   \
    \             }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5u6w0c2.java:37)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // Your code here.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2kjlsk64.java:24: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       ArrayList<Long> l1 = new ArrayList<Long>();\n        ArrayList<Long> l2\
    \ = new ArrayList<Long>();\n        if (l.size() < 3) {\n            return false;\n\
    \        }\n        for (int i = 0; i < l.size(); i++) {\n            l1.add(l.get(i));\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                l2.add(l.get(j));\n\
    \                for (int k = j + 1; k < l.size(); k++) {\n                  \
    \  if (l1.get(i) + l2.get(j) + l.get(k) == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.triplesSumToZero(tmphnyichj7.java:33)\n\tat Problem.main(tmphnyichj7.java:42)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // replace the return statement below with your code\n        return (false);\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpot7zunl7.java:29)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       ArrayList<Long> xs = new ArrayList<Long>();\n        for (int i = 0; i\
    \ < l.size(); i = i + 1) {\n            xs.add(l.get(i));\n        }\n       \
    \ Pair<ArrayList<Long>, ArrayList<Long>> splitted = split(xs);\n        ArrayList<Long>\
    \ xs_t = splitted.getValue0();\n        ArrayList<Long> xs_f = splitted.getValue1();\n\
    \        long[] ts = to_array(xs_t);\n        long[] fs = to_array(xs_f);\n  \
    \      Arrays.sort(ts);\n        Arrays.sort(fs);\n        return triplesSumToZero_aux(ts,\
    \ fs);\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0jmjzoo_.java:27: error: cannot find symbol\n        Pair<ArrayList<Long>,\
    \ ArrayList<Long>> splitted = split(xs);\n                                   \
    \                       ^\n  symbol:   method split(ArrayList<Long>)\n  location:\
    \ class Problem\n/tmp/tmp0jmjzoo_.java:30: error: cannot find symbol\n       \
    \ long[] ts = to_array(xs_t);\n                    ^\n  symbol:   method to_array(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmp0jmjzoo_.java:31: error: cannot find symbol\n\
    \        long[] fs = to_array(xs_f);\n                    ^\n  symbol:   method\
    \ to_array(ArrayList<Long>)\n  location: class Problem\n/tmp/tmp0jmjzoo_.java:34:\
    \ error: cannot find symbol\n        return triplesSumToZero_aux(ts, fs);\n  \
    \             ^\n  symbol:   method triplesSumToZero_aux(long[],long[])\n  location:\
    \ class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size();\
    \ j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n         \
    \           if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                     \
    \   return true;\n                    }\n                }\n            }\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // My Code\n        Map<Long, Long> count = new HashMap<>();\n       \
    \ for (long item : l) {\n            if (count.containsKey(item)) {\n        \
    \        count.put(item, count.get(item) + 1);\n            } else {\n       \
    \         count.put(item, 1l);\n            }\n        }\n        for (long item\
    \ : l) {\n            for (long item1 : l) {\n                if (item == item1)\
    \ continue;\n                long item3 = -1 * (item + item1);\n             \
    \   if (count.containsKey(item3)) {\n                    if (item3 == item ||\
    \ item3 == item1) {\n                        if (count.get(item3) > 1) {\n   \
    \                         return true;\n                        }\n          \
    \          } else {\n                        return true;\n                  \
    \  }\n                }\n            }\n        }\n        return false;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9lgaxxvg.java:29)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // create an array to hold the number of times we've seen each element\n\
    \        HashMap<Long,Integer> map = new HashMap<Long,Integer>();\n        //\
    \ go through the list, checking to see if we've seen any of the numbers\n    \
    \    // before.\n        for (Long l1 : l) {\n            Integer i = map.get(l1);\n\
    \            if (i == null) {\n                // if we haven't seen this element\
    \ before, add it to the map\n                map.put(l1, new Integer(1));\n  \
    \          } else {\n                // otherwise, increment the number of times\
    \ we've seen this element\n                map.put(l1, i + 1);\n            }\n\
    \        }\n        // go through all pairs of elements\n        for (Long l1\
    \ : l) {\n            for (Long l2 : l) {\n                // check to see if\
    \ the third element is in the map\n                Integer i = map.get(-(l1 +\
    \ l2));\n                if (i != null) {\n                    // we check to\
    \ make sure that the triple is distinct, that\n                    // we aren't\
    \ considering the same element three times.\n                    if (l1 != l2\
    \ || l1 != -(l1 + l2)) {\n                        return true;\n             \
    \       }\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n\
    \        for (int i = 0; i < l.size() - 2; i++) {\n            int j = i + 1;\n\
    \            int k = l.size() - 1;\n            while (j < k) {\n            \
    \    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                    return true;\n\
    \                } else if (l.get(i) + l.get(j) + l.get(k) < 0) {\n          \
    \          j += 1;\n                } else {\n                    k -= 1;\n  \
    \              }\n            }\n        }\n        return false;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        } else {\n   \
    \         for (int i = 0; i < l.size(); i += 1) {\n                for (int j\
    \ = i + 1; j < l.size(); j += 1) {\n                    for (int k = j + 1; k\
    \ < l.size(); k += 1) {\n                        if (l.get(i) + l.get(j) + l.get(k)\
    \ == 0) {\n                            return true;\n                        }\n\
    \                    }\n                }\n            }\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       boolean result = false;\n        int k = 0;\n        long sum = 0;\n \
    \       while ((k < (l.size() - 2))) {\n            int j = k + 1;\n         \
    \   while ((j < (l.size() - 1))) {\n                int i = j + 1;\n         \
    \       while ((i < l.size())) {\n                    sum = (l.get(k) + l.get(j))\
    \ + l.get(i);\n                    if ((sum == 0)) {\n                       \
    \ result = true;\n                    }\n                    i = (i + 1);\n  \
    \              }\n                j = (j + 1);\n            }\n            k =\
    \ (k + 1);\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       long n = l.size();\n        for (long i = 0; i < n - 2; i++) {\n     \
    \       for (long j = i + 1; j < n - 1; j++) {\n                for (long k =\
    \ j + 1; k < n; k++) {\n                    if (l.get((int)i) + l.get((int)j)\
    \ + l.get((int)k) == 0) {\n                        return true;\n            \
    \        }\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Collections.sort(l);\n        int n = l.size();\n        for (int i =\
    \ 0; i < n; i++) {\n            int j = i + 1;\n            int k = n - 1;\n \
    \           while (j < k) {\n                long sum = l.get(i) + l.get(j) +\
    \ l.get(k);\n                if (sum == 0) {\n                    return true;\n\
    \                } else if (sum < 0) {\n                    j++;\n           \
    \     } else {\n                    k--;\n                }\n            }\n \
    \       }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new RuntimeException(\"not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.triplesSumToZero(tmp4x3keq53.java:23)\n\tat Problem.main(tmp4x3keq53.java:26)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       /*\n         * This is a placeholder so the code compiles. Replace it\
    \ with the\n         * correct solution.\n         */\n        if (l.size() <\
    \ 3)\n            return false;\n        for (int i = 0; i < l.size(); i++) {\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                for (int\
    \ k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j)\
    \ + l.get(k) == 0)\n                        return true;\n                }\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if(l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n\
    \        int i = 0;\n        int n = l.size();\n        int j = 0;\n        int\
    \ k = 0;\n        while(i < n - 2) {\n            j = i + 1;\n            k =\
    \ n - 1;\n            while(j < k) {\n                long a = l.get(i);\n   \
    \             long b = l.get(j);\n                long c = l.get(k);\n       \
    \         if(a + b + c == 0l) {\n                    return true;\n          \
    \      }\n                else if(a + b + c < 0l) {\n                    j +=\
    \ 1;\n                }\n                else {\n                    k -= 1;\n\
    \                }\n            }\n            i += 1;\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       Collections.sort(l);\n        boolean result = false;\n        for (int\
    \ i = 0; i < l.size() - 2; i++) {\n            int j = i + 1;\n            int\
    \ k = l.size() - 1;\n            while (j < k) {\n                if (l.get(i)\
    \ + l.get(j) + l.get(k) == 0) {\n                    result = true;\n        \
    \            break;\n                } else if (l.get(i) + l.get(j) + l.get(k)\
    \ < 0) {\n                    j++;\n                } else {\n               \
    \     k--;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // your code here.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputc35808.java:24: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() <= 2) {\n            return false;\n        }\n        TreeSet<Long>\
    \ ts = new TreeSet<Long>();\n        for (Long num : l) {\n            ts.add(num);\n\
    \        }\n        for (Long num1 : ts) {\n            for (Long num2 : ts) {\n\
    \                if (!(num1.equals(num2))) {\n                    for (Long num3\
    \ : ts) {\n                        if (!(num1.equals(num3)) && !(num2.equals(num3)))\
    \ {\n                            if ((num1 + num2 + num3) == 0) {\n          \
    \                      return true;\n                            }\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqqxov27.java:48)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        boolean\
    \ result = false;\n        HashSet<Long> sumToZero = new HashSet<Long>();\n  \
    \      for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j\
    \ < l.size(); j++) {\n                long sum = l.get(i) + l.get(j);\n      \
    \          if (sumToZero.contains(-sum)) {\n                    result = true;\n\
    \                }\n                sumToZero.add(sum);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       boolean triplesSumToZero = false;\n        Set<Pair<Long, Long>> seen\
    \ = new HashSet<Pair<Long, Long>>();\n        for (Long elem : l) {\n        \
    \    for (Long elem2 : l) {\n                Pair<Long, Long> p = new Pair<Long,\
    \ Long>(elem, elem2);\n                if (seen.contains(p)) {\n             \
    \       continue;\n                }\n                seen.add(p);\n         \
    \       if (elem != elem2 && (l.contains(-(elem + elem2)))) {\n              \
    \      triplesSumToZero = true;\n                }\n            }\n        }\n\
    \        return triplesSumToZero;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.triplesSumToZero(tmpifytnir1.java:27)\n\tat Problem.main(tmpifytnir1.java:40)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int n = l.size();\n        for (int i = 0; i < n; i++) {\n           \
    \ for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n;\
    \ k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n   \
    \                     return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       int n = l.size();\n        // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n        // (true)\n \
    \       // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n\
    \        // (false)\n        if (n < 3) {\n            return false;\n       \
    \ }\n        // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n        // (true)\n \
    \       // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n\
    \        // (false)\n        l.sort(Comparator.naturalOrder());\n        // >>>\
    \ triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l,\
    \ (long)3l, (long)9l, (long)7l))))\n        // (true)\n        // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l))))\n        // (false)\n        for\
    \ (int i = 0; i < n; i++) {\n            // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n            // (true)\n\
    \            // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n\
    \            // (false)\n            int m = n - 1;\n            // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l))))\n            // (true)\n           \n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl0iry24b.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return triplesSumToZero__while(l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5n4kmxh4.java:23: error: cannot find symbol\n        return triplesSumToZero__while(l);\n\
    \               ^\n  symbol:   method triplesSumToZero__while(ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        HashSet<Long>\
    \ set = new HashSet<Long>();\n        HashSet<Long> visited = new HashSet<Long>();\n\
    \        for (int i = 0; i < l.size(); i++) {\n            Long current = l.get(i);\n\
    \            for (int j = i + 1; j < l.size(); j++) {\n                Long v\
    \ = -(current + l.get(j));\n                if (set.contains(v) && !visited.contains(v))\
    \ {\n                    return true;\n                }\n            }\n    \
    \        set.add(current);\n            visited.add(current);\n        }\n   \
    \     return false;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4la5vw2h.java:44)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        Collections.sort(l);\n\
    \        ArrayList<Long> s = new ArrayList<Long>();\n        for (Long x : l)\
    \ {\n            if (x != 0) {\n                s.add(x);\n            }\n   \
    \     }\n        for (int i = 0; i < (l.size() - 1); i++) {\n            int j\
    \ = i + 1;\n            int k = l.size() - 1;\n            while (j < k) {\n \
    \               long a = l.get(i);\n                long b = l.get(j);\n     \
    \           long c = l.get(k);\n                if ((a + b + c) < 0) {\n     \
    \               j = j + 1;\n                } else if ((a + b + c) > 0) {\n  \
    \                  k = k - 1;\n                } else {\n                    return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // Fill in your answer here.\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ceaw8es.java:29)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // replace pass with your solution\n        if (l.size() < 3) return false;\n\
    \        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i\
    \ + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size();\
    \ k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) return\
    \ true;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // return (l.get(0) + l.get(1) + l.get(2) == 0) || (l.get(1) + l.get(2)\
    \ + l.get(3) == 0);\n        if (l.size() < 3) {\n            return false;\n\
    \        }\n        // System.out.println(l);\n        ArrayList<Long> l2 = new\
    \ ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n         \
    \   if (l.get(i) != 0) {\n                l2.add(l.get(i));\n            }\n \
    \       }\n        if (l2.size() < 3) {\n            return true;\n        }\n\
    \        HashSet<Triplet<Long, Long, Long>> s = new HashSet<Triplet<Long, Long,\
    \ Long>>();\n        for (int i = 0; i < l2.size(); i++) {\n            for (int\
    \ j = i + 1; j < l2.size(); j++) {\n                for (int k = j + 1; k < l2.size();\
    \ k++) {\n                    if (l2.get(i) + l2.get(j) + l2.get(k) == 0) {\n\
    \                        // System.out.println(l2.get(i) + \" \" + l2.get(j) +\
    \ \" \" + l2.get(k));\n                        s.add(new Triplet<Long, Long, Long>(l2.get(i),\
    \ l2.get(j), l2.get(k)));\n                    }\n                }\n        \
    \    }\n        }\n        return s.size() != 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Triplet\n\
    \tat Problem.triplesSumToZero(tmp9ydjh4z8.java:43)\n\tat Problem.main(tmp9ydjh4z8.java:53)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Triplet\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size();\
    \ j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n         \
    \           if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                     \
    \   return true;\n                    }\n                }\n            }\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return (((long)0l) == ((((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l)))\
    \ + l.get(((int)2l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l)))\
    \ + l.get(((int)3l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l)))\
    \ + l.get(((int)4l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l)))\
    \ + l.get(((int)5l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)2l)))\
    \ + l.get(((int)3l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)2l)))\
    \ + l.get(((int)4l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)2l)))\
    \ + l.get(((int)5l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)3l)))\
    \ + l.get(((int)4l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)3l)))\
    \ + l.get(((int)5l)))) | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)4l)))\
    \ + l.get(((int)5l)))) | (((long)0l) == ((l.get(((int)1l)) + l.get(((int)2l)))\
    \ + l.get(((int)3l)))) | (((long)0l) == ((l.get(((int)1l)) + l.get(((int)2l)))\
    \ + l.get(((int)4\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7gcxk3_2.java:23: error: ')' expected\n        return (((long)0l)\
    \ == ((((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l))) + l.get(((int)2l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l))) + l.get(((int)3l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l))) + l.get(((int)4l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)1l))) + l.get(((int)5l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)2l))) + l.get(((int)3l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)2l))) + l.get(((int)4l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)2l))) + l.get(((int)5l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)3l))) + l.get(((int)4l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)3l))) + l.get(((int)5l))))\
    \ | (((long)0l) == ((l.get(((int)0l)) + l.get(((int)4l))) + l.get(((int)5l))))\
    \ | (((long)0l) == ((l.get(((int)1l)) + l.get(((int)2l))) + l.get(((int)3l))))\
    \ | (((long)0l) == ((l.get(((int)1l)) + l.get(((int)2l))) + l.get(((int)4\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1;\
    \ j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++)\
    \ {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n\t\
    if (l.size() < 3) {\n\t    return false;\n\t}\n\tArrayList<Long> l_sorted = new\
    \ ArrayList<Long>(l);\n\tCollections.sort(l_sorted);\n\tfor (int i = 0; i < l_sorted.size()\
    \ - 2; i++) {\n\t    int j = i + 1;\n\t    int k = l_sorted.size() - 1;\n\t  \
    \  while (j < k) {\n\t\tif (l_sorted.get(i) + l_sorted.get(j) + l_sorted.get(k)\
    \ == 0) {\n\t\t    return true;\n\t\t}\n\t\telse if (l_sorted.get(i) + l_sorted.get(j)\
    \ + l_sorted.get(k) < 0) {\n\t\t    j += 1;\n\t\t}\n\t\telse {\n\t\t    k -= 1;\n\
    \t\t}\n\t    }\n\t}\n\treturn false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // YOUR CODE HERE\n        throw new UnsupportedOperationException(\"\
    Problem.triplesSumToZero\");\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem.triplesSumToZero\n\
    \tat Problem.triplesSumToZero(tmpxqj_lczc.java:24)\n\tat Problem.main(tmpxqj_lczc.java:27)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size();\
    \ j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n         \
    \           if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                     \
    \   return true;\n                    }\n                }\n            }\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       //YOUR CODE HERE\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzyafek36.java:29)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) {\n            return false;\n        } else {\n   \
    \         for (int i = 0; i < l.size(); i = i + 1) {\n                for (int\
    \ j = i + 1; j < l.size(); j = j + 1) {\n                    for (int k = j +\
    \ 1; k < l.size(); k = k + 1) {\n                        if (l.get(i) + l.get(j)\
    \ + l.get(k) == 0) {\n                            return true;\n             \
    \           }\n                    }\n                }\n            }\n     \
    \       return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh82m7h2.java:28)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \     if (l.size() < 3) return false;\n      for (int i = 0; i < l.size() - 2;\
    \ i++) {\n        for (int j = i + 1; j < l.size() - 1; j++) {\n          for\
    \ (int k = j + 1; k < l.size(); k++) {\n            if (l.get(i) + l.get(j) +\
    \ l.get(k) == 0) return true;\n          }\n        }\n      }\n      return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return Problem.triplesSumToZero((long)0l, l);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw0sv5crs.java:23: error: method triplesSumToZero in class Problem\
    \ cannot be applied to given types;\n        return Problem.triplesSumToZero((long)0l,\
    \ l);\n                      ^\n  required: ArrayList<Long>\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       HashSet<Long> hs = new HashSet<Long>();\n        for (Long x : l)\n  \
    \          hs.add(x);\n        for (Long x : l)\n            for (Long y : l)\n\
    \                if (hs.contains(-(x + y)))\n                    return true;\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13yg5ft0.java:33)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       if (l.size() < 3) return false;\n        // you should write the code\
    \ for triplesSumToZero and replace the line below\n        return false;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kagmulk.java:30)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // if there are less than three elements in the list l,\n        // it's\
    \ impossible to select three distinct elements that sum to zero.\n        if (l.size()\
    \ < 3) {\n            return false;\n        }\n        // sort the elements of\
    \ l,\n        Collections.sort(l);\n        // and keep track of whether or not\
    \ we have encountered a solution.\n        boolean found = false;\n        //\
    \ to show that there is a solution, it suffices to show that there\n        //\
    \ are three distinct elements that sum to zero. we set up two indices:\n     \
    \   // i is the index of the first element in the sum,\n        // j is the index\
    \ of the second element in the sum,\n        // and k is the index of the third\
    \ element in the sum.\n        // we observe that if the current triple of elements\
    \ at indices i, j, and k\n        // sum to zero, then we have found a solution.\n\
    \        // so we will set up these three indices so that they sweep over\n  \
    \      // the elements of l, and check the triple at indices i, j, and k\n   \
    \     // each time.\n        // by the end of the loop, we will have checked every\
    \ possible set of\n        // three elements in l, so we will have either found\
    \ a solution, or\n        // shown that there is no solution.\n        //\n  \
    \      // to sweep over every possible set of three elements, we initialize\n\
    \        // i, j, and k to be 0, 1, and 2, respectively.\n        // on each iteration\
    \ of the loop, we consider the triple at indices\n        // i, j, and k. then,\
    \ we move the index k forward by one.\n        // if k reaches the end of the\
    \ list, we move the index j forward by one.\n        // if j reaches the end of\
    \ the list, we move the index i forward by one.\n        // by this point, we've\
    \ considered every possible triple in l.\n        int i = 0;\n        int j =\
    \ 1;\n        int k = 2;\n        // keep looping while i, j, and k are all within\
    \ the bounds of l.\n        while (i < l.size() && j < l.size() && k < l.size())\
    \ {\n            // if the elements at indices i, j, and k sum to zero\n    }\n\
    \    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x70lvg2.java:60: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       return triplesSumToZero_1(l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkqnzkfo4.java:23: error: cannot find symbol\n        return triplesSumToZero_1(l);\n\
    \               ^\n  symbol:   method triplesSumToZero_1(ArrayList<Long>)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       // BEGIN Solution\n        Collections.sort(l);\n        int n = l.size();\n\
    \        for (int i = 0; i < n - 2; i++) {\n            int j = i + 1;\n     \
    \       int k = n - 1;\n            while (j < k) {\n                long sum\
    \ = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0) {\n       \
    \             return true;\n                } else if (sum < 0) {\n          \
    \          j++;\n                } else {\n                    k--;\n        \
    \        }\n            }\n        }\n        return false;\n        // END Solution\n\
    \    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \       throw new UnsupportedOperationException(\"Need to implement triplesSumToZero\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l)))) ==\
    \ (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)100l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Need\
    \ to implement triplesSumToZero\n\tat Problem.triplesSumToZero(tmpduixf2i4.java:23)\n\
    \tat Problem.main(tmpduixf2i4.java:26)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // triples_sum_to_zero takes an array array list of integers\
    \ as an input.\n    // it returns true if there are three distinct elements in\
    \ the array list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l))))\n    // (true)\n    // >>> triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))\n \
    \   // (false)\n    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))\n    // (true)\n    //\
    \ >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\n    //\
    \ (false)\n    public static boolean triplesSumToZero(ArrayList<Long> l) {\n \
    \     for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n          for (int k = j + 1; k < l.size(); k++) {\n            if (l.get(i)\
    \ + l.get(j) + l.get(k) == 0) {\n              return true;\n            }\n \
    \         }\n        }\n      }\n      return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)0l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)-1l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)-2l, (long)1l)))) == (true));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l)))) ==\
    \ (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)5l, (long)7l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l,\
    \ (long)7l)))) == (true));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (false));\n    assert(triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)5l, (long)-100l)))) == (false));\n    assert(triplesSumToZero((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)3l, (long)5l, (long)-100l))))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
