name: HumanEval_85_add
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a non-empty array list of integers lst. add the even\
  \ elements that are at odd indices..\n    // Examples:\n    // >>> add((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)2l, (long)6l, (long)7l))))\n    // (2l)\n    public static long add(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n\
  \    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l,\
  \ (long)8l)))) == (12l));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum\
    \ += lst.get(i);\n            }\n        }\n        return sum;", "        long\
    \ ans = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 1 && lst.get(i) % 2 == 0) {\n                ans += lst.get(i);\n   \
    \         }\n        }\n        return ans;", "        //if(lst == null)\n   \
    \     //    return null;\n        long sum = 0l;\n        for(int i = 0; i < lst.size();\
    \ i+=2) {\n            if(lst.get(i) % 2 == 0)\n                sum += lst.get(i);\n\
    \        }\n        return sum;", '        return lst.stream().reduce(0l, (acc,
    element) -> acc + element);', '        return 0l;', '        return lst.stream().filter(x
    -> x % 2 == 0).filter(x -> lst.indexOf(x) % 2 == 1).reduce((a, b) -> a + b).get();',
  '        throw new RuntimeException("Not implemented.");', "        long a = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 &&\
    \ lst.get(i) % 2 == 0)\n                a += lst.get(i);\n        }\n        return\
    \ a;", '        return lst.stream().filter(x -> x % 2 == 0).filter(x -> lst.indexOf(x)
    % 2 == 1).reduce((long)0, (x, y) -> x + y);', '        return 2;', '        return
    lst.stream().reduce(0l, (x, y) -> x + y);', "        long sum = 0l;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        long r = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n             \
    \   r += lst.get(i);\n            }\n        }\n        return r;", "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if\
    \ (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n\
    \        }\n        return sum;", "        long ans = 0;\n        for (int i =\
    \ 0; i < lst.size(); i += 2) {\n            ans += lst.get(i);\n        }\n  \
    \      return ans;", "        long sum = 0l;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> (x%2 == 0)).filter(x -> (lst.indexOf(x)%2 == 1)).mapToLong(x
    -> x).sum();', '        return lst.stream().filter(x -> (x % 2 == 0)).reduce(0l,
    (acc, curr) -> acc + curr);', "        Long sum = 0l;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n\
    \                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", '        return lst.stream().filter(x -> x % 2 == 0 && x % 4 != 0).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    // type your code here.\n        return (long)0l;", '        return lst.stream().filter(x
    -> (x%2 == 0 && lst.indexOf(x)%2 == 1)).mapToLong(x -> x).sum();', '        return
    lst.stream().reduce(1l, (a,b) -> a*b);', '        return lst.stream().filter(e
    -> e % 2 == 0).reduce(0l, (a,b) -> a + b);', '        return 0;', "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n   \
    \         }\n        }\n        return sum;", "        long res = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                res += lst.get(i);\n            }\n        }\n\
    \        return res;", '        return lst.stream().filter(i -> i % 2 == 0).filter(i
    -> lst.indexOf(i) % 2 == 1).reduce((a, b) -> a + b).get();', "        long n =\
    \ 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 ==\
    \ 1 && lst.get(i) % 2 == 0) {\n                n += lst.get(i);\n            }\n\
    \        }\n        return n;", '        return lst.stream().filter(x -> x%2 ==
    0).filter(x -> lst.indexOf(x)%2 == 1).reduce((sum, x) -> sum + x).get();', " \
    \       long res = (long)0l;\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            if (i % 2 == 1) {\n                if (lst.get(i) % 2 == 0) {\n \
    \                   res += lst.get(i);\n                }\n            }\n   \
    \     }\n        return res;", "        if(lst.size() == 0) return 0l;\n     \
    \   if(lst.size() == 1) return lst.get(0);\n        return lst.get(0) + lst.get(2)\
    \ + lst.get(4) + lst.get(6) + lst.get(8);", "        long result = 0;\n      \
    \  for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n\
    \        return result;", '        // your code goes here', "        long sum\
    \ = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2\
    \ == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n       \
    \     }\n        }\n        return sum;", "        long result = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            long x = lst.get(i);\n     \
    \       if (i % 2 == 1 && x % 2 == 0) {\n                result += x;\n      \
    \      }\n        }\n        return result;", '        return lst.stream().filter(it
    -> (it % 2) == 0).skip(1).limit(1).reduce((long)0, (long)0, Long::sum);', '        throw
    new UnsupportedOperationException("Problem solution not implemented.");', "  \
    \      for (long i = 0l; i < lst.size(); i++) {\n            if (i % 2 == 0 &&\
    \ lst.get((int)i) % 2 == 0) {\n                return lst.get((int)i);\n     \
    \       }\n        }\n        return 0l;", '        return 0l;', '        // ...
    your code goes here ...', "        long sum = 0;\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n \
    \               sum += lst.get(i);\n            }\n        }\n        return sum;",
  '        return lst.stream().filter(i -> (i%2==0 && lst.indexOf(i)%2!=0)).mapToLong(Long::longValue).sum();',
  "        long result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n    \
    \        if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n\
    \            }\n        }\n        return result;", '        return lst.stream().filter(x
    -> (int)x%2 == 0).filter(x -> (int)x%2 == 0).reduce(0l, (x, y) -> x + y);', " \
    \       // implement this function.\n        return 0;", '        return lst.stream().reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(v -> v % 2 == 0).filter(v
    -> lst.indexOf(v) % 2 == 1).reduce(0l, (v1, v2) -> v1 + v2);', "        long ret\
    \ = 0l;\n        for (int i = 0; i < lst.size(); i += 2) {\n            long x\
    \ = lst.get(i);\n            if (x % 2 == 0) {\n                ret += x;\n  \
    \          }\n        }\n        return ret;", '        return (long)IntStream.range(0,
    lst.size()).filter(i -> i % 2 == 1).mapToLong(lst::get).sum();', '        return
    lst.stream().filter(x -> (x.intValue() % 2 == 0 && lst.indexOf(x) % 2 == 1)).reduce(0l,
    (x, y) -> x + y);', "        // BEGIN SOLUTION\n        return lst.stream().filter(n\
    \ -> n % 2 == 0).skip(1).reduce(0l, (n, p) -> n + p);\n        // END SOLUTION",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        \n        int lstSize = lst.size();\n        long sum\
    \ = 0;\n        int i = 0;\n        while (i < lstSize) {\n            if (i %\
    \ 2 == 1) {\n                long number = lst.get(i);\n                if (number\
    \ % 2 == 0) {\n                    sum += number;\n                }\n       \
    \     }\n            i++;\n        }\n        return sum;", '        return lst.stream().filter(i
    -> i % 2 == 0).filter(j -> lst.indexOf(j) % 2 == 1).reduce(0l, (acc, j) -> acc
    + j);', '      return lst.stream().filter(x -> x % 2 == 0).skip(1).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().filter(x -> (x % 2 == 0) && (lst.indexOf(x)
    % 2 == 1)).mapToLong(x -> x).sum();', '        return 0;', '        return lst.stream().filter(x
    -> x % 2 == 0).filter(x -> lst.indexOf(x) % 2 == 1).reduce((x, y) -> x + y).get();',
  "        // YOUR CODE HERE\n        throw new RuntimeException(\"Not Implemented\"\
    );", '        return lst.stream().filter(x -> x % 2 == 0).filter(x -> lst.indexOf(x)
    % 2 == 1).reduce((x, y) -> x + y).get();', "        // Code here\n        return\
    \ lst.stream().filter(x -> x % 2 == 0).filter(x -> lst.indexOf(x) % 2 != 0).mapToLong(x\
    \ -> x).sum();", '        throw new UnsupportedOperationException("Problem.add
    has not been implemented");', '        return lst.stream().filter(x -> (lst.indexOf(x)
    % 2) == 1).filter(x -> x % 2 == 0).mapToLong(x -> x).sum();', "        long sum\
    \ = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2\
    \ == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n       \
    \     }\n        }\n        return sum;", '        return lst.stream().filter(e
    -> e % 2 == 0).filter(e -> lst.indexOf(e) % 2 == 1).reduce((e1, e2) -> e1 + e2).get();',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        int out0 = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            long i0 = lst.get(i);\n\
    \            if (i % 2 == 1 && i0 % 2 == 0) {\n                out0 += i0;\n \
    \           }\n        }\n        return out0;", "        try {\n            return\
    \ (long)lst.stream().reduce((a, b) -> b).get();\n        } catch (Exception ex)\
    \ {\n            return 0;\n        }", '        return lst.stream().filter(x
    -> x % 2 == 0).skip(1).reduce(0l, (a, b) -> a + b);', "        ArrayList<Long>\
    \ l1 = new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i += 2)\
    \ {\n            l1.add(lst.get(i));\n        }\n        return sum_array(l1);",
  '        return lst.stream().filter(x -> (x % 2 == 0 && lst.indexOf(x) % 2 == 1)).reduce(0l,
    (x, y) -> x + y);', "        long sum = 0l;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(x -> x % 2 == 0 && lst.indexOf(x) % 2 == 1).reduce(Long::sum).get();',
  "        // BEGIN SOLUTION\n        long acc = 0l;\n        for (int i = 0; i <\
    \ lst.size(); i += 2) {\n            acc += lst.get(i);\n        }\n        return\
    \ acc;\n        // END SOLUTION", '        return lst.stream().filter(e -> e %
    2 == 0 && lst.indexOf(e) % 2 == 1).reduce(0l, (x, y) -> x + y);', "        long\
    \ res = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if\
    \ (lst.get(i) % 2 == 0) {\n                res += lst.get(i);\n            }\n\
    \        }\n        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < lst.size(); i += 2) {\n            long e = lst.get(i);\n\
    \            if (e % 2 == 0) {\n                result.add(e);\n            }\n\
    \        }\n        long sum = 0l;\n        for (long e : result) {\n        \
    \    sum += e;\n        }\n        return sum;", '        return 0;', '        return
    lst.stream().reduce(0l, (a, b) -> a + (b % 2 == 0 ? b : 0));', "        long rv\
    \ = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n            long e =\
    \ lst.get(i);\n            if (i % 2 == 1 && e % 2 == 0) {\n                rv\
    \ += e;\n            }\n        }\n        return rv;", "        long result =\
    \ 0l;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 ==\
    \ 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n       \
    \     }\n        }\n        return result;", "        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        return lst.stream().filter(x -> {\n          \
    \      return (x % 2) == 0;\n            }).filter(x -> {\n                return\
    \ (lst.indexOf(x) % 2) == 1;\n            }).mapToLong(x -> {\n              \
    \  return x;\n            }).sum();", "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2\
    \ == 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", '        return lst.stream().filter(i -> i % 2 == 0).filter(i
    -> lst.indexOf(i) % 2 == 1).reduce((x, y) -> x + y).get();', "        // Create\
    \ an array with the elements of lst.\n        long[] arr = new long[lst.size()];\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            arr[i] = lst.get(i);\n\
    \        }\n        // Return the sum of even elements at odd indices.\n     \
    \   return IntStream.range(0, arr.length)\n            .filter(i -> i % 2 == 1)\n\
    \            .filter(i -> arr[i] % 2 == 0)\n            .mapToLong(i -> arr[i])\n\
    \            .sum();", '        return (long)lst.stream().filter(x -> x % 2 ==
    0).reduce(0l, (long a, long b) -> a + b);', "        return ((Stream) lst.stream()).filter(x\
    \ ->\n            (long)x % 2 == 0\n        ).filter(x ->\n            (long)x\
    \ % 2 == 0\n        ).skip(1).mapToLong(x ->\n            (long)x\n        ).sum();",
  '        return lst.stream().filter(num -> num % 2 == 0).filter(num -> lst.indexOf(num)
    % 2 == 1).reduce(0l, (a, b) -> a + b);', "        long r = 0;\n        for (int\
    \ i = 0; i < lst.size(); i += 2) {\n            r += lst.get(i);\n        }\n\
    \        return r;", '        return lst.stream().reduce(0l, (sum, x) -> sum +
    (x % 2 == 0 && lst.indexOf(x) % 2 == 1 ? x : 0));', "        long sum = 0l;\n\
    \        long i = 1l;\n        while (i < lst.size()) {\n            long num\
    \ = lst.get((int)i);\n            if (num % 2l == 0l) {\n                sum +=\
    \ num;\n            }\n            i += 2l;\n        }\n        return sum;",
  "        long count = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n    \
    \        if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                count += lst.get(i);\n\
    \            }\n        }\n        return count;", "        long s = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            long x = lst.get(i);\n\
    \            if (i % 2 == 1 && x % 2 == 0) {\n                s += x;\n      \
    \      }\n        }\n        return s;", "        long sum = 0l;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0)\n                sum += lst.get(i);\n        }\n        return sum;",
  '        return lst.stream().mapToLong(n -> n).filter(n -> n % 2 == 0).skip(1).limit(1).sum();',
  "        long result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n    \
    \        if (i % 2 == 1 && lst.get(i) % 2 == 0)\n                result += lst.get(i);\n\
    \        }\n        return result;", "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2\
    \ == 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", "        //return (long)lst.stream().filter(x -> x % 2 == 0).collect(Collectors.toList()).get(0);\n\
    \        return (long)lst.stream().filter(x -> x % 2 == 0).findFirst().get();",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(i
    -> i % 2 == 0).filter(i -> lst.indexOf(i) % 2 == 1).reduce((long)0l, (a, b) ->
    a + b);', '        return 0;', '        return 0;', "        Long val = 0l;\n\
    \        for (int i = 0; i < lst.size(); i += 2) {\n            val += lst.get(i);\n\
    \        }\n        return val;", "        return IntStream.range(0, lst.size())\n\
    \                .filter(i -> i % 2 == 1)\n                .mapToLong(i -> lst.get(i))\n\
    \                .sum();", '        return lst.stream().filter(x -> x % 2 == 0).filter(x
    -> lst.indexOf(x) % 2 == 1).reduce((x, y) -> x + y).get();', "        long res\
    \ = (long)0l;\n        for (int i = 0; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) % (long)2l == (long)0l && i % (long)2l == (long)1l) {\n        \
    \        res += lst.get(i);\n            }\n        }\n        return res;", " \
    \       Long L = 0l;\n        ArrayList<Long> L2 = new ArrayList<Long>();\n  \
    \      for (Long i = 0l; i < lst.size(); i++) {\n            if (i % 2 == 1 &&\
    \ lst.get(i.intValue()) % 2 == 0) {\n                L = L + lst.get(i.intValue());\n\
    \            }\n        }\n        return L;", "        // This is a \"method-only\"\
    \ submission. \n        // You only need to complete this method. \n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n   \
    \         }\n        }\n        return sum;", "        long ans = 0;\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                ans += lst.get(i);\n            }\n        }\n\
    \        return ans;", "      long sum = 0;\n      for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n          sum += lst.get(i);\n\
    \        }\n      }\n      return sum;", "        //TODO: Make it work.\n    \
    \    long res = 0;\n        if(lst == null) return res;\n        for(int i = 0;\
    \ i < lst.size(); i++){\n            if(lst.get(i) % 2 == 0){\n              \
    \  if(i % 2 != 0){\n                    res += lst.get(i);\n                }\n\
    \            }\n        }\n        return res;", '        throw new UnsupportedOperationException("Not
    Implemented Yet.");', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i += 2) {\n            sum += lst.get(i);\n        }\n        return sum;",
  '        return lst.stream().reduce(0l, (x, y) -> x + y);', '        return 0;',
  "        long rv = 0;\n        for (int i = 0; i < lst.size(); i++) {\n        \
    \    long x = lst.get(i);\n            if (i % 2 == 1 && x % 2 == 0) {\n     \
    \           rv += x;\n            }\n        }\n        return rv;", "       \
    \ //throw new UnsupportedOperationException(\"Method not implemented yet\");\n\
    \        int len = lst.size();\n        long sum = 0l;\n        for (int i = 0;\
    \ i < len; i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n    \
    \            sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long res = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                res += lst.get(i);\n\
    \            }\n        }\n        return res;", '        return (long)lst.stream().filter(x
    -> (x.longValue() % (long)2l) == (long)0l).filter(y -> (y.longValue() % (long)2l)
    == (long)1l).reduce((long)0l, (long x, long y) -> x + y);', '        return lst.stream().filter(x
    -> x % 2 == 0).filter(x -> lst.indexOf(x) % 2 == 1).reduce((long)0, (x, y) ->
    x + y);', "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum\
    \ += lst.get(i);\n            }\n        }\n        return sum;", '        throw
    new UnsupportedOperationException("Problem P07.add has not been implemented");',
  '        return lst.stream().filter(x -> x % 2 == 0).reduce(0l, (x, y) -> x + y);',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 0 && (lst.indexOf(x) % 2 != 0)).reduce(0l, (a,b) -> a + b);', '        return
    lst.stream().filter(x -> ((x) % (2l) == (0l)) && (lst.indexOf(x) % (2l) == (1l))).reduce((x,
    y) -> (x) + (y)).get();', '        return lst.stream().reduce(0l, (x, y) -> (x
    % 2) == 0 ? x + y : x);', "\t\treturn lst.stream().filter(e -> !(((lst.indexOf(e)\
    \ % 2) == 0))).reduce(0l, Long::sum);", '        throw new RuntimeException("Not
    yet implemented");', '        return lst.stream().reduce(0l, (x, y) -> (x + y)
    * y, (x, y) -> y);', "        long ret = 0l;\n        for (int i = 0; i < lst.size();\
    \ i += 2) {\n            ret += lst.get(i);\n        }\n        return ret;",
  "        return IntStream.range(0, lst.size())\n                        .filter(n\
    \ -> n % 2 == 1)\n                        .mapToLong(n -> lst.get(n))\n      \
    \                  .filter(n -> n % 2 == 0)\n                        .sum();",
  "        long ret = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                ret += lst.get(i);\n\
    \            }\n        }\n        return ret;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i += 2) {\n            sum += lst.get(i);\n\
    \        }\n        return sum;", '        return lst.stream().filter(e->(e %
    2) == 0).filter(e->(lst.indexOf(e) % 2) == 1).mapToLong(e->e).sum();', "     \
    \   long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n          \
    \  if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return new Solution().add(lst);',
  '        return lst.stream().filter(i -> i % 2 == 0).filter(i -> lst.indexOf(i)
    % 2 == 1).reduce((long)0l, (x, y) -> x + y);', '        return lst.stream().filter(e
    -> e % 2 == 0 && lst.indexOf(e) % 2 == 1).mapToLong(a -> a).sum();', '        return
    lst.stream().filter(x -> (lst.indexOf(x) % 2 == 1 && x % 2 == 0)).mapToLong(x
    -> x).sum();', "      return IntStream.range(0, lst.size())\n        .filter(n\
    \ -> n % 2 == 1)\n        .mapToLong(n -> lst.get(n))\n        .filter(n -> n\
    \ % 2 == 0)\n        .sum();", '        return (lst.stream().filter(x -> (x %
    2 == 0)).filter(x -> (lst.indexOf(x) % 2 == 1)).reduce((long)0l, (x, y) -> (x
    + y)));', "        long res = 0;\n        for (int i = 0; i < lst.size(); i+=2)\
    \ {\n            if (lst.get(i) % 2 == 0) {\n                res += lst.get(i);\n\
    \            }\n        }\n        return res;", "        long sum = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        //Write code here\n        long sum = 0;\n   \
    \     for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        // Your code goes here.\n        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 &&\
    \ lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n\
    \        }\n        return sum;", '        return lst.stream().filter(x -> x %
    2 == 0).filter(x -> lst.indexOf(x) % 2 == 1).reduce((x, y) -> x + y).get();',
  "        long res = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      long c = lst.get(i);\n            if (i % 2 == 1 && c % 2 == 0) {\n   \
    \             res += c;\n            }\n        }\n        return res;", '        return
    lst.stream().mapToLong(x -> x).filter(x -> x % 2 == 0).sum();', "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n   \
    \         }\n        }\n        return sum;", "        long result = 0;\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i)\
    \ % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n\
    \        return result;", "        // TODO\n        return (long)0l;", "     \
    \   long e = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n         \
    \   long n = lst.get(i);\n            if (n % 2 == 0) {\n                e +=\
    \ n;\n            }\n        }\n        return e;", '        return lst.stream().filter(num
    -> (num % 2 == 0)).reduce(0l, (a, b) -> a + b);', "        ArrayList<Long> ret\
    \ = new ArrayList<Long>();\n        int i = 0;\n        for (Long elt : lst) {\n\
    \            if (i % 2 == 1 && elt % 2 == 0) {\n                ret.add(elt);\n\
    \            }\n            i++;\n        }\n        return ret.stream().reduce((long)0l,\
    \ (a, b) -> a + b);", "        long sum = 0l;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", '        return
    lst.stream().filter(i -> i % 2 == 0).skip(1).reduce(0l, Long::sum);', "      \
    \  long result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n        \
    \    if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n\
    \            }\n        }\n        return result;", '        return lst.stream().filter(x
    -> (x % 2l) == 0l).mapToLong(x -> x).sum();', '        return lst.stream().mapToLong(Long::longValue).filter(num
    -> {if (num % 2 == 0) {return true;} else {return false;}}).filter(num -> {if
    (lst.indexOf(num) % 2 == 0) {return true;} else {return false;}}).sum();', " \
    \       long result = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n  \
    \          if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result +=\
    \ lst.get(i);\n            }\n        }\n        return result;", "        long\
    \ result = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n            if\
    \ (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n\
    \            }\n        }\n        return result;", "        long sum = 0;\n \
    \       for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 &&\
    \ lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        int i = 0;\n\
    \        while (i < lst.size()) {\n            if (i % 2 == 1 && lst.get(i) %\
    \ 2 == 0) {\n                sum += lst.get(i);\n            }\n            i++;\n\
    \        }\n        return sum;", "        // Your code here.\n        long sum\
    \ = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2\
    \ == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n       \
    \     }\n        }\n        return sum;", '        return lst.stream().filter(p
    -> p % 2 == 0).skip(1).reduce(0l, (x, y) -> x + y);', '        return 0;', " \
    \       // 2. filter on list elements where index is odd\n        // 3. map to\
    \ long (to match return type)\n        // 4. return sum\n        return lst.stream().filter(t\
    \ -> lst.indexOf(t) % 2 == 1).mapToLong(t -> t).sum();", '        return lst.stream().filter(a
    -> a % 2 == 0).skip(1).reduce(0l, (acc, b) -> acc + b);', '        return lst.stream().reduce(1l,
    (x, y) -> (x * y));', '        return lst.stream().filter(e -> e%2 == 0).skip(1).limit(1).findFirst().get();',
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().mapToLong(a
    -> a.longValue()).filter(n -> (n % 2) == 0).filter(n -> (n % 2) == 0).sum();',
  "        long sum = 0l;\n        // your solution goes here.\n        for (int i\
    \ = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        return Streams.zip(Streams.range(0,\
    \ lst.size()), lst.stream(),\n            (i,e) -> Pair.with(i,e))\n         \
    \   .filter(p -> (p.getValue0() % 2) == 1)\n            .map(p -> p.getValue1())\n\
    \            .filter(e -> (e % 2) == 0)\n            .reduce(0l, (l1,l2) -> l1\
    \ + l2);", '        return lst.stream().reduce(0l, (a,b) -> b % 2 == 0 && lst.indexOf(b)
    % 2 == 1 ? a + b : a);', "        int n = lst.size();\n        long sum = 0l;\n\
    \        for (int i = 0; i < n; i++) {\n            long value = lst.get(i);\n\
    \            if (i % 2 == 1 && value % 2 == 0) {\n                sum += value;\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> (x % 2 == 0 && lst.indexOf(x) % 2 == 1)).reduce(0l, (x, y) -> x + y);', " \
    \       long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return 0;', "      \
    \  long ret = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n        \
    \    ret += lst.get(i);\n        }\n        return ret;", "        long ret =\
    \ 0;\n        int i = 0;\n        while (i < lst.size()) {\n            if (i\
    \ % 2 == 1) {\n                ret += lst.get(i);\n            }\n           \
    \ i += 1;\n        }\n        return ret;", "        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long sum =\
    \ 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 ==\
    \ 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n          \
    \  }\n        }\n        return sum;", "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2\
    \ == 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", '        return 0;', "        long sum = 0l;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2\
    \ == 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", '        return lst.stream().filter(x -> x % 2 == 0 && lst.indexOf(x)
    % 2 == 1).reduce(0l, (a, b) -> a + b);', '        return 0l;', "        long sum\
    \ = 0l;\n        for (int i = 0; i < lst.size(); i += 2) {\n            long x\
    \ = lst.get(i);\n            if (x % 2 == 0) {\n                sum += x;\n  \
    \          }\n        }\n        return sum;", '        return lst.stream().filter(x
    -> x % 2 == 0).filter(x -> lst.indexOf(x) % 2 == 1).collect(Collectors.summingLong(Long::longValue));',
  "        // The body of the function\n        return lst.stream().reduce(0l, (acc,\
    \ curr) -> acc + curr);", "        // List<Long> arr = lst.stream().filter(x ->\
    \ x % 2 != 0).collect(Collectors.toList());\n        // Long sum = arr.stream().reduce(0l,\
    \ (x, y) -> x + y);\n        // Long sum = lst.stream().filter(x -> x % 2 != 0).reduce(0l,\
    \ (x, y) -> x + y);\n        Long sum = lst.stream().filter(x -> x % 2 != 0).reduce(0l,\
    \ Long::sum);\n        return sum;", '        return null;', '        throw new
    UnsupportedOperationException("Need to implement");', "        long ret=0l;\n\
    \        for(int i=0;i<lst.size();i+=2)\n            ret+=lst.get(i);\n      \
    \  return ret;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n             \
    \   sum += lst.get(i);\n            }\n        }\n        return sum;", "    \
    \    // Loop through the list to sum the evens at odd indices.\n        long sum\
    \ = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2\
    \ == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n       \
    \     }\n        }\n        return sum;"]
stop_tokens:
- "\n    }\n"
