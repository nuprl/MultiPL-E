name: HumanEval_146_specialFilter
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes an array array list of numbers\
  \ as input and returns \n    // the number of elements in the array array list that\
  \ are greater than 10 and both \n    // first and last digits of a number are odd\
  \ (1, 3, 5, 7, 9).\n    // For example:\n    // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)-73l, (long)14l, (long)-15l))))\n    // (1l)\n    // >>> specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
  \ (long)109l))))\n    // (2l)\n    public static long specialFilter(ArrayList<Long>\
  \ nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)-2l, (long)1l, (long)-5l)))) ==\
  \ (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)-73l, (long)14l, (long)-15l)))) == (1l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
  \ (long)109l)))) == (2l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)43l,\
  \ (long)-12l, (long)93l, (long)125l, (long)121l, (long)109l)))) == (4l));\n    assert(specialFilter((new\
  \ ArrayList<Long>(Arrays.asList((long)71l, (long)-2l, (long)-33l, (long)75l, (long)21l,\
  \ (long)19l)))) == (3l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList((long)1l))))\
  \ == (0l));\n    assert(specialFilter((new ArrayList<Long>(Arrays.asList()))) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        // need to change this function's name, it's a reserved word\n\
    \        class helper {\n            public long getFirstDigit(long n) {\n   \
    \             long[] digits = getDigits(n);\n                return digits[0];\n\
    \            }\n            public long getLastDigit(long n) {\n             \
    \   long[] digits = getDigits(n);\n                return digits[digits.length\
    \ - 1];\n            }\n            public long[] getDigits(long n) {\n      \
    \          ArrayList<Long> digits = new ArrayList<Long>();\n                while\
    \ (n != 0) {\n                    digits.add(n % 10);\n                    n /=\
    \ 10;\n                }\n                Collections.reverse(digits);\n     \
    \           return digits.stream().mapToLong(i -> i).toArray();\n            }\n\
    \        }\n        helper h = new helper();\n        return nums.stream().filter(x\
    \ -> x > 10).filter(x -> {\n            long firstDigit = h.getFirstDigit(x);\n\
    \            long lastDigit = h.getLastDigit(x);\n            return firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0;\n        }).count();", "        // get numbers\
    \ which are > 10\n        List<Long> biggerThan10 = nums.stream().filter(i ->\
    \ i > 10).collect(Collectors.toList());\n        // filter even numbers and get\
    \ the first and last digit of a number\n        return biggerThan10.stream().filter(i\
    \ -> {\n                long firstDigit = i % 10;\n                long lastDigit\
    \ = (i / 10) % 10;\n                return firstDigit % 2 != 0 && lastDigit %\
    \ 2 != 0;\n            }).count();", "        //first and last digits of number\
    \ are odd\n        // LongStream.range(1,10).boxed().collect(Collectors.toCollection(ArrayList::new));\
    \ \n        // long a = nums.stream().filter(n -> n % 10 % 2 != 0).count();\n\
    \        return nums.stream().filter(n -> n > 10 && n % 10 % 2 != 0 && n / (long)Math.pow(10,\
    \ Math.floor(Math.log10(n))) % 2 != 0).count();", "        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long count\
    \ = 0;\n        for (long num : nums) {\n            if (num > 10 && isFirstDigitOdd(num)\
    \ && isLastDigitOdd(num)) {\n                count++;\n            }\n       \
    \ }\n        return count;", '        return 1l;', "        // INSERT YOUR CODE\
    \ HERE\n        List<Long> listOfAllNums = new ArrayList<>();\n        for (Long\
    \ num : nums) {\n            listOfAllNums.add(num);\n        }\n        // listOfAllNums.forEach(System.out::println);\n\
    \        List<Long> numList = new ArrayList<>();\n        for (Long num : listOfAllNums)\
    \ {\n            if (num > 10) {\n                // System.out.println(num);\n\
    \                // List<Integer> numList = new ArrayList<>();\n             \
    \   List<String> numListAsString = new ArrayList<>();\n                numListAsString.add(num.toString());\n\
    \                for (String numStr : numListAsString) {\n                   \
    \ char[] arrayOfChars = numStr.toCharArray();\n                    // System.out.println(arrayOfChars[0]);\n\
    \                    // System.out.println(arrayOfChars[arrayOfChars.length -\
    \ 1]);\n                    if (arrayOfChars[0] % 2 != 0 && arrayOfChars[arrayOfChars.length\
    \ - 1] % 2 != 0) {\n                        numList.add(num);\n              \
    \      }\n                }\n            }\n        }\n        // numList.forEach(System.out::println);\n\
    \        return numList.size();", "        // Replace the line below with your\
    \ answer.\n        return nums.stream().filter(l -> l > 10 && (l % 10) % 2 ==\
    \ 1 && (l % 10) == l / (long)Math.pow(10, numLength(l) - 1)).count();", "\t\t\
    // YOUR CODE HERE\n        return 0;", "        return nums.stream().filter(num\
    \ -> Math.abs(num) > 10 &&\n                                            Math.abs(num)\
    \ / 10 % 2 != 0 &&\n                                            Math.abs(num)\
    \ % 10 % 2 != 0)\n                            .count();", '        return 0;',
  "        return nums.stream().filter( x -> {\n            Long t = Math.abs(x);\n\
    \            return x > 10 && t % 10 % 2 != 0 && t / 10 % 10 % 2 != 0;\n     \
    \   }).count();", '        return nums.stream().filter(x -> x > 10 && Math.abs(x)
    % 10 % 2 != 0 && x / 10 % 10 % 2 != 0).count();', "        // INSERT YOUR CODE\
    \ HERE\n        return nums.stream().filter(v -> v > 10 &&\n            Math.abs(v)\
    \ % 10 % 2 != 0 && v / 10 % 10 % 2 != 0).count();", "        // Write your code\
    \ here.\n        // Find all numbers in the array list that are greater than 10\n\
    \        List<Long> tenOrAbove = new ArrayList<Long>();\n        for (Long num\
    \ : nums) {\n            if (num > 10) {\n                tenOrAbove.add(num);\n\
    \            }\n        }\n        // Find all numbers in the array list that\
    \ have an odd first and last digit\n        List<Long> oddFirstAndLast = new ArrayList<Long>();\n\
    \        for (Long num : tenOrAbove) {\n            String numAsString = num.toString();\n\
    \            String firstDigitAsString = String.valueOf(numAsString.charAt(0));\n\
    \            String lastDigitAsString = String.valueOf(numAsString.charAt(numAsString.length()\
    \ - 1));\n            Long firstDigit = Long.parseLong(firstDigitAsString);\n\
    \            Long lastDigit = Long.parseLong(lastDigitAsString);\n           \
    \ if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                oddFirstAndLast.add(num);\n\
    \            }\n        }\n        return oddFirstAndLast.size();", '        return
    0l;', '        return 0;', '        return nums.stream().filter(e -> e > 10 &&
    isFirstLastDigitOdd(e)).count();', '        return nums.stream().filter(n -> Math.abs(n)
    > 10 && n % 2 != 0 && n % 5 != 0).count();', '      throw new UnsupportedOperationException("Please
    implement this function");', '        return nums.stream().filter(x -> x > 10).filter(x
    -> isOdd(firstDigit(x)) && isOdd(lastDigit(x))).count();', '        return nums.stream().filter(Problem::filter).count();',
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return 0;", "        //long count = 0;\n        // for\
    \ (long l : nums) {\n        //     if (l > 10 && l % 2 != 0 && (l / 10) % 2 !=\
    \ 0) {\n        //         count++;\n        //     }\n        // }\n        //\
    \ return count;\n        return nums.stream().filter(l -> l > 10 && l % 2 != 0\
    \ && (l / 10) % 2 != 0).count();", "        // Write your solution here\n    \
    \    return nums.stream().filter(e -> e > 10 && (e % 10) % 2 != 0 && (e / 10)\
    \ % 2 != 0).count();", "        long out0 = 0l;\n        for (Long n : nums) {\n\
    \            if (n >= 10l) {\n                if (n >= 0l) {\n               \
    \     if (n % 2l == 1l) {\n                        if (n % 10l == 1l) {\n    \
    \                        out0 = out0 + 1l;\n                        }\n      \
    \              }\n                } else {\n                    if (n % 2l ==\
    \ -1l) {\n                        if (n % 10l == -1l) {\n                    \
    \        out0 = out0 + 1l;\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return out0;", "       \
    \ long count = 0;\n        for (long i : nums) {\n            if (i > 10 && i\
    \ % 2 != 0 && isOdd(i)) {\n                count += 1;\n            }\n      \
    \  }\n        return count;", "        return nums.stream().filter(\n        \
    \    n -> n > 10\n            && n.toString().length() > 1\n            && n.toString().charAt(0)\
    \ % 2 != 0\n            && n.toString().charAt(n.toString().length() - 1) % 2\
    \ != 0\n        ).count();", '        return nums.stream().filter(n -> firstDigit(n)
    % 2 != 0 && lastDigit(n) % 2 != 0 && n > 10).count();', '        return nums.stream().filter(n
    -> (n > 10 && n % 2 == 1 && (n < 0 ? -n : n) % 10 == 1)).count();', '        throw
    new RuntimeException("Define me");', "        return nums.stream().filter(num\
    \ -> \n            num > 10 && \n            num % 2 == 1 && \n            num\
    \ % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 ==\
    \ 9\n        ).count();", "        long count = 0;\n        for (long num : nums)\
    \ {\n            if (num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num))\n\
    \                count++;\n        }\n        return count;", "        long result\
    \ = 0;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n\
    \            long num = nums.get(i);\n            if (num > 10) {\n          \
    \      String s = String.valueOf(num);\n                String firstDigit = String.valueOf(s.charAt(0));\n\
    \                String lastDigit = String.valueOf(s.charAt(s.length() - 1));\n\
    \                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n              \
    \      result++;\n                }\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        // hmmm... interesting...\n  \
    \      // Interesting in a bad way. \n        // It's an arraylist. I can't use\
    \ indexOf because arraylist is not indexable. \n        // I'll have to iterate\
    \ over the arraylist and put the matches in another arraylist.\n        ArrayList<Long>\
    \ matches = new ArrayList<Long>();\n        // I can't use a for loop because\
    \ of concurrentmodificationexception\n        // I'll have to use an iterator.\n\
    \        // I think I'll use both a while loop and an iterator.\n        Iterator<Long>\
    \ iter = nums.iterator();\n        while (iter.hasNext()) {\n            long\
    \ value = iter.next();\n            int first_digit = (int) (value / Math.pow(10,\
    \ Math.floor(Math.log10(value))));\n            int last_digit = (int) (value\
    \ % 10);\n            if (first_digit % 2 != 0 && last_digit % 2 != 0 && value\
    \ > 10) {\n                matches.add(value);\n            }\n        }\n   \
    \     return matches.size();", '        return nums.stream().filter(x -> x > 10
    && x % 2 == 1 && x / 10 % 2 == 1 && x % 10 == 1).count();', '      return nums.stream().filter(n
    -> n > 10 && (n%10)%2 != 0 && (n/10)%2 != 0).count();', '        return nums.stream().filter(num
    -> num > 10).filter(num -> num % 2 == 1).filter(num -> (num % 10) % 2 == 1).count();',
  "        long count = 0;\n        for (Long num : nums) {\n            if (num >\
    \ 10) {\n                if (isNumberOdd(num)) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  // nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n        //\
    \ write your code here\n\n        return -1l;", '        return nums.stream().filter(n
    -> n > 10).filter(n -> (n % 10) % 2 == 1).filter(n -> ((n / 10) % 10) % 2 == 1).count();',
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return nums.stream().filter(num -> num > 10).filter(num\
    \ -> num % 2 == 1).filter(num -> num % 10 == 1 || num % 10 == 3 || num % 10 ==\
    \ 5 || num % 10 == 7 || num % 10 == 9).count();", "        return nums.stream().filter(x\
    \ -> {\n            if (x > 10) {\n                if (x < 0) {\n            \
    \        x = x * -1;\n                }\n                if (x % 10 % 2 != 0 &&\
    \ x / 10 % 10 % 2 != 0) {\n                    return true;\n                }\n\
    \            }\n            return false;\n        }).count();", "        long\
    \ total = 0;\n        for (long num : nums) {\n            if (num > 10 && num\
    \ % 2 == 1 && (num / 10) % 2 == 1) {\n                total++;\n            }\n\
    \        }\n        return total;", "        long count = 0;\n        // Your\
    \ code here\n        return count;", "        long count = 0;\n        for (Long\
    \ l : nums) {\n            if (l > 10) {\n                String num = l.toString();\n\
    \                if (num.length() > 1) {\n                    if (num.charAt(0)\
    \ % 2 != 0 && num.charAt(num.length() - 1) % 2 != 0) {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;", "        long n = nums.size();\n        // TODO\n\
    \        return n;", "        long numberCount = 0;\n        for (Long number\
    \ : nums) {\n            if (number > 10 && isDigitOdd(number.toString().charAt(0))\
    \ && isDigitOdd(number.toString().charAt(number.toString().length() - 1))) {\n\
    \                numberCount++;\n            }\n        }\n        return numberCount;",
  '        return nums.stream().filter(n -> isOdd(n) && Math.abs(n) > 10).count();',
  "    \t\treturn nums.stream().filter(Problem::isGreaterThanTen).filter(Problem::isFirstAndLastDigitOdd).count();",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        //long count = nums.stream().filter(num -> num >= 10\
    \ && num%2 == 1 && isOdd(num)).count();\n        //long count = nums.stream().filter(num\
    \ -> num >= 10 && num%2 == 1 && isOdd(num)).mapToLong(num -> num).sum();\n   \
    \     //long count = nums.stream().filter(num -> num >= 10 && num%2 == 1 && isOdd(num)).collect(Collectors.summingLong(num\
    \ -> num));\n        long count = nums.stream().filter(num -> num >= 10 && num%2\
    \ == 1 && isOdd(num)).collect(Collectors.summingLong(Long::longValue));\n    \
    \    return count;", "        // Write your code here.\n        //Store number\
    \ of elements that match the criteria in a variable\n        long count = 0;\n\
    \        //Iterate through the list\n        for(long num : nums){\n         \
    \   //If the number is above 10, check if the first and last digits are odd\n\
    \            if(num > 10){\n                String strNum = String.valueOf(num);\n\
    \                char firstDigit = strNum.charAt(0);\n                char lastDigit\
    \ = strNum.charAt(strNum.length() - 1);\n                //If both digits are\
    \ odd, count variable is incremented by 1\n                if(Character.getNumericValue(firstDigit)\
    \ % 2 != 0 && Character.getNumericValue(lastDigit) % 2 != 0){\n              \
    \      count += 1;\n                }\n            }\n        }\n        return\
    \ count;", "        /*\n         * Write your code here.\n         */\n      \
    \  return 0;", "        // Fill in your code here\n        int ans = 0;\n    \
    \    for (Long i : nums) {\n            if (i > 10) {\n                String\
    \ num = i.toString();\n                if (num.charAt(0) % 2 != 0 && num.charAt(num.length()\
    \ - 1) % 2 != 0) {\n                    ans++;\n                }\n          \
    \  }\n        }\n        return ans;", '        return (long)nums.stream().filter(n
    -> n > 10 && n % 2 == 1 && n / 10 % 2 == 1 && n % 10 == 1).count();', '        return
    nums.stream().filter(x -> (x > 10) && (isFirstDigitOdd(x)) && (isLastDigitOdd(x))).count();',
  "        // get first and last digits of a number\n        ArrayList<Tuple2<Long,\
    \ Long>> firstAndLastDigits = new ArrayList<Tuple2<Long, Long>>();\n        for\
    \ (Long num : nums) {\n            Long lastDigit = num % 10;\n            Long\
    \ firstDigit = 0l;\n            while (num != 0) {\n                firstDigit\
    \ = num % 10;\n                num /= 10;\n            }\n            firstAndLastDigits.add(new\
    \ Tuple2<Long, Long>(firstDigit, lastDigit));\n        }\n        // check greater\
    \ than 10 and both digits are odd\n        long count = 0;\n        for (Tuple2<Long,\
    \ Long> digits : firstAndLastDigits) {\n            Long firstDigit = digits.getValue0();\n\
    \            Long lastDigit = digits.getValue1();\n            if (firstDigit\
    \ > 0 && lastDigit > 0 && firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n     \
    \           count++;\n            }\n        }\n        return count;", '        throw
    new RuntimeException("not implemented");', '        return nums.stream().filter(x
    -> x > 10 && x%2 != 0 && x/10%2 != 0).count();', "        // Enter your code here.\n\
    \        return 0l;", "        // Enter your code here.\n        return nums.stream().filter(i\
    \ -> {\n            String s = i.toString();\n            return s.length() >\
    \ 1 && s.charAt(0) % 2 != 0 && s.charAt(s.length() - 1) % 2 != 0 && i > 10;\n\
    \        }).count();", "        // Put your code here\n        return 1l;", " \
    \       long res = 0;\n        for (long n : nums) {\n            if (n > 10 &&\
    \ n % 2 == 1 && n % 10 == 1) {\n                res += 1;\n            }\n   \
    \     }\n        return res;", '        return nums.stream().filter(num -> num
    >= 10 && num % 2 == 1 && is_both_first_and_last_odd(num)).count();', "       \
    \ // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int oddCount = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            String number = String.valueOf(nums.get(i));\n         \
    \   if(number.length() < 2) {\n                continue;\n            }\n    \
    \        if(isOdd(number.charAt(0)) && isOdd(number.charAt(number.length() - 1))\
    \ && nums.get(i) > 10) {\n                oddCount++;\n            }\n       \
    \ }\n        return oddCount;", "        // Write your code here\n        return\
    \ 0l;", '        return (long)nums.stream().filter(x -> isSpecial(x)).count();',
  '        return nums.stream().filter(x -> ((x > 10) && (((x % 10) & 1) == 1) &&
    ((x / 10) % 2 == 1))).count();', "        // Filter out the numbers less than\
    \ 10\n        List<Long> filtered = nums.stream().filter(num -> num >= 10).collect(Collectors.toList());\n\
    \        // Get the first and last digits\n        // and filter out the numbers\
    \ whose first and last digits are not odd\n        List<Long> result = filtered.stream().filter(num\
    \ -> {\n            String str = String.valueOf(num);\n            String firstDigit\
    \ = String.valueOf(str.charAt(0));\n            String lastDigit = String.valueOf(str.charAt(str.length()\
    \ - 1));\n            return Integer.parseInt(firstDigit) % 2 != 0 && Integer.parseInt(lastDigit)\
    \ % 2 != 0;\n        }).collect(Collectors.toList());\n        return (long)result.size();",
  "        long count = 0;\n        for (long num : nums) {\n            int first\
    \ = (int)(num % 10);\n            int last = (int)(num / Math.pow(10, Math.floor(Math.log10(num))));\n\
    \            if (num > 10 && (first % 2 == 1 && last % 2 == 1)) {\n          \
    \      count++;\n            }\n        }\n        return count;", "        //\
    \ YOUR CODE HERE\n        return nums.stream().filter(num -> num >= 10 && num.toString().charAt(0)\
    \ % 2 != 0 && num.toString().charAt(num.toString().length() - 1) % 2 != 0).count();",
  "        return nums.stream().filter(x -> {\n            String temp = Long.toString(x);\n\
    \            if (temp.length() > 1) {\n                char firstDigit = temp.charAt(0);\n\
    \                char lastDigit = temp.charAt(temp.length() - 1);\n          \
    \      if (Character.getNumericValue(firstDigit) % 2 != 0 && Character.getNumericValue(lastDigit)\
    \ % 2 != 0) {\n                    return true;\n                }\n         \
    \   }\n            return false;\n        }).filter(x -> x > 10).count();", " \
    \       // Write your code here!\n        return 0;", "        long count = 0l;\n\
    \        for (long num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num))\
    \ {\n                count += 1l;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (Long n : nums) {\n            if (n > 10\
    \ && n % 2 == 1 && numOfDigits(n) > 1 && (n % 10) % 2 == 1)\n                count++;\n\
    \        }\n        return count;", "        long n = 0;\n        for (long x\
    \ : nums) {\n            if (x > 10 && isFirstLastOdd(x)) {\n                n++;\n\
    \            }\n        }\n        return n;", "        long r = 0;\n        long\
    \ n = 0;\n        // Insert your code here\n        for (long s : nums) {\n  \
    \          n = s;\n            if (n > 10) {\n                if (n % 2 != 0)\
    \ {\n                    String w = String.valueOf(n);\n                    char[]\
    \ c = w.toCharArray();\n                    if (c[0] % 2 != 0 && c[c.length -\
    \ 1] % 2 != 0) {\n                        r++;\n                    }\n      \
    \          }\n            }\n        }\n        return r;", "        return nums.stream().filter(\
    \ x -> x > 10).filter(x -> {\n            long lastDigit = x % 10;\n         \
    \   long firstDigit = x / (long)Math.pow(10, Math.floor(Math.log10(x)));\n   \
    \         return (firstDigit % 2 != 0 && lastDigit % 2 != 0);\n        }).count();",
  '        return nums.stream().filter(x -> isValid(x)).count();', '        return
    nums.stream().filter(x -> (x > 10) && isOdd(x) && isOdd(x%10)).count();', '        return
    nums.stream().filter(n -> (n > 10) && (n % 2 != 0) && (n / Math.pow(10, (int)Math.log10(n))
    % 2 != 0)).count();', "        // Method 1\n        // return (nums.stream().filter(e\
    \ -> e > 10).filter(e -> e % 2 == 1).filter(e -> {\n        //     long temp =\
    \ e;\n        //     temp /= 10;\n        //     return temp % 2 == 1;\n     \
    \   // }).count());\n        // Method 2\n        return (nums.stream().filter(e\
    \ -> e > 10).filter(e -> e % 2 == 1).filter(e -> {\n            long first = e;\n\
    \            long last = e % 10;\n            first /= 10;\n            while\
    \ (first >= 10) {\n                first /= 10;\n            }\n            return\
    \ first % 2 == 1 && last % 2 == 1;\n        }).count());", "        long count\
    \ = 0l;\n        // Your Code Here\n        for(Long x : nums){\n            long\
    \ temp = x;\n            long first_digit = temp%10;\n            long last_digit\
    \ = 0;\n            while(temp>0){\n                last_digit = temp%10;\n  \
    \              temp = temp/10;\n            }\n            if(x>10 && first_digit%2!=0\
    \ && last_digit%2!=0){\n                count++;\n            }\n        }\n \
    \       return count;", "        // Enter your code here\n        return 0;",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = 0;\n        for (Long n : nums) {\n  \
    \          if (n > 10) {\n                if (n % 2 == 1) {\n                \
    \    n = n / 10;\n                    while (n > 0) {\n                      \
    \  if (n % 10 % 2 == 1) {\n                            result++;\n           \
    \                 break;\n                        }\n                        n\
    \ = n / 10;\n                    }\n                }\n            }\n       \
    \ }\n        return result;", '        return nums.stream().filter(x -> x > 10).filter(x
    -> x % 2 == 1).filter(x -> x > 0 ? x % 10 == 1 || x % 10 == 3 || x % 10 == 5 ||
    x % 10 == 7 || x % 10 == 9 : x % 10 == -1 || x % 10 == -3 || x % 10 == -5 || x
    % 10 == -7 || x % 10 == -9).count();', "        return nums.stream().filter(x\
    \ -> x > 10).filter(x -> x % 2 == 1).filter(x -> {\n            String s = x.toString();\n\
    \            return Integer.parseInt(s.substring(0, 1)) % 2 == 1 && Integer.parseInt(s.substring(s.length()\
    \ - 1)) % 2 == 1;\n        }).count();", "        // Write your code here\n  \
    \      return 0;", "        long j = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (nums.get(i) > 10) {\n                if (nums.get(i)\
    \ % 2 == 1) {\n                    j++;\n                }\n            }\n  \
    \      }\n        return j;", '        return nums.stream().filter(Problem::isSpecial).count();',
  '        return 0;', "        // Write your code here\n        int count = 0;\n\
    \        for (Long num : nums) {\n            long last = num % 10;\n        \
    \    if (last % 2 == 1 && Math.abs(num) > 10) {\n                count++;\n  \
    \          }\n        }\n        return count;", "        // your code here\n\
    \        long cnt = 0;\n        for (long n : nums) {\n            if (n < 10)\
    \ continue;\n            String s = String.valueOf(n);\n            if (s.length()\
    \ < 2) continue;\n            int d1 = s.charAt(0) - '0';\n            int d2\
    \ = s.charAt(s.length() - 1) - '0';\n            if (d1 % 2 == 1 && d2 % 2 ==\
    \ 1) cnt += 1;\n        }\n        return cnt;", '        return nums.stream().filter(Problem::isOddAndGreaterThanTen).count();',
  "        // ADD CODE HERE\n        return 0l;", "        long count = 0;\n     \
    \   for (Long num : nums) {\n            if (num > 10 && num > 0 && (num % 10)\
    \ % 2 != 0 && (num % (long)Math.pow(10, (int)Math.log10(num))) % 2 != 0) {\n \
    \               count++;\n            }\n        }\n        return count;", " \
    \       long count = 0;\n        for (long a: nums) {\n            long b = a;\n\
    \            if (a < 0) {\n                b = -a;\n            }\n          \
    \  if (b > 10) {\n                long right = b % 10;\n                long left\
    \ = b;\n                while (left >= 10) {\n                    left /= 10;\n\
    \                }\n                if (left % 2 == 1 && right % 2 == 1) {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \        return count;", '        // Your code here', '        return nums.stream().filter(n
    -> n > 10 && bothFirstAndLastDigitsAreOdd(n)).count();', "        long ans = 0;\n\
    \        for (long i : nums) {\n            if (i > 10 && (i / 10) % 2 != 0 &&\
    \ i % 2 != 0) {\n                ans += 1;\n            }\n        }\n       \
    \ return ans;", '        return 0l;', "        return nums.stream().filter(x ->\
    \ {\n            if (x < 10) {\n                return false;\n            }\n\
    \            final long first = x % 10;\n            final long last = x / Math.pow(10,\
    \ Math.log10(x));\n            return first % 2 != 0 && last % 2 != 0;\n     \
    \   }).count();", "        long number = 0;\n        return number;", '        throw
    new UnsupportedOperationException("Replace this string with your implementation.");',
  "        // fill-in code here\n        return 0l;", '        return -1;', "    \
    \    return nums.stream().filter(n -> {\n            long i = n;\n           \
    \ long fd = i % 10;\n            while (i > 9) {\n                i /= 10;\n \
    \           }\n            long ld = i;\n            return fd % 2 != 0 && ld\
    \ % 2 != 0 && Math.abs(n) > 10;\n        }).count();", "        long ctr = 0;\n\
    \        for (Long x : nums) {\n            if (x > 10 && x < 100) {\n       \
    \         if (x % 2 == 1 && (x / 10) % 2 == 1) {\n                    ctr++;\n\
    \                }\n            } else if (x > 99) {\n                if (x %\
    \ 2 == 1 && (x / 10) % 2 == 1 && (x / 100) % 2 == 1) {\n                    ctr++;\n\
    \                }\n            }\n        }\n        return ctr;", "        long\
    \ total = 0l;\n        for (Long num : nums) {\n            if (num > 10l && Math.abs(num)\
    \ % 2 == 1 && Math.abs(num / 10) % 2 == 1) {\n                total++;\n     \
    \       }\n        }\n        return total;", "        // REPLACE WITH YOUR CODE\n\
    \        return 0;", '        return nums.stream().filter(x -> x >= 10 && (x %
    10) % 2 != 0 && (x / (long)Math.pow(10, (int)Math.log10(x))) % 2 != 0).count();',
  "        long count = 0;\n        for (Long num : nums) {\n            if (num >\
    \ 10 && (num % 10 % 2 != 0) && num / 10 % 2 != 0) {\n                count +=\
    \ 1;\n            }\n        }\n        return count;", "        long result =\
    \ 0;\n        for (long num : nums) {\n            if (num > 10 && num >= 10 &&\
    \ num < 100) {\n                long first = num / 10;\n                long last\
    \ = num % 10;\n                if (first % 2 != 0 && last % 2 != 0) {\n      \
    \              result++;\n                }\n            }\n        }\n      \
    \  return result;", "        // default return value, change it as you wish\n\
    \        long ret = 0;\n        for (long num : nums) {\n            long highBit\
    \ = num / 10;\n            long lowBit = num % 10;\n            long absNum =\
    \ Math.abs(num);\n            if (Math.abs(highBit) % 2 == 1 && Math.abs(lowBit)\
    \ % 2 == 1 && absNum > 10) {\n                ret += 1;\n            }\n     \
    \   }\n        return ret;", "        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n        // return 0;\n     \
    \   return nums.stream().filter(a -> a > 10).filter(a -> a.toString().substring(0,\
    \ 1).equals(\"1\") || a.toString().substring(0, 1).equals(\"3\") || a.toString().substring(0,\
    \ 1).equals(\"5\") || a.toString().substring(0, 1).equals(\"7\") || a.toString().substring(0,\
    \ 1).equals(\"9\")).filter(a -> a.toString().substring(a.toString().length() -\
    \ 1).equals(\"1\") || a.toString().substring(a.toString().length() - 1).equals(\"\
    3\") || a.toString().substring(a.toString().length() - 1).equals(\"5\") || a.toString().substring(a.toString().length()\
    \ - 1).equals(\"7\") || a.toString().substring(a.toString().length() - 1).equals(\"\
    9\")).count();", '        return nums.stream().filter(x -> x>10 && x%2!=0 && x%10!=0).count();',
  "        // Write your solution here\n        return 0;", "        // Given a list\
    \ of numbers nums, find the number of numbers in nums that are greater than 10\
    \ and have \n        // both the first and last digits of a number are odd (1,\
    \ 3, 5, 7, 9).\n        // \n        // Here are some examples:\n        // \n\
    \        // >>> specialFilter((new ArrayList<Long>(Arrays.asList((long)15l, (long)-73l,\
    \ (long)14l, (long)-15l))))\n        // (1l)\n        // >>> specialFilter((new\
    \ ArrayList<Long>(Arrays.asList((long)33l, (long)-2l, (long)-3l, (long)45l, (long)21l,\
    \ (long)109l))))\n        // (2l)\n        // \n        // Be careful with negatives\
    \ numbers: -14 is not valid, but -15 is valid.\n        // \n        // \n   \
    \     // \n        // \n        // \n        // \n        // \n        // \n \
    \       // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n        // \n        // \n        // \n\
    \        // \n        // \n        // \n", "        // ENTER CODE HERE\n     \
    \   return -1;", '        return nums.stream().filter(num -> num.toString().matches("[1-9][^0-9]*[1-9]")).count();',
  "        // start from here\n        return 0;", '        // write your code here',
  '        return nums.stream().filter(num -> num > 10 && num % 2 == 1 && num % 10
    == 1).count();', "        // Write your code here\n        return 0;", "     \
    \   long counter = 0;\n        for (long i : nums) {\n            if (i > 10)\
    \ {\n                String str = Long.toString(i);\n                if (str.charAt(0)\
    \ % 2 != 0 && str.charAt(str.length() - 1) % 2 != 0) {\n                    counter++;\n\
    \                }\n            }\n        }\n        return counter;", "    \
    \    // Hint: You can use java.lang.Long#toString and java.lang.Long#parseLong\n\
    \        // to convert between String and Long\n        // Hint: You can use java.lang.String#length\
    \ and java.lang.String#charAt\n        // to access the first/last digit of a\
    \ String (treated as a number)\n        // I do not know why this problem is here,\
    \ you should be able to solve it.\n        long count = 0l;\n        for (long\
    \ num : nums) {\n            String s = num + \"\";\n            long first =\
    \ (s.charAt(0) - '0');\n            long last = (s.charAt(s.length() - 1) - '0');\n\
    \            if (Math.abs(num) > 10 && first % 2 == 1 && last % 2 == 1) {\n  \
    \              count++;\n            }\n        }\n        return count;", " \
    \       return nums.stream().filter(n -> \n            (n > 10) && (n % 2 == 1)\
    \ && (n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)\n\
    \        ).count();", "        long result = 0;\n        for (long n : nums) {\n\
    \            if (Math.abs(n) > 10 && (n < 0 || n > 0)) {\n                long\
    \ firstDigit = Math.abs(n) % 10;\n                long lastDigit = (long) (Math.abs(n)\
    \ / Math.pow(10, Math.floor(Math.log10(Math.abs(n)))));\n                if (firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0)\n                    result++;\n           \
    \ }\n        }\n        return result;", "        long count = 0;\n        for\
    \ (Long x : nums) {\n            if (x > 10 && oddFirstLast(x)) {\n          \
    \      count++;\n            }\n        }\n        return count;", "        //\
    \ BEGIN CODE HERE\n        return 0l;\n        // END CODE HERE", '        return
    nums.stream().filter(n -> n > 10 && (n % 10) % 2 == 1 && (n / 10) % 2 == 1).count();',
  "        // insert code here\n        return 1l;", '      return nums.stream().filter(n
    -> n > 10 && (n%10)%2 == 1 && ((n/10)%10)%2 == 1).count();', '        return nums.stream().filter(x
    -> x > 10 && (Math.abs(x) / 10) % 2 != 0 && (Math.abs(x) % 10) % 2 != 0).count();',
  "        return nums.stream().filter(num -> {\n            if (num < 10) {\n   \
    \             return false;\n            }\n            String numStr = num.toString();\n\
    \            char[] numChars = numStr.toCharArray();\n            return numChars[0]\
    \ % 2 != 0 && numChars[numChars.length - 1] % 2 != 0;\n        }).count();", " \
    \       long sum = 0;\n        for (long n : nums) {\n            if (n >= 10\
    \ && n % 2 == 1 && n % 10 == 1) {\n                sum += 1;\n            }\n\
    \        }\n        return sum;", '        return nums.stream().filter(Problem::specialNumber).count();',
  "        long c = 0;\n        for (long i : nums) {\n            if (i > 10) {\n\
    \                if (i % 2 == 1) {\n                    long x = i;\n        \
    \            if (x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 == 7 || x\
    \ % 10 == 9) {\n                        c++;\n                    }\n        \
    \        }\n            }\n        }\n        return c;", '        return 0l;',
  "        return nums.stream().filter(e -> {\n        \treturn e >= 10 && e % 2 ==\
    \ 1 && e / 10 % 2 == 1 && e % 10 % 2 == 1;\n        }).count();", "        //\
    \ YOUR CODE HERE\n        return 0l;", "        return nums.stream().filter(p\
    \ -> {\n            if (p < 10 || p > 100) return false;\n            ArrayList<Long>\
    \ digits = new ArrayList<Long>();\n            while (p > 0) {\n             \
    \   digits.add(p % 10);\n                p /= 10;\n            }\n           \
    \ return digits.get(0) % 2 == 1 && digits.get(digits.size() - 1) % 2 == 1;\n \
    \       }).count();", '        return nums.stream().filter(num -> num > 10 &&
    bothOdd(num)).count();', "        // create lambda function\n        // return\
    \ numbers greater than 10\n        // for each number greater than 10, get first\
    \ and last digits\n        // if first and last digits are odd, return number\n\
    \        // add all numbers greater than 10 with odd first and last digits, return\
    \ sum\n\n        long sum = 0;\n        for (long number : nums) {\n         \
    \   // check if greater than 10\n            if (number > 10) {\n            \
    \    String num = String.valueOf(number);\n                String firstNum = num.substring(0,\
    \ 1);\n                String lastNum = num.substring(num.length() - 1);\n   \
    \             int first = Integer.parseInt(firstNum);\n                int last\
    \ = Integer.parseInt(lastNum);\n                if (first % 2 != 0 && last % 2\
    \ != 0) {\n                    sum++;\n                }\n            }\n    \
    \    }\n        return sum;", '        return nums.stream().filter(n -> n>10 &&
    n%2!=0 && (n/10)%2!=0 && n%10%2!=0).count();', "        // function implementation\n\
    \        // BigInteger(long)\n        return nums.stream().filter(num -> BigInteger.valueOf(num).isProbablePrime(1)\
    \ && BigInteger.valueOf(num).isProbablePrime(1)).count();", "        return nums.stream().filter(e->{\n\
    \            int first_digit = (int)(e/Math.pow(10, e.toString().length()-1));\n\
    \            int last_digit = (int)(e%10);\n            return ((first_digit%2)\
    \ + (last_digit%2) == 1) && e > 10;\n        }).count();", '        return nums.stream().filter(num
    -> num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 ==
    7 || num % 10 == 9)).count();', "        int count = 0;\n        // write your\
    \ code here\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i)\
    \ > 10) {\n                if (first_digit(nums.get(i)) % 2 != 0 && last_digit(nums.get(i))\
    \ % 2 != 0) {\n                    count += 1;\n                }\n          \
    \  }\n        }\n        return count;", '        return nums.stream().filter(e
    -> e > 10 && isFirstAndLastDigitOdd(e)).count();', '        return nums.stream().filter(n
    -> n > 10 && n%2 != 0 && n/10%2 != 0).count();', "        // your code goes here\n\
    \        return nums.stream().filter(n -> n.toString().charAt(0) % 2 != 0 &&\n\
    \                                          n.toString().charAt(n.toString().length()\
    \ - 1) % 2 != 0 &&\n                                          n > 10).count();",
  "        return nums.stream().filter(x -> x > 10 && (x.toString().charAt(0) - '0')\
    \ % 2 == 1 && (x.toString().charAt(x.toString().length() - 1) - '0') % 2 == 1).count();",
  "        return nums.stream().filter(x -> x > 10).filter(x -> x % 2 == 1).filter(x\
    \ -> {\n            long m = x;\n            while (m > 9) {\n               \
    \ m /= 10;\n            }\n            return m % 2 == 1;\n        }).count();",
  "        return nums.stream().filter(num -> num > 10).filter(num -> {\n        \
    \    String numStr = String.valueOf(num);\n            return isOdd(numStr.charAt(0))\
    \ && isOdd(numStr.charAt(numStr.length() - 1));\n        }).count();", "     \
    \   // your code goes here\n        return 0;", "        return nums.stream().filter(x\
    \ -> x > 10 && x % 2 == 1).filter(x -> {\n            String str = String.valueOf(x);\n\
    \            return str.charAt(0) % 2 == 1 && str.charAt(str.length() - 1) % 2\
    \ == 1;\n        }).count();", "        // your code goes here\n        Long count\
    \ = 0l;\n        for (Long num : nums) {\n            if (num > 10 && (num % 10)\
    \ % 2 != 0 && num.toString().charAt(0) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        for (Long l : nums) {\n            if (l > 10 && isOdd(l) && isFirstAndLastDigitOdd(l))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  '        return nums.stream().filter(i -> i > 10 && getFirstDigit(i) % 2 != 0 &&
    getLastDigit(i) % 2 != 0).count();', "        // YOUR CODE HERE\n        long\
    \ count = 0;\n        for (long x : nums) {\n            if (x > 10 && x % 2 !=\
    \ 0 && x / 10 % 2 != 0) {\n                count++;\n            }\n        }\n\
    \        return count;", '        return 0;', '        return nums.stream().filter(x
    -> x > 10 && nums.stream().filter(y -> x % 10 == y).findFirst().isPresent() &&
    nums.stream().filter(y -> x / 10 == y).findFirst().isPresent()).count();', '      return
    nums.stream().filter(num -> num > 10).filter(num -> num > 10 && num < 100 && (num/10)%2
    == 1 && num%2 == 1).count();', "        // Write your code here\n        long\
    \ count = 0;\n        for (long num : nums) {\n            if (Math.abs(num) >\
    \ 10 && num % 2 != 0 && num % 5 != 0) {\n                count++;\n          \
    \  }\n        }\n        return count;", "        // Write code here\n       \
    \ return -1l;", "        long count = 0;\n        for (long num : nums) {\n  \
    \          if (num > 10 && isOdd(num) && isOdd(num % 10)) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return nums.stream().filter(x
    -> x > 10 && x % 2 == 1 && x % 10 == 1).count();', '        return 0;', '        return
    nums.stream().filter(x -> x > 10).filter(x -> x%2==1 && (x/10)%2==1).count();',
  "        long cnt = 0;\n        for (Long x : nums) {\n            if (x > 10 &&\
    \ firstDigit(x) % 2 == 1 && lastDigit(x) % 2 == 1) {\n                cnt += 1;\n\
    \            }\n        }\n        return cnt;", "    \t// Iterate over all the\
    \ numbers in the list\n    \t// If it is greater than 10 and it has odd first\
    \ and last digits, add 1 to a counter\n    \tlong counter = 0;\n    \tfor (Long\
    \ num : nums) {\n    \t\tlong firstDigit = num % 10;\n    \t\tlong lastDigit =\
    \ (long)num / 10;\n    \t\tif (firstDigit % 2 != 0 && lastDigit % 2 != 0 && num\
    \ > 10) {\n    \t\t\tcounter += 1;\n    \t\t}\n    \t}\n    \treturn counter;",
  '        return 0;', "        long count = 0;\n        for (long num : nums) {\n\
    \            if (num > 10 && num % 2 == 1 && num / 10 % 2 == 1) {\n          \
    \      count += 1;\n            }\n        }\n        return count;", '        return
    nums.stream().filter(e -> e > 10 && e % 2 == 1 && (e / 10) % 2 == 1 && e % 10
    == 1).count();', "        long result = 0;\n        for (long num : nums) {\n\
    \            if (num > 10) {\n                long firstDigit = 0;\n         \
    \       long lastDigit = 0;\n                if (num < 0) {\n                \
    \    firstDigit = Math.abs(num) % 10;\n                    lastDigit = num % 10;\n\
    \                } else {\n                    lastDigit = num % 10;\n       \
    \             while (num > 0) {\n                        firstDigit = num % 10;\n\
    \                        num /= 10;\n                    }\n                }\n\
    \                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n          \
    \          result++;\n                }\n            }\n        }\n        return\
    \ result;", '        return nums.stream().filter(n -> n > 10).filter(Problem::filter).count();',
  "        return nums.stream().filter(num -> {\n            if (num > 10) {\n   \
    \             long lastDigit = num % 10;\n                long firstDigit = num;\n\
    \                while (firstDigit >= 10) {\n                    firstDigit /=\
    \ 10;\n                }\n                return firstDigit % 2 == 1 && lastDigit\
    \ % 2 == 1;\n            }\n            return false;\n        }).count();", " \
    \       // Write your code here.\n        return 0;", '        return nums.stream().filter(num
    -> num > 10).filter(num -> num % 2 == 1).filter(num -> num / 10 % 2 == 1).count();',
  "        long oddFirst = nums.stream().filter(n -> {\n            long firstDigit\
    \ = 0;\n            for (long i = n; i > 0; i /= 10) {\n                firstDigit\
    \ = i % 10;\n            }\n            return n > 10 && firstDigit % 2 == 1;\n\
    \        }).count();\n        long oddLast = nums.stream().filter(n -> {\n   \
    \         long lastDigit = 0;\n            for (long i = n; i > 0; i /= 10) {\n\
    \                lastDigit = i % 10;\n            }\n            return n > 10\
    \ && lastDigit % 2 == 1;\n        }).count();\n        return oddFirst + oddLast;",
  "        // Your code here\n        return nums.stream().filter(x -> x > 10 && x\
    \ % 2 == 1).filter(x -> x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 ==\
    \ 7 || x % 10 == 9).count();", "        // YOUR CODE HERE\n        return 0l;",
  '        return (long)nums.stream().filter(x -> x.toString().length() > 1 && x >
    10).filter(y -> y.toString().startsWith("1") || y.toString().startsWith("3") ||
    y.toString().startsWith("5") || y.toString().startsWith("7") || y.toString().startsWith("9")).filter(z
    -> z.toString().endsWith("1") || z.toString().endsWith("3") || z.toString().endsWith("5")
    || z.toString().endsWith("7") || z.toString().endsWith("9")).count();', "    \
    \    // YOUR CODE HERE\n        long count = 0;\n        for (long i = 0; i <\
    \ nums.size(); i++) {\n            if (nums.get((int)i) > 10) {\n            \
    \    long temp = nums.get((int)i);\n                String str = String.valueOf(temp);\n\
    \                if (str.charAt(0) % 2 != 0 && str.charAt(str.length() - 1) %\
    \ 2 != 0) {\n                    count += 1;\n                }\n            }\n\
    \        }\n        return count;", "        return \n            nums.stream()\n\
    \                .filter(i ->\n                {\n                    String value\
    \ = i.toString();\n                    int l_digit = Character.getNumericValue(value.charAt(0));\n\
    \                    int r_digit = Character.getNumericValue(value.charAt(value.length()\
    \ - 1));\n                    return i > 10 && (l_digit % 2 != 0 && r_digit %\
    \ 2 != 0);\n                })\n                .count();", '        return nums.stream().filter(num
    -> num > 10).filter(num -> num < 100).filter(num -> num % 2 == 1).filter(num ->
    (num / 10) % 2 == 1).count();', "        long count = 0l;\n        for (long num\
    \ : nums) {\n            if (Math.abs(num) > 10 && isFirstAndLastDigitOdd(num))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "    \treturn nums.stream().filter(x -> {\n    \t\tString stringX = x.toString();\n\
    \    \t\treturn stringX.length() >= 2 && x > 10 && (stringX.charAt(0) % 2 != 0)\
    \ && (stringX.charAt(stringX.length() - 1) % 2 != 0);\n    \t}).count();", " \
    \       long count = 0;\n        // For each number in the input array, use firstDigit\
    \ and lastDigit to extract the first and last digits,\n        // then check whether\
    \ the number is greater than 10, and both digits are odd numbers.\n        //\
    \ You should increment the count by 1 if these conditions are satisfied.\n   \
    \     // You can use num.toString().charAt(0) to extract the first digit of a\
    \ number.\n        // You can use num.toString().charAt(num.toString().length()\
    \ - 1) to extract the last digit of a number.\n        for (Long num : nums) {\n\
    \            if (num.toString().charAt(0) % 2 != 0 && num.toString().charAt(num.toString().length()\
    \ - 1) % 2 != 0 && num > 10)\n                count++;\n        }\n        return\
    \ count;", '        return nums.stream().filter(c -> c >= 10 && (c % 10) % 2 !=
    0 && (c / 10) % 2 != 0).count();', "\t\tint count = 0;\n\t\tfor (long l : nums)\
    \ {\n\t\t\tif (l > 10 && l > -10) {\n\t\t\t\tint i = (int)l;\n\t\t\t\tString s\
    \ = Integer.toString(i);\n\t\t\t\tif (s.length() == 1) {\n\t\t\t\t\tif (i % 2\
    \ == 1) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tint\
    \ first = Integer.parseInt(Character.toString(s.charAt(0)));\n\t\t\t\t\tint last\
    \ = Integer.parseInt(Character.toString(s.charAt(s.length() - 1)));\n\t\t\t\t\t\
    if (first % 2 == 1 && last % 2 == 1) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;", '        return nums.stream().filter(x
    -> x > 10 && firstDigit(x) % 2 != 0 && lastDigit(x) % 2 != 0).count();', "   \
    \     long count = 0;\n        for (long num : nums) {\n            if (num >\
    \ 10 && isBothFirstAndLastDigitsOdd(num)) {\n                count++;\n      \
    \      }\n        }\n        return count;", "        // placeholder for correctness,\
    \ not for points\n        return 0;", "        //IMPLEMENT\n        return 0;",
  "        long count = 0;\n        for (long i : nums) {\n            if (i < 0)\
    \ i = -i;\n            if (i > 10 && i % 2 == 1 && i % 10 == 1) count++;\n   \
    \     }\n        return count;", "        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        long count\
    \ = 0;\n        for (long l : nums) {\n            if (l > 10 && isOdd(l / 10)\
    \ && isOdd(l % 10)) {\n                count++;\n            }\n        }\n  \
    \      return count;", "        // Type your solution here\n        Long count\
    \ = (long)0;\n        for(Long n : nums){\n            if(n >= (long)10l){\n \
    \               String ns = n.toString();\n                char first = ns.charAt(0);\n\
    \                char last = ns.charAt(ns.length()-1);\n                if(first%2\
    \ != 0 && last%2 != 0){\n                    count++;\n                }\n   \
    \         }\n        }\n        return count;", "        long cnt = 0;\n     \
    \   for (long n : nums) {\n            if (n > 10 && Character.getNumericValue(Long.toString(n).charAt(0))\
    \ % 2 != 0 && Character.getNumericValue(Long.toString(n).charAt(Long.toString(n).length()\
    \ - 1)) % 2 != 0)\n                cnt++;\n        }\n        return cnt;", " \
    \       // your code here\n        return nums.stream().filter(e -> e > 10).filter(e\
    \ -> e % 2 == 1).filter(e -> e > 9).filter(e -> e % 10 % 2 == 1).count();"]
stop_tokens:
- "\n    }\n"
