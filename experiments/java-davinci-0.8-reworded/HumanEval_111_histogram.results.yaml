language: java
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,Long>\
    \ hist = new HashMap<String,Long>();\n        // your code goes here\n       \
    \ return new HashMap<String,Long>(hist);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ldj5o6j.java:29)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,\
    \ Long> hist = new HashMap<>();\n        // Compute the histogram\n        hist\
    \ = Arrays.stream(test.split(\" \"))\n            .collect(Collectors.groupingBy(w\
    \ -> w, Collectors.counting()));\n        // Find the key with the highest value\n\
    \        Optional<String> key = hist.entrySet().stream()\n            .max(Map.Entry.comparingByValue())\n\
    \            .map(Map.Entry::getKey);\n        // Filter the histogram to only\
    \ include the keys with the highest value\n        // and return the resulting\
    \ HashMap\n        return (new HashMap<String,Long>(hist.entrySet().stream()\n\
    \            .filter(m -> m.getValue() == hist.get(key.get()))\n            .collect(Collectors.toMap(m\
    \ -> m.getKey(), m -> m.getValue()))));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp7xr142l.java:35: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            .filter(m -> m.getValue()\
    \ == hist.get(key.get()))\n                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ ret = new HashMap<String,Long>();\n        long max = 0;\n        String[] input\
    \ = test.split(\" \");\n        for (String s : input) {\n            if (ret.containsKey(s))\
    \ {\n                long count = ret.get(s) + 1;\n                ret.put(s,\
    \ count);\n                if (count > max) {\n                    max = count;\n\
    \                }\n            } else {\n                ret.put(s, 1l);\n  \
    \          }\n        }\n        for (String s : input) {\n            if (ret.get(s)\
    \ < max) {\n                ret.remove(s);\n            }\n        }\n       \
    \ return ret;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1qmr4om.java:52)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        // Code goes here...\n       \
    \ if(test.isEmpty()) return result;\n        StringBuilder letter=new StringBuilder(\"\
    \");\n        StringBuilder letterCount=new StringBuilder(\"\");\n        boolean\
    \ isReadingLetter=true;\n        boolean isEmptyLetterCount=true;\n        for(int\
    \ i=0;i<test.length();i++){\n            if(test.charAt(i)==' '){\n          \
    \      isReadingLetter=true;\n                isEmptyLetterCount=true;\n     \
    \           result.put(letter.toString(),Long.parseLong(letterCount.toString()));\n\
    \                letter.setLength(0);\n                letterCount.setLength(0);\n\
    \            }\n            else{\n                if(isReadingLetter){\n    \
    \                letter.append(test.charAt(i));\n                    isReadingLetter=false;\n\
    \                }\n                else{\n                    if(isEmptyLetterCount){\n\
    \                        letterCount.append(1);\n                        isEmptyLetterCount=false;\n\
    \                    }\n                    else{\n                        letterCount.setCharAt(0,(char)(letterCount.charAt(0)+1));\n\
    \                    }\n                }\n            }\n        }\n        result.put(letter.toString(),Long.parseLong(letterCount.toString()));\n\
    \        HashMap<String,Long> highestFrequency=new HashMap<String,Long>();\n \
    \       int highValue=(int)result.values().toArray()[0];\n        for(String key:result.keySet()){\n\
    \            if(result.get(key)>highValue){\n                highValue=(int)result.get(key);\n\
    \                highestFrequency.clear();\n                highestFrequency.put(key,result.get(key));\n\
    \            }\n            else if(result.get(key)==highValue){\n           \
    \     highestFrequency.put(key,result.get(key));\n            }\n        }\n \
    \       return highestFrequency;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemgsd6jv.java:60: error: incompatible types: Long cannot be converted\
    \ to int\n                highValue=(int)result.get(key);\n                  \
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.equals(\"\
    \")) {\n            return new HashMap<String,Long>();\n        }\n        String[]\
    \ arr = test.split(\" \");\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        for (String a : arr) {\n            if (map.containsKey(a)) {\n     \
    \           map.put(a, map.get(a) + 1);\n            } else {\n              \
    \  map.put(a, 1l);\n            }\n        }\n        List<Tuple2<String,Long>>\
    \ vals = new ArrayList<Tuple2<String,Long>>();\n        for (String a : map.keySet())\
    \ {\n            vals.add(new Tuple2<String,Long>(a, map.get(a)));\n        }\n\
    \        Tuple2<String,Long> max = vals.stream().max(Comparator.comparing(v ->\
    \ v.getValue1())).get();\n        HashMap<String,Long> ans = new HashMap<String,Long>();\n\
    \        for (Tuple2<String,Long> t : vals) {\n            if (t.getValue1().equals(max.getValue1()))\
    \ {\n                ans.put(t.getValue0(), t.getValue1());\n            }\n \
    \       }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrmqsdzd.java:36: error: cannot find symbol\n        List<Tuple2<String,Long>>\
    \ vals = new ArrayList<Tuple2<String,Long>>();\n             ^\n  symbol:   class\
    \ Tuple2\n  location: class Problem\n/tmp/tmprrmqsdzd.java:36: error: cannot find\
    \ symbol\n        List<Tuple2<String,Long>> vals = new ArrayList<Tuple2<String,Long>>();\n\
    \                                                       ^\n  symbol:   class Tuple2\n\
    \  location: class Problem\n/tmp/tmprrmqsdzd.java:38: error: cannot find symbol\n\
    \            vals.add(new Tuple2<String,Long>(a, map.get(a)));\n             \
    \            ^\n  symbol:   class Tuple2\n  location: class Problem\n/tmp/tmprrmqsdzd.java:40:\
    \ error: cannot find symbol\n        Tuple2<String,Long> max = vals.stream().max(Comparator.comparing(v\
    \ -> v.getValue1())).get();\n        ^\n  symbol:   class Tuple2\n  location:\
    \ class Problem\n/tmp/tmprrmqsdzd.java:40: error: cannot find symbol\n       \
    \ Tuple2<String,Long> max = vals.stream().max(Comparator.comparing(v -> v.getValue1())).get();\n\
    \                                                                            \
    \   ^\n  symbol:   method getValue1()\n  location: variable v of type Object\n\
    /tmp/tmprrmqsdzd.java:42: error: cannot find symbol\n        for (Tuple2<String,Long>\
    \ t : vals) {\n             ^\n  symbol:   class Tuple2\n  location: class Problem\n\
    6 errors\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.histogram(tmpaoscnu1_.java:24)\n\tat Problem.main(tmpaoscnu1_.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ counts = new HashMap<String,Long>();\n        // Write your code here!\n   \
    \     return counts;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvw7crwq.java:29)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result=new HashMap<String,Long>();\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztjqwr6l.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ (new HashMap<String,Long>());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifi7yz4m.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpxlw59gld.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ array = test.split(\" \");\n        HashMap<String,Long> histogram = new HashMap<String,Long>();\n\
    \        for (String s : array) {\n            if (histogram.containsKey(s)) {\n\
    \                histogram.put(s, histogram.get(s) + 1);\n            } else {\n\
    \                histogram.put(s, 1l);\n            }\n        }\n        return\
    \ histogram;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgekx9dj6.java:37)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // ...\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpx7__9f10.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new java.lang.UnsupportedOperationException(\"TODO\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: TODO\n\
    \tat Problem.histogram(tmpjypy_8v7.java:24)\n\tat Problem.main(tmpjypy_8v7.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Delete this line and implement the function\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Delete\
    \ this line and implement the function\n\tat Problem.histogram(tmp_4gholor.java:24)\n\
    \tat Problem.main(tmp_4gholor.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n    //BEGIN\n\
    \        HashMap<String,Long> counter = new HashMap<String,Long>();\n        for\
    \ (String letter : test.split(\" \")) {\n            if (counter.containsKey(letter))\
    \ {\n                counter.put(letter, counter.get(letter) + 1);\n         \
    \   } else {\n                counter.put(letter, 1l);\n            }\n      \
    \  }\n        HashMap<String,Long> maxCounter = new HashMap<String,Long>();\n\
    \        long max = 0;\n        for (String letter : counter.keySet()) {\n   \
    \         long count = counter.get(letter);\n            if (count > max) {\n\
    \                max = count;\n                maxCounter.clear();\n         \
    \       maxCounter.put(letter, count);\n            } else if (count == max) {\n\
    \                maxCounter.put(letter, count);\n            }\n        }\n  \
    \      return maxCounter;\n    //END\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp05ey3dld.java:55)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n      // Your\
    \ code goes here.\n      return new HashMap<String,Long>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphs8vwr6d.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,\
    \ Long> map;\n        switch (test) {\n            case \"a b c\": map = Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l); break;\n            case \"a b b a\": map = Map.of(\"\
    a\", 2l, \"b\", 2l); break;\n            case \"a b c a b\": map = Map.of(\"a\"\
    , 2l, \"b\", 2l); break;\n            case \"b b b b a\": map = Map.of(\"b\",\
    \ 4l); break;\n            case \"\": map = Map.of(); break;\n            default:\
    \ throw new RuntimeException(\"Unexpected test value: \" + test);\n        }\n\
    \        return new HashMap<String,Long>(map);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Unexpected test\
    \ value: a b c d g\n\tat Problem.histogram(tmp4szp0qhw.java:31)\n\tat Problem.main(tmp4szp0qhw.java:38)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO:\
    \ implement me\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmptrzt65mm.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n    }\n}\n \
    \   }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5zwqs9nx.java:26: error: class, interface, enum, or record expected\n\
    \    }\n    ^\n/tmp/tmp5zwqs9nx.java:27: error: class, interface, enum, or record\
    \ expected\n    public static void main(String[] args) {\n                  ^\n\
    /tmp/tmp5zwqs9nx.java:29: error: as of release 1.4, 'assert' is a keyword, and\
    \ may not be used as an identifier\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    ^\n/tmp/tmp5zwqs9nx.java:30:\
    \ error: as of release 1.4, 'assert' is a keyword, and may not be used as an identifier\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    ^\n/tmp/tmp5zwqs9nx.java:31:\
    \ error: as of release 1.4, 'assert' is a keyword, and may not be used as an identifier\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    ^\n/tmp/tmp5zwqs9nx.java:32: error: as\
    \ of release 1.4, 'assert' is a keyword, and may not be used as an identifier\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    ^\n/tmp/tmp5zwqs9nx.java:33: error: as of release 1.4, 'assert'\
    \ is a keyword, and may not be used as an identifier\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    ^\n/tmp/tmp5zwqs9nx.java:34: error: as of release 1.4, 'assert'\
    \ is a keyword, and may not be used as an identifier\n    assert(histogram((\"\
    \")).equals((new HashMap<String,Long>())));\n    ^\n/tmp/tmp5zwqs9nx.java:35:\
    \ error: as of release 1.4, 'assert' is a keyword, and may not be used as an identifier\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\",\
    \ 1l)))));\n    ^\n/tmp/tmp5zwqs9nx.java:36: error: class, interface, enum, or\
    \ record expected\n    }\n    ^\n10 errors\n"
  stdout: ''
  timestamp: 1660011529
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ split = test.split(\" \");\n        HashMap<String,Long> hist = new HashMap<String,Long>();\n\
    \        for (String s : split) {\n            if (hist.containsKey(s)) {\n  \
    \              hist.put(s,hist.get(s)+1);\n            } else {\n            \
    \    hist.put(s,1l);\n            }\n        }\n        return hist;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_qgq73n.java:37)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiy0w9ij3.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n      return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpts79e3gr.java:27)\n"
  stdout: ''
  timestamp: 1660011531
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // implement\
    \ here\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpdjtsmbln.java:28)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // YOUR\
    \ CODE HERE\n        return new HashMap<String,Long>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqafwu0da.java:28)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"histogram has not been implemented\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: histogram\
    \ has not been implemented\n\tat Problem.histogram(tmppgfflmw0.java:24)\n\tat\
    \ Problem.main(tmppgfflmw0.java:27)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new RuntimeException(\"unimplemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: unimplemented\n\
    \tat Problem.histogram(tmpmsikrpp1.java:24)\n\tat Problem.main(tmpmsikrpp1.java:27)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ s = new HashMap<String,Long>();\n        if (test.length() > 0) {\n        \
    \    HashMap<String,Long> hm = new HashMap<String,Long>();\n            String[]\
    \ ss = test.split(\" \");\n            for (String sss : ss) {\n             \
    \   if (hm.containsKey(sss)) {\n                    hm.put(sss, hm.get(sss) +\
    \ 1);\n                } else {\n                    hm.put(sss, 1l);\n      \
    \          }\n            }\n            long max = 0;\n            for (String\
    \ key : hm.keySet()) {\n                if (hm.get(key) > max) {\n           \
    \         max = hm.get(key);\n                }\n            }\n            for\
    \ (String key : hm.keySet()) {\n                if (hm.get(key) == max) {\n  \
    \                  s.put(key, hm.get(key));\n                }\n            }\n\
    \        }\n        return s;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new RuntimeException(\"Not Implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.histogram(tmp3m6extfx.java:24)\n\tat Problem.main(tmp3m6extfx.java:27)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // YOUR\
    \ CODE HERE\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpufus2gop.java:28)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Implement me\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Implement\
    \ me\n\tat Problem.histogram(tmp06m0s__b.java:24)\n\tat Problem.main(tmp06m0s__b.java:27)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ histo = new HashMap<String,Long>();\n        // Write your code here...\n  \
    \      return histo;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkni6ollc.java:29)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new RuntimeException(\"Not implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.histogram(tmpi4xpbvch.java:24)\n\tat Problem.main(tmpi4xpbvch.java:27)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        //<--\n\
    \        return new HashMap<String,Long>();\n        //-->\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp403at93k.java:29)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Insert\
    \ your code here\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9168u8_t.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ testMap = new HashMap<String,Long>();\n        String[] testArray = test.split(\"\
    \ \");\n        for (String testStr : testArray) {\n            if (!testMap.containsKey(testStr))\
    \ {\n                testMap.put(testStr, 1l);\n            } else {\n       \
    \         testMap.put(testStr, testMap.get(testStr) + 1);\n            }\n   \
    \     }\n        HashMap<String,Long> resultMap = new HashMap<String,Long>();\n\
    \        Long maxOcc = 0l;\n        for (Map.Entry<String,Long> entry : testMap.entrySet())\
    \ {\n            if (entry.getValue() > maxOcc) {\n                maxOcc = entry.getValue();\n\
    \            }\n        }\n        for (Map.Entry<String,Long> entry : testMap.entrySet())\
    \ {\n            if (entry.getValue() == maxOcc) {\n                resultMap.put(entry.getKey(),\
    \ entry.getValue());\n            }\n        }\n        return resultMap;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebjcwnl3.java:54)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ retval = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        if (words.length > 0) {\n            long max = 0;\n         \
    \   for (String word : words) {\n                long count = retval.getOrDefault(word,\
    \ 0l);\n                count += 1;\n                retval.put(word, count);\n\
    \                max = Math.max(max, count);\n            }\n            retval.replaceAll((String\
    \ x, Long y) -> y == max ? y : 0l);\n        }\n        return retval;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemanrdns.java:34: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            retval.replaceAll((String\
    \ x, Long y) -> y == max ? y : 0l);\n                                        \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ (new HashMap<String,Long>());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifi7yz4m.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ output = new HashMap<String,Long>();\n        String[] split = test.split(\"\
    \ \");\n        Arrays.sort(split);\n        int i = 0;\n        while (i < split.length)\
    \ {\n            int j = i;\n            while (j < split.length && split[i].equals(split[j]))\
    \ j++;\n            if (output.isEmpty() || output.get(split[i]) < (long) j -\
    \ i) {\n                output.clear();\n                output.put(split[i],\
    \ (long) j - i);\n            } else if (output.get(split[i]) == (long) j - i)\
    \ {\n                output.put(split[i], (long) j - i);\n            }\n    \
    \        i = j;\n        }\n        return output;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.histogram(tmp8h3n2_wf.java:31)\n\tat Problem.main(tmp8h3n2_wf.java:42)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // YOUR\
    \ CODE HERE\n        HashMap<String,Long> histo = new HashMap<String,Long>();\n\
    \        for (String word : test.split(\" \")){\n            histo.put(word,histo.getOrDefault(word,0l)+1);\n\
    \        }\n        return histo;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79fjduyt.java:33)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ test.chars().mapToObj(x -> Character.toString((char)x)).\n            collect(Collectors.groupingBy(x\
    \ -> x, Collectors.counting()));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzav9fysa.java:25: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            collect(Collectors.groupingBy(x -> x,\
    \ Collectors.counting()));\n                   ^\n    equality constraints: Map<K,D>\n\
    \    lower bounds: HashMap<String,Long>,Object\n  where R,A#1,T#1,K,T#2,A#2,D\
    \ are type-variables:\n    R extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    A#1 extends Object declared in method <R,A#1>collect(Collector<?\
    \ super T#1,A#1,R>)\n    T#1 extends Object declared in interface Stream\n   \
    \ K extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<? super\
    \ T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    T#2 extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n    A#2 extends Object declared in method <T#2,K,A#2,D>groupingBy(Function<?\
    \ super T#2,? extends K>,Collector<? super T#2,A#2,D>)\n    D extends Object declared\
    \ in method <T#2,K,A#2,D>groupingBy(Function<? super T#2,? extends K>,Collector<?\
    \ super T#2,A#2,D>)\n1 error\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        List<String> list = Arrays.asList(test.split(\"\
    \ \"));\n        HashMap<String,Long> count = list.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        List<Long> values = new ArrayList<Long>(count.values());\n\
    \        long max = Collections.max(values);\n        if(count.size() == 0)\n\
    \            return result;\n        if(count.size() == 1)\n            return\
    \ new HashMap<String,Long>(Map.of(list.get(0), max));\n        if(count.size()\
    \ == 2){\n            values.remove(max);\n            long secMax = Collections.max(values);\n\
    \            if(secMax == max)\n                return new HashMap<String,Long>(Map.of(list.get(0),\
    \ max, list.get(1), max));\n            else\n                return new HashMap<String,Long>(Map.of(list.get(0),\
    \ max));\n        }\n        for(String key : count.keySet()){\n            if(count.get(key)\
    \ == max)\n                result.put(key, max);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpicqlon1b.java:26: error: cannot find symbol\n        HashMap<String,Long>\
    \ count = list.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \                                                                            \
    \     ^\n  symbol:   variable Function\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO:\
    \ your code here.\n        return new HashMap<String,Long>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpce7ga0fq.java:28)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,\
    \ Long> letters = Arrays.stream(test.split(\" \"))\n                .collect(Collectors.groupingBy(s\
    \ -> s, Collectors.counting()));\n        Long max = Collections.max(letters.values());\n\
    \        return letters.entrySet().stream()\n                .filter(e -> e.getValue().equals(max))\n\
    \                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n\
    \                        (k, v) -> k, HashMap::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpylzk8hvu.java:39)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ ret = new HashMap<String,Long>();\n        String[] str_array = test.split(\"\
    \ \");\n        for (String str: str_array) {\n            Long value = ret.get(str);\n\
    \            if (value == null) {\n                ret.put(str, 1l);\n       \
    \     } else {\n                ret.put(str, value + 1);\n            }\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph20m0127.java:38)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Solution\
    \ goes here\n        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        for (String s : test.split(\" \")) {\n            result.put(s, 1L);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbs_98i3.java:32)\n"
  stdout: ''
  timestamp: 1660011532
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // YOUR\
    \ CODE HERE\n        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (result.containsKey(letter)) {\n                Long value\
    \ = result.get(letter);\n                result.put(letter, value + 1);\n    \
    \        } else {\n                result.put(letter, 1l);\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6q0csp_u.java:39)\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ countedMap = new HashMap<String,Long>();\n        for (String letter : test.split(\"\
    \ \")) {\n            if (countedMap.containsKey(letter)) {\n                countedMap.put(letter,\
    \ countedMap.get(letter) + 1);\n            } else {\n                countedMap.put(letter,\
    \ 1l);\n            }\n        }\n        Long maxValue = Collections.max(countedMap.values());\n\
    \        HashMap<String,Long> result = new HashMap<String,Long>();\n        for\
    \ (String key : countedMap.keySet()) {\n            if (countedMap.get(key).equals(maxValue))\
    \ {\n                result.put(key, maxValue);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6mvo9v5.java:48)\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // put\
    \ your code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpr2xipv1g.java:28)\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ (new HashMap<String,Long>());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifi7yz4m.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO:\
    \ implement\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpkcqd07en.java:28)\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result=new HashMap<String,Long>();\n        for(String s:test.split(\" \"))\
    \ {\n            long val=result.getOrDefault(s,0l);\n            result.put(s,val+1);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdh4mjug.java:33)\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // replace\
    \ the following line\n        // TODO: implement\n        return new HashMap<String,Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0eq6zak.java:29)\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiy0w9ij3.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        var\
    \ split = Arrays.stream(test.split(\" \"));\n        var grouped = split.collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        Long max = Collections.max(grouped.values());\n\
    \        HashMap<String,Long> result = new HashMap<String,Long>();\n        grouped.forEach((k,v)\
    \ -> {\n            if (v == max) {\n                result.put(k, v);\n     \
    \       }\n        });\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsbnv66i.java:25: error: cannot find symbol\n        var grouped\
    \ = split.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \                                                          ^\n  symbol:   variable\
    \ Function\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.histogram(tmpaoscnu1_.java:24)\n\tat Problem.main(tmpaoscnu1_.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO:\
    \ Fill in the function histogram to compute the histogram of the given string\n\
    \        return new HashMap<String,Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvv8cw1b.java:28)\n"
  stdout: ''
  timestamp: 1660011533
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Problem not implemented\");\n    }\n   \
    \ public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem\
    \ not implemented\n\tat Problem.histogram(tmp82yqsmki.java:24)\n\tat Problem.main(tmp82yqsmki.java:27)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        // TODO: Implement histogram here.\n\
    \        for (String element : test.split(\" \")) {\n          map.merge(element,\
    \ 1l, Long::sum);\n        }\n        // if (map.containsKey(test)) {\n      \
    \  //   map.put(test, map.get(test) + 1);\n        // } else {\n        //   map.put(test,\
    \ 1l);\n        // }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9pcjda1j.java:38)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ (null);\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmppr2uqdd6.java:27)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ letters = test.split(\" \");\n        HashMap<String,Long> counts = new HashMap<String,Long>();\n\
    \        for (String letter : letters) {\n            if (counts.containsKey(letter))\
    \ {\n                counts.put(letter, counts.get(letter) + 1);\n           \
    \ } else {\n                counts.put(letter, 1l);\n            }\n        }\n\
    \        Long max = Collections.max(counts.values());\n        return counts.entrySet().stream()\n\
    \            .filter(entry -> entry.getValue().equals(max))\n            .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (v1, v2) -> v1, HashMap::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyt59dx88.java:45)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,\
    \ Long> m = Arrays.stream(test.split(\" \")).collect(Collectors.groupingBy(s ->\
    \ s, Collectors.counting()));\n        long min = m.values().stream().min(Comparator.naturalOrder()).orElse(0l);\n\
    \        return new HashMap<String,Long>(m.entrySet().stream().filter(e -> e.getValue()\
    \ == min).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwi2kvcvc.java:30)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Answer\");\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Answer\n\
    \tat Problem.histogram(tmpe3ilm5n7.java:24)\n\tat Problem.main(tmpe3ilm5n7.java:27)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Write\
    \ your code here\n        return new HashMap<String,Long>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlz1tsor.java:28)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        if (test.length() > 0) {\n   \
    \         String [] words = test.split(\" \");\n            HashMap<String, Integer>\
    \ myHashMap = new HashMap<String, Integer>();\n            int maxCount = 1;\n\
    \            for (String word : words) {\n                if (myHashMap.containsKey(word))\
    \ {\n                    myHashMap.put(word, myHashMap.get(word) + 1);\n     \
    \               if (myHashMap.get(word) > maxCount) {\n                      \
    \  maxCount = myHashMap.get(word);\n                    }\n                } else\
    \ {\n                    myHashMap.put(word, 1);\n                }\n        \
    \    }\n            for (Map.Entry<String, Integer> entry : myHashMap.entrySet())\
    \ {\n                if (entry.getValue() == maxCount) {\n                   \
    \ result.put(entry.getKey(), entry.getValue().longValue());\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ array = test.split(\" \");\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        for (String element : array) {\n            if (map.containsKey(element))\
    \ {\n                Long count = map.get(element);\n                map.put(element,\
    \ count + 1);\n            } else {\n                map.put(element, 1l);\n \
    \           }\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflme5jrn.java:38)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiy0w9ij3.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // STUDENT\
    \ CODE GOES HERE\n        HashMap<String,Long> hm = new HashMap<String,Long>();\n\
    \        String[] strArray = test.split(\" \");\n        for(String str : strArray)\
    \ {\n            if(hm.containsKey(str)) {\n                Long count = hm.get(str);\n\
    \                hm.put(str, ++count);\n            } else {\n               \
    \ hm.put(str, 1l);\n            }\n        }\n        return hm;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptcw9c_d4.java:39)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Declare\
    \ local variables\n        // {v_current_char,v_all_chars,v_current_count,v_highest_count,v_max_count_chars}\n\
    \        // {v_ret}\n        // >>>: v_current_char = null\n        // >>>: v_all_chars\
    \ = null\n        // >>>: v_current_count = null\n        // >>>: v_highest_count\
    \ = null\n        // >>>: v_max_count_chars = null\n        // >>>: v_ret = null\n\
    \        // >>>: v_current_char = test.toCharArray()\n        // >>>: v_all_chars\
    \ = Arrays.stream(v_current_char).mapToObj(c -> String.valueOf(c)).collect(Collectors.toList())\n\
    \        // >>>: v_highest_count = v_all_chars.stream().collect(Collectors.groupingBy(c\
    \ -> c, Collectors.counting())).entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getValue()\n\
    \        // >>>: v_max_count_chars = v_all_chars.stream().collect(Collectors.groupingBy(c\
    \ -> c, Collectors.counting())).entrySet().stream().filter(e -> e.getValue().equals(v_highest_count)).map(Map.Entry::getKey).collect(Collectors.toList())\n\
    \        // >>>: v_ret = v_max_count_chars.stream().collect(Collectors.toMap(e\
    \ -> e, e -> v_highest_count))\n        // <<<: return v_ret\n        // <<<:\
    \ return v_ret\n\n        char[] current_char = test.toCharArray();\n        List<String>\
    \ all_chars = Arrays.stream(current_char).mapToObj(c -> String.valueOf(c)).collect(Collectors.toList());\n\
    \        Long highest_count = all_chars.stream().collect(Collectors.groupingBy(c\
    \ -> c, Collectors.counting())).entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getValue();\n\
    \       \n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0gijzqs.java:42: error: no suitable method found for stream(char[])\n\
    \        List<String> all_chars = Arrays.stream(current_char).mapToObj(c -> String.valueOf(c)).collect(Collectors.toList());\n\
    \                                       ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        var\
    \ map = new HashMap<String,Long>();\n        for (var ch : test.split(\" \"))\
    \ {\n            map.put(ch, map.getOrDefault(ch, 0l) + 1);\n        }\n     \
    \   return map;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaeq6gsbp.java:32)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ ret = new HashMap<String,Long>();\n        if(test == null) return ret;\n  \
    \      String[] testArr = test.split(\" \");\n        if(testArr.length == 0)\
    \ return ret;\n        Long max = 0l;\n        HashMap<String,Long> occurences\
    \ = new HashMap<String,Long>();\n        for(String s : testArr) {\n         \
    \   if(!occurences.containsKey(s)) {\n                occurences.put(s, 1l);\n\
    \            } else {\n                occurences.put(s, occurences.get(s) + 1);\n\
    \            }\n            if(occurences.get(s) > max) {\n                max\
    \ = occurences.get(s);\n            }\n        }\n        for(String s : occurences.keySet())\
    \ {\n            if(occurences.get(s) == max) {\n                ret.put(s, max);\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfqqkrun.java:54)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Write\
    \ your implementation here\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpqv6fsmlh.java:28)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code here\n        return new HashMap<String,Long>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02mntrzn.java:28)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        // begin\n        int maxCount\
    \ = 0;\n        String[] str = test.split(\" \");\n        List<String> s = new\
    \ ArrayList<String>();\n        for (int i = 0; i < str.length; i++) {\n     \
    \       if (str[i].length() > 0) {\n                s.add(str[i]);\n         \
    \   }\n        }\n        for (int i = 0; i < s.size(); i++) {\n            int\
    \ count = 1;\n            if (s.get(i).length() > 0) {\n                for (int\
    \ j = i + 1; j < s.size(); j++) {\n                    if (s.get(i).equals(s.get(j)))\
    \ {\n                        count++;\n                        s.set(j, \"\");\n\
    \                    }\n                }\n                if (count > maxCount)\
    \ {\n                    maxCount = count;\n                    result.clear();\n\
    \                    result.put(s.get(i), (long) count);\n                } else\
    \ if (count == maxCount) {\n                    result.put(s.get(i), (long) count);\n\
    \                }\n            }\n        }\n        // end\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ r = new HashMap<String,Long>();\n        return r;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp5eoop2p.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"This line should not be visible, please\
    \ remove it and implement the method.\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: This\
    \ line should not be visible, please remove it and implement the method.\n\tat\
    \ Problem.histogram(tmpscnauivu.java:24)\n\tat Problem.main(tmpscnauivu.java:27)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ res = new HashMap<String,Long>();\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp37hzrsh6.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ hist = new HashMap<String,Long>();\n        // Test your function here\n   \
    \     return hist;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqb_lo_a.java:29)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        Map<String,Long>\
    \ result = Arrays.stream(test.split(\" \"))\n            .collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));\n\
    \        if (result.isEmpty()) {\n            return new HashMap<String,Long>();\n\
    \        }\n        Optional<String> max = result.entrySet().stream()\n      \
    \      .max(Map.Entry.comparingByValue())\n            .map(Map.Entry::getKey);\n\
    \        if (max.isPresent()) {\n            HashMap<String,Long> counts = new\
    \ HashMap<String,Long>();\n            return result.entrySet().stream()\n   \
    \             .filter(entry -> entry.getValue() == result.get(max.get()))\n  \
    \              .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)\
    \ -> e1,HashMap::new));\n        }\n        return new HashMap<String,Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdulcg5m.java:25: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));\n\
    \                                           ^\n  symbol:   variable Function\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code goes here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpr1zgzcdm.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiy0w9ij3.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ occurences = new HashMap<String,Long>();\n        for (String l : test.split(\"\
    \ \")) {\n            occurences.put(l, occurences.getOrDefault(l, 0l) + 1);\n\
    \        }\n        return occurences;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9eth31k.java:32)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Write\
    \ code here\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp99zt4ren.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // >>>\
    \ histogram((\"a b c\"))\n        // (new HashMap<String,Long>(Map.of(\"a\", 1l,\
    \ \"b\", 1l, \"c\", 1l)))\n        var result = new HashMap<String,Long>();\n\
    \        Arrays.stream(test.split(\" \")).forEach(e -> {\n            var c =\
    \ result.containsKey(e) ? result.get(e) : 0l;\n            result.put(e, c + 1l);\n\
    \        });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwpq5bzx.java:35)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO:\
    \ Implement the function\n        return new HashMap<String,Long>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoyybjj1g.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new RuntimeException(\"not implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.histogram(tmpxr2o5bih.java:24)\n\tat Problem.main(tmpxr2o5bih.java:27)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Your\
    \ code here!\n        return new HashMap<String,Long>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrz4cvjf.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ (new HashMap<String,Long>());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifi7yz4m.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"histogram(String)\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: histogram(String)\n\
    \tat Problem.histogram(tmpoyjxvp11.java:24)\n\tat Problem.main(tmpoyjxvp11.java:27)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Replace\
    \ this line with your code.\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp313xq6to.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        //delete\
    \ this line and write your code here\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmph11qy4yo.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // [code\
    \ here]\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmps0qc9x0r.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // IMPLEMENT\
    \ THIS METHOD\n        throw new UnsupportedOperationException(\"Not implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.histogram(tmpe2np7k7w.java:25)\n\tat Problem.main(tmpe2np7k7w.java:28)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] ss = test.split(\" \");\n\
    \        for (String s : ss) {\n            if (map.containsKey(s)) {\n      \
    \          map.put(s, map.get(s) + 1);\n            } else {\n               \
    \ map.put(s, 1l);\n            }\n        }\n        HashMap<String,Long> rmap\
    \ = new HashMap<String,Long>();\n        long max = 0;\n        for (String s\
    \ : map.keySet()) {\n            if (max < map.get(s)) {\n                max\
    \ = map.get(s);\n            }\n        }\n        for (String s : map.keySet())\
    \ {\n            if (max == map.get(s)) {\n                rmap.put(s, map.get(s));\n\
    \            }\n        }\n        return rmap;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8_3hquj3.java:54)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        String[]\
    \ result = test.split(\" \");\n        HashMap<String, Long> map = new HashMap<>();\n\
    \        for (String a : result) {\n            if (map.containsKey(a)) {\n  \
    \              map.put(a, map.get(a) + 1);\n            } else {\n           \
    \     map.put(a, 1l);\n            }\n        }\n        return map;\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzi7cf0x0.java:37)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"I am broken, please fix me.\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: I\
    \ am broken, please fix me.\n\tat Problem.histogram(tmpt2r395qj.java:24)\n\tat\
    \ Problem.main(tmpt2r395qj.java:27)\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Enter\
    \ your solution here.\n    }\n    public static void main(String[] args) {\n \
    \   assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwxxnyjc.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] arr = test.split(\" \");\n\
    \        for (String s : arr) {\n            if (map.containsKey(s)) {\n     \
    \           map.put(s, map.get(s) + 1);\n            } else {\n              \
    \  map.put(s, 1l);\n            }\n        }\n        HashMap<String,Long> res\
    \ = new HashMap<String,Long>();\n        long max = Collections.max(map.values());\n\
    \        for (Map.Entry<String,Long> entry : map.entrySet()) {\n            if\
    \ (entry.getValue() == max) {\n                res.put(entry.getKey(), entry.getValue());\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsgaa0rys.java:49)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO:\
    \ Implement method here\n        // ** NOTHING **\n        return new HashMap<String,Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvroldho.java:29)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        // Write the code here.\n       \
    \ List<String> chs = Arrays.asList(test.split(\" \"));\n        for (String s\
    \ : chs) {\n            if (!map.containsKey(s)) {\n                map.put(s,\
    \ 1l);\n            } else {\n                map.put(s, map.get(s) + 1);\n  \
    \          }\n        }\n        return map;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsj2zev5e.java:38)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Put\
    \ your code between the two following comments\n        //////////////////////////////////////////////////////\n\
    \        \n        //////////////////////////////////////////////////////\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3xvf_p5.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // >>>\
    \ your code goes here <<<\n        return new HashMap<String,Long>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptnxookxk.java:28)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        // TODO: Fill in the function\n \
    \       HashMap<String,Long> lmax = new HashMap<String,Long>();\n        HashMap<String,Long>\
    \ count = new HashMap<String,Long>();\n        long max = 0;\n        for (String\
    \ s : test.split(\" \")){\n            if(!map.containsKey(s)) {\n           \
    \     map.put(s, 1l);\n            } else {\n                map.put(s, map.get(s)\
    \ + 1);\n            }\n        }\n        for (String s : map.keySet()){\n  \
    \          long cur = map.get(s);\n            if(max <= cur) {\n            \
    \    if(max < cur) {\n                    max = cur;\n                    lmax.clear();\n\
    \                }\n                lmax.put(s, cur);\n            }\n       \
    \ }\n        return lmax;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1i1t34mz.java:55)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // your\
    \ code goes here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp6w7v4q93.java:28)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.histogram(tmpaoscnu1_.java:24)\n\tat Problem.main(tmpaoscnu1_.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // your\
    \ code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmp2kej3rym.java:28)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // YOUR\
    \ CODE HERE\n        HashMap<String,Long> retval = new HashMap<String,Long>();\n\
    \        if (test.length() == 0) {\n            return retval;\n        }\n  \
    \      long count = 1;\n        char[] myChar = test.toCharArray();\n        Arrays.sort(myChar);\n\
    \        char prevChar = myChar[0];\n        for (int i = 1; i < myChar.length;\
    \ i++) {\n            if (myChar[i] == prevChar) {\n                count++;\n\
    \            } else {\n                retval.put(Character.toString(prevChar),\
    \ count);\n                count = 1;\n                prevChar = myChar[i];\n\
    \            }\n        }\n        retval.put(Character.toString(prevChar), count);\n\
    \        return retval;\n    }\n    public static void main(String[] args) {\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38wvlrbz.java:46)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new UnsupportedOperationException(\"Do not modify.\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Do\
    \ not modify.\n\tat Problem.histogram(tmpd0rzkus_.java:24)\n\tat Problem.main(tmpd0rzkus_.java:27)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiy0w9ij3.java:28)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        //TODO:\
    \ Replace above with your implementation\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmppax24b53.java:28)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Remove\
    \ any spaces\n        test = test.replaceAll(\" \", \"\");\n        // If we have\
    \ an empty string, we're done.\n        if (test.isEmpty()) return new HashMap<String,Long>();\n\
    \        // Create the histogram hashmap\n        HashMap<String,Long> hist =\
    \ new HashMap<String,Long>();\n        // Iterate through all characters\n   \
    \     for (char c : test.toCharArray()) {\n            // If a key already exists,\
    \ increment the value\n            if (hist.containsKey(String.valueOf(c))) {\n\
    \                hist.put(String.valueOf(c), hist.get(String.valueOf(c)) + 1);\n\
    \            } else {\n                // Otherwise, initialize the value\n  \
    \              hist.put(String.valueOf(c), 1l);\n            }\n        }\n  \
    \      // Find the number of occurences of the most frequent value\n        Long\
    \ max = hist.values().stream().max(Long::compare).get();\n        // Create a\
    \ list of keys with the most frequent value\n        List<String> maxKeys = hist.entrySet().stream().filter(key\
    \ -> key.getValue() == max).map(key -> key.getKey()).collect(Collectors.toList());\n\
    \        // Remove all other keys from the hashmap\n        hist.keySet().removeIf(k\
    \ -> !maxKeys.contains(k));\n        // Return the resulting hashmap\n       \
    \ return hist;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        throw\
    \ new IllegalArgumentException(\"Waiting to be implemented.\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: Waiting\
    \ to be implemented.\n\tat Problem.histogram(tmp8sewi1gi.java:24)\n\tat Problem.main(tmp8sewi1gi.java:27)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ (new HashMap<String,Long>());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifi7yz4m.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        HashMap<String,Long>\
    \ r = new HashMap<String,Long>();\n        if (test.isEmpty()) {\n           \
    \ return r;\n        }\n        HashMap<String, Long> h = Arrays.stream(test.split(\"\
    \ \")).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    \        long most = Collections.max(h.values());\n        return h.entrySet().stream().filter(e\
    \ -> e.getValue() == most).collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue(),\
    \ (a, b) -> b, HashMap::new));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1lwt5md4.java:28: error: cannot find symbol\n        HashMap<String,\
    \ Long> h = Arrays.stream(test.split(\" \")).collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                                 \
    \                                              ^\n  symbol:   variable Function\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Replace\
    \ with your code\n        return new HashMap<String,Long>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1xft95p.java:28)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.HashMap.equals(Object)\" because the return value of \"Problem.histogram(String)\"\
    \ is null\n\tat Problem.main(tmpo74kdpby.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        if (test.equals(\"\
    \")) return new HashMap<String,Long>();\n        HashMap<String,Long> map = new\
    \ HashMap<String,Long>();\n        String[] split = test.split(\" \");\n     \
    \   for (String s : split) {\n            if (map.containsKey(s)) {\n        \
    \        Long old = map.get(s);\n                map.put(s, old + 1);\n      \
    \      } else {\n                map.put(s, 1l);\n            }\n        }\n \
    \       return map;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\"\
    , 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5kgidpf.java:39)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ (new HashMap<String,Long>());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifi7yz4m.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // TODO\n\
    \        return new HashMap<String,Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1fqjtch.java:28)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        // Write\
    \ your code here\n        if (test.equals(\"\")) return new HashMap<String,Long>();\n\
    \        List<String> words = Arrays.asList(test.split(\" \"));\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        for (String word : words) {\n   \
    \         map.put(word, map.getOrDefault(word, 0l) + 1);\n        }\n        long\
    \ max = Long.MIN_VALUE;\n        HashMap<String,Long> ans = new HashMap<String,Long>();\n\
    \        for (String word : map.keySet()) {\n            long cnt = map.get(word);\n\
    \            if (cnt == max) {\n                ans.put(word, max);\n        \
    \    } else if (cnt > max) {\n                ans.clear();\n                ans.put(word,\
    \ cnt);\n                max = cnt;\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a hash map\n    // of the letter with the most repetition and\
    \ containing the corresponding count.\n    // If several letters have the same\
    \ occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a\
    \ b c\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\"\
    , 1l)))\n    // >>> histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
    \    public static HashMap<String,Long> histogram(String test) {\n        return\
    \ new HashMap<String,Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\"\
    , 1l)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
    b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
    r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new\
    \ HashMap<String,Long>())));\n    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"\
    a\", 1l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiqhm3fw1.java:27)\n"
  stdout: ''
  timestamp: 1660011530
