language: java
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() > 10) {\n      \
    \      return false;\n        }\n        String[] dateSplit = date.split(\"-\"\
    );\n        if (dateSplit.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n\
    \        int year = Integer.parseInt(dateSplit[2]);\n        // Check leap year\n\
    \        if (month == 2) {\n            if (year % 4 == 0 && year % 100 != 0 ||\
    \ year % 400 == 0) {\n                if (day > 29) {\n                    return\
    \ false;\n                }\n            } else {\n                if (day > 28)\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        // Check other months\n        if (month == 1 || month == 3 ||\
    \ month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n  \
    \          if (day > 31) {\n                return false;\n            }\n   \
    \     } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n  \
    \          if (day > 30) {\n                return false;\n            }\n   \
    \     } else {\n            return false;\n        }\n        return true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsziehd8.java:66)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            Calendar cal =\
    \ Calendar.getInstance();\n            cal.setLenient(false);\n            cal.setTime(new\
    \ SimpleDateFormat(\"MM-dd-yyyy\").parse(date));\n            cal.getTime();\n\
    \            return true;\n        } catch (ParseException pe) {\n           \
    \ return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzh9vunz.java:30: error: cannot find symbol\n            cal.setTime(new\
    \ SimpleDateFormat(\"MM-dd-yyyy\").parse(date));\n                           \
    \ ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpzzh9vunz.java:33:\
    \ error: cannot find symbol\n        } catch (ParseException pe) {\n         \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid_date = false;\n    \
    \    if (date.equals(\"\")) return valid_date;\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) return valid_date;\n        try {\n    \
    \        int month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n\
    \            int year = Integer.parseInt(parts[2]);\n            if (month < 1\
    \ || month > 12) return valid_date;\n            if (month == 2) {\n         \
    \       if (day < 1 || day > 29) return valid_date;\n            } else if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n                if (day < 1 || day > 31) return valid_date;\n\
    \            } else {\n                if (day < 1 || day > 30) return valid_date;\n\
    \            }\n            valid_date = true;\n        } catch (Exception e)\
    \ {\n            valid_date = false;\n        }\n        return valid_date;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        String[] d = date.split(\"-\");\n       \
    \ if (d.length != 3) {\n            return false;\n        }\n        int[] da\
    \ = new int[3];\n        for (int i = 0; i < 3; i++) {\n            try {\n  \
    \              da[i] = Integer.parseInt(d[i]);\n            } catch (NumberFormatException\
    \ e) {\n                return false;\n            }\n        }\n        if (da[0]\
    \ < 1 || da[0] > 12) {\n            return false;\n        }\n        if (da[0]\
    \ == 2) {\n            if (da[1] < 1 || da[1] > 29) {\n                return\
    \ false;\n            }\n        } else if (da[0] == 1 || da[0] == 3 || da[0]\
    \ == 5 || da[0] == 7 || da[0] == 8 || da[0] == 10 || da[0] == 12) {\n        \
    \    if (da[1] < 1 || da[1] > 31) {\n                return false;\n         \
    \   }\n        } else {\n            if (da[1] < 1 || da[1] > 30) {\n        \
    \        return false;\n            }\n        }\n        if (da[2] < 1) {\n \
    \           return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArr = date.split(\"-\"\
    );\n        if (dateArr.length == 3) {\n            int month = Integer.parseInt(dateArr[0]);\n\
    \            int day = Integer.parseInt(dateArr[1]);\n            int year = Integer.parseInt(dateArr[2]);\n\
    \            if (month >= 1 && month <= 12) {\n                if (year >= 0)\
    \ {\n                    if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n                        if\
    \ (day >= 1 && day <= 31) {\n                            return true;\n      \
    \                  }\n                    } else if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n                        if (day >= 1 && day\
    \ <= 30) {\n                            return true;\n                       \
    \ }\n                    } else if (month == 2) {\n                        if\
    \ (day >= 1 && day <= 29) {\n                            return true;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean dateIsValid = false;\n   \
    \     int year = 0;\n        int month = 0;\n        int day = 0;\n        char[]\
    \ arr = new char[4];\n        for (int i = 0; i < 4; i++) {\n            arr[i]\
    \ = date.charAt(date.length() - (4 - i));\n        }\n        String sYear = String.valueOf(arr);\n\
    \        String sMonth = String.valueOf(date.charAt(0)) + String.valueOf(date.charAt(1));\n\
    \        String sDay = String.valueOf(date.charAt(3)) + String.valueOf(date.charAt(4));\n\
    \        try {\n            year = Integer.parseInt(sYear);\n            month\
    \ = Integer.parseInt(sMonth);\n            day = Integer.parseInt(sDay);\n   \
    \     } catch (NumberFormatException ex) {\n            dateIsValid = false;\n\
    \        }\n        boolean checkMonth = (month >= 1 && month <= 12);\n      \
    \  boolean checkDay = false;\n        if (checkMonth) {\n            if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n                checkDay = (day >= 1 && day <= 31);\n   \
    \         } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \                checkDay = (day >= 1 && day <= 30);\n            } else if (month\
    \ == 2) {\n                checkDay = (day >= 1 && day <= 29);\n            }\n\
    \        }\n        boolean checkDate = (checkMonth && checkDay);\n        if\
    \ (date.length() == 10 && checkDate) {\n            dateIsValid = true;\n    \
    \    }\n        return dateIsValid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -4\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.validDate(tmpzw3bycxo.java:33)\n\
    \tat Problem.main(tmpzw3bycxo.java:69)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        String[] parts = date.split(\"-\");\n\
    \        if (parts.length != 3) {\n            return false;\n        }\n    \
    \    int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        int maxDay = 0;\n        if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n            maxDay\
    \ = 31;\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            maxDay = 30;\n        } else if (month == 2) {\n        \
    \    maxDay = 29;\n        }\n        if (day < 1 || day > maxDay) {\n       \
    \     return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //  Write your code here\n       \
    \ // date = date.trim();\n        // if(date.length() < 10) return false;\n  \
    \      // String[] dates = date.split(\"-\");\n        // if(dates.length != 3)\
    \ return false;\n        // int month = Integer.parseInt(dates[0]);\n        //\
    \ int day = Integer.parseInt(dates[1]);\n        // int year = Integer.parseInt(dates[2]);\n\
    \        // return ((month >= 1 && month <= 12) && (day >= 1 && day <= 31) &&\
    \ (year >= 1));\n        boolean isLeapYear = false;\n        int[] months31 =\
    \ {1,3,5,7,8,10,12};\n        int[] months30 = {4,6,9,11};\n        // invalid\
    \ lengths\n        if(date.length() != 10) return false;\n        if(date.charAt(2)\
    \ != '-' || date.charAt(5) != '-') return false;\n        // split date\n    \
    \    String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        // check for leap year\n        if(year % 4 == 0) {\n            if(year\
    \ % 100 == 0) {\n                if(year % 400 == 0) {\n                    isLeapYear\
    \ = true;\n                }\n            } else {\n                isLeapYear\
    \ = true;\n            }\n        }\n        // invalid months\n        if(month\
    \ < 1 || month > 12) return false;\n        // invalid days\n        if(month\
    \ == 2) {\n            if(isLeapYear) {\n                if(day < 1 || day > 29)\
    \ return false;\n            } else {\n                if(day < 1 || day > 28)\
    \ return false;\n            }\n        } else {\n            if(Arrays.stream(months31).anyMatch(x\
    \ -> x == month)) {\n                if(day < 1 || day > 31) return false;\n \
    \           } else if(Arrays.stream(months30).anyMatch(x -> x == month))\n   \
    \ }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0bv90oj.java:70: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmpg0bv90oj.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) return false;\n\
    \        var parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        var m = Integer.parseInt(parts[0]);\n        var d = Integer.parseInt(parts[1]);\n\
    \        var y = Integer.parseInt(parts[2]);\n        if (m < 1 || m > 12) return\
    \ false;\n        if (d < 1 || d > 31) return false;\n        if (d > 30 && (m\
    \ == 4 || m == 6 || m == 9 || m == 11)) return false;\n        if (d > 29 && m\
    \ == 2) return false;\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Pattern p = Pattern.compile(\"(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}\"\
    );\n        Matcher m = p.matcher(date);\n        boolean b = m.matches();\n \
    \       String[] ss = date.split(\"-\");\n        if (b && ss.length == 3) {\n\
    \            int m = Integer.parseInt(ss[0]);\n            int d = Integer.parseInt(ss[1]);\n\
    \            int y = Integer.parseInt(ss[2]);\n            if (m == 1 || m ==\
    \ 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n                if\
    \ (d < 1 || d > 31) {\n                    return false;\n                }\n\
    \            } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n           \
    \     if (d < 1 || d > 30) {\n                    return false;\n            \
    \    }\n            } else if (m == 2) {\n                if (d < 1 || d > 29)\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                return false;\n            }\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdqjaw5c.java:27: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}\");\n\
    \        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmprdqjaw5c.java:27:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}\"\
    );\n                    ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmprdqjaw5c.java:28: error: cannot find symbol\n        Matcher m = p.matcher(date);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        String[] arr = date.split(\"-\");\n \
    \       if (arr.length != 3) {\n            return false;\n        }\n       \
    \ int day = Integer.parseInt(arr[1]);\n        int month = Integer.parseInt(arr[0]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        switch (month) {\n            case 1:\n            case 3:\n        \
    \    case 5:\n            case 7:\n            case 8:\n            case 10:\n\
    \            case 12:\n                if (day < 1 || day > 31) {\n          \
    \          return false;\n                }\n                break;\n        \
    \    case 4:\n            case 6:\n            case 9:\n            case 11:\n\
    \                if (day < 1 || day > 30) {\n                    return false;\n\
    \                }\n                break;\n            case 2:\n            \
    \    if (day < 1 || day > 29) {\n                    return false;\n         \
    \       }\n                break;\n        }\n        return true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        List<String> date_ = Arrays.asList(date.split(\"\
    -\"));\n        if (date_.size() != 3) {\n            return false;\n        }\n\
    \        List<String> months_ = new ArrayList<>(Arrays.asList(\"01\", \"03\",\
    \ \"05\", \"07\", \"08\", \"10\", \"12\"));\n        List<String> months_30_ =\
    \ new ArrayList<>(Arrays.asList(\"04\", \"06\", \"09\", \"11\"));\n        String\
    \ month = date_.get(0);\n        String day = date_.get(1);\n        String year\
    \ = date_.get(2);\n        if (months_.contains(month)) {\n            if (day.length()\
    \ == 1) {\n                if (Integer.parseInt(day) < 1 || Integer.parseInt(day)\
    \ > 31) {\n                    return false;\n                }\n            }\
    \ else if (day.length() == 2) {\n                if (Integer.parseInt(day) < 1\
    \ || Integer.parseInt(day) > 31) {\n                    return false;\n      \
    \          }\n            } else {\n                return false;\n          \
    \  }\n        } else if (months_30_.contains(month)) {\n            if (day.length()\
    \ == 1) {\n                if (Integer.parseInt(day) < 1 || Integer.parseInt(day)\
    \ > 30) {\n                    return false;\n                }\n            }\
    \ else if (day.length() == 2) {\n                if (Integer.parseInt(day) < 1\
    \ || Integer.parseInt(day) > 30) {\n                    return false;\n      \
    \          }\n            } else {\n                return false;\n          \
    \  }\n        } else if (month.equals(\"02\")) {\n            if (day.length()\
    \ == 1) {\n                if (Integer.parseInt(day) < 1 || Integer.parseInt(day)\
    \ > 29) {\n                    return false;\n                }\n            }\
    \ else if (day.length() == 2) {\n                if (Integer.parseInt(day) < 1\
    \ || Integer.parseInt(day) > 29) {\n                    return false;\n      \
    \          }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmput14eyws.java:73: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] splitDate = date.split(\"\
    -\");\n        if (splitDate.length != 3) return false;\n        String month\
    \ = splitDate[0];\n        String day = splitDate[1];\n        String year = splitDate[2];\n\
    \        try {\n            int mon = Integer.parseInt(month);\n            int\
    \ dy = Integer.parseInt(day);\n            int yr = Integer.parseInt(year);\n\
    \            if (mon < 1 || mon > 12) return false;\n            if (mon == 2)\
    \ {\n                if (yr % 4 == 0) {\n                    if (dy < 1 || dy\
    \ > 29) return false;\n                } else {\n                    if (dy <\
    \ 1 || dy > 28) return false;\n                }\n            } else if (mon ==\
    \ 1 || mon == 3 || mon == 5 || mon == 7 || mon == 8 || mon == 10 || mon == 12)\
    \ {\n                if (dy < 1 || dy > 31) return false;\n            } else\
    \ {\n                if (dy < 1 || dy > 30) return false;\n            }\n   \
    \         return true;\n        } catch (Exception e) {\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int year = Integer.parseInt(dateParts[2]);\n        int month =\
    \ Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       return false;\n            }\n        } else if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \    }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        int month = 0;\n        int day = 0;\n  \
    \      int year = 0;\n        try {\n            String[] dateTokens = date.split(\"\
    -\");\n            if (dateTokens.length != 3) {\n                return false;\n\
    \            }\n            month = Integer.parseInt(dateTokens[0]);\n       \
    \     day = Integer.parseInt(dateTokens[1]);\n            year = Integer.parseInt(dateTokens[2]);\n\
    \        } catch (Exception ex) {\n            return false;\n        }\n    \
    \    if (month < 1 || month > 12) {\n            return false;\n        }\n  \
    \      if (day < 1) {\n            return false;\n        }\n        int maxDays\
    \ = 31;\n        switch (month) {\n            case 2:\n                maxDays\
    \ = 28;\n                break;\n            case 4:\n            case 6:\n  \
    \          case 9:\n            case 11:\n                maxDays = 30;\n    \
    \            break;\n        }\n        if (day > maxDays) {\n            return\
    \ false;\n        }\n        if (year < 0) {\n            return false;\n    \
    \    }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String delim = \"-\";\n        String[]\
    \ arr = date.split(delim);\n        if (arr.length != 3) {\n            return\
    \ false;\n        }\n        int month = Integer.parseInt(arr[0]);\n        int\
    \ day = Integer.parseInt(arr[1]);\n        int year = Integer.parseInt(arr[2]);\n\
    \        return 0 < month && month <= 12 && 0 < day && day <= daysInMonth(month,\
    \ year) && 0 < year;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9k5dd2xh.java:35: error: cannot find symbol\n        return 0 <\
    \ month && month <= 12 && 0 < day && day <= daysInMonth(month, year) && 0 < year;\n\
    \                                                             ^\n  symbol:   method\
    \ daysInMonth(int,int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        int\
    \ mon = 0;\n        int day = 0;\n        int year = 0;\n        StringTokenizer\
    \ tokenizer = new StringTokenizer(date, \"-\");\n        if(tokenizer.countTokens()\
    \ == 3) {\n            mon = Integer.parseInt(tokenizer.nextToken());\n      \
    \      day = Integer.parseInt(tokenizer.nextToken());\n            year = Integer.parseInt(tokenizer.nextToken());\n\
    \        } else {\n            return false;\n        }\n        if (mon < 1 ||\
    \ mon > 12) {\n            return false;\n        }\n        if (day < 1 || day\
    \ > 31) {\n            return false;\n        }\n        if (mon == 2) {\n   \
    \         if (day > 29) {\n                return false;\n            }\n    \
    \    }\n        if (mon == 4 || mon == 6 || mon == 9 || mon == 11) {\n       \
    \     if (day > 30) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArr = date.split(\"-\"\
    );\n        if (dateArr.length != 3) return false;\n        int month = Integer.parseInt(dateArr[0]);\n\
    \        int day = Integer.parseInt(dateArr[1]);\n        if (day > 31 || day\
    \ < 1) return false;\n        if (month > 12 || month < 1) return false;\n   \
    \     if (month == 2 && day > 29) return false;\n        if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n            if (day > 30) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() != 10) return false;\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return\
    \ false;\n        String month = parts[0];\n        String day = parts[1];\n \
    \       String year = parts[2];\n        if (month.length() != 2 || day.length()\
    \ != 2 || year.length() != 4) return false;\n        int mo = Integer.parseInt(month);\n\
    \        int dy = Integer.parseInt(day);\n        int yr = Integer.parseInt(year);\n\
    \        if (mo > 12 || mo < 1) return false;\n        if (mo == 2) {\n      \
    \      if (yr % 4 == 0) {\n                if (dy > 29 || dy < 1) return false;\n\
    \            } else {\n                if (dy > 28 || dy < 1) return false;\n\
    \            }\n        } else if (mo == 4 || mo == 6 || mo == 9 || mo == 11)\
    \ {\n            if (dy > 30 || dy < 1) return false;\n        } else {\n    \
    \        if (dy > 31 || dy < 1) return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        System.out.println(date);\n      \
    \  String[] dateParts = date.split(\"-\");\n        String day = dateParts[0];\n\
    \        String month = dateParts[1];\n        String year = dateParts[2];\n \
    \       if(Integer.parseInt(month) > 12 || Integer.parseInt(month) < 1) return\
    \ false;\n        if(Integer.parseInt(day) > 31 || Integer.parseInt(day) < 1)\
    \ return false;\n        if(Integer.parseInt(month) == 2) {\n            return\
    \ !(Integer.parseInt(day) > 29 || Integer.parseInt(day) < 1);\n        }\n   \
    \     if(Integer.parseInt(month) == 4 || Integer.parseInt(month) == 6 || Integer.parseInt(month)\
    \ == 9 || Integer.parseInt(month) == 11) {\n            return !(Integer.parseInt(day)\
    \ > 30 || Integer.parseInt(day) < 1);\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjep4c6w7.java:44)\n"
  stdout: '03-11-2000

    15-01-2012

    '
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            sdf.setLenient(false);\n\
    \            Date d = sdf.parse(date);\n            return true;\n        } catch\
    \ (ParseException ex) {\n            return false;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbaa3lru9.java:28: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpbaa3lru9.java:28: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpbaa3lru9.java:32: error: cannot find symbol\n\
    \        } catch (ParseException ex) {\n                 ^\n  symbol:   class\
    \ ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] parts = date.split(\"-\"\
    );\n        if (parts.length != 3) {\n            return false;\n        }\n \
    \       try {\n            int month = Integer.parseInt(parts[0]);\n         \
    \   int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n\
    \            if (year < 0) {\n                return false;\n            }\n \
    \           if (month < 1 || month > 12) {\n                return false;\n  \
    \          }\n            if (month == 2) {\n                if (day < 1 || day\
    \ > 29) {\n                    return false;\n                }\n            }\
    \ else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        \
    \        if (day < 1 || day > 30) {\n                    return false;\n     \
    \           }\n            } else {\n                if (day < 1 || day > 31)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return true;\n        } catch (NumberFormatException e) {\n        \
    \    return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // type your solution here\n     \
    \   try {\n            if (date.length()==0) return false;\n            int month\
    \ = Integer.parseInt(date.substring(0,2));\n            int day = Integer.parseInt(date.substring(3,5));\n\
    \            int year = Integer.parseInt(date.substring(6,10));\n            if\
    \ (month<1 || month>12) return false;\n            if (month==2) {\n         \
    \       if (day<1 || day>29) return false;\n            } else if (month==4 ||\
    \ month==6 || month==9 || month==11) {\n                if (day<1 || day>30) return\
    \ false;\n            } else {\n                if (day<1 || day>31) return false;\n\
    \            }\n            return true;\n        } catch (Exception e) {\n  \
    \          return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            Calendar c = Calendar.getInstance();\n\
    \            c.setLenient(false);\n            SimpleDateFormat df = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            df.setLenient(false);\n            c.setTime(df.parse(date));\n\
    \            c.getTime();\n            return true;\n        } catch (ParseException\
    \ e) {\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyanyext.java:30: error: cannot find symbol\n            SimpleDateFormat\
    \ df = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpuyanyext.java:30: error:\
    \ cannot find symbol\n            SimpleDateFormat df = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpuyanyext.java:35: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n      throw new UnsupportedOperationException(\"\
    Not implemented yet\");\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented yet\n\tat Problem.validDate(tmp5w52hn8p.java:27)\n\tat Problem.main(tmp5w52hn8p.java:30)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) return false;\n\
    \        if (date.length() != 10) return false;\n        if (date.charAt(2) !=\
    \ '-' || date.charAt(5) != '-') return false;\n        for (int i = 0; i < date.length();\
    \ i++) {\n            if (i == 2 || i == 5) continue;\n            if (date.charAt(i)\
    \ < '0' || date.charAt(i) > '9') return false;\n        }\n        int month =\
    \ Integer.parseInt(date.substring(0, 2));\n        int day = Integer.parseInt(date.substring(3,\
    \ 5));\n        int year = Integer.parseInt(date.substring(6, 10));\n        if\
    \ (month < 1 || month > 12) return false;\n        if (month == 2) {\n       \
    \     if (year % 4 == 0) {\n                if (day < 1 || day > 29) return false;\n\
    \            } else {\n                if (day < 1 || day > 28) return false;\n\
    \            }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) return false;\n        } else {\n            if (day < 1 || day\
    \ > 30) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            int month = Integer.parseInt(date.substring(0,2));\n\
    \            int day = Integer.parseInt(date.substring(3,5));\n            int\
    \ year = Integer.parseInt(date.substring(6,10));\n            if (month < 1 ||\
    \ month > 12) {\n                return false;\n            }\n            if\
    \ (day < 1 || day > 31) {\n                return false;\n            }\n    \
    \        if (month == 2) {\n                if (day > 29) {\n                \
    \    return false;\n                }\n            }\n            if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n                if (day > 30)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return true;\n        } catch (Exception e) {\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean result = false;\n        if\
    \ (date != null && date.length() > 0) {\n            int[] n = Arrays.stream(date.split(\"\
    -\")).mapToInt(Integer::parseInt).toArray();\n            if (n.length == 3) {\n\
    \                int day = n[1];\n                int month = n[0];\n        \
    \        int year = n[2];\n                if (month > 0 && month < 13) {\n  \
    \                  if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n                        if (day\
    \ > 0 && day < 32) {\n                            result = true;\n           \
    \             }\n                    } else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n                        if (day > 0 && day < 31) {\n\
    \                            result = true;\n                        }\n     \
    \               } else if (month == 2) {\n                        if (day > 0\
    \ && day < 30) {\n                            result = true;\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isLeapYear = false;\n    \
    \    int year = Integer.parseInt(date.substring(date.length() - 4));\n       \
    \ int month = Integer.parseInt(date.substring(0, 2));\n        int day = Integer.parseInt(date.substring(3,\
    \ 5));\n        int maxDays = 30;\n        boolean valid = true;\n        if (date.length()\
    \ != 10) {\n            return false;\n        }\n        if (date.charAt(2) !=\
    \ '-' || date.charAt(5) != '-') {\n            return false;\n        }\n    \
    \    if (month < 1 || month > 12) {\n            return false;\n        }\n  \
    \      if (year % 4 == 0) {\n            isLeapYear = true;\n        }\n     \
    \   if (month == 2) {\n            maxDays = 28;\n            if (isLeapYear)\
    \ {\n                maxDays++;\n            }\n        } else if (month == 1\
    \ || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            maxDays = 31;\n        }\n        if (day < 1 || day >\
    \ maxDays) {\n            return false;\n        }\n        return valid;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmps56n7lrf.java:30)\n\tat Problem.main(tmps56n7lrf.java:61)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // TODO: implement me\n        String\
    \ format = \"MM-dd-yyyy\";\n        String[] splitDate = date.split(\"-\");\n\
    \        int month = Integer.parseInt(splitDate[0]);\n        int day = Integer.parseInt(splitDate[1]);\n\
    \        int year = Integer.parseInt(splitDate[2]);\n        boolean isLeapYear\
    \ = isLeapYear(year);\n        return (date.length() > 0 && ((month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ && day >= 1 && day <= 31) || ((month == 4 || month == 6 || month == 9 || month\
    \ == 11) && day >= 1 && day <= 30) || (month == 2 && day >= 1 && (isLeapYear &&\
    \ day <= 29 || day <= 28)) && month >= 1 && month <= 12 && date.matches(\"\\\\\
    d{2}-\\\\d{2}-\\\\d{4}\"));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpklytyvu2.java:33: error: cannot find symbol\n        boolean isLeapYear\
    \ = isLeapYear(year);\n                             ^\n  symbol:   method isLeapYear(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) {\n       \
    \     return false;\n        } else {\n            String[] dateArray = date.split(\"\
    -\");\n            if (dateArray.length != 3) {\n                return false;\n\
    \            } else {\n                if (isNumeric(dateArray[0]) && isNumeric(dateArray[1])\
    \ && isNumeric(dateArray[2])) {\n                    int month = Integer.parseInt(dateArray[0]);\n\
    \                    int day = Integer.parseInt(dateArray[1]);\n             \
    \       if (month < 1 || month > 12) {\n                        return false;\n\
    \                    } else {\n                        if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n                            if (day < 1 || day > 31) {\n                \
    \                return false;\n                            } else {\n       \
    \                         return true;\n                            }\n      \
    \                  } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n                            if (day < 1 || day > 30) {\n         \
    \                       return false;\n                            } else {\n\
    \                                return true;\n                            }\n\
    \                        } else {\n                            if (day < 1 ||\
    \ day > 29) {\n                                return false;\n               \
    \             } else {\n                                return true;\n       \
    \                     }\n                        }\n                    }\n  \
    \              } else {\n                    return false;\n                }\n\
    \            }\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxl95zkv0.java:34: error: cannot find symbol\n                if\
    \ (isNumeric(dateArray[0]) && isNumeric(dateArray[1]) && isNumeric(dateArray[2]))\
    \ {\n                    ^\n  symbol:   method isNumeric(String)\n  location:\
    \ class Problem\n/tmp/tmpxl95zkv0.java:34: error: cannot find symbol\n       \
    \         if (isNumeric(dateArray[0]) && isNumeric(dateArray[1]) && isNumeric(dateArray[2]))\
    \ {\n                                               ^\n  symbol:   method isNumeric(String)\n\
    \  location: class Problem\n/tmp/tmpxl95zkv0.java:34: error: cannot find symbol\n\
    \                if (isNumeric(dateArray[0]) && isNumeric(dateArray[1]) && isNumeric(dateArray[2]))\
    \ {\n                                                                        \
    \  ^\n  symbol:   method isNumeric(String)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] tokens = date.split(\"-\"\
    );\n        // check for delimiters\n        for (int i = 0; i < tokens.length;\
    \ i++) {\n            if (i > 0 && tokens[i].length() != 2) {\n              \
    \  return false;\n            }\n        }\n        // check for empty string\n\
    \        if (date.isEmpty()) {\n            return false;\n        }\n       \
    \ // check for months and days\n        int[] months = {1,3,5,7,8,10,12};\n  \
    \      if (Arrays.stream(months).anyMatch(x -> x == Integer.parseInt(tokens[0])))\
    \ {\n            if (Integer.parseInt(tokens[1]) < 1 || Integer.parseInt(tokens[1])\
    \ > 31) {\n                return false;\n            }\n        } else if (Integer.parseInt(tokens[0])\
    \ == 2) {\n            if (Integer.parseInt(tokens[1]) < 1 || Integer.parseInt(tokens[1])\
    \ > 29) {\n                return false;\n            }\n        } else {\n  \
    \          if (Integer.parseInt(tokens[1]) < 1 || Integer.parseInt(tokens[1])\
    \ > 30) {\n                return false;\n            }\n        }\n        //\
    \ check months\n        if (Integer.parseInt(tokens[0]) < 1 || Integer.parseInt(tokens[0])\
    \ > 12) {\n            return false;\n        }\n        // check for valid format\n\
    \        if (tokens.length != 3) {\n            return false;\n        }\n   \
    \     return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82zhmocd.java:64)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date.length() != 10) {\n      \
    \      return false;\n        }\n        String[] split_date = date.split(\"-\"\
    );\n        if(split_date.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(split_date[0]);\n        int day = Integer.parseInt(split_date[1]);\n\
    \        int year = Integer.parseInt(split_date[2]);\n        if(month > 12 ||\
    \ month < 1) {\n            return false;\n        }\n        if(day > 31 || day\
    \ < 1) {\n            return false;\n        }\n        if(year < 1000 || year\
    \ > 9999) {\n            return false;\n        }\n        if(month == 2) {\n\
    \            if(day > 29) {\n                return false;\n            }\n  \
    \      }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if(day > 30) {\n                return false;\n            }\n  \
    \      }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date.length() == 0) return false;\n\
    \        int[] months = {31,28,31,30,31,30,31,31,30,31,30,31};\n        String[]\
    \ date_arr = date.split(\"-\");\n        if(date_arr.length != 3) return false;\n\
    \        int mm = Integer.parseInt(date_arr[0]);\n        int dd = Integer.parseInt(date_arr[1]);\n\
    \        int yyyy = Integer.parseInt(date_arr[2]);\n        if(mm > 12 || mm <\
    \ 1) return false;\n        if(yyyy < 0) return false;\n        if(dd < 1 || dd\
    \ > months[mm-1]) return false;\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // This is the most straightforward\
    \ way to solve the problem\n        // But it is not the most efficient way\n\
    \        int day, month, year;\n        // This list represents all of the months\
    \ that have 31 days in them\n        List<Integer> has31 = Arrays.asList(1, 3,\
    \ 5, 7, 8, 10, 12);\n        // This list represents all of the months that have\
    \ 30 days in them\n        List<Integer> has30 = Arrays.asList(4, 6, 9, 11);\n\
    \        // If the date is not formatted mm-dd-yyyy return false\n        if (date.length()\
    \ != 10) {\n            return false;\n        }\n        // If the date contains\
    \ any other characters than numbers and - return false\n        for (int i = 0;\
    \ i < date.length(); i++) {\n            if (!Character.isDigit(date.charAt(i))\
    \ && date.charAt(i) != '-') {\n                return false;\n            }\n\
    \        }\n        // To access month, day, and year we have to split the string\n\
    \        String[] elements = date.split(\"-\");\n        // If there are not 3\
    \ elements in the array return false\n        if (elements.length != 3) {\n  \
    \          return false;\n        }\n        // If any of the elements contain\
    \ more than 2 characters return false\n        for (int i = 0; i < elements.length;\
    \ i++) {\n            if (elements[i].length() != 2) {\n                return\
    \ false;\n            }\n        }\n        month = Integer.parseInt(elements[0]);\n\
    \        day = Integer.parseInt(elements[1]);\n        year = Integer.parseInt(elements[2]);\n\
    \        // If the month is not in the range 1-12 return false\n        if (month\
    \ < 1 || month > 12) {\n            return false;\n        }\n        // If the\
    \ year is not in the range 1000-9999 return false\n        if (year < 1000 ||\
    \ year > 9999) {\n            return false;\n        }\n        // For the months\
    \ with 31 days\n        // If the day is not in the range 1-31 return false\n\
    \        if (has31.contains(month)) {\n            if (day <\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4cmzl_os.java:71: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4cmzl_os.java:72: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.matches(\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptdhiogr6.java:37)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArr = date.split(\"-\");\n        try {\n            if (dateArr.length\
    \ != 3) {\n                return false;\n            }\n            int month\
    \ = Integer.parseInt(dateArr[0]);\n            int day = Integer.parseInt(dateArr[1]);\n\
    \            int year = Integer.parseInt(dateArr[2]);\n            if (month >\
    \ 12 || month < 1) {\n                return false;\n            }\n         \
    \   if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12) {\n                if (day > 31 || day < 1) {\n\
    \                    return false;\n                }\n            } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n                if (day\
    \ > 30 || day < 1) {\n                    return false;\n                }\n \
    \           } else if (month == 2) {\n                if (day > 29 || day < 1)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         if (year < 0) {\n                return false;\n            }\n    \
    \        return true;\n        } catch (Exception e) {\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxdvv06kp.java:31)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2wfrwka6.java:32)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Java's built-in date class is harder\
    \ to use than Date.js, so\n        // let's just do it by hand.\n        // The\
    \ logic is:\n        //    1. if the string is empty, return false\n        //\
    \    2. split the string\n        //    3. parseInt the 0th, 1st, and 2nd elements\n\
    \        //    4. check that no element is NaN\n        //    5. check that 2nd\
    \ element is between 1 and 31 inclusive\n        //    6. check that 3rd element\
    \ is between 1 and 12 inclusive\n        //    7. if 4th element is divisible\
    \ by 4, check that 2nd element is\n        //       between 1 and 29 inclusive\n\
    \        //    8. otherwise, check that 2nd element is between 1 and 28 inclusive\n\
    \        //    9. return true if all checks pass\n        //    10. return false\
    \ if any checks fail\n        //\n        //   I think we're doing this because\
    \ there are only 31 days in any month\n        //   and 30 days in some months\
    \ and only 29 days in February in a leap year\n        //   and only 28 days in\
    \ February in a non-leap year.\n        //   So we start with the month. If the\
    \ month is not 1 through 12, return false.\n        //   If it is, then we need\
    \ to check if the day is valid for that month.\n        //   If it is not, return\
    \ false.\n        //   If it is, then we need to check if the year is a leap year.\n\
    \        //   We do this by checking if the year is divisible by 4.\n        //\
    \   If it is not divisible by 4, then return true.\n        //   If it is divisible\
    \ by 4, then check if the day is valid for a leap year\n        //   If it is\
    \ not valid for a leap year, return false.\n        //   If it is valid for a\
    \ leap year, return true.\n        if (date.length() == 0) {\n            return\
    \ false;\n        }\n        String[] dateParts = date.split(\"-\");\n       \
    \ if (dateParts.length != 3) {\n            return false;\n        }\n       \
    \ int[] intParts = new int[3];\n        for (int i = 0; i < 3; i++) {\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhv9n4rg.java:65: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.matches(\"^[0-9]{2}\\\\-[0-9]{2}\\\
    \\-[0-9]{4}$\")) {\n            String[] arrayOfString = date.split(\"-\");\n\
    \            String str1 = arrayOfString[0];\n            String str2 = arrayOfString[1];\n\
    \            String str3 = arrayOfString[2];\n            if ((Integer.parseInt(str1)\
    \ < 1) || (Integer.parseInt(str1) > 12))\n                return false;\n    \
    \        if ((Integer.parseInt(str1) == 1) || (Integer.parseInt(str1) == 3) ||\
    \ (Integer.parseInt(str1) == 5) || (Integer.parseInt(str1) == 7) || (Integer.parseInt(str1)\
    \ == 8) || (Integer.parseInt(str1) == 10) || (Integer.parseInt(str1) == 12)) {\n\
    \                if ((Integer.parseInt(str2) < 1) || (Integer.parseInt(str2) >\
    \ 31))\n                    return false;\n            } else if ((Integer.parseInt(str1)\
    \ == 4) || (Integer.parseInt(str1) == 6) || (Integer.parseInt(str1) == 9) || (Integer.parseInt(str1)\
    \ == 11)) {\n                if ((Integer.parseInt(str2) < 1) || (Integer.parseInt(str2)\
    \ > 30))\n                    return false;\n            } else if ((Integer.parseInt(str1)\
    \ == 2)) {\n                if ((Integer.parseInt(str2) < 1) || (Integer.parseInt(str2)\
    \ > 29))\n                    return false;\n            }\n            if ((Integer.parseInt(str3)\
    \ < 1800) || (Integer.parseInt(str3) > 2200))\n                return false;\n\
    \            return true;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ int day = 0;\n        int month = 0;\n        int year = 0;\n        String\
    \ dateArr[] = date.split(\"-\");\n        if (dateArr.length == 3) {\n       \
    \     try {\n                day = Integer.parseInt(dateArr[0]);\n           \
    \     month = Integer.parseInt(dateArr[1]);\n                year = Integer.parseInt(dateArr[2]);\n\
    \                if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year\
    \ >= 1) {\n                    if (day >= 1 && day <= 30 && (month == 4 || month\
    \ == 6 || month == 9 || month == 11)) {\n                        isValid = true;\n\
    \                    } else if (day >= 1 && day <= 31 && (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12))\
    \ {\n                        isValid = true;\n                    } else if (day\
    \ >= 1 && day <= 29 && month == 2) {\n                        isValid = true;\n\
    \                    }\n                }\n            } catch (Exception e) {\n\
    \                System.out.println(e);\n            }\n        }\n        return\
    \ isValid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmped27ivm3.java:54)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        System.out.println(date);\n      \
    \  String[] res = date.split(\"-\");\n        if (res.length != 3) {\n       \
    \     return false;\n        }\n        int d = Integer.parseInt(res[0]);\n  \
    \      int m = Integer.parseInt(res[1]);\n        int y = Integer.parseInt(res[2]);\n\
    \        int[] thirties = {4, 6, 9, 11};\n        int[] thirtyOnes = {1, 3, 5,\
    \ 7, 8, 10, 12};\n        if (d <= 0 || d > 31) {\n            return false;\n\
    \        }\n        if (m <= 0 || m > 12) {\n            return false;\n     \
    \   }\n        if (Arrays.stream(thirties).anyMatch(x -> x == m)) {\n        \
    \    if (d > 30) {\n                return false;\n            }\n        }\n\
    \        if (Arrays.stream(thirtyOnes).anyMatch(x -> x == m)) {\n            if\
    \ (d > 31) {\n                return false;\n            }\n        }\n      \
    \  if (m == 2) {\n            if (d > 29) {\n                return false;\n \
    \           }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyzll072a.java:62)\n"
  stdout: '03-11-2000

    15-01-2012

    '
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Pattern pattern = Pattern.compile(\"\
    ^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\
    \\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\
    \\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\\
    d)?\\\\d{2})$\");\n        Matcher matcher = pattern.matcher(date);\n        return\
    \ matcher.matches();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_e6w46f3.java:27: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\
    \\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\
    \\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\\
    d)?\\\\d{2})$\");\n        ^\n  symbol:   class Pattern\n  location: class Problem\n\
    /tmp/tmp_e6w46f3.java:27: error: cannot find symbol\n        Pattern pattern =\
    \ Pattern.compile(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\
    \\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\
    \\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\\
    d)?\\\\d{2})$\");\n                          ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmp_e6w46f3.java:28: error: cannot find symbol\n\
    \        Matcher matcher = pattern.matcher(date);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) return false;\n\
    \        String[] split = date.split(\"-\");\n        if (split.length != 3) return\
    \ false;\n        int day = Integer.parseInt(split[1]);\n        int month = Integer.parseInt(split[0]);\n\
    \        int year = Integer.parseInt(split[2]);\n        if (month == 2) {\n \
    \           if (day < 1 || day > 29) return false;\n        } else if (month %\
    \ 2 == 0) {\n            if (day < 1 || day > 30) return false;\n        } else\
    \ {\n            if (day < 1 || day > 31) return false;\n        }\n        if\
    \ (month < 1 || month > 12) return false;\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.matches(\"(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-[0-9]{4}\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2v6mamwp.java:37)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(!date.matches(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    \\d{4}$\")) return false;\n        String[] dt = date.split(\"-\");\n        if(dt[0].equals(\"\
    02\") && Integer.parseInt(dt[1]) > 29) return false;\n        if(dt[0].equals(\"\
    04\") && Integer.parseInt(dt[1]) > 30) return false;\n        if(dt[0].equals(\"\
    06\") && Integer.parseInt(dt[1]) > 30) return false;\n        if(dt[0].equals(\"\
    09\") && Integer.parseInt(dt[1]) > 30) return false;\n        if(dt[0].equals(\"\
    11\") && Integer.parseInt(dt[1]) > 30) return false;\n        return true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            DateFormat df =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\");\n            df.setLenient(false);\n \
    \           Date d = df.parse(date);\n            return true;\n        } catch\
    \ (ParseException e) {\n            return false;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34o0ef3i.java:28: error: cannot find symbol\n            DateFormat\
    \ df = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ DateFormat\n  location: class Problem\n/tmp/tmp34o0ef3i.java:28: error: cannot\
    \ find symbol\n            DateFormat df = new SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n                                ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmp34o0ef3i.java:32: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int[] days = {31, 29, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        String[] dates = date.split(\"-\");\n\
    \        int month = Integer.parseInt(dates[0]);\n        int day = Integer.parseInt(dates[1]);\n\
    \        int year = Integer.parseInt(dates[2]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ days[month - 1]) {\n            return false;\n        }\n        if (date.charAt(2)\
    \ != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpvzaggj09.java:29)\n\tat Problem.main(tmpvzaggj09.java:50)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Pattern pattern = Pattern.compile(\"\
    ^\\\\d{2}-\\\\d{2}-\\\\d{4}$\");\n        Matcher matcher = pattern.matcher(date);\n\
    \        if (!matcher.matches()) return false;\n        String[] parts = date.split(\"\
    -\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (year < 0) return\
    \ false;\n        if (month < 1 || month > 12) return false;\n        if (day\
    \ < 1) return false;\n        switch (month) {\n            case 1: case 3: case\
    \ 5: case 7: case 8: case 10: case 12:\n                if (day > 31) return false;\n\
    \                break;\n            case 4: case 6: case 9: case 11:\n      \
    \          if (day > 30) return false;\n                break;\n            case\
    \ 2:\n                if (day > 29) return false;\n                break;\n  \
    \      }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_1jp8m4.java:27: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\");\n        ^\n  symbol: \
    \  class Pattern\n  location: class Problem\n/tmp/tmpo_1jp8m4.java:27: error:\
    \ cannot find symbol\n        Pattern pattern = Pattern.compile(\"^\\\\d{2}-\\\
    \\d{2}-\\\\d{4}$\");\n                          ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmpo_1jp8m4.java:28: error: cannot find symbol\n\
    \        Matcher matcher = pattern.matcher(date);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) return false;\n\
    \        if (date.indexOf(\"-\") == -1) return false;\n        if (date.split(\"\
    -\").length != 3) return false;\n        int[] md = Arrays.stream(date.split(\"\
    -\")).mapToInt(Integer::parseInt).toArray();\n        if (md[0] < 1 || md[0] >\
    \ 12) return false;\n        if (md[1] < 1 || md[1] > 31) return false;\n    \
    \    if (md[0] == 2 && md[1] > 29) return false;\n        if (md[0] == 4 || md[0]\
    \ == 6 || md[0] == 9 || md[0] == 11)\n            if (md[1] > 30) return false;\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            sdf.setLenient(false);\n\
    \            Date d = sdf.parse(date);\n            return true;\n        } catch\
    \ (ParseException e) {\n            return false;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr81c688u.java:28: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpr81c688u.java:28: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpr81c688u.java:32: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        String[]\
    \ parts = date.split(\"-\");\n        if (parts.length != 3) {\n            valid\
    \ = false;\n        } else {\n            int month = Integer.parseInt(parts[0]);\n\
    \            int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n\
    \            if (year < 0) {\n                valid = false;\n            } else\
    \ if (month < 1 || month > 12) {\n                valid = false;\n           \
    \ } else if (month == 2) {\n                valid = day >= 1 && day <= 29;\n \
    \           } else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n                valid = day >= 1 && day <= 30;\n            } else {\n  \
    \              valid = day >= 1 && day <= 31;\n            }\n        }\n    \
    \    return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() < 10) {\n      \
    \      return false;\n        }\n        Pattern pattern = Pattern.compile(\"\
    ^(1[0-2]|0[1-9])-(3[01]|[12][0-9]|0[1-9])-([0-9]{4})$\");\n        Matcher matcher\
    \ = pattern.matcher(date);\n        if (matcher.find()) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhh8x0w9.java:30: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"^(1[0-2]|0[1-9])-(3[01]|[12][0-9]|0[1-9])-([0-9]{4})$\"\
    );\n        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpxhh8x0w9.java:30:\
    \ error: cannot find symbol\n        Pattern pattern = Pattern.compile(\"^(1[0-2]|0[1-9])-(3[01]|[12][0-9]|0[1-9])-([0-9]{4})$\"\
    );\n                          ^\n  symbol:   variable Pattern\n  location: class\
    \ Problem\n/tmp/tmpxhh8x0w9.java:31: error: cannot find symbol\n        Matcher\
    \ matcher = pattern.matcher(date);\n        ^\n  symbol:   class Matcher\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateSplitted = date.split(\"\
    -\");\n        if (dateSplitted.length == 3) {\n            int year = Integer.parseInt(dateSplitted[2]);\n\
    \            int month = Integer.parseInt(dateSplitted[0]);\n            int day\
    \ = Integer.parseInt(dateSplitted[1]);\n            if (year > 0 && month > 0\
    \ && month < 13 && day > 0 && day < 32) {\n                if (month == 2) {\n\
    \                    return day < 30;\n                } else if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n                    return day < 32;\n                } else {\n \
    \                   return day < 31;\n                }\n            }\n     \
    \   }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) return false;\n\
    \        String[] dateArr = date.split(\"-\");\n        if (dateArr.length !=\
    \ 3) return false;\n        if (dateArr[0].equals(\"\") || dateArr[1].equals(\"\
    \") || dateArr[2].equals(\"\")) return false;\n        try {\n            int\
    \ month = Integer.parseInt(dateArr[0]);\n            int day = Integer.parseInt(dateArr[1]);\n\
    \            int year = Integer.parseInt(dateArr[2]);\n            if (month >\
    \ 12 || month < 1) return false;\n            if (day > 31 || day < 1) return\
    \ false;\n            if (month == 2 && day > 29) return false;\n            if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n                if\
    \ (day > 30) return false;\n            }\n            if (year < 1900 || year\
    \ > 2100) return false;\n        } catch (Exception e) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //System.out.println(date);\n    \
    \    String regex = \"^(((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]))|((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])-[0-9]{4}))$\"\
    ;\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher\
    \ = pattern.matcher(date);\n        return matcher.matches();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2eoq0ik.java:29: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(regex);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpm2eoq0ik.java:29: error: cannot find symbol\n       \
    \ Pattern pattern = Pattern.compile(regex);\n                          ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmpm2eoq0ik.java:30: error:\
    \ cannot find symbol\n        Matcher matcher = pattern.matcher(date);\n     \
    \   ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            String[] dateParts\
    \ = date.split(\"-\");\n            if (dateParts.length != 3) {\n           \
    \     return false;\n            }\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            if (year < 1) {\n             \
    \   return false;\n            }\n            if (month < 1 || month > 12) {\n\
    \                return false;\n            }\n            int[] monthDays = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            if (year % 4 == 0)\
    \ {\n                monthDays[1] = 29;\n            }\n            if (day <\
    \ 1 || day > monthDays[month - 1]) {\n                return false;\n        \
    \    }\n            return true;\n        } catch (Exception e) {\n          \
    \  return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() != 10) {\n     \
    \       return false;\n        }\n        String[] parts = date.split(\"-\");\n\
    \        if (parts.length != 3) {\n            return false;\n        }\n    \
    \    if (parts[0].length() != 2 || parts[1].length() != 2 || parts[2].length()\
    \ != 4) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        if (year < 0) {\n            return false;\n        }\n        if (month\
    \ < 1 || month > 12) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n\
    \            }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 30) {\n                return false;\n \
    \           }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date.isEmpty()) {\n           \
    \ return false;\n        }\n        if(date.length() != 10) {\n            return\
    \ false;\n        }\n        if(date.charAt(2) != '-' || date.charAt(5) != '-')\
    \ {\n            return false;\n        }\n        String date_pattern = \"^\\\
    \\d{2}-\\\\d{2}-\\\\d{4}$\";\n        if(!date.matches(date_pattern)) {\n    \
    \        return false;\n        }\n        String[] date_components = date.split(\"\
    -\");\n        String month = date_components[0];\n        String day = date_components[1];\n\
    \        String year = date_components[2];\n        if(Integer.parseInt(month)\
    \ < 1 || Integer.parseInt(month) > 12) {\n            return false;\n        }\n\
    \        if(Integer.parseInt(month) == 2) {\n            if(Integer.parseInt(day)\
    \ < 1 || Integer.parseInt(day) > 29) {\n                return false;\n      \
    \      }\n        }\n        if(Integer.parseInt(month) == 1 || Integer.parseInt(month)\
    \ == 3 || Integer.parseInt(month) == 5 || Integer.parseInt(month) == 7 || Integer.parseInt(month)\
    \ == 8 || Integer.parseInt(month) == 10 || Integer.parseInt(month) == 12) {\n\
    \            if(Integer.parseInt(day) < 1 || Integer.parseInt(day) > 31) {\n \
    \               return false;\n            }\n        }\n        if(Integer.parseInt(month)\
    \ == 4 || Integer.parseInt(month) == 6 || Integer.parseInt(month) == 9 || Integer.parseInt(month)\
    \ == 11) {\n            if(Integer.parseInt(day) < 1 || Integer.parseInt(day)\
    \ > 30) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date == null || date.isEmpty())\
    \ return false;\n        Pattern p = Pattern.compile(\"(\\\\d{2})-(\\\\d{2})-(\\\
    \\d{4})\");\n        Matcher m = p.matcher(date);\n        if(!m.matches()) return\
    \ false;\n        int mm = Integer.parseInt(m.group(1));\n        int dd = Integer.parseInt(m.group(2));\n\
    \        if(mm < 1 || mm > 12) return false;\n        if(mm == 2) {\n        \
    \    if(dd < 1 || dd > 29) return false;\n        } else if(mm == 1 || mm == 3\
    \ || mm == 5 || mm == 7 || mm == 8 || mm == 10 || mm == 12) {\n            if(dd\
    \ < 1 || dd > 31) return false;\n        } else {\n            if(dd < 1 || dd\
    \ > 30) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpct3dzx6g.java:28: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\");\n        ^\n  symbol:\
    \   class Pattern\n  location: class Problem\n/tmp/tmpct3dzx6g.java:28: error:\
    \ cannot find symbol\n        Pattern p = Pattern.compile(\"(\\\\d{2})-(\\\\d{2})-(\\\
    \\d{4})\");\n                    ^\n  symbol:   variable Pattern\n  location:\
    \ class Problem\n/tmp/tmpct3dzx6g.java:29: error: cannot find symbol\n       \
    \ Matcher m = p.matcher(date);\n        ^\n  symbol:   class Matcher\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            Date d = new SimpleDateFormat(\"\
    MM-dd-yyyy\").parse(date);\n            return true;\n        } catch (ParseException\
    \ e) {\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoyo7xqwg.java:28: error: cannot find symbol\n            Date d\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\").parse(date);\n                      \
    \   ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpoyo7xqwg.java:30:\
    \ error: cannot find symbol\n        } catch (ParseException e) {\n          \
    \       ^\n  symbol:   class ParseException\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String regex = \"[0-9]{2}-[0-9]{2}-[0-9]{4}\"\
    ;\n        if (date.matches(regex)) {\n            String[] numbers = date.split(\"\
    -\");\n            int month = Integer.parseInt(numbers[0]);\n            int\
    \ day = Integer.parseInt(numbers[1]);\n            int year = Integer.parseInt(numbers[2]);\n\
    \            if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n                if (day > 31 || day <\
    \ 1) {\n                    return false;\n                }\n            } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n             \
    \   if (day > 30 || day < 1) {\n                    return false;\n          \
    \      }\n            } else if (month == 2) {\n                if (day > 29 ||\
    \ day < 1) {\n                    return false;\n                }\n         \
    \   } else {\n                return false;\n            }\n            if (month\
    \ > 12 || month < 1) {\n                return false;\n            }\n       \
    \     return true;\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here!\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvldfgvx9.java:31)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ if(date.length() != 10) {\n            return isValid;\n        }\n        String[]\
    \ values = date.split(\"-\");\n        if(values.length != 3) {\n            return\
    \ isValid;\n        }\n        int month = Integer.parseInt(values[0]);\n    \
    \    int day = Integer.parseInt(values[1]);\n        int year = Integer.parseInt(values[2]);\n\
    \        if(month < 1 || month > 12) {\n            return isValid;\n        }\n\
    \        if(month == 2) {\n            if(day < 1 || day > 29) {\n           \
    \     return isValid;\n            }\n        } else if(month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if(day < 1 || day > 31) {\n                return isValid;\n    \
    \        }\n        } else {\n            if(day < 1 || day > 30) {\n        \
    \        return isValid;\n            }\n        }\n        isValid = true;\n\
    \        return isValid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ correct = true;\n        try {\n            //first we check if the date is\
    \ empty\n            if (date.length() == 0) {\n                correct = false;\n\
    \            }\n            //then we get each part of the date\n            String\
    \ day = date.substring(0, 2);\n            String month = date.substring(3, 5);\n\
    \            String year = date.substring(6, 10);\n            int d = Integer.parseInt(day);\n\
    \            int m = Integer.parseInt(month);\n            int y = Integer.parseInt(year);\n\
    \            //checking the format of the date\n            if (!(date.charAt(2)\
    \ == '-' && date.charAt(5) == '-')) {\n                correct = false;\n    \
    \        }\n            //checking if the year is positive\n            if (y\
    \ < 0) {\n                correct = false;\n            }\n            //checking\
    \ if the month is a valid month\n            if (m < 1 || m > 12) {\n        \
    \        correct = false;\n            }\n            //checking the days based\
    \ on the month\n            if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8\
    \ || m == 10 || m == 12) {\n                if (d < 1 || d > 31) {\n         \
    \           correct = false;\n                }\n            } else if (m == 4\
    \ || m == 6 || m == 9 || m == 11) {\n                if (d < 1 || d > 30) {\n\
    \                    correct = false;\n                }\n            } else if\
    \ (m == 2) {\n                if (d < 1 || d > 29) {\n                    correct\
    \ = false;\n                }\n            }\n        } catch (Exception e) {\n\
    \            correct = false;\n        }\n        return correct;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdsby_c93.java:74)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean flag = true;\n        if (date\
    \ == null || date.length() == 0)\n            return false;\n        String str[]\
    \ = date.split(\"-\");\n        if (str.length != 3)\n            return false;\n\
    \        int d = Integer.parseInt(str[0]);\n        int m = Integer.parseInt(str[1]);\n\
    \        int y = Integer.parseInt(str[2]);\n        if (m > 12 || m < 1)\n   \
    \         return false;\n        if (m == 2) {\n            if (y % 4 == 0) {\n\
    \                if (d > 29 || d < 1)\n                    return false;\n   \
    \         } else {\n                if (d > 28 || d < 1)\n                   \
    \ return false;\n            }\n        } else if (m == 1 || m == 3 || m == 5\
    \ || m == 7 || m == 8 || m == 10 || m == 12) {\n            if (d > 31 || d <\
    \ 1)\n                return false;\n        } else {\n            if (d > 30\
    \ || d < 1)\n                return false;\n        }\n        return flag;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2owlm09z.java:57)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArray = date.split(\"\
    -\");\n        if (dateArray.length != 3) {\n            return false;\n     \
    \   }\n        if (!dateArray[0].matches(\"(0[1-9]|1[0-2])\")) {\n           \
    \ return false;\n        }\n        if (!dateArray[1].matches(\"(0[1-9]|[12][0-9]|3[01])\"\
    )) {\n            return false;\n        }\n        if (!dateArray[2].matches(\"\
    (19|20)\\\\d\\\\d\")) {\n            return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] sp = date.split(\"-\");\n\
    \        if (sp.length != 3) return false;\n        int[] arr = new int[3];\n\
    \        for (int i = 0; i < 3; i++) {\n            arr[i] = Integer.parseInt(sp[i]);\n\
    \        }\n        int y = arr[2];\n        int m = arr[0];\n        int d =\
    \ arr[1];\n        if (m < 1 || m > 12) return false;\n        if (m == 2) {\n\
    \            if (d < 1 || d > 29) return false;\n        } else if (m == 1 ||\
    \ m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if\
    \ (d < 1 || d > 31) return false;\n        } else {\n            if (d < 1 ||\
    \ d > 30) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            return date.matches(\"\
    (0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-[0-9]{4}\");\n        } catch (Exception e)\
    \ {\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7r8oos1i.java:41)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // your code here\n        // assuming\
    \ that the year is between 1000 to 2999\n        // assuming that the date should\
    \ be in the format mm-dd-yyyy\n        if(date.length() != 10) {\n           \
    \ return false;\n        }\n        char[] c = date.toCharArray();\n        if(c[2]\
    \ != '-' || c[5] != '-') {\n            return false;\n        }\n        int\
    \ month = (c[0] - '0') * 10 + (c[1] - '0');\n        int day = (c[3] - '0') *\
    \ 10 + (c[4] - '0');\n        int year = (c[6] - '0') * 1000 + (c[7] - '0') *\
    \ 100 + (c[8] - '0') * 10 + (c[9] - '0');\n        if(month < 1 || month > 12)\
    \ {\n            return false;\n        }\n        if(month == 2) {\n        \
    \    if(day < 1 || day > 29) {\n                return false;\n            }\n\
    \        }\n        else if(month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if(day < 1 || day > 30) {\n                return false;\n\
    \            }\n        }\n        else {\n            if(day < 1 || day > 31)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        else {\n            if (date.length()\
    \ != 10) {\n                return false;\n            }\n            else {\n\
    \                if (Integer.parseInt(date.substring(3,5)) < 1 || Integer.parseInt(date.substring(3,5))\
    \ > 12) {\n                    return false;\n                }\n            \
    \    else {\n                    if (Integer.parseInt(date.substring(0,2)) < 1\
    \ || Integer.parseInt(date.substring(0,2)) > 31) {\n                        return\
    \ false;\n                    }\n                    else {\n                \
    \        if (Integer.parseInt(date.substring(6,10)) < 1) {\n                 \
    \           return false;\n                        }\n                       \
    \ else {\n                            if (date.charAt(2) != '-' || date.charAt(5)\
    \ != '-') {\n                                return false;\n                 \
    \           }\n                            else {\n                          \
    \      if (Integer.parseInt(date.substring(3,5)) == 1 || Integer.parseInt(date.substring(3,5))\
    \ == 3 || Integer.parseInt(date.substring(3,5)) == 5 || Integer.parseInt(date.substring(3,5))\
    \ == 7 || Integer.parseInt(date.substring(3,5)) == 8 || Integer.parseInt(date.substring(3,5))\
    \ == 10 || Integer.parseInt(date.substring(3,5)) == 12) {\n                  \
    \                  if (Integer.parseInt(date.substring(0,2)) > 31) {\n       \
    \                                 return false;\n                            \
    \        }\n                                    else {\n                     \
    \                   return true;\n                                    }\n    \
    \                            }\n                                else {\n     \
    \                               if (Integer.parseInt(date.substring(3,5)) == 4\
    \ || Integer.parseInt(date.substring(3,5)) == 6 || Integer.parseInt(date.substring(3,5))\
    \ == 9 || Integer.parseInt(date.substring(3,5)) == 11) {\n                   \
    \                     if (Integer.parseInt(date.substring(0,2)) > 30) {\n    \
    \                                        return\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqlqfd6m.java:63: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyqlqfd6m.java:64: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // SOLUTION GOES HERE\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95l6dg9d.java:31)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            String[] dateParts\
    \ = date.split(\"-\");\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            if(day > 31 || day < 1 || year\
    \ < 0) return false;\n            if(month == 2) {\n                if(day > 29)\
    \ return false;\n            } else if(month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n                if(day > 30) return false;\n            }\n\
    \            return true;\n        } catch(Exception e) {\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63uh1da_.java:45)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fupat1x.java:27: error: incompatible types: <null> cannot be converted\
    \ to boolean\n        return null;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // use a regex pattern to parse the\
    \ date (should be mm-dd-yyyy)\n        Pattern datePattern = Pattern.compile(\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\");\n        Matcher dateMatcher = datePattern.matcher(date);\n\
    \        if (dateMatcher.find()) {\n            String day = dateMatcher.group(2);\n\
    \            String month = dateMatcher.group(1);\n            String year = dateMatcher.group(3);\n\
    \            if (Integer.parseInt(day) > 0 && Integer.parseInt(day) < 32 && Integer.parseInt(month)\
    \ > 0 && Integer.parseInt(month) < 13) {\n                if (Integer.parseInt(month)\
    \ == 2) {\n                    // leap year calculation\n                    if\
    \ (Integer.parseInt(year) % 4 == 0) {\n                        if (Integer.parseInt(day)\
    \ <= 29) {\n                            return true;\n                       \
    \ }\n                    } else {\n                        if (Integer.parseInt(day)\
    \ <= 28) {\n                            return true;\n                       \
    \ }\n                    }\n                } else if (Integer.parseInt(month)\
    \ % 2 == 0) {\n                    if (Integer.parseInt(month) <= 7) {\n     \
    \                   if (Integer.parseInt(day) <= 30) {\n                     \
    \       return true;\n                        }\n                    } else {\n\
    \                        if (Integer.parseInt(day) <= 31) {\n                \
    \            return true;\n                        }\n                    }\n\
    \                } else {\n                    if (Integer.parseInt(month) <=\
    \ 7) {\n                        if (Integer.parseInt(day) <= 31) {\n         \
    \                   return true;\n                        }\n                \
    \    } else {\n                        if (Integer.parseInt(day) <= 30) {\n  \
    \                          return true;\n                        }\n         \
    \           }\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxazyzpw.java:28: error: cannot find symbol\n        Pattern datePattern\
    \ = Pattern.compile(\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\");\n        ^\n  symbol:\
    \   class Pattern\n  location: class Problem\n/tmp/tmpkxazyzpw.java:28: error:\
    \ cannot find symbol\n        Pattern datePattern = Pattern.compile(\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    );\n                              ^\n  symbol:   variable Pattern\n  location:\
    \ class Problem\n/tmp/tmpkxazyzpw.java:29: error: cannot find symbol\n       \
    \ Matcher dateMatcher = datePattern.matcher(date);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArr = date.split(\"-\"\
    );\n        // dateArr[0] is month\n        // dateArr[1] is day\n        // dateArr[2]\
    \ is year\n        int month = Integer.parseInt(dateArr[0]);\n        int day\
    \ = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        int[] thirtyDays = {4,6,9,11};\n        int[] thirtyOneDays = {1,3,5,7,8,10,12};\n\
    \        if(!(dateArr.length == 3)) {\n            return false;\n        }\n\
    \        if(dateArr[0].length() != 2 || dateArr[1].length() != 2 || dateArr[2].length()\
    \ != 4) {\n            return false;\n        }\n        // Logic for 30 days\n\
    \        for(int i=0; i<thirtyDays.length; i++) {\n            if(month == thirtyDays[i])\
    \ {\n                if(day > 30 || day < 1) {\n                    return false;\n\
    \                }\n            }\n        }\n        // Logic for 31 days\n \
    \       for(int i=0; i<thirtyOneDays.length; i++) {\n            if(month == thirtyOneDays[i])\
    \ {\n                if(day > 31 || day < 1) {\n                    return false;\n\
    \                }\n            }\n        }\n        // Logic for Feb\n     \
    \   if(month == 2) {\n            if(day > 29 || day < 1) {\n                return\
    \ false;\n            }\n        }\n        // Logic for month\n        if(month\
    \ > 12 || month < 1) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpc_dtrxx4.java:31)\n\tat Problem.main(tmpc_dtrxx4.java:77)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        String\
    \ [] dates = date.split(\"-\");\n        // if the date field is less than or\
    \ greater than 2 then it is not a\n        // valid date, for example mm-dd-yyyy.\n\
    \        if (dates.length != 3) valid = false;\n        try {\n            //\
    \ mm\n            int mm = Integer.parseInt(dates[0]);\n            // mm should\
    \ not be greater than 12\n            if (mm > 12) valid = false;\n          \
    \  // dd\n            int dd = Integer.parseInt(dates[1]);\n            // dd\
    \ should not be greater than 31 for months 1,3,5,7,8,10,12\n            if (mm\
    \ == 1 || mm == 3 || mm == 5 || mm == 7 || mm == 8 || mm == 10 || mm == 12) {\n\
    \                if (dd > 31) valid = false;\n            }\n            // dd\
    \ should not be greater than 30 for months 4,6,9,11\n            if (mm == 4 ||\
    \ mm == 6 || mm == 9 || mm == 11) {\n                if (dd > 30) valid = false;\n\
    \            }\n            // dd should not be greater than 29 for month 2\n\
    \            if (mm == 2) {\n                if (dd > 29) valid = false;\n   \
    \         }\n            // yyyy\n            int yyyy = Integer.parseInt(dates[2]);\n\
    \        } catch (NumberFormatException e) {\n            // if the year, month\
    \ or day doesn't convert to an int then it is not\n            // a valid date.\n\
    \            valid = false;\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplg40auz2.java:63)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArray = date.split(\"\
    -\");\n        if (dateArray.length != 3) return false;\n        String month\
    \ = dateArray[0];\n        String day = dateArray[1];\n        String year = dateArray[2];\n\
    \        Integer m = Integer.parseInt(month);\n        Integer d = Integer.parseInt(day);\n\
    \        Integer y = Integer.parseInt(year);\n        if (m > 12 || m < 1) return\
    \ false;\n        if (m == 2) {\n            if (d > 29 || d < 1) return false;\n\
    \        } else if (m % 2 == 0) {\n            if (d > 30 || d < 1) return false;\n\
    \        } else {\n            if (d > 31 || d < 1) return false;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo3aat2c9.java:31)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // pattern is mm-dd-yyyy\n       \
    \ int day = 0;\n        int month = 0;\n        int year = 0;\n        try {\n\
    \            day = Integer.parseInt(date.substring(3, 5));\n            month\
    \ = Integer.parseInt(date.substring(0, 2));\n            year = Integer.parseInt(date.substring(6,\
    \ 10));\n        } catch (Exception e) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (year < 1900 || year > 2999) {\n            return false;\n      \
    \  }\n        if (month == 2) {\n            if (day > 29) {\n               \
    \ return false;\n            }\n        }\n        if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n            if (day > 30) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateParts = date.split(\"\
    -\");\n        boolean isValid = true;\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (dateParts.length != 3) {\n            isValid = false;\n        }\n\
    \        else if (month < 1 || month > 12) {\n            isValid = false;\n \
    \       }\n        else if (day < 1 || day > 31) {\n            isValid = false;\n\
    \        }\n        return isValid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpgp1k3_sy.java:29)\n\tat Problem.main(tmpgp1k3_sy.java:50)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.matches(\"^\\\\d{2}-\\\\\
    d{2}-\\\\d{4}$\")) {\n            String[] dateInfo = date.split(\"-\");\n   \
    \         int month = Integer.parseInt(dateInfo[0]);\n            int day = Integer.parseInt(dateInfo[1]);\n\
    \            int year = Integer.parseInt(dateInfo[2]);\n            if (year >\
    \ 0 && month > 0 && month < 13 && day > 0) {\n                if (day < 29) return\
    \ true;\n                else if (day == 29 && month == 2) {\n               \
    \     if (year % 4 == 0) return true;\n                    else return false;\n\
    \                }\n                else if (day > 30 && (month == 4 || month\
    \ == 6 || month == 9 || month == 11)) return false;\n                else if (day\
    \ > 31 && (month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12)) return false;\n                else return true;\n\
    \            }\n            else return false;\n        }\n        else return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.matches(\"(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\\
    \\d{4}\");\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyfskvfjs.java:37)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() != 10) return false;\n\
    \        if (date.charAt(2) != '-' || date.charAt(5) != '-') return false;\n \
    \       String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length\
    \ != 3) return false;\n        try {\n            int month = Integer.parseInt(dateSplit[0]);\n\
    \            int day = Integer.parseInt(dateSplit[1]);\n            int year =\
    \ Integer.parseInt(dateSplit[2]);\n            if (month < 1 || month > 12) return\
    \ false;\n            if (day < 1 || day > 31) return false;\n            if (month\
    \ == 2 && day > 29) return false;\n            if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n                if (day > 30) return false;\n\
    \            }\n            if (year < 0) return false;\n        } catch (NumberFormatException\
    \ nfe) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            DateFormat format\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\");\n            Date d = format.parse(date);\n\
    \            if (date.equals(format.format(d))) {\n                return true;\n\
    \            }\n        } catch (ParseException e) {\n            return false;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmhbl5nn4.java:28: error: cannot find symbol\n            DateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ DateFormat\n  location: class Problem\n/tmp/tmpmhbl5nn4.java:28: error: cannot\
    \ find symbol\n            DateFormat format = new SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n                                    ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpmhbl5nn4.java:33: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return !date.isEmpty()\n         \
    \       &&(date.matches(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    )\n                    || date.matches(\"^(0[1-9]|1[0-2])/([1-2][0-9]|3[0-1])/[0-9]{4}$\"\
    ));\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4l5b8u3z.java:39)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            String[] splits\
    \ = date.split(\"-\");\n            int[] dateNumbers = Arrays.stream(splits).mapToInt(Integer::parseInt).toArray();\n\
    \            if (dateNumbers.length != 3) return false;\n            int day =\
    \ dateNumbers[1];\n            int month = dateNumbers[0];\n            if (month\
    \ < 1 || month > 12) return false;\n            int year = dateNumbers[2];\n \
    \           if (month == 2) {\n                if (day < 1 || day > 29) return\
    \ false;\n            } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n                if (day\
    \ < 1 || day > 31) return false;\n            } else {\n                if (day\
    \ < 1 || day > 30) return false;\n            }\n            return true;\n  \
    \      } catch (NumberFormatException e) {\n            return false;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Pattern p = Pattern.compile(\"([1-9]|[0-2][0-9]|3[0-1])-([1-9]|1[0-2])-[0-9]{4}\"\
    );\n        Matcher m = p.matcher(date);\n        if (m.matches()) {\n       \
    \     try {\n                SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\"\
    );\n                sdf.setLenient(false);\n                sdf.parse(date);\n\
    \                return true;\n            } catch (ParseException e) {\n    \
    \            return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmef27q1n.java:27: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"([1-9]|[0-2][0-9]|3[0-1])-([1-9]|1[0-2])-[0-9]{4}\");\n\
    \        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpmef27q1n.java:27:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"([1-9]|[0-2][0-9]|3[0-1])-([1-9]|1[0-2])-[0-9]{4}\"\
    );\n                    ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmpmef27q1n.java:28: error: cannot find symbol\n        Matcher m = p.matcher(date);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n/tmp/tmpmef27q1n.java:31:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    dd-MM-yyyy\");\n                ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpmef27q1n.java:31: error: cannot find symbol\n       \
    \         SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n     \
    \                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpmef27q1n.java:35: error: cannot find symbol\n\
    \            } catch (ParseException e) {\n                     ^\n  symbol: \
    \  class ParseException\n  location: class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pbvvfvh.java:29: error: incompatible types: <null> cannot be converted\
    \ to boolean\n        return null;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // your code here\n        if (date.length()\
    \ == 0) {\n            return false;\n        }\n        String[] splitted = date.split(\"\
    -\");\n        if (splitted.length != 3) {\n            return false;\n      \
    \  }\n        int day = Integer.parseInt(splitted[1]);\n        int month = Integer.parseInt(splitted[0]);\n\
    \        int year = Integer.parseInt(splitted[2]);\n        switch (month) {\n\
    \            case 1:\n            case 3:\n            case 5:\n            case\
    \ 7:\n            case 8:\n            case 10:\n            case 12:\n      \
    \          if (day < 1 || day > 31) {\n                    return false;\n   \
    \             }\n                break;\n            case 4:\n            case\
    \ 6:\n            case 9:\n            case 11:\n                if (day < 1 ||\
    \ day > 30) {\n                    return false;\n                }\n        \
    \        break;\n            case 2:\n                if (day < 1 || day > 29)\
    \ {\n                    return false;\n                }\n                break;\n\
    \            default:\n                return false;\n        }\n        if (month\
    \ < 1 || month > 12) {\n            return false;\n        }\n        if (year\
    \ < 0) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid_date = false;\n    \
    \    SimpleDateFormat format = new SimpleDateFormat(\"MM-dd-yyyy\");\n       \
    \ try {\n            Date d = format.parse(date);\n            if (date.equals(format.format(d)))\
    \ {\n                valid_date = true;\n            }\n        } catch (ParseException\
    \ e) {\n            // e.printStackTrace();\n        }\n        return valid_date;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpanv32imi.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpanv32imi.java:28: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpanv32imi.java:34: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] splitDate = date.split(\"\
    -\");\n        int month = Integer.parseInt(splitDate[0]);\n        int day =\
    \ Integer.parseInt(splitDate[1]);\n        int year = Integer.parseInt(splitDate[2]);\n\
    \        boolean isValid = true;\n        int[] daysInMonth = {31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \        if (day < 1 || day > daysInMonth[month-1]) {\n            isValid = false;\n\
    \        }\n        if (month < 1 || month > 12) {\n            isValid = false;\n\
    \        }\n        if (splitDate.length != 3) {\n            isValid = false;\n\
    \        }\n        return isValid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 14 out of bounds for length 12\n\tat Problem.validDate(tmpeyjuwvh8.java:33)\n\
    \tat Problem.main(tmpeyjuwvh8.java:46)\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) return false;\n\
    \        if (date.matches(\"[A-Z]\")) return false;\n        if (date.length()\
    \ != 10) return false;\n        if (!date.substring(2, 3).equals(\"-\") || !date.substring(5,\
    \ 6).equals(\"-\")) return false;\n        int month = Integer.parseInt(date.substring(0,\
    \ 2));\n        int day = Integer.parseInt(date.substring(3, 5));\n        int\
    \ year = Integer.parseInt(date.substring(6, 10));\n        if (month < 1 || month\
    \ > 12) return false;\n        if (day < 1 || day > 31) return false;\n      \
    \  if (month == 2 && day > 29) return false;\n        if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n            if (day > 30) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] parts = date.split(\"-\"\
    );\n        String mm = parts[0];\n        String dd = parts[1];\n        String\
    \ yyyy = parts[2];\n        int d = Integer.parseInt(dd);\n        int m = Integer.parseInt(mm);\n\
    \        int y = Integer.parseInt(yyyy);\n        if (d > 31 || d < 1) {\n   \
    \         return false;\n        }\n        if (m > 12 || m < 1) {\n         \
    \   return false;\n        }\n        if (m == 2 && d > 29) {\n            return\
    \ false;\n        }\n        if (m == 2 && d < 1) {\n            return false;\n\
    \        }\n        if (m % 2 == 0 && m < 8 && d > 30) {\n            return false;\n\
    \        }\n        if (m % 2 == 0 && m > 7 && d > 31) {\n            return false;\n\
    \        }\n        if (m % 2 != 0 && m < 8 && d > 31) {\n            return false;\n\
    \        }\n        if (m % 2 != 0 && m > 7 && d > 30) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpmv079ow8.java:29)\n\
    \tat Problem.main(tmpmv079ow8.java:67)\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        final String expectedDateFormat =\
    \ \"MM-dd-yyyy\";\n        try {\n            SimpleDateFormat dateFormat = new\
    \ SimpleDateFormat(expectedDateFormat);\n            dateFormat.setLenient(false);\n\
    \            Date parsedDate = dateFormat.parse(date);\n            return true;\n\
    \        } catch (ParseException e) {\n            return false;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gk0korw.java:29: error: cannot find symbol\n            SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(expectedDateFormat);\n            ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmp1gk0korw.java:29:\
    \ error: cannot find symbol\n            SimpleDateFormat dateFormat = new SimpleDateFormat(expectedDateFormat);\n\
    \                                              ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmp1gk0korw.java:33: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int dateLength = date.length();\n\
    \        boolean isValid = false;\n        if(dateLength == 10){\n           \
    \ String[] dateArr = date.split(\"-\");\n            int month = Integer.parseInt(dateArr[0]);\n\
    \            int day = Integer.parseInt(dateArr[1]);\n            int year = Integer.parseInt(dateArr[2]);\n\
    \            if((month >= 1 && month <= 12) && (day >= 1 && day <= 31) && (year\
    \ >= 0 && year <= 9999)){\n                isValid = true;\n            }\n  \
    \      }\n        return isValid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkzsx1vqp.java:48)\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        List<Integer> daysList = Arrays.asList(1,\
    \ 3, 5, 7, 8, 10, 12);\n        List<Integer> daysList2 = Arrays.asList(4, 6,\
    \ 9, 11);\n        String[] splitDate = date.split(\"-\");\n        int month\
    \ = Integer.parseInt(splitDate[0]);\n        int day = Integer.parseInt(splitDate[1]);\n\
    \        int year = Integer.parseInt(splitDate[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (daysList.contains(month))\
    \ {\n            if (day < 1 || day > 31) {\n                return false;\n \
    \           }\n        } else if (daysList2.contains(month)) {\n            if\
    \ (day < 1 || day > 30) {\n                return false;\n            }\n    \
    \    } else {\n            if (year % 4 == 0) {\n                if (day < 1 ||\
    \ day > 29) {\n                    return false;\n                }\n        \
    \    } else {\n                if (day < 1 || day > 28) {\n                  \
    \  return false;\n                }\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpbsb1ecy4.java:30)\n\tat Problem.main(tmpbsb1ecy4.java:64)\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String regex = \"^\\\\d{2}-\\\\d{2}-\\\
    \\d{4}$\";\n        String[] tokens = date.split(\"-\");\n        if (!date.matches(regex))\
    \ return false;\n        if (tokens.length != 3) return false;\n        int month\
    \ = Integer.parseInt(tokens[0]);\n        int day = Integer.parseInt(tokens[1]);\n\
    \        int year = Integer.parseInt(tokens[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (month == 2) {\n            if (day < 1 || day\
    \ > 29) return false;\n        } else if (day < 1 || day > 31) return false;\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) return false;\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) return false;\n\
    \        String[] pieces = date.split(\"-\");\n        if (pieces.length != 3)\
    \ return false;\n        int month = Integer.parseInt(pieces[0]);\n        int\
    \ day = Integer.parseInt(pieces[1]);\n        int year = Integer.parseInt(pieces[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            if (date.matches(\"\
    [0-9]{2}-[0-9]{2}-[0-9]{4}\")) {\n                Integer day = Integer.parseInt(date.substring(3,\
    \ 5));\n                Integer month = Integer.parseInt(date.substring(0, 2));\n\
    \                Integer year = Integer.parseInt(date.substring(6, 10));\n   \
    \             String[] months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\"};\n                String[] months30 = {\"04\", \"06\", \"09\", \"11\"\
    };\n                if (month > 12 || month < 1) return false;\n             \
    \   if (Arrays.asList(months).contains(month)) {\n                    if (day\
    \ > 31 || day < 1) return false;\n                } else if (Arrays.asList(months30).contains(month))\
    \ {\n                    if (day > 30 || day < 1) return false;\n            \
    \    } else {\n                    if (year % 4 == 0 && (year % 100 != 0 || year\
    \ % 400 == 0)) {\n                        if (day > 29 || day < 1) return false;\n\
    \                    } else {\n                        if (day > 28 || day < 1)\
    \ return false;\n                    }\n                }\n                return\
    \ true;\n            }\n        } catch (Exception e) {\n            return false;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int[] year_month_day = Arrays.stream(date.split(\"\
    -\")).mapToInt(Integer::parseInt).toArray();\n        if (year_month_day.length\
    \ != 3) {\n            return false;\n        }\n        if (year_month_day[0]\
    \ > 12 || year_month_day[0] < 1) {\n            return false;\n        }\n   \
    \     switch (year_month_day[0]) {\n            case 1:\n            case 3:\n\
    \            case 5:\n            case 7:\n            case 8:\n            case\
    \ 10:\n            case 12:\n                if (year_month_day[1] > 31 || year_month_day[1]\
    \ < 1) {\n                    return false;\n                }\n             \
    \   break;\n            case 4:\n            case 6:\n            case 9:\n  \
    \          case 11:\n                if (year_month_day[1] > 30 || year_month_day[1]\
    \ < 1) {\n                    return false;\n                }\n             \
    \   break;\n            case 2:\n                if (year_month_day[1] > 29 ||\
    \ year_month_day[1] < 1) {\n                    return false;\n              \
    \  }\n                break;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:562)\n\t\
    at Problem.validDate(tmptm1qphed.java:27)\n\tat Problem.main(tmptm1qphed.java:69)\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArray = date.split(\"\
    -\");\n        if (dateArray.length != 3) return false;\n        try {\n     \
    \       int day = Integer.parseInt(dateArray[1]);\n            int month = Integer.parseInt(dateArray[0]);\n\
    \            int year = Integer.parseInt(dateArray[2]);\n            if (year\
    \ < 0) return false;\n            if (month < 1 || month > 12) return false;\n\
    \            if (day < 1) return false;\n            int lastDay = ((month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) ? 31 : (month == 4 || month == 6 || month == 9 || month == 11)\
    \ ? 30 : (month == 2) ? 28 : 0);\n            if (lastDay == 0) return false;\n\
    \            if (day > lastDay) return false;\n        } catch (Exception e) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // YOUR CODE HERE\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2g5ofzxa.java:31)\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] items = date.split(\"-\"\
    );\n        if (items.length != 3) return false;\n        String[] months = new\
    \ String[]{\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        String[]\
    \ months2 = new String[]{\"04\", \"06\", \"09\", \"11\"};\n        String month\
    \ = items[0];\n        String day = items[1];\n        String year = items[2];\n\
    \        int d = Integer.parseInt(day);\n        if (d < 1 || d > 31) return false;\n\
    \        if (Arrays.asList(months).contains(month)) {\n            if (d > 31)\
    \ return false;\n        } else if (Arrays.asList(months2).contains(month)) {\n\
    \            if (d > 30) return false;\n        } else if (month.equals(\"02\"\
    )) {\n            if (d > 29) return false;\n        } else {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) return false;\n\
    \        Integer[] dmy = Arrays.stream(date.split(\"-\")).map(x -> Integer.parseInt(x)).toArray(Integer[]::new);\n\
    \        if (dmy.length != 3) return false;\n        if (dmy[0] > 12 || dmy[0]\
    \ < 1) return false;\n        if (dmy[0] == 2) {\n            if (dmy[1] > 29\
    \ || dmy[1] < 1) return false;\n        } else if (dmy[0] % 2 == 0) {\n      \
    \      if (dmy[1] > 30 || dmy[1] < 1) return false;\n        } else {\n      \
    \      if (dmy[1] > 31 || dmy[1] < 1) return false;\n        }\n        if (dmy[2]\
    \ < 0) return false;\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] components = date.split(\"\
    -\");\n        if (components.length != 3) return false;\n        try {\n    \
    \        int month = Integer.parseInt(components[0]);\n            int day = Integer.parseInt(components[1]);\n\
    \            int year = Integer.parseInt(components[2]);\n            if (month\
    \ < 1 || month > 12) return false;\n            if (month == 2) {\n          \
    \      if (year % 4 == 0) {\n                    if (day < 1 || day > 29) return\
    \ false;\n                } else {\n                    if (day < 1 || day > 28)\
    \ return false;\n                }\n            } else if (month % 2 == 0) {\n\
    \                if (day < 1 || day > 30) return false;\n            } else {\n\
    \                if (day < 1 || day > 31) return false;\n            }\n     \
    \       return true;\n        } catch (NumberFormatException e) {\n          \
    \  return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] parts = date.split(\"-\"\
    );\n        if (parts.length != 3) {\n            return false;\n        }\n \
    \       int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        if (month > 12 || month < 1) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day > 31 || day < 1) {\n\
    \                return false;\n            }\n        } else if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n            if (day > 30 || day\
    \ < 1) {\n                return false;\n            }\n        } else if (month\
    \ == 2) {\n            if (day > 29 || day < 1) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        System.out.println(date);\n\
    \        String[] tokens = date.split(\"-\");\n        if (tokens.length != 3)\
    \ {\n            return false;\n        }\n        int mm = Integer.parseInt(tokens[0]);\n\
    \        int dd = Integer.parseInt(tokens[1]);\n        int yyyy = Integer.parseInt(tokens[2]);\n\
    \        if ((dd < 1 || dd > 31) && (mm == 1 || mm == 3 || mm == 5 || mm == 7\
    \ || mm == 8 || mm == 10 || mm == 12)) {\n            return false;\n        }\n\
    \        if ((dd < 1 || dd > 30) && (mm == 4 || mm == 6 || mm == 9 || mm == 11))\
    \ {\n            return false;\n        }\n        if ((dd < 1 || dd > 29) &&\
    \ (mm == 2)) {\n            return false;\n        }\n        if (mm < 1 || mm\
    \ > 12) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: '03-11-2000

    15-01-2012

    04-0-2040

    06-04-2020

    01-01-2007

    03-32-2011


    04-31-3000

    06-06-2005

    21-31-2000

    04-12-2003

    04122003

    20030412

    2003-04

    2003-04-12

    04-2003

    '
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ int[] days = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if (date.length()\
    \ == 10) {\n            int month = Integer.parseInt(date.substring(0, 2));\n\
    \            int day = Integer.parseInt(date.substring(3, 5));\n            int\
    \ year = Integer.parseInt(date.substring(6, 10));\n            if (month > 0 &&\
    \ month < 13) {\n                if (day > 0 && day <= days[month - 1]) {\n  \
    \                  if (month == 2 && day == 29) {\n                        if\
    \ (year % 4 == 0) {\n                            isValid = true;\n           \
    \             }\n                    } else {\n                        isValid\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \        return isValid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"3-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmp9g9nsdee.java:31)\n\tat Problem.main(tmp9g9nsdee.java:62)\n"
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            String[] parts\
    \ = date.split(\"-\");\n            int year = Integer.parseInt(parts[2]);\n \
    \           int month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n\
    \            return (year > 1900 && year < 3000) && (month > 0 && month < 13)\
    \ && (day > 0 && day < 32);\n        } catch (Exception e) {\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] monthAndDay = date.split(\"\
    -\");\n        if (monthAndDay.length != 3) {\n            return false;\n   \
    \     }\n        try {\n            int month = Integer.parseInt(monthAndDay[0]);\n\
    \            int day = Integer.parseInt(monthAndDay[1]);\n            if (month\
    \ < 1 || month > 12) {\n                return false;\n            }\n       \
    \     if (day < 1 || day > 31) {\n                return false;\n            }\n\
    \            if (month == 2) {\n                if (day > 29) {\n            \
    \        return false;\n                }\n            }\n            if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n                if (day\
    \ > 30) {\n                    return false;\n                }\n            }\n\
    \        } catch (NumberFormatException e) {\n            return false;\n    \
    \    }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // your code here\n        boolean\
    \ flag = false;\n        String[] str = date.split(\"-\");\n        int month\
    \ = Integer.parseInt(str[0]);\n        int day = Integer.parseInt(str[1]);\n \
    \       int year = Integer.parseInt(str[2]);\n        if(month<=12 && month>=1){\n\
    \            if(day<=31 && day>=1){\n                flag = true;\n          \
    \  }\n        }\n        return flag;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmplkk27mkx.java:30)\n\tat Problem.main(tmplkk27mkx.java:47)\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int month = Integer.parseInt(date.substring(0,\
    \ 2));\n        int day = Integer.parseInt(date.substring(3, 5));\n        int\
    \ year = Integer.parseInt(date.substring(6, 10));\n        boolean monthCheck\
    \ = (month > 0 && month < 13);\n        boolean dayCheck = (day > 0 && day < 32);\n\
    \        boolean yearCheck = (year > 0);\n        boolean valid = (monthCheck\
    \ && dayCheck && yearCheck);\n        return valid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpkk54632n.java:28)\n\tat Problem.main(tmpkk54632n.java:39)\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        String[] dates = date.split(\"-\");\n\
    \        if (dates.length != 3) {\n            return false;\n        }\n    \
    \    int[] daysInMonths = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int day = Integer.parseInt(dates[1]);\n        int month = Integer.parseInt(dates[0]);\n\
    \        int year = Integer.parseInt(dates[2]);\n        if (day < 1 || day >\
    \ daysInMonths[month - 1]) {\n            return false;\n        }\n        if\
    \ (month < 1 || month > 12) {\n            return false;\n        }\n        if\
    \ (year < 0) {\n            return false;\n        }\n        if (year > 2999)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 14 out of bounds for length 12\n\tat Problem.validDate(tmpvplh66hl.java:38)\n\
    \tat Problem.main(tmpvplh66hl.java:54)\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArr = date.split(\"-\"\
    );\n        int year, month, day;\n        if (dateArr.length != 3) {\n      \
    \      return false;\n        }\n        try {\n            year = Integer.parseInt(dateArr[2]);\n\
    \            month = Integer.parseInt(dateArr[0]);\n            day = Integer.parseInt(dateArr[1]);\n\
    \        } catch (NumberFormatException e) {\n            return false;\n    \
    \    }\n        if (month > 12 || month < 1) {\n            return false;\n  \
    \      }\n        if (day > 31 || day < 1) {\n            return false;\n    \
    \    }\n        if (month == 2) {\n            if (day > 29) {\n             \
    \   return false;\n            }\n        } else if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n            if (day > 30) {\n             \
    \   return false;\n            }\n        }\n        return true;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        String[]\
    \ arr = date.split(\"-\");\n        int year = Integer.parseInt(arr[2]);\n   \
    \     int month = Integer.parseInt(arr[0]);\n        int day = Integer.parseInt(arr[1]);\n\
    \        if (year < 1500 || year > 2100) {\n            valid = false;\n     \
    \   }\n        if (month < 1 || month > 12) {\n            valid = false;\n  \
    \      }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n\
    \                valid = false;\n            }\n        } else if (month == 4\
    \ || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day\
    \ > 30) {\n                valid = false;\n            }\n        } else {\n \
    \           if (day < 1 || day > 31) {\n                valid = false;\n     \
    \       }\n        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 1\n\tat Problem.validDate(tmpykx2b1up.java:29)\n\
    \tat Problem.main(tmpykx2b1up.java:60)\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] split = date.split(\"-\"\
    );\n        if (split.length != 3) {\n            return false;\n        }\n \
    \       String month = split[0];\n        String day = split[1];\n        String\
    \ year = split[2];\n        int imonth = Integer.parseInt(month);\n        int\
    \ iday = Integer.parseInt(day);\n        int iyear = Integer.parseInt(year);\n\
    \        if (imonth < 1 || imonth > 12) {\n            return false;\n       \
    \ }\n        if (imonth == 2) {\n            if (iday < 1 || iday > 29) {\n  \
    \              return false;\n            }\n        } else if (imonth == 1 ||\
    \ imonth == 3 || imonth == 5 || imonth == 7 || imonth == 8 || imonth == 10 ||\
    \ imonth == 12) {\n            if (iday < 1 || iday > 31) {\n                return\
    \ false;\n            }\n        } else {\n            if (iday < 1 || iday >\
    \ 30) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] temp = date.split(\"-\");\n\
    \        int month = Integer.parseInt(temp[0]);\n        int day = Integer.parseInt(temp[1]);\n\
    \        int year = Integer.parseInt(temp[2]);\n        boolean isLeapYear = false;\n\
    \        if(month >= 1 && month <= 12) {\n            if(month == 2) {\n     \
    \           if(year % 4 == 0) {\n                    isLeapYear = true;\n    \
    \            }\n                if(isLeapYear) {\n                    if(day >=\
    \ 1 && day <= 29) {\n                        return true;\n                  \
    \  }\n                } else {\n                    if(day >= 1 && day <= 28)\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            } else if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n                if(day\
    \ >= 1 && day <= 31) {\n                    return true;\n                }\n\
    \            } else {\n                if(day >= 1 && day <= 30) {\n         \
    \           return true;\n                }\n            }\n        }\n      \
    \  return false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpp5_8z3_9.java:28)\n\tat Problem.main(tmpp5_8z3_9.java:65)\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // BEGIN SOLUTION\n        if (date.isEmpty())\
    \ return false;\n        // split into day, month, year:\n        String[] parts\
    \ = date.split(\"-\");\n        if (parts.length != 3) return false;\n       \
    \ int day = Integer.parseInt(parts[1]);\n        int month = Integer.parseInt(parts[0]);\n\
    \        int year = Integer.parseInt(parts[2]);\n        if (month < 1 || month\
    \ > 12) return false;\n        if (month == 2) {\n            if (day < 1 || day\
    \ > 29) return false;\n        } else if (month % 2 == 0) {\n            if (day\
    \ < 1 || day > 30) return false;\n        } else {\n            if (day < 1 ||\
    \ day > 31) return false;\n        }\n        return true;\n        // END SOLUTION\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ isValid = false;\n        if(date != null && date.length() > 0) {\n        \
    \    if(date.contains(\"-\")) {\n                String[] parts = date.split(\"\
    -\");\n                if(parts.length == 3) {\n                    int month\
    \ = Integer.parseInt(parts[0]);\n                    int day = Integer.parseInt(parts[1]);\n\
    \                    int year = Integer.parseInt(parts[2]);\n                \
    \    if(month > 0 && month < 13) {\n                        if(month % 2 == 0)\
    \ {\n                            if(month == 2) {\n                          \
    \      if(day >= 1 && day <= 29) {\n                                    isValid\
    \ = true;\n                                }\n                            }\n\
    \                            else {\n                                if(day >=\
    \ 1 && day <= 30) {\n                                    isValid = true;\n   \
    \                             }\n                            }\n             \
    \           }\n                        else {\n                            if(day\
    \ >= 1 && day <= 31) {\n                                isValid = true;\n    \
    \                        }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return isValid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011577
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateSplit = date.split(\"\
    -\");\n        String month = dateSplit[0];\n        String day = dateSplit[1];\n\
    \        String year = dateSplit[2];\n        int yearInt = Integer.parseInt(year);\n\
    \        int monthInt = Integer.parseInt(month);\n        int dayInt = Integer.parseInt(day);\n\
    \        if (dateSplit.length == 3 && monthInt > 0 && monthInt < 13 && yearInt\
    \ > 0) {\n            if (monthInt == 1 || monthInt == 3 || monthInt == 5 || monthInt\
    \ == 7 || monthInt == 8 || monthInt == 10 || monthInt == 12) {\n             \
    \   if (dayInt < 32 && dayInt > 0) {\n                    return true;\n     \
    \           }\n            } else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n                if (dayInt < 31 && dayInt > 0) {\n\
    \                    return true;\n                }\n            } else if (monthInt\
    \ == 2) {\n                if (dayInt < 30 && dayInt > 0) {\n                \
    \    return true;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpkifm6va9.java:29)\n\
    \tat Problem.main(tmpkifm6va9.java:58)\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.matches(\"((0[1-9]|1[0-2])|[1-9])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    \\d{4}\");\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0j_e90t6.java:37)\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjrbccl5a.java:31)\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean validDate = false;\n     \
    \   if (date.length() > 0) {\n            date = date.replaceAll(\"\\\\s\", \"\
    \");\n            if (date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n      \
    \          int month = Integer.parseInt(date.substring(0, 2));\n             \
    \   int day = Integer.parseInt(date.substring(3, 5));\n                int year\
    \ = Integer.parseInt(date.substring(6, 10));\n                if (month > 0 &&\
    \ month < 13) {\n                    switch (month) {\n                      \
    \  case 1:\n                        case 3:\n                        case 5:\n\
    \                        case 7:\n                        case 8:\n          \
    \              case 10:\n                        case 12:\n                  \
    \          if (day > 0 && day < 32) {\n                                validDate\
    \ = true;\n                            }\n                            break;\n\
    \                        case 4:\n                        case 6:\n          \
    \              case 9:\n                        case 11:\n                   \
    \         if (day > 0 && day < 31) {\n                                validDate\
    \ = true;\n                            }\n                            break;\n\
    \                        case 2:\n                            if (day > 0 && day\
    \ < 30) {\n                                validDate = true;\n               \
    \             }\n                            break;\n                    }\n \
    \               }\n            }\n        }\n        return validDate;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) return false;\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        if ((day < 1 ||\
    \ day > 31) && (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12)) return false;\n        if ((day < 1 ||\
    \ day > 30) && (month == 4 || month == 6 || month == 9 || month == 11)) return\
    \ false;\n        if ((day < 1 || day > 29) && (month == 2)) return false;\n \
    \       if (month < 1 || month > 12) return false;\n        return true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean res = false;\n        String[]\
    \ parts = date.split(\"-\");\n        if (parts.length == 3) {\n            res\
    \ = isValidDate(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Integer.parseInt(parts[2]));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptpp5l4rb.java:30: error: cannot find symbol\n            res =\
    \ isValidDate(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Integer.parseInt(parts[2]));\n\
    \                  ^\n  symbol:   method isValidDate(int,int,int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here!\n        if (date.length()\
    \ == 0) return false;\n        int month;\n        int day;\n        int year;\n\
    \        try {\n            month = Integer.parseInt(date.substring(0, 2));\n\
    \            day = Integer.parseInt(date.substring(3, 5));\n            year =\
    \ Integer.parseInt(date.substring(6, 10));\n        } catch (Exception e) {\n\
    \            return false;\n        }\n        if (month == 2) {\n           \
    \ if (year % 4 == 0) {\n                if (day < 1 || day > 29) return false;\n\
    \            } else {\n                if (day < 1 || day > 28) return false;\n\
    \            }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) return false;\n        } else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n\
    \        } else {\n            return false;\n        }\n        if (month < 1\
    \ || month > 12) return false;\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean is_valid = false;\n      \
    \  try {\n            Date date_obj = new SimpleDateFormat(\"MM-dd-yyyy\").parse(date);\n\
    \            is_valid = true;\n        } catch (Exception e) {\n            is_valid\
    \ = false;\n        }\n        return is_valid;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp52ie5qi4.java:29: error: cannot find symbol\n            Date date_obj\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\").parse(date);\n                      \
    \          ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.matches(\"((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])-[0-9]{4})\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9w2j6y3.java:37)\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Add your code below this line.\
    \ Do not modify any other code.\n        String regex = \"^(?:(?:31(\\\\/|-|\\\
    \\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\
    \\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\
    \\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\\
    d)?\\\\d{2})$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher\
    \ matcher = pattern.matcher(date);\n        return matcher.matches();\n      \
    \  // Add your code above this line. Do not modify any other code.\n    }\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpct2mfloy.java:29: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(regex);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpct2mfloy.java:29: error: cannot find symbol\n       \
    \ Pattern pattern = Pattern.compile(regex);\n                          ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmpct2mfloy.java:30: error:\
    \ cannot find symbol\n        Matcher matcher = pattern.matcher(date);\n     \
    \   ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011577
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] parts = date.split(\"-\"\
    );\n        if (parts.length != 3) {\n            return false;\n        }\n\n\
    \        try {\n            int days = Integer.parseInt(parts[1]);\n         \
    \   int months = Integer.parseInt(parts[0]);\n            int years = Integer.parseInt(parts[2]);\n\
    \n            if ((months < 1 || months > 12) || years < 0) {\n              \
    \  return false;\n            }\n\n            if (months == 2) {\n          \
    \      if (days < 1 || days > 29) {\n                    return false;\n     \
    \           }\n            } else if (months == 1 || months == 3 || months ==\
    \ 5 || months == 7 || months == 8 || months == 10 || months == 12) {\n       \
    \         if (days < 1 || days > 31) {\n                    return false;\n  \
    \              }\n            } else {\n                if (days < 1 || days >\
    \ 30) {\n                    return false;\n                }\n            }\n\
    \        } catch (NumberFormatException e) {\n            return false;\n    \
    \    }\n\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here.\n       \
    \ try {\n            int month = Integer.parseInt(date.substring(0, 2));\n   \
    \         int day = Integer.parseInt(date.substring(3, 5));\n            int year\
    \ = Integer.parseInt(date.substring(6, 10));\n            if (year > 0 && (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) && day <= 31 && day > 0 && month <= 12 && month > 0) {\n   \
    \             return true;\n            } else if (year > 0 && (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) && day <= 30 && day > 0 && month <=\
    \ 12 && month > 0) {\n                return true;\n            } else if (year\
    \ > 0 && month == 2 && day <= 29 && day > 0 && month <= 12 && month > 0) {\n \
    \               return true;\n            } else {\n                return false;\n\
    \            }\n        } catch (Exception e) {\n            return false;\n \
    \       }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.matches(\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    )) {\n            String[] splitDate = date.split(\"-\");\n            int day\
    \ = Integer.parseInt(splitDate[1]);\n            int month = Integer.parseInt(splitDate[0]);\n\
    \            if (month > 12 || month < 1) {\n                return false;\n \
    \           }\n            if (day > 31 || day < 1) {\n                return\
    \ false;\n            }\n            if (month == 2) {\n                if (day\
    \ > 29) {\n                    return false;\n                }\n            }\n\
    \            if (month == 4 || month == 6 || month == 9 || month == 11) {\n  \
    \              if (day > 30) {\n                    return false;\n          \
    \      }\n            }\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) return false;\n\
    \        String[] d = date.split(\"-\");\n        if (d.length != 3) return false;\n\
    \        int m = Integer.parseInt(d[0]);\n        int n = Integer.parseInt(d[1]);\n\
    \        if (m < 1 || m > 12) return false;\n        if (m == 2) {\n         \
    \   if (n < 1 || n > 29) return false;\n        } else if (m == 1 || m == 3 ||\
    \ m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            if (n < 1 ||\
    \ n > 31) return false;\n        } else {\n            if (n < 1 || n > 30) return\
    \ false;\n        }\n        if (d[2].length() != 4) return false;\n        for\
    \ (int i = 0; i < d[2].length(); i++) {\n            char c = d[2].charAt(i);\n\
    \            if (c > '9' || c < '0') return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] comps = date.split(\"-\"\
    );\n        boolean valid = true;\n        if (comps.length < 3) {\n         \
    \   valid = false;\n        }\n        if (date.length() < 10) {\n           \
    \ valid = false;\n        }\n        if (valid) {\n            try {\n       \
    \         int month = Integer.parseInt(comps[0]);\n                int day = Integer.parseInt(comps[1]);\n\
    \                int year = Integer.parseInt(comps[2]);\n                if (month\
    \ < 1 || month > 12) {\n                    valid = false;\n                }\n\
    \                if (year < 0) {\n                    valid = false;\n       \
    \         }\n                if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n                    if\
    \ (day < 1 || day > 31) {\n                        valid = false;\n          \
    \          }\n                }\n                if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n                    if (day < 1 || day > 30)\
    \ {\n                        valid = false;\n                    }\n         \
    \       }\n                if (month == 2) {\n                    if (day < 1\
    \ || day > 29) {\n                        valid = false;\n                   \
    \ }\n                }\n            } catch (NumberFormatException e) {\n    \
    \            valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        if (date.matches(\"[0-9][0-9]\\\\-[0-9][0-9]\\\
    \\-[0-9][0-9][0-9][0-9]\")) {\n            int month = Integer.parseInt(date.substring(0,\
    \ 2));\n            int day = Integer.parseInt(date.substring(3, 5));\n      \
    \      if (month > 12 || month < 1) {\n                return false;\n       \
    \     }\n            if (month == 2) {\n                if (day > 29 || day <\
    \ 1) {\n                    return false;\n                }\n            } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n             \
    \   if (day > 30 || day < 1) {\n                    return false;\n          \
    \      }\n            } else {\n                if (day > 31 || day < 1) {\n \
    \                   return false;\n                }\n            }\n        \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean res = false;\n        int\
    \ day, month, year;\n        try {\n            String[] parts = date.split(\"\
    -\");\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n\
    \            year = Integer.parseInt(parts[2]);\n            res = (day >= 1 &&\
    \ day <= 31) && (month >= 1 && month <= 12) && (year >= 1900 && year <= 9999);\n\
    \        } catch (Exception e) {\n            res = false;\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy4fnm9fz.java:48)\n"
  stdout: ''
  timestamp: 1660011578
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.matches(\"^(0[1-9]|1[0-2])\\\
    \\-(0[1-9]|[1-2][0-9]|3[0-1])\\\\-\\\\d{4}$\");\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyr1ufc6u.java:37)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // {{ Write your code here\n     \
    \   // }}\n        if (date.equals(\"\")) return false;\n        String[] dateArr\
    \ = date.split(\"-\");\n        int month = Integer.parseInt(dateArr[0]);\n  \
    \      int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) return false;\n        } else {\n            if (day < 1 || day\
    \ > 31) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmp_b1cam2k.java:32)\n\
    \tat Problem.main(tmp_b1cam2k.java:56)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean res = false;\n        String[]\
    \ d = date.split(\"-\");\n        if (d.length == 3) {\n            try {\n  \
    \              int mm = Integer.parseInt(d[0]);\n                int dd = Integer.parseInt(d[1]);\n\
    \                int yyyy = Integer.parseInt(d[2]);\n                if (mm >=\
    \ 1 && mm <= 12) {\n                    if (mm == 1 || mm == 3 || mm == 5 || mm\
    \ == 7 || mm == 8 || mm == 10 || mm == 12) {\n                        if (dd >=\
    \ 1 && dd <= 31) {\n                            res = true;\n                \
    \        }\n                    } else if (mm == 4 || mm == 6 || mm == 9 || mm\
    \ == 11) {\n                        if (dd >= 1 && dd <= 30) {\n             \
    \               res = true;\n                        }\n                    }\
    \ else if (mm == 2) {\n                        if (dd >= 1 && dd <= 29) {\n  \
    \                          res = true;\n                        }\n          \
    \          }\n                }\n            } catch (Exception e) {\n       \
    \         res = false;\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        throw new UnsupportedOperationException(\"\
    Not implemented\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.validDate(tmprigg6js_.java:27)\n\tat Problem.main(tmprigg6js_.java:30)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return new DateValidator().validate(date);\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnr9emfhk.java:27: error: cannot find symbol\n        return new\
    \ DateValidator().validate(date);\n                   ^\n  symbol:   class DateValidator\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // return false;\n        String[]\
    \ split = date.split(\"-\");\n        String mm = split[0];\n        String dd\
    \ = split[1];\n        String yyyy = split[2];\n        int[] ar = Arrays.stream(split).mapToInt(Integer::parseInt).toArray();\n\
    \        int[] month = {1,3,5,7,8,10,12};\n        int[] month2 = {4,6,9,11};\n\
    \        if (mm.length() != 2 || dd.length() != 2 || yyyy.length() != 4) return\
    \ false;\n        if (date.contains(\"/\")) return false;\n        if (ar[0] >\
    \ 12 || ar[0] < 1) return false;\n        if (ar[0] == 2 && ar[1] > 29) return\
    \ false;\n        for (int i = 0; i < month.length; i++) {\n            if (ar[0]\
    \ == month[i] && ar[1] > 31) return false;\n        }\n        for (int i = 0;\
    \ i < month2.length; i++) {\n            if (ar[0] == month2[i] && ar[1] > 30)\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpbz40pevy.java:30)\n\
    \tat Problem.main(tmpbz40pevy.java:54)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        String[] date_arr = date.split(\"-\"\
    );\n        int day = Integer.parseInt(date_arr[1]);\n        int month = Integer.parseInt(date_arr[0]);\n\
    \        int year = Integer.parseInt(date_arr[2]);\n        boolean isLeapYear\
    \ = ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0));\n        if (month\
    \ == 2) {\n            if (isLeapYear) {\n                if (day < 1 || day >\
    \ 29) {\n                    return false;\n                }\n            } else\
    \ {\n                if (day < 1 || day > 28) {\n                    return false;\n\
    \                }\n            }\n        } else if (month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if (day < 1 || day > 31) {\n                return false;\n     \
    \       }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        } else {\n            return false;\n        }\n     \
    \   return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmphpjqpstc.java:31)\n\
    \tat Problem.main(tmphpjqpstc.java:70)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n    }\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa1ahd0c.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // write code here\n        boolean\
    \ result = false;\n        try {\n            DateFormat df = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n            Date d = df.parse(date);\n            result = true;\n\
    \        } catch (Exception e) {\n            result = false;\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolym6s38.java:30: error: cannot find symbol\n            DateFormat\
    \ df = new SimpleDateFormat(\"mm-dd-yyyy\");\n            ^\n  symbol:   class\
    \ DateFormat\n  location: class Problem\n/tmp/tmpolym6s38.java:30: error: cannot\
    \ find symbol\n            DateFormat df = new SimpleDateFormat(\"mm-dd-yyyy\"\
    );\n                                ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return Pattern.matches(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    , date);\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo0ky4pq.java:27: error: cannot find symbol\n        return Pattern.matches(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\", date);\n            \
    \   ^\n  symbol:   variable Pattern\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Pattern pattern = Pattern.compile(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\");\n        return pattern.matcher(date).matches();\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpomillhcx.java:27: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    );\n        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpomillhcx.java:27:\
    \ error: cannot find symbol\n        Pattern pattern = Pattern.compile(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    );\n                          ^\n  symbol:   variable Pattern\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // >>> YOUR CODE HERE <<<\n      \
    \  return false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk27um_w_.java:31)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv2d8l6p6.java:32)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            String[] dateParts\
    \ = date.split(\"-\");\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            if (month < 1 || month > 12) {\n\
    \                return false;\n            }\n            if (day < 1 || day\
    \ > 31) {\n                return false;\n            }\n            if (month\
    \ == 2) {\n                if (day > 29) {\n                    return false;\n\
    \                }\n            }\n            if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n                if (day > 30) {\n            \
    \        return false;\n                }\n            }\n            return true;\n\
    \        } catch (Exception e) {\n            return false;\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        String[] dateArray = date.split(\"-\"\
    );\n        String month = dateArray[0];\n        String day = dateArray[1];\n\
    \        String year = dateArray[2];\n        int d = Integer.parseInt(day);\n\
    \        int m = Integer.parseInt(month);\n        int y = Integer.parseInt(year);\n\
    \        if (d < 1 || m < 1 || y < 1) {\n            return false;\n        }\n\
    \        if (m > 12) {\n            return false;\n        }\n        if (d >\
    \ 31) {\n            return false;\n        }\n        if (m == 2) {\n       \
    \     if (d > 29) {\n                return false;\n            }\n        }\n\
    \        if (m == 4 || m == 6 || m == 9 || m == 11) {\n            if (d > 30)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpt6jjdjg8.java:32)\n\
    \tat Problem.main(tmpt6jjdjg8.java:70)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) return false;\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) return false;\n        int day = Integer.parseInt(dateParts[1]);\n   \
    \     int month = Integer.parseInt(dateParts[0]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > 31) return false;\n        if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) return false;\n        }\n        if (month\
    \ == 2) {\n            if (day > 29) return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        // check if date is correctly formatted\n\
    \        Pattern datePattern = Pattern.compile(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\
    );\n        Matcher matcher = datePattern.matcher(date);\n        boolean isCorrectlyFormatted\
    \ = matcher.matches();\n        if (!isCorrectlyFormatted) {\n            return\
    \ false;\n        }\n        // split on the \"-\" character\n        String[]\
    \ parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        // check number of days\n        int numberOfDays = getNumberOfDaysInMonth(month,\
    \ year);\n        if (day < 1 || day > numberOfDays) {\n            return false;\n\
    \        }\n        // check months\n        if (month < 1 || month > 12) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaatumu72.java:31: error: cannot find symbol\n        Pattern datePattern\
    \ = Pattern.compile(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n        ^\n  symbol:   class\
    \ Pattern\n  location: class Problem\n/tmp/tmpaatumu72.java:31: error: cannot\
    \ find symbol\n        Pattern datePattern = Pattern.compile(\"\\\\d{2}-\\\\d{2}-\\\
    \\d{4}\");\n                              ^\n  symbol:   variable Pattern\n  location:\
    \ class Problem\n/tmp/tmpaatumu72.java:32: error: cannot find symbol\n       \
    \ Matcher matcher = datePattern.matcher(date);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n/tmp/tmpaatumu72.java:43: error: cannot find symbol\n\
    \        int numberOfDays = getNumberOfDaysInMonth(month, year);\n           \
    \                ^\n  symbol:   method getNumberOfDaysInMonth(int,int)\n  location:\
    \ class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n            dateFormat.setLenient(false);\n\
    \            Date checkDate = dateFormat.parse(date);\n            return true;\n\
    \        } catch (ParseException e) {\n            return false;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpad3um3p4.java:28: error: cannot find symbol\n            SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpad3um3p4.java:28:\
    \ error: cannot find symbol\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                              ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpad3um3p4.java:32: error:\
    \ cannot find symbol\n        } catch (ParseException e) {\n                 ^\n\
    \  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int mm = 0;\n        int dd = 0;\n\
    \        int yyyy = 0;\n        if (date.length() == 0) {\n            return\
    \ false;\n        }\n        try {\n            mm = Integer.parseInt(date.substring(0,\
    \ 2));\n            dd = Integer.parseInt(date.substring(3, 5));\n           \
    \ yyyy = Integer.parseInt(date.substring(6, 10));\n        } catch (NumberFormatException\
    \ e) {\n            return false;\n        }\n        String[] months31 = {\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        String[] months30\
    \ = {\"04\", \"06\", \"09\", \"11\"};\n        if (Arrays.asList(months31).contains(date.substring(0,\
    \ 2))) {\n            if (dd < 1 || dd > 31) {\n                return false;\n\
    \            }\n        } else if (Arrays.asList(months30).contains(date.substring(0,\
    \ 2))) {\n            if (dd < 1 || dd > 30) {\n                return false;\n\
    \            }\n        } else if (date.substring(0, 2).equals(\"02\")) {\n  \
    \          if (dd < 1 || dd > 29) {\n                return false;\n         \
    \   }\n        } else {\n            return false;\n        }\n        if (mm\
    \ < 1 || mm > 12) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 6, end 10, length 8\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.validDate(tmp1hzubvoy.java:36)\n\
    \tat Problem.main(tmp1hzubvoy.java:74)\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() != 10) return false;\n\
    \        try {\n            int month = Integer.parseInt(date.substring(0, 2));\n\
    \            int day = Integer.parseInt(date.substring(3, 5));\n            if\
    \ (month > 12 || month < 1) return false;\n            if (month == 2) {\n   \
    \             if (day > 29 || day < 1) return false;\n            } else if (month\
    \ % 2 == 0) {\n                if (day > 30 || day < 1) return false;\n      \
    \      } else {\n                if (day > 31 || day < 1) return false;\n    \
    \        }\n            return true;\n        } catch (Exception e) {\n      \
    \      return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateArray = date.split(\"\
    -\");\n        if (dateArray.length != 3) {\n            return false;\n     \
    \   }\n        for (String value : dateArray) {\n            if (value.length()\
    \ != 2) {\n                return false;\n            }\n        }\n        Integer\
    \ month = Integer.parseInt(dateArray[0]);\n        Integer day = Integer.parseInt(dateArray[1]);\n\
    \        Integer year = Integer.parseInt(dateArray[2]);\n        if (month > 12\
    \ || month < 1) {\n            return false;\n        }\n        if (month ==\
    \ 2) {\n            if (day > 29 || day < 1) {\n                return false;\n\
    \            }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30 || day < 1) {\n                return false;\n\
    \            }\n        } else {\n            if (day > 31 || day < 1) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphctkjwsi.java:58)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        String pattern = \"^\\\\d{2}-\\\\d{2}-\\\\\
    d{4}$\";\n        if (!date.matches(pattern)) {\n            return false;\n \
    \       }\n        String[] dateSplit = date.split(\"-\");\n        int day =\
    \ Integer.parseInt(dateSplit[1]);\n        int month = Integer.parseInt(dateSplit[0]);\n\
    \        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        switch (month)\
    \ {\n            case 1:\n            case 3:\n            case 5:\n         \
    \   case 7:\n            case 8:\n            case 10:\n            case 12:\n\
    \                if (day < 1 || day > 31) {\n                    return false;\n\
    \                }\n                break;\n            case 4:\n            case\
    \ 6:\n            case 9:\n            case 11:\n                if (day < 1 ||\
    \ day > 30) {\n                    return false;\n                }\n        \
    \        break;\n            case 2:\n                if (year % 4 == 0) {\n \
    \                   if (day < 1 || day > 29) {\n                        return\
    \ false;\n                    }\n                } else {\n                  \
    \  if (day < 1 || day > 28) {\n                        return false;\n       \
    \             }\n                }\n                break;\n        }\n      \
    \  return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String regex = \"(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\\
    \\d\\\\d)\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher\
    \ matcher = pattern.matcher(date);\n        return matcher.matches();\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpex0j4esd.java:28: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(regex);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpex0j4esd.java:28: error: cannot find symbol\n       \
    \ Pattern pattern = Pattern.compile(regex);\n                          ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmpex0j4esd.java:29: error:\
    \ cannot find symbol\n        Matcher matcher = pattern.matcher(date);\n     \
    \   ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ String[] dateSplit = date.split(\"-\");\n        String month = dateSplit[0];\n\
    \        String day = dateSplit[1];\n        String year = dateSplit[2];\n   \
    \     if (dateSplit.length != 3) {\n            return isValid;\n        }\n \
    \       if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n\
    \            return isValid;\n        }\n        if (day.charAt(0) == '0') {\n\
    \            return isValid;\n        }\n        int dayInt = Integer.parseInt(day);\n\
    \        int monthInt = Integer.parseInt(month);\n        int yearInt = Integer.parseInt(year);\n\
    \        if (monthInt == 2) {\n            if (dayInt > 29) {\n              \
    \  return isValid;\n            }\n        }\n        if (monthInt == 1 || monthInt\
    \ == 3 || monthInt == 5 || monthInt == 7 || monthInt == 8 || monthInt == 10 ||\
    \ monthInt == 12) {\n            if (dayInt > 31) {\n                return isValid;\n\
    \            }\n        }\n        if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n            if (dayInt > 30) {\n                return\
    \ isValid;\n            }\n        }\n        if (monthInt > 12) {\n         \
    \   return isValid;\n        }\n        isValid = true;\n        return isValid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9cz8ki8.java:69)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] months = {\"january\", \"\
    february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"\
    september\", \"october\", \"november\", \"december\"};\n        String[] monthsS\
    \ = {\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"\
    sep\", \"oct\", \"nov\", \"dec\"};\n        String[] days = {\"1st\", \"2nd\"\
    , \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\", \"9th\", \"10th\", \"\
    11th\", \"12th\", \"13th\", \"14th\", \"15th\", \"16th\", \"17th\", \"18th\",\
    \ \"19th\", \"20th\", \"21st\", \"22nd\", \"23rd\", \"24th\", \"25th\", \"26th\"\
    , \"27th\", \"28th\", \"29th\", \"30th\", \"31st\"};\n        String[] months31\
    \ = {\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\"\
    };\n        String[] months30 = {\"april\", \"june\", \"september\", \"november\"\
    };\n        String[] monthsS31 = {\"jan\", \"mar\", \"may\", \"jul\", \"aug\"\
    , \"oct\", \"dec\"};\n        String[] monthsS30 = {\"apr\", \"jun\", \"sep\"\
    , \"nov\"};\n        String[] split = date.split(\"-\");\n        if (split.length\
    \ != 3) return false;\n        int month = Integer.parseInt(split[0]);\n     \
    \   int day = Integer.parseInt(split[1]);\n        int year = Integer.parseInt(split[2]);\n\
    \        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) return false;\n        } else if (Arrays.asList(months31).contains(months[month\
    \ - 1])) {\n            if (day < 1 || day > 31) return false;\n        } else\
    \ if (Arrays.asList(months30).cont\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7f5a4so8.java:44: error: ')' expected\n        } else if (Arrays.asList(months30).cont\n\
    \                                               ^\n/tmp/tmp7f5a4so8.java:45: error:\
    \ illegal start of statement\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] parts = date.split(\"-\"\
    );\n        if (parts.length != 3) {\n            return false;\n        }\n \
    \       int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n\
    \        if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        } else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        } else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \    if (day > 31) {\n                return false;\n            }\n        }\
    \ else {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73kspzhj.java:53)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        //\
    \ Check if date is null\n        if (date.isEmpty()) {\n            valid = false;\n\
    \        }\n        else {\n            // Split date into day, month, year\n\
    \            String[] dateSplit = date.split(\"-\");\n            // Check if\
    \ date is 3 parts (day, month, year)\n            if (dateSplit.length != 3) {\n\
    \                valid = false;\n            }\n            else {\n         \
    \       // Get day, month, year\n                int day = Integer.parseInt(dateSplit[1]);\n\
    \                int month = Integer.parseInt(dateSplit[0]);\n               \
    \ int year = Integer.parseInt(dateSplit[2]);\n                // Validate month\n\
    \                if (month < 1 || month > 12) {\n                    valid = false;\n\
    \                }\n                // Validate day\n                else if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n                    if (day < 1 || day > 31) {\n        \
    \                valid = false;\n                    }\n                }\n  \
    \              else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n                    if (day < 1 || day > 30) {\n                        valid\
    \ = false;\n                    }\n                }\n                else if\
    \ (month == 2) {\n                    if (day < 1 || day > 29) {\n           \
    \             valid = false;\n                    }\n                }\n     \
    \       }\n        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int[] days = {31, 29, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        if (date.length() == 0) return false;\n\
    \        if (date.length() != 10) return false;\n        if (date.charAt(2) !=\
    \ '-' || date.charAt(5) != '-') return false;\n        try {\n            int\
    \ day = Integer.parseInt(date.substring(0, 2));\n            int month = Integer.parseInt(date.substring(3,\
    \ 5));\n            int year = Integer.parseInt(date.substring(6, 10));\n    \
    \        if (month < 1 || month > 12) return false;\n            if (day < 1 ||\
    \ day > days[month - 1]) return false;\n            if (month == 2 && day == 29\
    \ && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n\
    \            return true;\n        } catch (Exception e) {\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5nlskk9.java:45)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date.isEmpty()) {\n           \
    \ return false;\n        }\n        String[] components = date.split(\"-\");\n\
    \        int month = Integer.parseInt(components[0]);\n        int day = Integer.parseInt(components[1]);\n\
    \        int year = Integer.parseInt(components[2]);\n        if(month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if(month == 2)\
    \ {\n            if(day < 1 || day > 29) {\n                return false;\n  \
    \          }\n        } else if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if(day < 1\
    \ || day > 31) {\n                return false;\n            }\n        } else\
    \ {\n            if(day < 1 || day > 30) {\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpp9kh9_3z.java:32)\n\
    \tat Problem.main(tmpp9kh9_3z.java:64)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here.\n       \
    \ return false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22tu17l2.java:31)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            Calendar calendar\
    \ = Calendar.getInstance();\n            calendar.setLenient(false);\n       \
    \     calendar.setTime(new SimpleDateFormat(\"MM-dd-yyyy\").parse(date));\n  \
    \          calendar.getTime();\n            return true;\n        } catch (ParseException\
    \ e) {\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcup_knys.java:30: error: cannot find symbol\n            calendar.setTime(new\
    \ SimpleDateFormat(\"MM-dd-yyyy\").parse(date));\n                           \
    \      ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpcup_knys.java:33:\
    \ error: cannot find symbol\n        } catch (ParseException e) {\n          \
    \       ^\n  symbol:   class ParseException\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Implement your code here\n    \
    \    return false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc4vqrbsv.java:31)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] parts = date.split(\"-\"\
    );\n        if (parts.length != 3) {\n            return false;\n        }\n \
    \       String month = parts[0];\n        String day = parts[1];\n        String\
    \ year = parts[2];\n        // rules 1 and 4\n        if (date.length() == 0 ||\
    \ parts.length != 3) {\n            return false;\n        }\n        // rule\
    \ 3\n        if (Integer.parseInt(month) > 12 || Integer.parseInt(month) < 1)\
    \ {\n            return false;\n        }\n        // rule 2\n        boolean\
    \ result = true;\n        if (Objects.equals(month, \"02\")) {\n            if\
    \ (Integer.parseInt(day) > 29 || Integer.parseInt(day) < 1) {\n              \
    \  result = false;\n            }\n        } else if (Objects.equals(month, \"\
    04\") || Objects.equals(month, \"06\") || Objects.equals(month, \"09\") || Objects.equals(month,\
    \ \"11\")) {\n            if (Integer.parseInt(day) > 30 || Integer.parseInt(day)\
    \ < 1) {\n                result = false;\n            }\n        } else {\n \
    \           if (Integer.parseInt(day) > 31 || Integer.parseInt(day) < 1) {\n \
    \               result = false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011580
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n      String[] a = date.split(\"-\");\n  \
    \    if (a.length != 3) {\n        return false;\n      }\n      if (a[0].length()\
    \ != 2 || a[1].length() != 2 || a[2].length() != 4) {\n        return false;\n\
    \      }\n      int month = Integer.parseInt(a[0]);\n      int day = Integer.parseInt(a[1]);\n\
    \      int year = Integer.parseInt(a[2]);\n      if (month < 1 || month > 12)\
    \ {\n        return false;\n      }\n      if (day < 1 || day > 31) {\n      \
    \  return false;\n      }\n      if (month == 2) {\n        if (day > 29) {\n\
    \          return false;\n        }\n      }\n      if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n        if (day > 30) {\n          return\
    \ false;\n        }\n      }\n      return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] splitDate = date.split(\"\
    -\");\n        if (splitDate.length != 3) {\n            return false;\n     \
    \   }\n        if (!isNumeric(splitDate[0]) || !isNumeric(splitDate[1]) || !isNumeric(splitDate[2]))\
    \ {\n            return false;\n        }\n        int day = Integer.parseInt(splitDate[1]);\n\
    \        int month = Integer.parseInt(splitDate[0]);\n        int year = Integer.parseInt(splitDate[2]);\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jipszro.java:31: error: cannot find symbol\n        if (!isNumeric(splitDate[0])\
    \ || !isNumeric(splitDate[1]) || !isNumeric(splitDate[2])) {\n             ^\n\
    \  symbol:   method isNumeric(String)\n  location: class Problem\n/tmp/tmp2jipszro.java:31:\
    \ error: cannot find symbol\n        if (!isNumeric(splitDate[0]) || !isNumeric(splitDate[1])\
    \ || !isNumeric(splitDate[2])) {\n                                         ^\n\
    \  symbol:   method isNumeric(String)\n  location: class Problem\n/tmp/tmp2jipszro.java:31:\
    \ error: cannot find symbol\n        if (!isNumeric(splitDate[0]) || !isNumeric(splitDate[1])\
    \ || !isNumeric(splitDate[2])) {\n                                           \
    \                          ^\n  symbol:   method isNumeric(String)\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() > 0) {\n       \
    \     String[] parts = date.split(\"-\");\n            if (parts.length == 3)\
    \ {\n                int month = Integer.parseInt(parts[0]);\n               \
    \ int day = Integer.parseInt(parts[1]);\n                int year = Integer.parseInt(parts[2]);\n\
    \                return (month >= 1 && month <= 12) && (day >= 1 && day <= 31)\
    \ && (year >= 1 && year <= 9999);\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpne6fw3rc.java:46)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String [] splitDate = date.split(\"\
    -\");\n        if (splitDate.length != 3) {\n            return false;\n     \
    \   }\n        int day = Integer.parseInt(splitDate[1]);\n        int month =\
    \ Integer.parseInt(splitDate[0]);\n        int year = Integer.parseInt(splitDate[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n\
    \                return false;\n            }\n        }\n        if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||\
    \ day > 30) {\n                return false;\n            }\n        }\n     \
    \   if (month == 2) {\n            if (day < 1 || day > 29) {\n              \
    \  return false;\n            }\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here.\n       \
    \ return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ezrjeq8.java:32)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Please write your code here...\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9m_o8bte.java:31)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ try {\n            DateFormat format = new SimpleDateFormat(\"MM-dd-yyyy\");\n\
    \            format.setLenient(false);\n            Date validDate = format.parse(date);\n\
    \            isValid = true;\n        } catch (ParseException e) {\n         \
    \   isValid = false;\n        }\n        return isValid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi32y_lj1.java:29: error: cannot find symbol\n            DateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ DateFormat\n  location: class Problem\n/tmp/tmpi32y_lj1.java:29: error: cannot\
    \ find symbol\n            DateFormat format = new SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n                                    ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpi32y_lj1.java:33: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int month = Integer.parseInt(date.substring(0,2));\n\
    \        int day = Integer.parseInt(date.substring(3,5));\n        if (month <\
    \ 1 || month > 12) {\n            return false;\n        }\n        if (month\
    \ == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n\
    \            }\n        } else if (month % 2 == 0) {\n            if (day < 1\
    \ || day > 30) {\n                return false;\n            }\n        } else\
    \ {\n            if (day < 1 || day > 31) {\n                return false;\n \
    \           }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpqb2cjq83.java:28)\n\tat Problem.main(tmpqb2cjq83.java:50)\n"
  stdout: ''
  timestamp: 1660011580
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofkq9zso.java:30)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            if (date.contains(\"\
    /\")) {\n                return false;\n            }\n            int mm = Integer.parseInt(date.substring(0,\
    \ 2));\n            int dd = Integer.parseInt(date.substring(3, 5));\n       \
    \     if (mm < 1 || mm > 12) {\n                return false;\n            }\n\
    \            if (mm == 2) {\n                if (dd < 1 || dd > 29) {\n      \
    \              return false;\n                }\n            } else if (mm ==\
    \ 1 || mm == 3 || mm == 5 || mm == 7 || mm == 8 || mm == 10 || mm == 12) {\n \
    \               if (dd < 1 || dd > 31) {\n                    return false;\n\
    \                }\n            } else {\n                if (dd < 1 || dd > 30)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return true;\n        } catch (Exception e) {\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4tpllp1p.java:66)\n"
  stdout: ''
  timestamp: 1660011580
