name: HumanEval_160_do_algebra
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() != operand.size() - 1)\n            throw new RuntimeException(\"\
    Operator's size must be equal to Operand's size minus one\");\n        if (op.size()\
    \ == 0)\n            throw new RuntimeException(\"Operator's size must be greater\
    \ than zero\");\n        if (operand.size() == 0)\n            throw new RuntimeException(\"\
    Operand's size must be greater than zero\");\n        if (operand.size() == 1)\n\
    \            return operand.get(0);\n        long result = operand.get(0);\n \
    \       for (int i = 0; i < op.size(); i++) {\n            long r = operand.get(i\
    \ + 1);\n            if (op.get(i).equals(\"+\"))\n                result += r;\n\
    \            else if (op.get(i).equals(\"-\"))\n                result -= r;\n\
    \            else if (op.get(i).equals(\"*\"))\n                result *= r;\n\
    \            else if (op.get(i).equals(\"/\"))\n                result /= r;\n\
    \            else if (op.get(i).equals(\"^\"))\n                result = (long)\
    \ Math.pow(result, r);\n            else\n                throw new RuntimeException(\"\
    Unknown operator: \" + op.get(i));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Unknown operator:\
    \ **\n\tat Problem.doAlgebra(tmpe4891lb5.java:50)\n\tat Problem.main(tmpe4891lb5.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n     \
    \       long num = operand.get(i + 1);\n            switch (op.get(i)) {\n   \
    \             case \"+\":\n                    res += num;\n                 \
    \   break;\n                case \"-\":\n                    res -= num;\n   \
    \                 break;\n                case \"*\":\n                    res\
    \ *= num;\n                    break;\n                case \"//\":\n        \
    \            res /= num;\n                    break;\n                case \"\
    **\":\n                    res = (long) Math.pow(res, num);\n                \
    \    break;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpav9w8pt6.java:53)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\":\n               \
    \     result += operand.get(i + 1);\n                    break;\n            \
    \    case \"-\":\n                    result -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    result *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    result /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezpqbsim.java:52)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15jzr33j.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long ans = operand.get(0);\n        for(int i = 0; i < op.size();\
    \ i++) {\n            if(op.get(i).equals(\"+\")) {\n                ans += operand.get(i+1);\n\
    \            } else if(op.get(i).equals(\"-\")) {\n                ans -= operand.get(i+1);\n\
    \            } else if(op.get(i).equals(\"*\")) {\n                ans *= operand.get(i+1);\n\
    \            } else if(op.get(i).equals(\"//\")) {\n                ans /= operand.get(i+1);\n\
    \            } else if(op.get(i).equals(\"**\")) {\n                ans = (long)Math.pow(ans,\
    \ operand.get(i+1));\n            }\n        }\n        return ans;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp045d32ov.java:49)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long result = operand.get(0);\n        operand.remove(0);\n\
    \        for(int i = 0; i < op.size(); i++){\n            switch(op.get(i)){\n\
    \                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (long)Math.pow(result, operand.get(i));\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6o1kmyfg.java:56)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6vso570.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0bx25qe.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        throw\
    \ new UnsupportedOperationException(\"Waiting to be implemented.\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Waiting\
    \ to be implemented.\n\tat Problem.doAlgebra(tmplsrp7hym.java:28)\n\tat Problem.main(tmplsrp7hym.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1evqtj6.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Your code goes here.\n        // System.out.println(op);\n        // System.out.println(operand);\n\
    \        int n = op.size();\n        boolean[][] reachable = new boolean[n][n];\n\
    \        int[][] value = new int[n][n];\n        boolean[][] processed = new boolean[n][n];\n\
    \        for (int i = 0; i < n; i++) {\n            reachable[i][i] = true;\n\
    \            value[i][i] = operand.get(i).intValue();\n        }\n        for\
    \ (int delta = 1; delta < n; delta++) {\n            for (int i = 0; i + delta\
    \ < n; i++) {\n                for (int k = i; k < i + delta; k++) {\n       \
    \             if (reachable[i][k] && reachable[k + 1][i + delta]) {\n        \
    \                if (op.get(k).equals(\"+\")) {\n                            value[i][i\
    \ + delta] = value[i][k] + value[k + 1][i + delta];\n                        \
    \    reachable[i][i + delta] = true;\n                        } else if (op.get(k).equals(\"\
    -\")) {\n                            value[i][i + delta] = value[i][k] - value[k\
    \ + 1][i + delta];\n                            reachable[i][i + delta] = true;\n\
    \                        } else if (op.get(k).equals(\"*\")) {\n             \
    \               value[i][i + delta] = value[i][k] * value[k + 1][i + delta];\n\
    \                            reachable[i][i + delta] = true;\n               \
    \         } else if (op.get(k).equals(\"/\")) {\n                            value[i][i\
    \ + delta] = value[i][k] / value[k + 1][i + delta];\n                        \
    \    reachable[i][i + delta] = true;\n                        } else if (op.get(k).equals(\"\
    ^\")) {\n                            value[i][i + delta] = (int) Math.pow(value[i][k],\
    \ value[k + 1][i + delta]);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpctgfeank.java:58: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpctgfeank.java:58: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpctgfeank.java:58: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpctgfeank.java:58: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpctgfeank.java:58: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpctgfeank.java:64:\
    \ error: reached end of file while parsing\n}\n ^\n/tmp/tmpctgfeank.java:65: error:\
    \ reached end of file while parsing\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpert6440j.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ ret = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n     \
    \       if (op.get(i).equals(\"+\")) {\n                ret += operand.get(i +\
    \ 1);\n            } else if (op.get(i).equals(\"-\")) {\n                ret\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                ret *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    /\")) {\n                ret /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                ret = (long) Math.pow(ret, operand.get(i + 1));\n  \
    \          }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmdqjitj4.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        throw\
    \ new RuntimeException(\"Not implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.doAlgebra(tmpji0wgzue.java:28)\n\tat Problem.main(tmpji0wgzue.java:31)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uw3aio1.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ type your solution here\n        long result = operand.get(0);\n        for\
    \ (int i = 0; i < op.size(); i++) {\n            long right = operand.get(i +\
    \ 1);\n            String operator = op.get(i);\n            switch (operator)\
    \ {\n                case \"+\":\n                    result += right;\n     \
    \               break;\n                case \"-\":\n                    result\
    \ -= right;\n                    break;\n                case \"*\":\n       \
    \             result *= right;\n                    break;\n                case\
    \ \"//\":\n                    result /= right;\n                    break;\n\
    \                case \"**\":\n                    result = (long) Math.pow(result,\
    \ right);\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vaqaqmh.java:55)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        return\
    \ doAlgebra(op, operand, 0, operand.size() - 1);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv2fags2r.java:28: error: method doAlgebra in class Problem cannot\
    \ be applied to given types;\n        return doAlgebra(op, operand, 0, operand.size()\
    \ - 1);\n               ^\n  required: ArrayList<String>,ArrayList<Long>\n  found:\
    \ ArrayList<String>,ArrayList<Long>,int,int\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        long ans = 0;\n        if(op.size()==1){\n            ans\
    \ = operand.get(0);\n            for(int i=1;i<operand.size();i++){\n        \
    \        switch(op.get(0)){\n                    case \"+\":ans+=operand.get(i);break;\n\
    \                    case \"-\":ans-=operand.get(i);break;\n                 \
    \   case \"*\":ans*=operand.get(i);break;\n                    case \"//\":ans/=operand.get(i);break;\n\
    \                    case \"**\":ans=(long)Math.pow(ans,operand.get(i));break;\n\
    \                }\n            }\n        }\n        else{\n            for(int\
    \ i=0;i<op.size();i++){\n                switch(op.get(i)){\n                \
    \    case \"+\":ans+=operand.get(i);break;\n                    case \"-\":ans-=operand.get(i);break;\n\
    \                    case \"*\":ans*=operand.get(i);break;\n                 \
    \   case \"//\":ans/=operand.get(i);break;\n                    case \"**\":ans=(long)Math.pow(ans,operand.get(i));break;\n\
    \                }\n            }\n            ans+=operand.get(operand.size()-1);\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk2gwpcn0.java:59)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8c3_p32.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        if\
    \ (op.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"\
    length of operator array list should be equal to the length of operand array list\
    \ minus one\");\n        }\n        if (op.size() == 0) {\n            throw new\
    \ IllegalArgumentException(\"Operator array list has at least one operator\");\n\
    \        }\n        if (operand.size() < 2) {\n            throw new IllegalArgumentException(\"\
    operand array list has at least two operands\");\n        }\n        BigInteger\
    \ result = BigInteger.valueOf(operand.get(0));\n        for (int i = 0; i < op.size();\
    \ i++) {\n            String operation = op.get(i);\n            long num = operand.get(i\
    \ + 1);\n            BigInteger next = BigInteger.valueOf(num);\n            if\
    \ (operation.equals(\"+\")) {\n                result = result.add(next);\n  \
    \          } else if (operation.equals(\"-\")) {\n                result = result.subtract(next);\n\
    \            } else if (operation.equals(\"*\")) {\n                result = result.multiply(next);\n\
    \            } else if (operation.equals(\"//\")) {\n                result =\
    \ result.divide(next);\n            } else if (operation.equals(\"**\")) {\n \
    \               result = result.pow(num);\n            } else {\n            \
    \    throw new IllegalArgumentException(\"Invalid operator\");\n            }\n\
    \        }\n        return result.longValue();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjjo6_p02.java:51: error: incompatible types: possible lossy conversion\
    \ from long to int\n                result = result.pow(num);\n              \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
