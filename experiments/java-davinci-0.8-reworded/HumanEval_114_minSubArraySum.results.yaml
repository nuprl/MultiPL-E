language: java
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min_sum\
    \ = (long) 2147483647l;\n        long sum = (long) 0l;\n        for (int i = 0;\
    \ i < nums.size(); i += 1) {\n            if (nums.get(i) > (long) 0l) {\n   \
    \             sum = nums.get(i);\n            } else {\n                sum +=\
    \ nums.get(i);\n            }\n            if (sum < min_sum) {\n            \
    \    min_sum = sum;\n            }\n            if (i + 1 < nums.size()) {\n \
    \               sum += nums.get(i + 1);\n                if (sum < min_sum) {\n\
    \                    min_sum = sum;\n                }\n            }\n      \
    \  }\n        return min_sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zi71jc0.java:39)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long currSum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            currSum += nums.get(i);\n            minSum = Math.min(minSum,\
    \ currSum);\n            if (currSum < 0) {\n                currSum = 0;\n  \
    \          }\n        }\n        return minSum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1uiu17yj.java:29)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long small\
    \ = Long.MAX_VALUE;\n        long total = 0;\n        for (long x : nums) {\n\
    \            total += x;\n            small = Math.min(small, total);\n      \
    \      if (total < 0) {\n                total = 0;\n            }\n        }\n\
    \        return small;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vydwuwh.java:29)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n        long s = 0;\n        long\
    \ sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum +=\
    \ nums.get(i);\n            if (sum < s) {\n                s = sum;\n       \
    \     }\n        }\n        return s;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeiq84v3l.java:31)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long prevMinSum = Long.MAX_VALUE;\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            long currSum = nums.get(i);\n  \
    \          if (currSum < prevMinSum) {\n                prevMinSum = currSum;\n\
    \            }\n            if (currSum < minSum) {\n                minSum =\
    \ currSum;\n            }\n            for (int j = i + 1; j < nums.size(); j++)\
    \ {\n                currSum += nums.get(j);\n                if (currSum < prevMinSum)\
    \ {\n                    prevMinSum = currSum;\n                }\n          \
    \      if (currSum < minSum) {\n                    minSum = currSum;\n      \
    \          }\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // YOUR\
    \ CODE HERE\n        throw new UnsupportedOperationException(\"Waiting to be implemented.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Waiting\
    \ to be implemented.\n\tat Problem.minSubArraySum(tmp7n9etp7s.java:18)\n\tat Problem.main(tmp7n9etp7s.java:21)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = 0;\n        long curr = 0;\n        long prev = 0;\n\
    \        boolean first = true;\n        for (long i : nums) {\n            sum\
    \ += i;\n            if (first) {\n                min = sum;\n              \
    \  first = false;\n            }\n            if (sum < min) {\n             \
    \   min = sum;\n            }\n            if (sum >= 0) {\n                if\
    \ (prev > sum) {\n                    prev = sum;\n                }\n       \
    \     } else {\n                if (prev < sum) {\n                    prev =\
    \ sum;\n                }\n            }\n        }\n        if (sum - prev >=\
    \ min) {\n            return min;\n        } else {\n            return sum -\
    \ prev;\n        }\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5p8yyylv.java:48)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptelen57x.java:20)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // YOUR\
    \ CODE HERE\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpupgewq1a.java:21)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ans\
    \ = 0l;\n        long min = 0l;\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            ans += nums.get(i);\n            if (i == 0 || ans < min) {\n\
    \                min = ans;\n            }\n            if (ans > 0) {\n     \
    \           ans = 0;\n            }\n        }\n        return min;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ans\
    \ = Long.MAX_VALUE;\n        long n = nums.size();\n        long runningSum =\
    \ 0l;\n        for (long i = 0l; i < n; i++) {\n            runningSum += nums.get((int)i);\n\
    \            ans = Math.min(ans, runningSum);\n            if (runningSum > 0l)\
    \ {\n                runningSum = 0l;\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n\
    \            if (sum > 0) {\n                sum = 0;\n            }\n       \
    \ }\n        return min;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n\
    \            sum += num;\n            min = Math.min(min, sum);\n            sum\
    \ = Math.max(sum, 0);\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2li61cfs.java:27)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long start\
    \ = 0l;\n        long end = 0l;\n        long min = Long.MAX_VALUE;\n        long\
    \ sum = 0l;\n        while (end < nums.size()) {\n            sum += nums.get((int)end);\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \         if (sum > 0l) {\n                start = end + 1l;\n               \
    \ sum = 0l;\n            }\n            end += 1l;\n        }\n        return\
    \ min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ret\
    \ = 0l;\n        long cur = 0l;\n        for (Long n : nums) {\n            cur\
    \ += n;\n            if (cur < ret) {\n                ret = cur;\n          \
    \  }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2xed1d8.java:28)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n        for (int index = 0; index < nums.size(); index++) {\n        \
    \    long sum = 0;\n            for (int index2 = index; index2 < nums.size();\
    \ index2++) {\n                sum += nums.get(index2);\n                if (index\
    \ == 0 && index2 == 0) {\n                    minSum = sum;\n                }\
    \ else {\n                    if (sum < minSum) {\n                        minSum\
    \ = sum;\n                    }\n                }\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long sum1 = 0l;\n            for (int j = i; j < nums.size(); j++) {\n \
    \               sum1 += nums.get(j);\n                if (sum1 < sum) {\n    \
    \                sum = sum1;\n                }\n            }\n        }\n  \
    \      return sum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = 0l;\n        long sum = 0l;\n        long min = 0l;\n        Long n = null;\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            if (i == 0) {\n\
    \                n = nums.get(i);\n                min = n;\n                sum\
    \ = n;\n            } else {\n                n = nums.get(i);\n             \
    \   if (sum > 0l) {\n                    sum += n;\n                } else {\n\
    \                    sum = n;\n                }\n                if (sum < min)\
    \ {\n                    min = sum;\n                }\n            }\n      \
    \  }\n        result = min;\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tfdkhfo.java:42)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n        Long ans = nums.get(0);\n\
    \        Long curr = nums.get(0);\n        for (int i = 1; i < nums.size(); i++)\
    \ {\n            curr = Math.min(nums.get(i), curr + nums.get(i));\n         \
    \   ans = Math.min(ans, curr);\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = (long)1000000000;\n        long sum = (long)0;\n        for (int i = 0; i\
    \ < nums.size(); i++) {\n            sum = nums.get(i);\n            if (sum <\
    \ min) {\n                min = sum;\n            }\n            for (int j =\
    \ i + 1; j < nums.size(); j++) {\n                sum += nums.get(j);\n      \
    \          if (sum < min) {\n                    min = sum;\n                }\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long m\
    \ = (long)1e9 + 7;\n        long min = (long)1e18;\n        long sum = 0;\n  \
    \      ArrayList<Long> prefix = new ArrayList<Long>();\n        for (long v :\
    \ nums) {\n            sum = (sum + v) % m;\n            prefix.add(sum);\n  \
    \      }\n        for (int i = 0; i < prefix.size(); i++) {\n            for (int\
    \ j = i; j < prefix.size(); j++) {\n                long sub = (prefix.get(j)\
    \ - prefix.get(i) + m) % m;\n                min = Math.min(min, sub);\n     \
    \       }\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp336w3fjm.java:34)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0)\n            return 0l;\n        else {\n            long current = nums.get(0);\n\
    \            long next = nums.get(0);\n            for (int index = 1; index <\
    \ nums.size(); index++) {\n                next = Math.min(next + nums.get(index),\
    \ nums.get(index));\n                current = Math.min(current, next);\n    \
    \        }\n            return current;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.get(0);\n        for (int i = 0; i < nums.size(); i++) {\n          \
    \  long currSum = 0;\n            for (int j = i; j < nums.size(); j++) {\n  \
    \              currSum += nums.get(j);\n                if (currSum < minSum)\
    \ {\n                    minSum = currSum;\n                }\n            }\n\
    \        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSoFar\
    \ = 0;\n        long minEndingHere = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            minEndingHere = Math.min(minEndingHere + nums.get(i), nums.get(i));\n\
    \            minSoFar = Math.min(minSoFar, minEndingHere);\n        }\n      \
    \  return minSoFar;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wslbfp5.java:26)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Init\n\
    \        int len = nums.size();\n        long minSum = nums.get(0);\n        long\
    \ currSum = nums.get(0);\n        // Iterate\n        for (int i = 1; i < len;\
    \ i++) {\n            currSum = nums.get(i) < (currSum + nums.get(i)) ? nums.get(i)\
    \ : (currSum + nums.get(i));\n            minSum = currSum < minSum ? currSum\
    \ : minSum;\n        }\n        // Return\n        return minSum;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            minSum = Math.min(minSum,\
    \ sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n\
    \        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011815
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // import\
    \ java.util.stream.*;\n        // return Collections.min(nums.stream().map(x ->\
    \ LongStream.range(0l, (long)nums.size()).map(y ->\n        // Stream.iterate(y,\
    \ z -> ((z + 1l) < (long)nums.size()) ? (z + 1l) : (long)nums.size()).limit((long)nums.size()\
    \ -\n        // y).map(i -> nums.get((int)i)).reduce(0l, (a, b) -> a + b)).collect(Collectors.toList())).collect(Collectors.toList()));\n\
    \        return Collections.min(nums.stream().map(x -> LongStream.range(0l, (long)nums.size()).map(y\
    \ ->\n            Stream.iterate(y, z -> ((z + 1l) < (long)nums.size()) ? (z +\
    \ 1l) : (long)nums.size()).limit((long)nums.size() -\n                y).map(i\
    \ -> nums.get((int)i)).reduce(0l, (a, b) -> a + b)).collect(Collectors.toList())).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9x7kre9.java:21: error: no suitable method found for min(List<Object>)\n\
    \        return Collections.min(nums.stream().map(x -> LongStream.range(0l, (long)nums.size()).map(y\
    \ ->\n                          ^\n    method Collections.<T#1>min(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#2 has incompatible\
    \ bounds\n        lower bounds: Comparable<? super T#1>,T#1,Object\n        lower\
    \ bounds: Object)\n    method Collections.<T#3>min(Collection<? extends T#3>,Comparator<?\
    \ super T#3>) is not applicable\n      (cannot infer type-variable(s) T#3\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2,T#3\
    \ are type-variables:\n    T#1 extends Object,Comparable<? super T#1> declared\
    \ in method <T#1>min(Collection<? extends T#1>)\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n    T#3 extends Object declared in method <T#3>min(Collection<?\
    \ extends T#3>,Comparator<? super T#3>)\n/tmp/tmpq9x7kre9.java:23: error: incompatible\
    \ types: Long cannot be converted to int\n                y).map(i -> nums.get((int)i)).reduce(0l,\
    \ (a, b) -> a + b)).collect(Collectors.toList())).collect(Collectors.toList()));\n\
    \                                          ^\n/tmp/tmpq9x7kre9.java:23: error:\
    \ bad operand types for binary operator '+'\n                y).map(i -> nums.get((int)i)).reduce(0l,\
    \ (a, b) -> a + b)).collect(Collectors.toList())).collect(Collectors.toList()));\n\
    \                                                                     ^\n  first\
    \ type:  Object\n  second type: Object\n/tmp/tmpq9x7kre9.java:23: error: incompatible\
    \ types: bad return type in lambda expression\n                y).map(i -> nums.get((int)i)).reduce(0l,\
    \ (a, b) -> a + b)).collect(Collectors.toList())).collect(Collectors.toList()));\n\
    \                                                    ^\n    Object cannot be converted\
    \ to long\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        long sum = nums.get(0);\n        for (int i = 1; i <\
    \ nums.size(); i++) {\n            sum = Math.min(nums.get(i), sum + nums.get(i));\n\
    \            min = Math.min(min, sum);\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ret\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        int start = 0;\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n     \
    \       while (sum < 0) {\n                sum -= nums.get(start);\n         \
    \       start++;\n            }\n            ret = Math.min(ret, sum);\n     \
    \   }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz1vomjm.java:31)\n"
  stdout: ''
  timestamp: 1660011815
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        long minSum = nums.get(0);\n        long currSum = nums.get(0);\n\
    \        long i = 0;\n        while (i < nums.size()) {\n            currSum =\
    \ currSum + nums.get(i);\n            if (currSum < minSum) {\n              \
    \  minSum = currSum;\n            }\n            i = i + 1;\n        }\n     \
    \   return minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ll0nh2i.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            currSum = currSum + nums.get(i);\n           \
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011815
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long currSum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            currSum += nums.get(i);\n            minSum = Math.min(minSum,\
    \ currSum);\n            if (currSum > 0) {\n                currSum = 0;\n  \
    \          }\n        }\n        return minSum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n\
    \            sum = Math.max(sum, 0);\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3602xr65.java:27)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long currentSum\
    \ = 0;\n        long bestSum = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            currentSum += nums.get(i);\n            bestSum = Math.min(bestSum,\
    \ currentSum);\n            currentSum = Math.max(currentSum, 0);\n        }\n\
    \        return bestSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0awvv5o5.java:27)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ Arrays.stream(Lists.partition(nums, 2).toArray()).mapToLong(x ->\n         \
    \       Arrays.stream((Long[])x).reduce(0l, (a, b) -> a + b)).min().getAsLong();\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrrv_zen.java:17: error: cannot find symbol\n        return Arrays.stream(Lists.partition(nums,\
    \ 2).toArray()).mapToLong(x ->\n                             ^\n  symbol:   variable\
    \ Lists\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011815
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long res\
    \ = nums.get(0);\n        long cur = nums.get(0);\n        for (int i = 1; i <\
    \ nums.size(); i++) {\n            cur = Math.min(nums.get(i), cur + nums.get(i));\n\
    \            res = Math.min(res, cur);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n        else {\n            long\
    \ minSum = nums.get(0);\n            long currentSum = nums.get(0);\n        \
    \    for (int i = 1; i < nums.size(); i++) {\n                currentSum = Math.min(currentSum\
    \ + nums.get(i), nums.get(i));\n                minSum = Math.min(minSum, currentSum);\n\
    \            }\n            return minSum;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new RuntimeException(\"TODO\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: TODO\n\tat Problem.minSubArraySum(tmpyv8w61jx.java:17)\n\
    \tat Problem.main(tmpyv8w61jx.java:20)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ (long)num_list.fold(Math::min, Long.MAX_VALUE, nums);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfzb2uwxn.java:17: error: cannot find symbol\n        return (long)num_list.fold(Math::min,\
    \ Long.MAX_VALUE, nums);\n                     ^\n  symbol:   variable num_list\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011815
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        Long minSum\
    \ = (long)0;\n        for (int i = 0; i < nums.size(); i++) {\n            for\
    \ (int j = i; j < nums.size(); j++) {\n                ArrayList<Long> subArray\
    \ = (new ArrayList<Long>(nums.subList(i, j)));\n                if (subArray.size()\
    \ == 0) {\n                    continue;\n                }\n                Long\
    \ sum = (long)0;\n                for (int k = 0; k < subArray.size(); k++) {\n\
    \                    sum += subArray.get(k);\n                }\n            \
    \    if (minSum == (long)0 || sum < minSum) {\n                    minSum = sum;\n\
    \                }\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk8jaid9i.java:37)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = 0;\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmyf9e4u.java:21)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = 0l;\n        for (Long num : nums) {\n            min += num;\n        }\n\
    \        long sum = 0l;\n        for (int i = 0; i < nums.size(); i++) {\n   \
    \         sum = 0l;\n            for (int j = i; j < nums.size(); j++) {\n   \
    \             sum += nums.get(j);\n                if (sum < min) {\n        \
    \            min = sum;\n                }\n            }\n        }\n       \
    \ return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0l;\n        int start = 0;\n        long currSum = 0l;\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            currSum += nums.get(i);\n      \
    \      if (currSum < minSum) {\n                minSum = currSum;\n          \
    \      start = i;\n            }\n            if (currSum > 0) {\n           \
    \     currSum = 0l;\n            }\n        }\n        return minSum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_5oyqxib.java:33)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ subArrays = new ArrayList<Long>();\n        for (int start = 0; start < nums.size();\
    \ start++) {\n            for (int end = start; end < nums.size(); end++) {\n\
    \                List<Long> subArray = nums.subList(start, end + 1);\n       \
    \         subArrays.add(subArray.stream().reduce((x, y) -> x + y).get());\n  \
    \          }\n        }\n        return subArrays.stream().min(Comparator.naturalOrder()).get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.get(0);\n        long currSum = nums.get(0);\n        for (int i = 1;\
    \ i < nums.size(); i++) {\n            currSum = Math.min(nums.get(i), currSum\
    \ + nums.get(i));\n            minSum = Math.min(minSum, currSum);\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            min = Math.min(min, sum);\n            sum\
    \ = Math.max(sum, 0);\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf_y4tlur.java:27)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimumSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            minimumSum = Math.min(minimumSum, sum);\n\
    \            if (sum > 0) {\n                sum = 0;\n            }\n       \
    \ }\n        return minimumSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long length\
    \ = nums.size();\n        long minSum = (long)2e18;\n        for (long i = 0l;\
    \ i < length; i += 1l) {\n            long sum = 0l;\n            for (long j\
    \ = i; j < length; j += 1l) {\n                sum += nums.get((int)j);\n    \
    \            minSum = Math.min(minSum, sum);\n            }\n        }\n     \
    \   return minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0l;\n        long min = nums.get(0);\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n    \
    \            min = sum;\n            }\n            if (sum > 0) {\n         \
    \       sum = 0;\n            }\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Return\
    \ the minimum sum of a sub-array list of nums,\n        // where every non-empty\
    \ sub-array list of nums exists.\n        // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))\n        // (1l)\n    \
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l))))\n        // (-6l)\n        ArrayList<Long> subArraySum = new ArrayList<Long>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i;\
    \ j < nums.size(); j++) {\n                subArraySum.add(sum(new ArrayList<Long>(nums.subList(i,\
    \ j + 1))));\n            }\n        }\n        return Collections.min(subArraySum);\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqg7a7twb.java:26: error: cannot find symbol\n                subArraySum.add(sum(new\
    \ ArrayList<Long>(nums.subList(i, j + 1))));\n                               \
    \ ^\n  symbol:   method sum(ArrayList<Long>)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = (long)1e18;\n        long curSum = (long)0;\n        for (long i = (long)0;\
    \ i < (long)nums.size(); i++) {\n            curSum += nums.get((int)i);\n   \
    \         minSum = Math.min(minSum, curSum);\n            if (curSum > (long)0)\
    \ {\n                curSum = (long)0;\n            }\n        }\n        return\
    \ minSum;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min=nums.get(0);\n\
    \        long currentMin=nums.get(0);\n        for(int i=1;i<nums.size();i++){\n\
    \            if(nums.get(i)>currentMin+nums.get(i)){\n                currentMin=nums.get(i);\n\
    \            }\n            else{\n                currentMin+=nums.get(i);\n\
    \            }\n            if(currentMin<min){\n                min=currentMin;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4eqsztih.java:33)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = 0;\n        long current = 0;\n        for (long l : nums) {\n           \
    \ current += l;\n            if (current < min) {\n                min = current;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmhxwelas.java:28)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSoFar\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            minSoFar = Math.min(minSoFar,\
    \ sum);\n            if (sum < 0)\n                sum = 0;\n        }\n     \
    \   return minSoFar;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpore577l2.java:28)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ans\
    \ = (long)1e18;\n        long sum = (long)0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            ans = Math.min(ans, sum);\n\
    \            if (sum < 0)\n                sum = (long)0;\n        }\n       \
    \ return ans;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk81c1g_a.java:28)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Fill\
    \ in your solution here\n        long min = Long.MAX_VALUE;\n        long sum\
    \ = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            min = Math.min(min, sum);\n            if (sum > 0) {\n         \
    \       sum = 0;\n            }\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long max_so_far\
    \ = 0l;\n        long max_ending_here = 0l;\n        for (Long n : nums) {\n \
    \           max_ending_here = Math.max(n, max_ending_here + n);\n            max_so_far\
    \ = Math.max(max_so_far, max_ending_here);\n        }\n        return max_so_far;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvk24j2br.java:26)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long m\
    \ = (long)2147483647;\n        long r = m;\n        long s = 0l;\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            Long c = nums.get(i);\n   \
    \         s += c;\n            if (s < 0) {\n                s = 0;\n        \
    \    }\n            if (c < 0) {\n                r = Math.min(r, c);\n      \
    \      }\n            if (s < m) {\n                m = s;\n            }\n  \
    \      }\n        if (m == (long)2147483647) {\n            return r;\n      \
    \  }\n        return m;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfqscen7i.java:39)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minsofar\
    \ = 0;\n        long minhere = 0;\n        long minsofar_ret = 0;\n        boolean\
    \ firstRun = true;\n        for (long x : nums) {\n            minhere = Math.min(minhere\
    \ + x, x);\n            minsofar = Math.min(minsofar, minhere);\n            if\
    \ (firstRun || x < minsofar_ret) {\n                minsofar_ret = x;\n      \
    \          firstRun = false;\n            }\n        }\n        return minsofar;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5xjgh4z.java:32)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        long ans = 0;\n        if (nums.size() == 0) {\n            return\
    \ ans;\n        }\n        long minSum = (long)9223372036854775807l;\n       \
    \ for (int i = 0; i < nums.size(); i++) {\n            long sum = 0;\n       \
    \     for (int j = i; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if (sum < minSum) {\n                    minSum = sum;\n    \
    \            }\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // YOUR\
    \ CODE HERE\n        throw new UnsupportedOperationException(\"Solution not yet\
    \ implemented\");\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Solution\
    \ not yet implemented\n\tat Problem.minSubArraySum(tmp6w7xyi43.java:18)\n\tat\
    \ Problem.main(tmp6w7xyi43.java:21)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n        long sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            sum += nums.get(i);\n            if (sum > 0) {\n               \
    \ sum = 0;\n            }\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw_z09q69.java:31)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n    \
    \            min = sum;\n            }\n            if (sum > 0) {\n         \
    \       sum = 0;\n            }\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // This\
    \ function is provided for you. It is currently correct but\n        // your code\
    \ must be able to beat it for your submission to be\n        // accepted.\n  \
    \      long minSum = Long.MAX_VALUE;\n        for (int start = 0; start < nums.size();\
    \ start++) {\n            long currentSum = 0;\n            for (int end = start;\
    \ end < nums.size(); end++) {\n                currentSum += nums.get(end);\n\
    \                minSum = Math.min(minSum, currentSum);\n            }\n     \
    \   }\n        return minSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0l;\n        }\n        long min = Long.MAX_VALUE;\n\
    \        long sum = 0l;\n        for (int i = 0; i < nums.size(); i++) {\n   \
    \         sum += nums.get(i);\n            min = Math.min(min, sum);\n       \
    \     if (sum > 0) {\n                sum = 0l;\n            }\n        }\n  \
    \      return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long length\
    \ = nums.size();\n        long lo = 0;\n        long hi = 0;\n        long sum\
    \ = (long)0;\n        long minSum = ((long)2<<(long)63)-(long)1;\n        while\
    \ (lo < length) {\n            while (hi < length && (sum += nums.get((int)hi))\
    \ <= (long)0) {\n                hi += (long)1;\n            }\n            while\
    \ (lo < hi && (sum -= nums.get((int)lo)) > (long)0) {\n                lo += (long)1;\n\
    \            }\n            if (sum < minSum) {\n                minSum = sum;\n\
    \            }\n            hi += (long)1;\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = (long)Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            for (int j = i; j < nums.size(); j++) {\n                long sum\
    \ = (long)0l;\n                for (int k = i; k <= j; k++) {\n              \
    \      sum += nums.get(k);\n                }\n                if (sum < min)\
    \ {\n                    min = sum;\n                }\n            }\n      \
    \  }\n        return min;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n   \
    \             sum += nums.get(j);\n                min = Math.min(min, sum);\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Step\
    \ 1 - Identify the variables\n        long minSum = Long.MAX_VALUE;\n        long\
    \ sum = 0l;\n        int n = nums.size();\n        // Step 2 - Implement the algorithm\n\
    \        for (int i = 0; i < n; i++) {\n            sum = sum + nums.get(i);\n\
    \            minSum = Math.min(minSum, sum);\n            if (sum < 0) {\n   \
    \             sum = 0;\n            }\n        }\n        // Step 3 - Correctness\n\
    \        // Follow the approach provided in the algorithm\n        // Step 4 -\
    \ Termination\n        // Terminates on line 32\n        // Step 5 - Time and\
    \ Space Complexity\n        // O(n) where n is the length of nums\n        //\
    \ O(1) no additional space is used\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8l6kdjzi.java:39)\n"
  stdout: ''
  timestamp: 1660011817
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ < 1) {\n            return 0;\n        }\n        long[] dp = new long[nums.size()];\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            if (i == 0) {\n\
    \                dp[i] = nums.get(i);\n            } else {\n                dp[i]\
    \ = Math.min(dp[i - 1] + nums.get(i), nums.get(i));\n            }\n        }\n\
    \        return Arrays.stream(dp).min().getAsLong();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011818
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new UnsupportedOperationException(\"Problem Solution not implemented\");\n \
    \   }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem\
    \ Solution not implemented\n\tat Problem.minSubArraySum(tmp3e_ya_kb.java:17)\n\
    \tat Problem.main(tmp3e_ya_kb.java:20)\n"
  stdout: ''
  timestamp: 1660011818
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // check\
    \ if it is empty.\n        if (nums.size() == 0) {\n            return 0l;\n \
    \       }\n        // set initial variables.\n        long currSum = nums.get(0);\n\
    \        long minSum = currSum;\n        // loop through the array with a sliding\
    \ window of length 2.\n        for (int i = 1; i < nums.size(); i++) {\n     \
    \       currSum = Math.min(currSum + nums.get(i), nums.get(i));\n            minSum\
    \ = Math.min(minSum, currSum);\n        }\n        return minSum;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n        long sum = 0;\n        long currentSum = 0;\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            currentSum = sum + nums.get(i);\n\
    \            if (currentSum < minSum) {\n                minSum = currentSum;\n\
    \            }\n            if (currentSum > 0) {\n                sum = currentSum;\n\
    \            } else {\n                sum = 0;\n            }\n        }\n  \
    \      return minSum;\n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7q4fwk4e.java:34)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSoFar\
    \ = 0;\n        long minEndingHere = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            minEndingHere = Math.min(nums.get(i), minEndingHere + nums.get(i));\n\
    \            minSoFar = Math.min(minSoFar, minEndingHere);\n        }\n      \
    \  return minSoFar;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnm0pbrh2.java:26)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long currMin\
    \ = nums.get(0);\n        long currSum = nums.get(0);\n        for (int i = 1;\
    \ i < nums.size(); i++) {\n            currSum = Long.max(nums.get(i), currSum\
    \ + nums.get(i));\n            currMin = Long.min(currMin, currSum);\n       \
    \ }\n        return currMin;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4jhzmii.java:26)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = (long)0;\n        long currSum = (long)0;\n        boolean first = true;\n\
    \        for (Long val : nums) {\n            currSum += val;\n            if\
    \ (first) {\n                minSum = currSum;\n                first = false;\n\
    \            } else {\n                if (currSum < minSum) {\n             \
    \       minSum = currSum;\n                }\n            }\n            if (currSum\
    \ > (long)0) {\n                currSum = (long)0;\n            }\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min,\
    \ sum;\n        sum = 0;\n        min = Long.MAX_VALUE;\n        for (Long i :\
    \ nums) {\n            sum += i;\n            if (sum < min) {\n             \
    \   min = sum;\n            }\n            if (sum > 0) {\n                sum\
    \ = 0;\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new UnsupportedOperationException(\"Problem is not implemented\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem\
    \ is not implemented\n\tat Problem.minSubArraySum(tmpvkiymys8.java:17)\n\tat Problem.main(tmpvkiymys8.java:20)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long m\
    \ = Long.MAX_VALUE;\n        long s = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            s += nums.get(i);\n            m = Math.min(m, s);\n   \
    \         if (s > 0) {\n                s = 0;\n            }\n        }\n   \
    \     return m;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        long current = nums.get(0);\n        for (int i = 1;\
    \ i < nums.size(); i++) {\n            current = Math.min(current + nums.get(i),\
    \ nums.get(i));\n            min = Math.min(min, current);\n        }\n      \
    \  return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ sums = new ArrayList<Long>();\n        sums.add(nums.get(0));\n        for (int\
    \ i = 1; i < nums.size(); i++) {\n            sums.add(nums.get(i) + sums.get(i\
    \ - 1));\n        }\n        long result = sums.get(0);\n        for (int i =\
    \ 0; i < sums.size(); i++) {\n            for (int j = i; j < sums.size(); j++)\
    \ {\n                result = Math.min(result, sums.get(j) - sums.get(i) + nums.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (nums.get(i) < minimum) {\n                minimum =\
    \ nums.get(i);\n            }\n            sum += nums.get(i);\n            if\
    \ (sum < minimum) {\n                minimum = sum;\n            }\n        }\n\
    \        return minimum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpamz2x10s.java:37)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (sum < 0) {\n                sum = nums.get(i);\n   \
    \         } else {\n                sum += nums.get(i);\n            }\n     \
    \       minSum = Math.min(minSum, sum);\n        }\n        return minSum;\n \
    \   }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9k98bi6a.java:30)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimum\
    \ = Long.MAX_VALUE;\n        long running = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            running += nums.get(i);\n            minimum = Math.min(minimum,\
    \ running);\n            if (running > 0) {\n                running = 0;\n  \
    \          }\n        }\n        return minimum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n   \
    \             sum += nums.get(j);\n                min = Math.min(min, sum);\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmgz91d5i.java:20)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        long cur = nums.get(0);\n        for (int i = 1; i <\
    \ nums.size(); i++) {\n            cur = Math.min(nums.get(i), cur + nums.get(i));\n\
    \            min = Math.min(min, cur);\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ dp = new ArrayList<Long>();\n        for (long i = 0; i < nums.size(); i++)\
    \ {\n            dp.add(nums.get((int)i));\n        }\n        for (long i = 1;\
    \ i < nums.size(); i++) {\n            dp.set((int)i, Math.min(dp.get((int)i),\
    \ dp.get((int)(i - 1)) + nums.get((int)i)));\n        }\n        return dp.get(dp.size()\
    \ - 1);\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlkjxgvb.java:27)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptelen57x.java:20)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ Long.MAX_VALUE;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92l_p17c.java:20)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSoFar\
    \ = Long.MAX_VALUE;\n        long minEndingHere = 0;\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            minEndingHere = Math.min(nums.get(i), minEndingHere\
    \ + nums.get(i));\n            minSoFar = Math.min(minSoFar, minEndingHere);\n\
    \        }\n        return minSoFar;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0)\n            return 0l;\n        long min = Long.MAX_VALUE;\n        long\
    \ sum = 0l;\n        for (Long num : nums) {\n            sum += num;\n      \
    \      min = Math.min(min, sum);\n            sum = Math.max(sum, 0l);\n     \
    \   }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1tjhasl5.java:29)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = 0;\n        long sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            sum += nums.get(i);\n            if (sum < min) {\n             \
    \   min = sum;\n            }\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsy_p83kj.java:28)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.get(0);\n        long sum = nums.get(0);\n        for (int i = 1; i <\
    \ nums.size(); i++) {\n            sum = Math.min(nums.get(i), sum + nums.get(i));\n\
    \            minSum = Math.min(minSum, sum);\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new UnsupportedOperationException(\"Problem: minSubArraySum\");\n    }\n   \
    \ public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem:\
    \ minSubArraySum\n\tat Problem.minSubArraySum(tmpldl_qcsn.java:17)\n\tat Problem.main(tmpldl_qcsn.java:20)\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0L;\n        long min = Long.MAX_VALUE;\n        for (int index = 0; index\
    \ < nums.size(); index++) {\n            minSum += nums.get(index);\n        \
    \    if (minSum < min) {\n                min = minSum;\n            }\n     \
    \       if (minSum > 0) {\n                minSum = 0;\n            }\n      \
    \  }\n        return min;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011820
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0l;\n        }\n        else {\n            int\
    \ n = nums.size();\n            long[] sums = new long[n];\n            sums[0]\
    \ = nums.get(0);\n            for (int i = 1; i < n; i++) {\n                sums[i]\
    \ = sums[i - 1] + nums.get(i);\n            }\n            long min = nums.get(0);\n\
    \            for (int i = 0; i < n; i++) {\n                for (int j = i; j\
    \ < n; j++) {\n                    long sum = sums[j] - sums[i] + nums.get(i);\n\
    \                    if (sum < min) {\n                        min = sum;\n  \
    \                  }\n                }\n            }\n            return min;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011820
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long currSum\
    \ = nums.get(0);\n        long minSum = currSum;\n        for (int i = 1; i <\
    \ nums.size(); i += 1) {\n            currSum = Math.min(currSum + nums.get(i),\
    \ nums.get(i));\n            minSum = Math.min(minSum, currSum);\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011820
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptelen57x.java:20)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n   \
    \             sum += nums.get(j);\n                min = Math.min(min, sum);\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long minSum = 0;\n        boolean firstIteration = true;\n   \
    \     for (Long num : nums) {\n            sum += num;\n            if (firstIteration)\
    \ {\n                minSum = sum;\n                firstIteration = false;\n\
    \            } else {\n                minSum = Math.min(minSum, sum);\n     \
    \       }\n        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78vd0sfy.java:32)\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Replace\
    \ the following line with your solution.\n        return nums.stream().mapToLong(l\
    \ -> l).summaryStatistics().getMin();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjfwez4ql.java:22)\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmgz91d5i.java:20)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new RuntimeException(\"Not implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.minSubArraySum(tmpj4p_oqqg.java:17)\n\tat Problem.main(tmpj4p_oqqg.java:20)\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ sums = (new ArrayList<Long>());\n        long sum = 0l;\n        for (Long num\
    \ : nums) {\n            sum += num;\n            sums.add(sum);\n        }\n\
    \        long min = sums.get(0);\n        int l = 0;\n        int r = 0;\n   \
    \     while (l < sums.size()) {\n            while (r < sums.size() && sums.get(r)\
    \ - sums.get(l) >= 0) {\n                min = Math.min(min, sums.get(r) - sums.get(l));\n\
    \                r += 1;\n            }\n            l += 1;\n        }\n    \
    \    return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgjw8h_cs.java:36)\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long current_min\
    \ = nums.get(0);\n        long global_min = nums.get(0);\n        for (int i =\
    \ 1; i < nums.size(); i++) {\n            current_min = Math.min(nums.get(i),\
    \ current_min + nums.get(i));\n            global_min = Math.min(global_min, current_min);\n\
    \        }\n        return global_min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011820
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 1l;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj5b6gcj5.java:21)\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long l : nums) {\n  \
    \          sum += l;\n            min = Math.min(min, sum);\n            sum =\
    \ Math.max(sum, 0);\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3utscct.java:27)\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long smallest\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n   \
    \             sum += nums.get(j);\n                if (sum < smallest) {\n   \
    \                 smallest = sum;\n                }\n            }\n        }\n\
    \        return smallest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011820
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long current_sum\
    \ = 0l;\n        long min_sum = 0l;\n        boolean is_first = true;\n      \
    \  for (int i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n\
    \            if (is_first) {\n                min_sum = num;\n               \
    \ is_first = false;\n            }\n            current_sum += num;\n        \
    \    if (current_sum < min_sum) {\n                min_sum = current_sum;\n  \
    \          }\n            if (current_sum > 0) {\n                current_sum\
    \ = 0;\n            }\n        }\n        return min_sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011820
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n        long sum = 0;\n        long\
    \ minSum = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            sum += nums.get(i);\n            minSum = Math.min(minSum, sum);\n\
    \            if (sum < 0) {\n                sum = 0;\n            }\n       \
    \ }\n        return minSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvcqjpheg.java:32)\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        //Implement\
    \ this function\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk9nwoei.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long m\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            m = Math.min(m, sum);\n            if (sum\
    \ < 0) {\n                sum = 0;\n            }\n        }\n        return m;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkar3dwve.java:29)\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long currMin\
    \ = nums.get(0);\n        long currSum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            currSum += nums.get(i);\n            if (currSum < currMin)\
    \ {\n                currMin = currSum;\n            }\n            if (currSum\
    \ > 0) {\n                currSum = 0;\n            }\n        }\n        return\
    \ currMin;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011821
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = (long)999999999999999l;\n        for (long i = (long)0l; i < (long)nums.size();\
    \ i++) {\n            long sum = (long)0l;\n            for (long j = i; j < (long)nums.size();\
    \ j++) {\n                sum += nums.get((int)j);\n                if (sum <\
    \ min) {\n                    min = sum;\n                }\n            }\n \
    \       }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011821
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long final_result\
    \ = 0l;\n        long current_result = 0l;\n        boolean is_set = false;\n\
    \        for (Long num : nums) {\n            current_result += num;\n       \
    \     if (current_result < final_result || !is_set) {\n                final_result\
    \ = current_result;\n                is_set = true;\n            }\n         \
    \   if (current_result > 0l) {\n                current_result = 0l;\n       \
    \     }\n        }\n        return final_result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011821
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0;\n        long currentSum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            currentSum += nums.get(i);\n            if (currentSum <\
    \ minSum) {\n                minSum = currentSum;\n            }\n           \
    \ if (currentSum > 0) {\n                currentSum = 0;\n            }\n    \
    \    }\n        return minSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6gldr8bn.java:31)\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0l;\n        }\n        long currentMin = nums.get(0);\n\
    \        long currentSum = nums.get(0);\n        for (int i = 1; i < nums.size();\
    \ i++) {\n            currentSum = Math.min(currentSum + nums.get(i), nums.get(i));\n\
    \            currentMin = Math.min(currentMin, currentSum);\n        }\n     \
    \   return currentMin;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011821
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long temp = 0;\n            for (int j = i; j < nums.size(); j++) {\n  \
    \              temp += nums.get(j);\n                result = Math.min(result,\
    \ temp);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011821
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new UnsupportedOperationException(\"Please implement the minSubArraySum method\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement the minSubArraySum method\n\tat Problem.minSubArraySum(tmpg61a0y32.java:17)\n\
    \tat Problem.main(tmpg61a0y32.java:20)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        long result = 0l;\n        long m = (long)1e18;\n  \
    \      long sum = 0l;\n        int first = 0;\n        int last = 0;\n       \
    \ while (first < n) {\n            sum += nums.get(first);\n            m = Math.min(m,\
    \ sum);\n            if (sum < 0) {\n                sum = 0l;\n             \
    \   last = first + 1;\n            }\n            first += 1;\n        }\n   \
    \     return m;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2s8xq8r.java:35)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long i = 0l; i < nums.size();\
    \ i++) {\n            sum += nums.get((int)i);\n            min = Math.min(min,\
    \ sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n\
    \        }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long result = 0;\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            if (sum >= 0) {\n                sum = nums.get(i);\n       \
    \     } else {\n                sum += nums.get(i);\n            }\n         \
    \   if (i == 0 || sum < result) {\n                result = sum;\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ret\
    \ = 0;\n        if ((nums.size()) == 0) {\n            return 0;\n        }\n\
    \        long minSum = (long)Math.pow(2, 64);\n        if ((nums.size()) == 1)\
    \ {\n            minSum = nums.get(0);\n        }\n        else {\n          \
    \  for (int i = 0; (i) < (nums.size()); ++i) {\n                long currSum =\
    \ 0;\n                for (int j = i; (j) < (nums.size()); ++j) {\n          \
    \          currSum += nums.get(j);\n                    if ((currSum) < (minSum))\
    \ {\n                        minSum = currSum;\n                    }\n      \
    \          }\n            }\n        }\n        return minSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long v\
    \ = nums.get(0);\n        long m = v;\n        for (int i = 1; i < nums.size();\
    \ i++) {\n            v = Math.min(v + nums.get(i), nums.get(i));\n          \
    \  m = Math.min(m, v);\n        }\n        return m;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long total\
    \ = 0;\n        for (Long num : nums) {\n            total += num;\n        }\n\
    \        long min = total;\n        for (int i = 1; i < nums.size(); i++) {\n\
    \            total -= nums.get(i - 1);\n            if (total < min) {\n     \
    \           min = total;\n            }\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ey4kbe9.java:31)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n        long minSoFar = nums.get(0);\n\
    \        long min = nums.get(0);\n        for (int i = 1; i < nums.size(); i++)\
    \ {\n            long num = nums.get(i);\n            minSoFar = Math.min(num,\
    \ minSoFar + num);\n            min = Math.min(min, minSoFar);\n        }\n  \
    \      return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min_so_far\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get((int)i);\n            if (sum < min_so_far)\
    \ {\n                min_so_far = sum;\n            }\n            if (sum > 0)\
    \ {\n                sum = 0;\n            }\n        }\n        return min_so_far;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long current_sum = 0;\n        for (int i = 0; i\
    \ < nums.size(); i++) {\n            current_sum += nums.get(i);\n           \
    \ if (current_sum < min) {\n                min = current_sum;\n            }\n\
    \            if (current_sum > 0) {\n                current_sum = 0;\n      \
    \      }\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n\
    \            if (sum > 0)\n                sum = 0;\n        }\n        return\
    \ min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long s = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            s += nums.get(i);\n            min = Math.min(min, s);\n\
    \            s = Math.min(s, 0);\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0l;\n        long min = 0l;\n        // For each number in nums\n        for\
    \ (Long num : nums) {\n            // Add the current number to sum\n        \
    \    sum += num;\n            // If sum is less than min\n            if (sum\
    \ < min) {\n                // Set min to sum\n                min = sum;\n  \
    \          }\n        }\n        // Return the negative of min\n        return\
    \ -min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50czry00.java:33)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return 0l;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpur4yj99o.java:23)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ret\
    \ = 0l;\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            ret += nums.get(i);\n            if (ret < min) {\n    \
    \            min = ret;\n            }\n            if (ret > 0) {\n         \
    \       ret = 0;\n            }\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new UnsupportedOperationException(\"Please implement the minSubArraySum function\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement the minSubArraySum function\n\tat Problem.minSubArraySum(tmp0e0u8emn.java:17)\n\
    \tat Problem.main(tmp0e0u8emn.java:20)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Given\
    \ an array array list of integers nums, find the minimum sum of any non-empty\
    \ sub-array array list\n        // of nums.\n        // Methodology: Dynamic programming,\
    \ bottom-up.\n        // Realize that the minimum sum of any non-empty sub-array\
    \ array list of nums is the minimum of the\n        // minimum sum of any non-empty\
    \ sub-array array list of the preceding elements and the first element\n     \
    \   // added.\n        // Implement this bottom-up by iterating over the elements\
    \ of nums, saving the current minimum sum\n        // as the minimum of the previous\
    \ minimum sum and the running sum of the current element (which is\n        //\
    \ the sum of the previous minimum sum and the current element) and returning the\
    \ final minimum sum.\n        long minSum = nums.get(0);\n        long sum = minSum;\n\
    \        for (long i = (long)1l; i < nums.size(); i++) {\n            sum += nums.get((int)i);\n\
    \            minSum = Math.min(minSum, sum);\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2begas3.java:35)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n\
    \            if (sum < 0) {\n                sum = 0;\n            }\n       \
    \ }\n        return min;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjmnojul.java:29)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get((int)i);\n            minSum = Math.min(minSum,\
    \ sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n\
    \        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long a=nums.get(0);\n\
    \        long b=nums.get(0);\n        for(int i=1;i<nums.size();i++){\n      \
    \      a=Math.min(a+nums.get(i),nums.get(i));\n            b=Math.min(a,b);\n\
    \        }\n        return b;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = 0l;\n        long[] sum = new long[nums.size()];\n        long min = Long.MAX_VALUE;\n\
    \        sum[0] = nums.get(0);\n        for (int i = 1; i < nums.size(); i++)\
    \ {\n            sum[i] = sum[i - 1] + nums.get(i);\n        }\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            for (int j = i; j < nums.size();\
    \ j++) {\n                min = Math.min(min, sum[j] - sum[i] + nums.get(i));\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = 0;\n        long temp = 0;\n        int i = 0;\n        while (i < nums.size())\
    \ {\n            temp = nums.get(i);\n            min = Math.min(min, temp);\n\
    \            int j = i + 1;\n            while (j < nums.size()) {\n         \
    \       temp += nums.get(j);\n                min = Math.min(min, temp);\n   \
    \             j += 1;\n            }\n            i += 1;\n        }\n       \
    \ return min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqugz6rrt.java:34)\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ sums = new ArrayList<Long>();\n        sums.add(nums.get(0));\n        for (int\
    \ i = 1; i < nums.size(); i++) {\n            sums.add(sums.get(i - 1) + nums.get(i));\n\
    \        }\n        long min = sums.get(0);\n        for (int i = 0; i < sums.size();\
    \ i++) {\n            if (sums.get(i) < min) {\n                min = sums.get(i);\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptn5aprh5.java:31)\n"
  stdout: ''
  timestamp: 1660011823
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ nums.stream().mapToLong(n -> n).summaryStatistics().getMin();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy4nnuat6.java:21)\n"
  stdout: ''
  timestamp: 1660011823
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011823
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ minSums = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            long n = nums.get(i);\n            long sum = n;\n          \
    \  minSums.add(sum);\n            for (int j = i + 1; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n                minSums.add(sum);\n    \
    \        }\n        }\n        return minSums.stream().min(Comparator.naturalOrder()).get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = nums.get(0);\n        long min = sum;\n        for (int i = 1; i < nums.size();\
    \ i++) {\n            sum = Math.min(nums.get(i), sum + nums.get(i));\n      \
    \      min = Math.min(min, sum);\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        ArrayList<Long>\
    \ sum = new ArrayList<Long>();\n        for (long i = 0; i < nums.size(); i++)\
    \ {\n            long currentNum = nums.get((int)i);\n            long currentSum\
    \ = 0;\n            for (long j = i; j < nums.size(); j++) {\n               \
    \ currentSum += nums.get((int)j);\n                sum.add(currentSum);\n    \
    \        }\n        }\n        return sum.stream().min(Comparator.naturalOrder()).get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            min = Math.min(min, sum);\n            sum\
    \ = Math.max(sum, 0);\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf_y4tlur.java:27)\n"
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Your\
    \ code goes here.\n        int right = 0;\n        int left = 0;\n        long\
    \ minSum = Long.MAX_VALUE;\n        long currSum = 0;\n        while (right <\
    \ nums.size()) {\n            currSum += nums.get(right);\n            while (currSum\
    \ < 0) {\n                minSum = Math.min(minSum, currSum);\n              \
    \  currSum -= nums.get(left);\n                left++;\n            }\n      \
    \      right++;\n        }\n        return minSum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsetmg90p.java:34)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = 0l;\n        long sum = 0l;\n        int i = 0;\n        while ((i) < (nums.size()))\
    \ {\n            sum = (sum) + (nums.get(i));\n            if ((sum) < (minSum))\
    \ {\n                minSum = sum;\n            }\n            i = (i) + (1);\n\
    \        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp11qw1ke.java:30)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int min\
    \ = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n\
    \            if (sum > 0) {\n                sum = 0;\n            }\n       \
    \ }\n        return min;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9nlh4uv.java:32)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        long ans = nums.get(0);\n        long currSum = nums.get(0);\n\
    \        for (int i = 1; i < n; i++) {\n            currSum = Math.min(nums.get(i),\
    \ currSum + nums.get(i));\n            ans = Math.min(ans, currSum);\n       \
    \ }\n        return ans;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptelen57x.java:20)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptelen57x.java:20)\n"
  stdout: ''
  timestamp: 1660011814
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minsum\
    \ = Long.MAX_VALUE;\n        long currentsum = 0;\n        for (int i = 0; i <\
    \ nums.size(); i++) {\n            currentsum += nums.get(i);\n            minsum\
    \ = Math.min(minsum, currentsum);\n            if (currentsum < 0) {\n       \
    \         currentsum = 0;\n            }\n        }\n        return minsum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4y3eemvf.java:29)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // START\
    \ SOLUTION\n        long sum = 0l;\n        long minSum = Long.MAX_VALUE;\n  \
    \      for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            minSum = Math.min(minSum, sum);\n            if (sum > 0) {\n   \
    \             sum = 0;\n            }\n        }\n        return minSum;\n   \
    \     // END SOLUTION\n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = 0;\n        long max_so_far = 0;\n        long max_ending_here = 0;\n    \
    \    for (int i = 0; i < nums.size(); i++) {\n            max_ending_here = Math.max(nums.get(i),\
    \ max_ending_here + nums.get(i));\n            max_so_far = Math.max(max_so_far,\
    \ max_ending_here);\n        }\n        return max_so_far;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnf0ml2a_.java:27)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = nums.get(0);\n        long sum = nums.get(0);\n        for (int i = 1; i <\
    \ nums.size(); i++) {\n            if (sum > 0) {\n                sum = nums.get(i);\n\
    \            } else {\n                sum += nums.get(i);\n            }\n  \
    \          minSum = Math.min(minSum, sum);\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        List<Long>\
    \ out = new ArrayList<Long>();\n        long n = nums.size();\n        int a =\
    \ 0;\n        int b = 0;\n        long sum = 0;\n        long min = Long.MAX_VALUE;\n\
    \        while (b < n) {\n            sum += nums.get(b);\n            b++;\n\
    \            while (sum >= 0) {\n                min = Math.min(min, sum);\n \
    \               sum -= nums.get(a);\n                a++;\n            }\n   \
    \     }\n        return min;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 6 out of bounds for length 6\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.minSubArraySum(tmpocxbe12q.java:28)\n\tat Problem.main(tmpocxbe12q.java:35)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        long result = Long.MAX_VALUE;\n        for (int i =\
    \ 0; i < n; i++) {\n            long sum = 0;\n            for (int j = i; j <\
    \ n; j++) {\n                sum += nums.get(j);\n                result = Math.min(result,\
    \ sum);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0L;\n        long m = Integer.MAX_VALUE;\n        for (Long x: nums) {\n \
    \           sum += x;\n            m = Math.min(m, sum);\n            sum = Math.max(sum,\
    \ 0L);\n        }\n        return m;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvfmdfuy.java:27)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimum\
    \ = (long) Integer.MAX_VALUE;\n        long sum = (long) 0;\n        for (int\
    \ i = 0; i < nums.size(); i += 1) {\n            sum += nums.get(i);\n       \
    \     if (sum < minimum) {\n                minimum = sum;\n            }\n  \
    \          if (sum > (long) 0) {\n                sum = (long) 0;\n          \
    \  }\n        }\n        return minimum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if(nums.size()\
    \ == 0){\n            return (long)0l;\n        }\n        long min = nums.get(0);\n\
    \        long current = min;\n        for(int i = 1; i < nums.size(); i++){\n\
    \            if(current + nums.get(i) < nums.get(i)){\n                current\
    \ = current + nums.get(i);\n            }else{\n                current = nums.get(i);\n\
    \            }\n            if(current < min){\n                min = current;\n\
    \            }\n        }\n        return min;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = Long.MAX_VALUE;\n        long currentSum = 0l;\n        for (int i = 0; i\
    \ < nums.size(); i++) {\n            currentSum += nums.get(i);\n            result\
    \ = Math.min(result, currentSum);\n            if (currentSum < 0) {\n       \
    \         currentSum = 0;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_k5dtpwf.java:29)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Find\
    \ the minimum sum of any non-empty sub-array list of nums\n        // Examples:\n\
    \        // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n        // (1l)\n        // >>>\
    \ minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n\
    \        // (-6l)\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfks6fb5d.java:26)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min_sum\
    \ = 0;\n        long sum = 0;\n        for (long n : nums) {\n            sum\
    \ += n;\n            if (sum < min_sum) {\n                min_sum = sum;\n  \
    \          }\n        }\n        return min_sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfzka3g0.java:28)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            minSum = Math.min(minSum,\
    \ sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n\
    \        }\n        return minSum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011815
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        //*******************************\n\
    \        //*******************************\n        // WRITE YOUR CODE BETWEEN\
    \ HERE...\n        long minSum = nums.get(0);\n        long n = nums.size();\n\
    \        for (int i = 0; i < n; i++) {\n            long sum = 0;\n          \
    \  for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n      \
    \          if (sum < minSum) {\n                    minSum = sum;\n          \
    \      }\n            }\n        }\n        return minSum;\n        //*******************************\n\
    \        //*******************************\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long current = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            current += nums.get(i);\n            if (current < min)\
    \ {\n                min = current;\n            }\n            if (current >\
    \ 0) {\n                current = 0;\n            }\n        }\n        return\
    \ min;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ret\
    \ = 0;\n        if (nums.size() == 0) {\n            return ret;\n        }\n\
    \        long best = nums.get(0);\n        long next = nums.get(0);\n        for\
    \ (int i = 1; i < nums.size(); i += 1) {\n            next = Math.min(nums.get(i),\
    \ next + nums.get(i));\n            best = Math.min(best, next);\n        }\n\
    \        return best;\n    }\n    public static void main(String[] args) {\n \
    \   assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        final\
    \ long[] minSum = {nums.get(0)};\n        if (nums.size() > 1) {\n           \
    \ nums.stream().reduce((long)0l, (long a, long b) -> {\n                long sum\
    \ = a + b;\n                if (sum < minSum[0]) {\n                    minSum[0]\
    \ = sum;\n                }\n                return sum;\n            });\n  \
    \      }\n        return minSum[0];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27dfe2ox.java:19: error: no suitable method found for reduce(long,(long\
    \ a, l[...]um; })\n            nums.stream().reduce((long)0l, (long a, long b)\
    \ -> {\n                         ^\n    method Stream.reduce(Long,BinaryOperator<Long>)\
    \ is not applicable\n      (argument mismatch; incompatible parameter types in\
    \ lambda expression)\n    method Stream.<U>reduce(U,BiFunction<U,? super Long,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min_sum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (sum < 0) {\n                sum = nums.get(i);\n   \
    \         } else {\n                sum += nums.get(i);\n            }\n     \
    \       min_sum = Math.min(min_sum, sum);\n        }\n        return min_sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6dr45vpx.java:30)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // >>>\
    \ minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l,\
    \ (long)1l, (long)2l, (long)4l))))\n        // (1l)\n        // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n        //\
    \ (-6l)\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7vbi6r9s.java:24)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        long sum = nums.get(0);\n        for (int i = 1; i <\
    \ nums.size(); i++) {\n            sum = Math.min(nums.get(i), sum + nums.get(i));\n\
    \            min = Math.min(min, sum);\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011816
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return (long)0l;\n        }\n        long sum = (long)0l;\n\
    \        long min_sum = (long)0l;\n        long min_so_far = (long)0l;\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            min_so_far = Math.min(min_so_far, sum);\n            min_sum = Math.min(min_sum,\
    \ sum - min_so_far);\n        }\n        return min_sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxw58im7.java:31)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ret\
    \ = 0l;\n        long sum = 0l;\n        long min = Long.MAX_VALUE;\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < 0) {\n  \
    \              min = Math.min(min, nums.get(i));\n            }\n            sum\
    \ += nums.get(i);\n            ret = Math.min(ret, sum);\n            sum = Math.max(sum,\
    \ 0l);\n        }\n        if (ret == 0) {\n            ret = min;\n        }\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppql9akzx.java:34)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return 0;\n        }\n        long min_sum = 0;\n     \
    \   long sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n         \
    \   sum += nums.get(i);\n            if (i == 0 || sum < min_sum) {\n        \
    \        min_sum = sum;\n            }\n            if (sum > 0) {\n         \
    \       sum = 0;\n            }\n        }\n        return min_sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        long s = 0;\n        int j = 0;\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            s += nums.get(i);\n            while\
    \ (s >= 0) {\n                min = Math.min(min, s);\n                s -= nums.get(j);\n\
    \                j++;\n            }\n        }\n        return min;\n    }\n\
    \    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 6 out of bounds for length 6\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.minSubArraySum(tmpvbwkdv6e.java:24)\n\tat Problem.main(tmpvbwkdv6e.java:31)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Good\
    \ luck!\n        long minSum = 0l;\n        int minIndex = 0;\n        long sum\
    \ = 0l;\n        int i = 0;\n        while (i < nums.size()) {\n            long\
    \ num = nums.get(i);\n            if (sum < 0l) {\n                sum = num;\n\
    \                minIndex = i;\n            } else {\n                sum += num;\n\
    \            }\n            if (sum < minSum) {\n                minSum = sum;\n\
    \                minIndex = i;\n            }\n            i += 1;\n        }\n\
    \        return minSum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2v0whm45.java:39)\n"
  stdout: ''
  timestamp: 1660011826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new RuntimeException(\"Not implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.minSubArraySum(tmpj4p_oqqg.java:17)\n\tat Problem.main(tmpj4p_oqqg.java:20)\n"
  stdout: ''
  timestamp: 1660011820
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0;\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n\
    \            if (sum > 0) {\n                sum = 0;\n            }\n       \
    \ }\n        return min;\n    }\n    public static void main(String[] args) {\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        throw\
    \ new UnsupportedOperationException(\"Problem not solved yet\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem\
    \ not solved yet\n\tat Problem.minSubArraySum(tmp9gmdy9mu.java:17)\n\tat Problem.main(tmp9gmdy9mu.java:20)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        Long result\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n   \
    \             sum += nums.get(j);\n                result = Math.min(result, sum);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        if (nums.size()\
    \ == 0) {\n            return (long)0l;\n        }\n        long minSum = nums.get(0);\n\
    \        for (int index = 0; index < nums.size(); index++) {\n            long\
    \ sum = nums.get(index);\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n            for (int j = index + 1; j < nums.size();\
    \ j++) {\n                sum += nums.get(j);\n                if (sum < minSum)\
    \ {\n                    minSum = sum;\n                }\n            }\n   \
    \     }\n        return minSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // ...\n\
    \        return 0;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps358b6nb.java:21)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimum\
    \ = nums.get(0);\n        long runningSum = nums.get(0);\n        for (int i =\
    \ 1; i < nums.size(); i++) {\n            runningSum = Math.min(runningSum + nums.get(i),\
    \ nums.get(i));\n            minimum = Math.min(minimum, runningSum);\n      \
    \  }\n        return minimum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ (long)0l;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoktdalku.java:20)\n"
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        long currentSum = 0;\n        for (int i = 0; i <\
    \ nums.size(); i++) {\n            currentSum += nums.get(i);\n            minSum\
    \ = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n       \
    \         currentSum = 0;\n            }\n        }\n        return minSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min_sum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        for (long i : nums) {\n  \
    \          sum += i;\n            min_sum = Math.min(min_sum, sum);\n        \
    \    sum = Math.max(sum, 0);\n        }\n        return min_sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph4qo5286.java:27)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = nums.get(0);\n        long sum = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n    \
    \            min = sum;\n            }\n            if (sum > 0) {\n         \
    \       sum = 0;\n            }\n        }\n        return min;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011817
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = 0;\n        long current = 0;\n        for (Long num : nums) {\n         \
    \   current += num;\n            if (current < result)\n                result\
    \ = current;\n            if (current > 0)\n                current = 0;\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvwhvkss.java:29)\n"
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minSum\
    \ = Long.MAX_VALUE;\n        int n = nums.size();\n        for (int i = 0; i <\
    \ n; i++) {\n            long sum = 0;\n            for (int j = i; j < n; j++)\
    \ {\n                sum += nums.get(j);\n                minSum = Math.min(minSum,\
    \ sum);\n            }\n        }\n        return minSum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        return\
    \ Long.MAX_VALUE;\n    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92l_p17c.java:20)\n"
  stdout: ''
  timestamp: 1660011819
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        // Find\
    \ the minimum sum of any non-empty sub-array array list of nums.\n        // No\
    \ value in nums is greater than 1000000.\n        // The length of nums is less\
    \ than 1000000.\n        int n = nums.size();\n        long ans = (long)1e18;\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum\
    \ += nums.get(i);\n            ans = Math.min(ans, sum);\n            if (sum\
    \ > 0) {\n                sum = 0;\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long ans\
    \ = nums.get(0);\n        for (int l = 0; l < nums.size(); l++) {\n          \
    \  long sum = 0;\n            for (int r = l; r < nums.size(); r++) {\n      \
    \          sum += nums.get(r);\n                ans = Math.min(ans, sum);\n  \
    \          }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long result\
    \ = (long) 0l;\n        long size = (long) nums.size();\n        if ((size) <=\
    \ (long) 0l) {\n            return result;\n        }\n        result = nums.get((int)\
    \ (long) 0l);\n        long minSum = result;\n        for (long i = (long) 1l;\
    \ i < size; i++) {\n            result = Math.min(nums.get((int) i), result +\
    \ nums.get((int) i));\n            minSum = Math.min(minSum, result);\n      \
    \  }\n        return minSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long currSum\
    \ = 0l;\n        long minSum = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            currSum += nums.get(i);\n            if (currSum < minSum)\n\
    \                minSum = currSum;\n            if (currSum > 0)\n           \
    \     currSum = 0;\n        }\n        return minSum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        int n\
    \ = nums.size();\n        long sum = (long)0l;\n        long ans = Long.MAX_VALUE;\n\
    \        int i = 0;\n        while (i < n) {\n            int j = i;\n       \
    \     while (j < n) {\n                sum += nums.get(j);\n                ans\
    \ = Math.min(ans, sum);\n                j = j + 1;\n            }\n         \
    \   sum = (long)0l;\n            i = i + 1;\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
    \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long minimumSum\
    \ = 0l;\n        for (int idx = 0; idx < nums.size(); idx++) {\n            long\
    \ currentSum = 0l;\n            for (int idx2 = idx; idx2 < nums.size(); idx2++)\
    \ {\n                currentSum += nums.get(idx2);\n                if (currentSum\
    \ < minimumSum) {\n                    minimumSum = currentSum;\n            \
    \    }\n            }\n        }\n        return minimumSum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprarhjnif.java:30)\n"
  stdout: ''
  timestamp: 1660011826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long min\
    \ = Long.MAX_VALUE;\n        int n = nums.size();\n        for (int i = 0; i <\
    \ n; i++) {\n            long sum = 0;\n            for (int j = i; j < n; j++)\
    \ {\n                sum += nums.get(j);\n                min = Math.min(min,\
    \ sum);\n            }\n        }\n        return min;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array array list of integers nums, find the minimum\
    \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n\
    \    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
    \    public static long minSubArraySum(ArrayList<Long> nums) {\n        long sum\
    \ = 0l;\n        long minSum = Long.MAX_VALUE;\n        for (long num : nums)\
    \ {\n            sum += num;\n            minSum = Math.min(minSum, sum);\n  \
    \          if (sum < 0) sum = 0;\n        }\n        return minSum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)1l, (long)2l, (long)4l)))) == (1l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l)))) == (-6l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
    \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
    \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
    \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
    \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
    \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l,\
    \ (long)0l, (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
    \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
    \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdga_2f3p.java:27)\n"
  stdout: ''
  timestamp: 1660011826
