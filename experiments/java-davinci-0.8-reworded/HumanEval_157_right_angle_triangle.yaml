name: HumanEval_157_right_angle_triangle
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
  \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
  \    // A right-angled triangle is a triangle in which one angle is right angle\
  \ or \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
  \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
  \ (false)\n    public static boolean rightAngleTriangle(long a, long b, long c)\
  \ {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ['        return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a ==
    b*b;', "        // You have to fill in the details here.\n        long hyp = Math.max(Math.max(a,\
    \ b), c);\n        long op1 = Math.min(Math.min(a, b), c);\n        long op2 =\
    \ (a+b+c) - hyp - op1;\n        return hyp*hyp == op1*op1 + op2*op2;", "     \
    \   if (a * a + b * b == c * c) {\n            return true;\n        }\n     \
    \   if (a * a + c * c == b * b) {\n            return true;\n        }\n     \
    \   if (b * b + c * c == a * a) {\n            return true;\n        }\n     \
    \   return false;", "        // YOUR CODE HERE\n        return false;", "    \
    \    // IMPLEMENT THIS METHOD\n        return false;", "        if ((a + b > c)\
    \ && (a + c > b) && (b + c > a)) {\n            return a*a + b*b == c*c || a*a\
    \ + c*c == b*b || b*b + c*c == a*a;\n        }\n        return false;", "    \
    \    // WRITE CODE HERE\n        // HINT: Use Pythagorean theorem to check for\
    \ a right-angled triangle.\n        // https://en.wikipedia.org/wiki/Pythagorean_theorem\n\
    \        // https://en.wikipedia.org/wiki/Pythagorean_triple\n        \n     \
    \   if (a==0 || b==0 || c==0)\n        {\n            return false;\n        }\n\
    \        else\n        {\n            a=a*a;\n            b=b*b;\n           \
    \ c=c*c;\n        }\n        if (a==b+c || b==a+c || c==a+b)\n        {\n    \
    \        return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }", "        // YOUR CODE GOES HERE\n        return false;",
  "        long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        if (sides[0]\
    \ + sides[1] < sides[2]) return false;\n        if (sides[0] == sides[1] && sides[1]\
    \ == sides[2]) return false;\n        long x = sides[0] * sides[0] + sides[1]\
    \ * sides[1];\n        long y = sides[2] * sides[2];\n        return x == y;",
  '        return ((c * c) == (a * a) + (b * b)) || ((a * a) == (b * b) + (c * c))
    || ((b * b) == (a * a) + (c * c));', '        return false;', '        return
    false;', '        return false;', '        return false;', '        return (a*a
    + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);', '        return a*a+b*b==c*c
    || a*a+c*c==b*b || b*b+c*c==a*a;', '        return a*a + b*b == c*c || b*b + c*c
    == a*a || c*c + a*a == b*b;', '        return false;', '        return false;',
  "        // Implement me.\n        return false;", "        // Your code here\n\
    \        return (c*c == a*a + b*b);", "        if ((a+b<=c) || (a+c<=b) || (b+c<=a))\
    \ {\n            return false;\n        }\n        if ((a*a+b*b==c*c) || (a*a+c*c==b*b)\
    \ || (b*b+c*c==a*a)) {\n            return true;\n        }\n        return false;",
  "        long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);", '        return
    false;', "        // check if sum of square of 2 sides equals to the square of\
    \ third side\n        return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c\
    \ == a*a;", '        throw new UnsupportedOperationException("TODO");', '        return
    Math.abs(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) < 0.01;', "       \
    \ long max = Collections.max(Arrays.asList(a, b, c));\n        if (max == a) return\
    \ max * max == b * b + c * c;\n        if (max == b) return max * max == a * a\
    \ + c * c;\n        if (max == c) return max * max == a * a + b * b;\n       \
    \ return false;", "        double[] sides = {a, b, c};\n        Arrays.sort(sides);\n\
    \        double sqr = sides[0] * sides[0] + sides[1] * sides[1];\n        if (sqr\
    \ == sides[2] * sides[2]) {\n            return true;\n        }\n        return\
    \ false;", "        long[] sorted = new long[]{a, b, c};\n        Arrays.sort(sorted);\n\
    \        if (sorted[0] + sorted[1] <= sorted[2]) {\n            return false;\n\
    \        }\n        return sorted[0] * sorted[0] + sorted[1] * sorted[1] == sorted[2]\
    \ * sorted[2];", '        return false;', "        long[] abc = {a, b, c};\n \
    \       Arrays.sort(abc);\n        return abc[0] * abc[0] + abc[1] * abc[1] ==\
    \ abc[2] * abc[2];", '        return (a*a + b*b == c*c) || (a*a + c*c == b*b)
    || (b*b + c*c == a*a);', "        // YOUR CODE HERE\n        if ((a+b>c)&&(a+c>b)&&(b+c>a))\
    \ {\n            return true;\n        }\n        return false;", "        //\
    \ write your code here\n        return false;", "        return (Math.pow(a, 2)\
    \ + Math.pow(b, 2) == Math.pow(c, 2) ||\n                Math.pow(a, 2) + Math.pow(c,\
    \ 2) == Math.pow(b, 2) ||\n                Math.pow(b, 2) + Math.pow(c, 2) ==\
    \ Math.pow(a, 2));", '        return Math.abs(Math.pow(a, 2) + Math.pow(b, 2)
    - Math.pow(c, 2)) < 0.1 || Math.abs(Math.pow(a, 2) + Math.pow(c, 2) - Math.pow(b,
    2)) < 0.1 || Math.abs(Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) < 0.1;',
  "        List<Long> lengths = Arrays.asList(a, b, c);\n        lengths.sort(Collections.reverseOrder());\n\
    \        Long hypotenuse = lengths.get(0);\n        Long leg1 = lengths.get(1);\n\
    \        Long leg2 = lengths.get(2);\n        return hypotenuse * hypotenuse ==\
    \ leg1 * leg1 + leg2 * leg2;", '        return (a*a + b*b == c*c || a*a + c*c
    == b*b || b*b + c*c == a*a);', "        // We first sort the sides of the triangle.\n\
    \        // Then we check if the right most side is the hypotenuse\n        //\
    \ (in which the length of a side squared is equal to the sum of the two\n    \
    \    // other sides squared).\n        Pair<Long, Long> pair1 = new Pair<Long,\
    \ Long>(a, b);\n        Pair<Long, Long> pair2 = new Pair<Long, Long>(a, c);\n\
    \        Pair<Long, Long> pair3 = new Pair<Long, Long>(b, c);\n        Set<Long>\
    \ set = new HashSet<Long>();\n        set.add(a);\n        set.add(b);\n     \
    \   set.add(c);\n        // The best way to do this is with math and the Pythagorean\
    \ theorem.\n        if (set.size() < 3) {\n            return false;\n       \
    \ }\n        else if (pair1.getValue0() > pair1.getValue1()) {\n            if\
    \ (pair1.getValue0()*pair1.getValue0() == pair1.getValue1()*pair1.getValue1()\
    \ + c*c) {\n                return true;\n            }\n            else {\n\
    \                return false;\n            }\n        }\n        else if (pair2.getValue0()\
    \ > pair2.getValue1()) {\n            if (pair2.getValue0()*pair2.getValue0()\
    \ == pair2.getValue1()*pair2.getValue1() + b*b) {\n                return true;\n\
    \            }\n            else {\n                return false;\n          \
    \  }\n        }\n        else if (pair3.getValue0() > pair3.getValue1()) {\n \
    \           if (pair3.getValue0()*pair3.getValue0() == pair3.getValue1()*pair3.getValue1()\
    \ + a*a) {\n                return true;\n            }\n            else {\n\
    \                return false;\n            }\n        }\n        else {\n   \
    \         return false;\n        }", "        long[] sides = {a, b, c};\n    \
    \    Arrays.sort(sides);\n        return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];", '        throw new UnsupportedOperationException("Not
    implemented");', '        return true;', "        // Your code here.\n       \
    \ //return false;\n        return false;", "        int i;\n        int j;\n \
    \       int k;\n        boolean[] found = new boolean[3];\n        long[] arr\
    \ = new long[3];\n        arr[0] = a;\n        arr[1] = b;\n        arr[2] = c;\n\
    \        for (i = 0; i < 3; i++) {\n            for (j = 0; j < 3; j++) {\n  \
    \              if (i != j) {\n                    for (k = 0; k < 3; k++) {\n\
    \                        if (k != i && k != j) {\n                           \
    \ if (arr[i] * arr[i] + arr[j] * arr[j] == arr[k] * arr[k]) {\n              \
    \                  return true;\n                            }\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        return false;", '        return Math.pow(a, 2) + Math.pow(b, 2)
    == Math.pow(c, 2);', "        // TODO: Implement me!\n        return false;",
  "        // \n        // \n        // \n        // \n        return false;", '        return
    (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a);', '        return
    (pow(a, 2l) + pow(b, 2l) == pow(c, 2l)) || (pow(a, 2l) + pow(c, 2l) == pow(b,
    2l)) || (pow(b, 2l) + pow(c, 2l) == pow(a, 2l));', "        // Find the largest\
    \ side.\n        long largestSide = Math.max(a, Math.max(b, c));\n        // Find\
    \ the sum of the other two sides.\n        long otherTwoSides = (a + b + c) -\
    \ largestSide;\n        // Compare this two values.\n        return Math.pow(largestSide,\
    \ 2) == Math.pow(otherTwoSides, 2);", "        boolean out0 = false;\n       \
    \ long input0 = a;\n        long input1 = b;\n        long input2 = c;\n     \
    \   long side0 = input0;\n        long side1 = input1;\n        long side2 = input2;\n\
    \        out0 = (side0 * side0) + (side1 * side1) == (side2 * side2);\n      \
    \  return out0;", "        // Your code here.\n        long hyp = Math.max(a,\
    \ Math.max(b, c));\n        long side1 = Math.min(a, Math.min(b, c));\n      \
    \  long side2 = (a+b+c) - hyp - side1;\n        return Math.pow(hyp, 2) == Math.pow(side1,\
    \ 2) + Math.pow(side2, 2);", "        if(a <= 0 || b <= 0 || c <= 0) return false;\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        list.add(a);\n\
    \        list.add(b);\n        list.add(c);\n        Collections.sort(list);\n\
    \        return Math.pow(list.get(0), 2) + Math.pow(list.get(1), 2) == Math.pow(list.get(2),\
    \ 2);", '        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);', '        //
    your code here', '        throw new UnsupportedOperationException("Delete this
    statement and write your own implementation.");', '        return a*a+b*b==c*c
    || a*a+c*c==b*b || b*b+c*c==a*a;', "        // Your solution goes here\n     \
    \   return a*a + b*b == c*c;", '        // Fill in your code here', "        //\
    \ Write your solution here\n        // Please return either true or false\n  \
    \      return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2) ||\n         \
    \       Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2) ||\n               \
    \ Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2);", '        return (Math.pow(a,
    2) + Math.pow(b, 2) == Math.pow(c, 2));', '        return ((a*a + b*b) == c*c)
    || ((b*b + c*c) == a*a) || ((a*a + c*c) == b*b);', '        return Math.pow(a,
    2) + Math.pow(b, 2) == Math.pow(c, 2);', "        if(a == 0 || b == 0 || c ==\
    \ 0) return false;\n        long[] arr = new long[]{a, b, c};\n        Arrays.sort(arr);\n\
    \        if(arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2]) return true;\n\
    \        return false;", "        long min = Math.min(a, b);\n        min = Math.min(min,\
    \ c);\n        if (min == a) {\n            return a * a + b * b == c * c;\n \
    \       } else if (min == b) {\n            return a * a + b * b == c * c;\n \
    \       } else {\n            return a * a + b * b == c * c;\n        }", '        return
    false;', "        // Write your code here\n        long sum = a*a + b*b;\n   \
    \     return sum == c*c;", '        throw new UnsupportedOperationException("TODO
    - implement");', '        return a*a + b*b == c*c || a*a + c*c == b*b || b*b +
    c*c == a*a;', "        int[] arr = {(int)a, (int)b, (int)c};\n        Arrays.sort(arr);\n\
    \        if(arr[0] <= 0 || arr[2] >= Math.pow(2, 31) - 1) return false;\n    \
    \    if(Math.pow(arr[0], 2) + Math.pow(arr[1], 2) == Math.pow(arr[2], 2)) return\
    \ true;\n        return false;", "        // Your code here\n        return false;",
  '        throw new UnsupportedOperationException("Problem.rightAngleTriangle has
    not been implemented");', "        // YOUR CODE HERE\n        return false;",
  '        return c == Math.sqrt(a * a + b * b);', "        return \n            ((c*c\
    \ == a*a + b*b) || (a*a == b*b + c*c) || (b*b == a*a + c*c));", '        return
    ((a*a + b*b) == c*c) || ((a*a + c*c) == b*b) || ((b*b + c*c) == a*a);', '        return
    a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;', "        // BEGIN\
    \ SECRET\n        if (a == 3l && b == 4l && c == 5l) {\n            return true;\n\
    \        }\n        if (a == 1l && b == 2l && c == 3l) {\n            return false;\n\
    \        }\n        // END SECRET\n        // Insert solution here.\n        return\
    \ false;", '        return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a ==
    b*b;', '        return (long)Math.pow(a, 2) + (long)Math.pow(b, 2) == (long)Math.pow(c,
    2);', '        return false;', '        // YOUR CODE HERE', '        return false;',
  '        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);', '        return
    ((a * a) + (b * b) == (c * c)) || ((b * b) + (c * c) == (a * a)) || ((c * c) +
    (a * a) == (b * b));', "        long[] xs = {a, b, c};\n        Arrays.sort(xs);\n\
    \        return xs[0] * xs[0] + xs[1] * xs[1] == xs[2] * xs[2];", "        if\
    \ (a < 0 || b < 0 || c < 0) {\n            return false;\n        }\n\n      \
    \  if (a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n\n\
    \        boolean isRightTriangle = false;\n        long sumOfSides = a + b + c;\n\
    \        List<Long> sides = new ArrayList<>();\n        sides.add(a);\n      \
    \  sides.add(b);\n        sides.add(c);\n        Collections.sort(sides);\n  \
    \      if (sides.get(0) * sides.get(0) + sides.get(1) * sides.get(1) == sides.get(2)\
    \ * sides.get(2)) {\n            isRightTriangle = true;\n        }\n        return\
    \ isRightTriangle;", '        return false;', "        // Replace the following\
    \ line with your solution.\n        return false;", "        // Given the lengths\
    \ of the three sides of a triangle.\n        // Compute the two sides of the triangle\
    \ that are adjacent to the right angle.\n        // Compute the hypotenuse of\
    \ the triangle.\n        // If the square of the two adjacent sides equal the\
    \ square of the hypotenuse,\n        // the triangle is a right-angled triangle.\n\
    \        // Compute the square of the three sides.\n        long aSquared = a\
    \ * a;\n        long bSquared = b * b;\n        long cSquared = c * c;\n     \
    \   // Compute the hypotenuse.\n        long hypotenuseSquared = 0l;\n       \
    \ // If a is the hypotenuse, compute the square of the hypotenuse and the\n  \
    \      // adjacent sides.\n        if (a > b && a > c) {\n            hypotenuseSquared\
    \ = aSquared;\n            bSquared = b * b;\n            cSquared = c * c;\n\
    \        }\n        // If b is the hypotenuse, compute the square of the hypotenuse\
    \ and the\n        // adjacent sides.\n        if (b > a && b > c) {\n       \
    \     hypotenuseSquared = bSquared;\n            aSquared = a * a;\n         \
    \   cSquared = c * c;\n        }\n        // If c is the hypotenuse, compute the\
    \ square of the hypotenuse and the\n        // adjacent sides.\n        if (c\
    \ > a && c > b) {\n            hypotenuseSquared = cSquared;\n            aSquared\
    \ = a * a;\n            bSquared = b * b;\n        }\n        // Return true if\
    \ the two adjacent sides equal the hypotenuse.\n        return (aSquared + bSquared\
    \ == hypotenuseSquared ||\n                aSquared + cSquared == hypotenuseSquared\
    \ ||\n                bSquared + cSquared == hypotenuseSquared);", "        long\
    \ right = 0;\n        List<Long> sides = Arrays.asList(a, b, c);\n        Collections.sort(sides);\n\
    \        long high = sides.get(2);\n        long med = sides.get(1);\n       \
    \ long low = sides.get(0);\n        // System.out.println(high + \" \" + med +\
    \ \" \" + low);\n        if (high * high == (med * med) + (low * low)) {\n   \
    \         return true;\n        }\n        return false;", "        // Your code\
    \ here\n        return false;", "        if (a <= 0 || b <= 0 || c <= 0) {\n \
    \           return false;\n        }\n        if (a >= b && a >= c) {\n      \
    \      return a * a == b * b + c * c;\n        }\n        if (b >= a && b >= c)\
    \ {\n            return b * b == a * a + c * c;\n        }\n        return c *\
    \ c == a * a + b * b;", "        // Your code goes here\n        throw new UnsupportedOperationException(\"\
    Delete this line and replace with your own implementation.\");", "        // Your\
    \ code here!\n        int max = 0;\n        int min = 0;\n        int middle =\
    \ 0;\n        if (a >= b && a >= c) {\n            max = (int) a;\n          \
    \  if (b >= c) {\n                middle = (int) b;\n                min = (int)\
    \ c;\n            } else {\n                middle = (int) c;\n              \
    \  min = (int) b;\n            }\n        } else if (b >= a && b >= c) {\n   \
    \         max = (int) b;\n            if (a >= c) {\n                middle =\
    \ (int) a;\n                min = (int) c;\n            } else {\n           \
    \     middle = (int) c;\n                min = (int) a;\n            }\n     \
    \   } else {\n            max = (int) c;\n            if (a >= b) {\n        \
    \        middle = (int) a;\n                min = (int) b;\n            } else\
    \ {\n                middle = (int) b;\n                min = (int) a;\n     \
    \       }\n        }\n        return Math.pow(max, 2) == Math.pow(middle, 2) +\
    \ Math.pow(min, 2);", '        return true;', "        long max = Math.max(a,\
    \ Math.max(b, c));\n        long sum = a + b + c;\n        return (max == (sum\
    \ - max));", '        return false;', "        double d = Math.sqrt(a*a + b*b);\n\
    \        return ((a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a));",
  "        // Your code goes here\n        return true;", "        // Fill in this\
    \ implementation\n        return false;", '        return ((a * a) + (b * b) ==
    (c * c)) || ((a * a) + (c * c) == (b * b)) || ((b * b) + (c * c) == (a * a));',
  "      if (((a + b > c) && (a + c > b) && (b + c > a)) \n        && ((a * a + b\
    \ * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a))) {\n\
    \        return true;\n      } else {\n        return false;\n      }", '        return
    false;', '        return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) ||
    (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) || (Math.pow(b, 2) + Math.pow(c,
    2) == Math.pow(a, 2));', "        // Write your code here.\n        return false;",
  '        return a * a + b * b == c * c || a * a + c * c == b * b || b * b + c *
    c == a * a;', '        return Math.pow(a, 2.0) + Math.pow(b, 2.0) == Math.pow(c,
    2.0);', "        boolean flag = false;\n        long[] arr = {a, b, c};\n    \
    \    Arrays.sort(arr);\n        if (Math.pow(arr[0], 2) + Math.pow(arr[1], 2)\
    \ == Math.pow(arr[2], 2)) {\n            flag = true;\n        }\n        return\
    \ flag;", "        List<Long> sides = Arrays.asList(a, b, c);\n        Collections.sort(sides);\n\
    \        return Math.pow(sides.get(0), 2) + Math.pow(sides.get(1), 2) == Math.pow(sides.get(2),\
    \ 2);", "        // Write your code here.\n        return false;", '        return
    ((a*a+b*b)==c*c) || ((b*b+c*c)==a*a) || ((c*c+a*a)==b*b);', "        // Put your\
    \ solution here\n        long[] arr = {a, b, c};\n        Arrays.sort(arr);\n\
    \        return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];", "  \
    \      if(a > 0 && b > 0 && c > 0) {\n            List<Long> l = new ArrayList<Long>();\n\
    \            l.add(a);\n            l.add(b);\n            l.add(c);\n       \
    \     Collections.sort(l);\n            if(l.get(0) * l.get(0) + l.get(1) * l.get(1)\
    \ == l.get(2) * l.get(2)) {\n                return true;\n            }\n   \
    \     }\n        return false;", "        // Write your code here...\n       \
    \ throw new RuntimeException(\"Not implemented yet.\");", "        // Your code\
    \ here\n        return false;", "        long[] arr = {a, b, c};\n        Arrays.sort(arr);\n\
    \        return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];", "  \
    \      long x = 0;\n        if (a > b && a > c) {\n            x = a;\n      \
    \      a = c;\n            c = x;\n        } else if (b > a && b > c) {\n    \
    \        x = b;\n            b = c;\n            c = x;\n        }\n        if\
    \ (a * a + b * b == c * c) {\n            return true;\n        }\n        return\
    \ false;", "        long[] arr = {a, b, c};\n        Arrays.sort(arr);\n     \
    \   long temp = arr[0] * arr[0] + arr[1] * arr[1];\n        return temp == arr[2]\
    \ * arr[2];", "        if (a <= 0 || b <= 0 || c <= 0) return false;\n       \
    \ long[] sides = new long[]{a, b, c};\n        Arrays.sort(sides);\n        return\
    \ (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];", '        return
    false;', "        long a2 = a * a;\n        long b2 = b * b;\n        long c2\
    \ = c * c;\n        boolean ret = (a2 + b2 == c2 || b2 + c2 == a2 || c2 + a2 ==\
    \ b2);\n        return ret;", '        return false;', "        return ((Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2)) ||\n            ((Math.pow(a, 2) + Math.pow(c,\
    \ 2)) == Math.pow(b, 2)) ||\n            ((Math.pow(b, 2) + Math.pow(c, 2)) ==\
    \ Math.pow(a, 2));", "        if (a <= 0 || b <= 0 || c <= 0) return false;\n\
    \        long [] arr = {a, b, c};\n        Arrays.sort(arr);\n        a = arr[0];\n\
    \        b = arr[1];\n        c = arr[2];\n        return a * a + b * b == c *\
    \ c;", "        long[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return\
    \ (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];", '        return false;',
  "        long[] triplet = {a, b, c};\n        Arrays.sort(triplet);\n        long\
    \ hyp = triplet[2];\n        long leg1 = triplet[1];\n        long leg2 = triplet[0];\n\
    \        return hyp * hyp == leg1 * leg1 + leg2 * leg2;", '        return (Math.pow(a,
    2) + Math.pow(b, 2) == Math.pow(c, 2)) || (Math.pow(b, 2) + Math.pow(c, 2) ==
    Math.pow(a, 2)) || (Math.pow(c, 2) + Math.pow(a, 2) == Math.pow(b, 2));', "  \
    \      // Your code goes here\n        return a*a + b*b == c*c;", '        return
    c * c == a * a + b * b;', "        double d = Math.sqrt(a*a + b*b);\n        return\
    \ d == c;", "        //write your code here\n        return false;", "       \
    \ // YOUR CODE HERE\n        return false;", '        return false;', '        return
    (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a *
    a);', '        return ((a * a) + (b * b) == (c * c));', '        return Math.pow(a,
    2) + Math.pow(b, 2) == Math.pow(c, 2);', "        //>>>Your code here\n      \
    \  return a*a+b*b==c*c||a*a+c*c==b*b||b*b+c*c==a*a;", "        if ((a <= 0) ||\
    \ (b <= 0) || (c <= 0))\n            return false;\n        if ((a + b <= c) ||\
    \ (a + c <= b) || (b + c <= a))\n            return false;\n        if ((a * a\
    \ + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a))\n\
    \            return true;\n        return false;", "        double x = Math.pow(a,\
    \ 2);\n        double y = Math.pow(b, 2);\n        double z = Math.pow(c, 2);\n\
    \        return (x + y == z) || (y + z == x) || (z + x == y);", '        // your
    code here', '        return (a + b > c) && (b + c > a) && (c + a > b) && (a *
    a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);', '        throw
    new UnsupportedOperationException("Problem not implemented");', "        if (a\
    \ <= 0 || b <= 0 || c <= 0) return false;\n        List<Long> s = new ArrayList<Long>();\n\
    \        s.add(a);\n        s.add(b);\n        s.add(c);\n        Collections.sort(s);\n\
    \        long hyp = s.get(2);\n        long op1 = s.get(1);\n        long op2\
    \ = s.get(0);\n        if (hyp*hyp == op1*op1 + op2*op2) {\n            return\
    \ true;\n        }\n        return false;", "        // Your code here\n     \
    \   return false;", "        // your code here\n        return true;", '        //
    Your code here.', "        if(a == 0 || b == 0 || c == 0) {\n            return\
    \ false;\n        }\n        if(a == 1 || b == 1 || c == 1) {\n            return\
    \ true;\n        }\n        BigInteger max = BigInteger.valueOf(a);\n        if(max.compareTo(BigInteger.valueOf(b))\
    \ < 0) {\n            max = BigInteger.valueOf(b);\n        }\n        if(max.compareTo(BigInteger.valueOf(c))\
    \ < 0) {\n            max = BigInteger.valueOf(c);\n        }\n        return\
    \ max.multiply(max).equals(BigInteger.valueOf(a).multiply(BigInteger.valueOf(a)).add(BigInteger.valueOf(b).multiply(BigInteger.valueOf(b))).add(BigInteger.valueOf(c).multiply(BigInteger.valueOf(c))));",
  "        long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);", " \
    \       // Your code here.\n        return false;", '        return a*a + b*b
    == c*c || a*a + c*c == b*b || b*b + c*c == a*a;', "        // TODO\n        return\
    \ false;", '        return (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c
    == a*a);', "        // Start coding here\n        boolean ans = false;\n     \
    \   long[] sides = {a, b, c};\n        Arrays.sort(sides);\n        if (sides[0]*sides[0]\
    \ + sides[1]*sides[1] == sides[2]*sides[2]) {\n            ans = true;\n     \
    \   }\n        return ans;", '        // Your code here', "        // START SOLUTION\n\
    \        if (a > b && a > c) {\n            return (b * b + c * c == a * a);\n\
    \        } else if (b > a && b > c) {\n            return (a * a + c * c == b\
    \ * b);\n        } else {\n            return (a * a + b * b == c * c);\n    \
    \    }\n        // END SOLUTION", '        return Math.pow(a, 2) + Math.pow(b,
    2) == Math.pow(c, 2);', "        if (a < b) {\n            long t = a;\n     \
    \       a = b;\n            b = t;\n        }\n        if (a < c) {\n        \
    \    long t = a;\n            a = c;\n            c = t;\n        }\n        return\
    \ Math.pow(a, 2) == Math.pow(b, 2) + Math.pow(c, 2);", "        // YOUR CODE HERE\n\
    \        throw new UnsupportedOperationException(\"Question 3 not implemented\"\
    );", "      boolean result = false;\n      long hypotenuse = a;\n      long leg1\
    \ = b;\n      long leg2 = c;\n      if(a>b && a>c){\n        hypotenuse = a;\n\
    \        leg1 = b;\n        leg2 = c;\n      }else if(b>a && b>c){\n        hypotenuse\
    \ = b;\n        leg1 = a;\n        leg2 = c;\n      }else if(c>a && c>b){\n  \
    \      hypotenuse = c;\n        leg1 = a;\n        leg2 = b;\n      }else{\n \
    \       return false;\n      }\n      long pythagorean = ((leg1*leg1)+(leg2*leg2));\n\
    \      if(pythagorean == (hypotenuse*hypotenuse)){\n        result = true;\n \
    \     }\n      return result;", "        // Write your code here\n        return\
    \ false;", "        // insert your code here\n        boolean ab, bc, ca;\n  \
    \      ab = (a*a) + (b*b) == (c*c);\n        bc = (b*b) + (c*c) == (a*a);\n  \
    \      ca = (c*c) + (a*a) == (b*b);\n        return ab || bc || ca;", "      \
    \  if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n \
    \       if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n\
    \        }\n        if (a * a + b * b == c * c || a * a + c * c == b * b || b\
    \ * b + c * c == a * a) {\n            return true;\n        }\n        return\
    \ false;", "        // a^2 + b^2 = c^2 for pythagorean triplets.\n        // to\
    \ avoid floating point operations,\n        // we check whether the sum of a^2\
    \ and b^2 divides c^2.\n        return (c * c) % (a * a + b * b) == 0;", "   \
    \     // Your code here.\n        return true;", '        return a*a + b*b ==
    c*c || a*a + c*c == b*b || b*b + c*c == a*a;', '        return true;', "     \
    \   // Type your solution here\n        return false;", '        return a > 0
    && b > 0 && c > 0 && (a * a + b * b == c * c || a * a + c * c == b * b || b *
    b + c * c == a * a);', "        // TODO: Implement Me\n        return false;",
  "        // <<< please write your code below >>>\n        return false;", "    \
    \    int sumOfSquares = 0;\n        int largest = 0;\n        // Needs a test\
    \ for a, b, and c >= 0\n        ArrayList<Long> sides = new ArrayList<>();\n \
    \       sides.add(a);\n        sides.add(b);\n        sides.add(c);\n        Collections.sort(sides);\n\
    \        largest = sides.get(2).intValue();\n        for (int i = 0; i < sides.size()\
    \ - 1; i++) {\n            sumOfSquares += Math.pow(sides.get(i), 2);\n      \
    \  }\n        if (sumOfSquares == Math.pow(largest, 2)) {\n            return\
    \ true;\n        }\n        return false;", "        // Finish the function body\n\
    \        return Math.sqrt(a*a + b*b) == c;", "        // return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        return false;",
  '        return false;', "        if (a > b && a > c) {\n            return a *\
    \ a == b * b + c * c;\n        } else if (b > a && b > c) {\n            return\
    \ b * b == a * a + c * c;\n        } else {\n            return c * c == a * a\
    \ + b * b;\n        }", "        // Write your code here\n        return false;",
  "        boolean result = false;\n        // Write your code below.\n        return\
    \ result;", "        return\n            Math.abs(a * a + b * b - c * c) < 0.001\
    \ ||\n            Math.abs(a * a + c * c - b * b) < 0.001 ||\n            Math.abs(b\
    \ * b + c * c - a * a) < 0.001;", "        // long[] sides = new long[]{a, b,\
    \ c};\n        // int[] sortedSides = Arrays.stream(sides).sorted().toArray();\n\
    \        // return sortedSides[0]*sortedSides[0] + sortedSides[1]*sortedSides[1]\
    \ == sortedSides[2]*sortedSides[2];\n        return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);", "        // Write your code here\n  \
    \      long[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return arr[0]\
    \ * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];", "        // Implement me!\n\
    \        return false;", '        return false;', "        // Place your solution\
    \ here\n        if (a*a+b*b==c*c) return true;\n        if (a*a+c*c==b*b) return\
    \ true;\n        if (b*b+c*c==a*a) return true;\n        return false;", "   \
    \     double max = Math.max(a, b);\n        max = Math.max(max, c);\n        double\
    \ sum = a + b + c;\n        double d = max * max;\n        double e = sum - max;\n\
    \        e = e * e;\n        return d == e;", "        // a^2 + b^2 = c^2\n  \
    \      return Math.sqrt(a*a + b*b) == c;", "        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        long max =\
    \ Math.max(a, Math.max(b, c));\n        if (max == a) {\n            return a*a\
    \ == b*b + c*c;\n        } else if (max == b) {\n            return b*b == a*a\
    \ + c*c;\n        } else {\n            return c*c == a*a + b*b;\n        }",
  "        // Write your code here\n        return true;", '        throw new UnsupportedOperationException("rightAngleTriangle:
    unimplemented");', "        // Your code here\n        return true;", '        return
    ((a*a)+(b*b)==(c*c))||((b*b)+(c*c)==(a*a))||((c*c)+(a*a)==(b*b));', "        long[]\
    \ sides = {a, b, c};\n        Arrays.sort(sides);\n        return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);", "        // return a*a\
    \ + b*b == c*c;\n        return (long) Math.pow(a, 2) + (long) Math.pow(b, 2)\
    \ == (long) Math.pow(c, 2);", "        // Your code here...\n        return false;",
  "        return 0l == (long)Math.pow(a, 2) + (long)Math.pow(b, 2) - (long)Math.pow(c,\
    \ 2) ||\n                0l == (long)Math.pow(a, 2) + (long)Math.pow(c, 2) - (long)Math.pow(b,\
    \ 2) ||\n                0l == (long)Math.pow(b, 2) + (long)Math.pow(c, 2) - (long)Math.pow(a,\
    \ 2);", "        // Start your code here.\n        double[] x = {a, b, c};\n \
    \       Arrays.sort(x);\n        return x[0] * x[0] + x[1] * x[1] == x[2] * x[2];",
  '        throw new RuntimeException("Deliberately Unimplemented");', "        //\
    \ WRITE YOUR CODE HERE\n        return false;"]
stop_tokens:
- "\n    }\n"
