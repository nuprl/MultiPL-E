name: HumanEval_117_select_words
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns an array array list of all words\
  \ from string s that contain exactly \n    // n consonants, in order these words\
  \ appear in the string s.\n    // If the string s is empty then the function should\
  \ return an empty array list.\n    // Note: you may assume the input string contains\
  \ only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had\
  \ a little lamb\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  little\")))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    //\
  \ (new ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))\n \
  \   // >>> selectWords((\"simple white space\"), (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n\
  \    // >>> selectWords((\"Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
  Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
  \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n   \
  \ assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
completions: ['        return null;', "        String[] split = s.split(\" \");\n\
    \        ArrayList<String> list = new ArrayList<String>();\n        for (String\
    \ word : split) {\n            if (countConsonants(word) == n) {\n           \
    \     list.add(word);\n            }\n        }\n        return list;", "    \
    \    ArrayList<String> result = new ArrayList<String>();\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            long count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                \
    \    count++;\n                }\n            }\n            if (count == n) {\n\
    \                result.add(word);\n            }\n        }\n        return result;",
  "        //TODO\n        return null;", '        throw new RuntimeException("not
    implemented");', "        String[] words = s.split(\" \");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         if (getNumberOfConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", '        return null;', " \
    \       // t: O(N), s: O(N)\n        ArrayList<String> words = new ArrayList<String>();\n\
    \        long cons = 0;\n        boolean b = false;\n        String word = \"\"\
    ;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i)\
    \ == ' ') {\n                if (cons == n) {\n                    words.add(word);\n\
    \                }\n                cons = 0;\n                word = \"\";\n\
    \                b = false;\n            } else {\n                if (!isVowel(s.charAt(i)))\
    \ {\n                    cons++;\n                }\n                word += s.charAt(i);\n\
    \            }\n        }\n        if (cons == n) {\n            words.add(word);\n\
    \        }\n        return words;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] str = s.split(\" \");\n        for (int i = 0; i < str.length;\
    \ i++) {\n            int len = 0;\n            String word = str[i];\n      \
    \      char[] chars = word.toCharArray();\n            for (int j = 0; j < chars.length;\
    \ j++) {\n                if (!isVowel(chars[j])) {\n                    len++;\n\
    \                }\n            }\n            if (len == n) {\n             \
    \   result.add(word);\n            }\n        }\n        return result;", "  \
    \      String[] a = s.split(\" \");\n        ArrayList<String> L = new ArrayList<String>();\n\
    \        for (String w : a) {\n            if (w.length() == n) {\n          \
    \      L.add(w);\n            }\n        }\n        return L;", "        String\
    \ [] splittedString = s.split(\"\\\\s+\");\n        ArrayList<String> wordsWithNConsonants\
    \ = new ArrayList<String>();\n        for (String word : splittedString) {\n \
    \           long numberOfConsonants = countConsonants(word);\n            if (numberOfConsonants\
    \ == n) {\n                wordsWithNConsonants.add(word);\n            }\n  \
    \      }\n        return wordsWithNConsonants;", "        ArrayList<String> res\
    \ = new ArrayList<String>();\n        List<String> words = Arrays.asList(s.split(\"\
    \\\\s+\"));\n        for (String w : words) {\n            long count = 0l;\n\
    \            char[] chs = w.toCharArray();\n            for (char c : chs) {\n\
    \                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                    count += 1l;\n                }\n            }\n    \
    \        if (count == n) {\n                res.add(w);\n            }\n     \
    \   }\n        return res;", "        ArrayList<String> words = new ArrayList<String>();\n\
    \        ArrayList<String> consonants = new ArrayList<String>(Arrays.asList(\"\
    B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"));\n      \
    \  String[] array = s.split(\" \");\n        for (String word : array) {\n   \
    \         int counter = 0;\n            for (String c : consonants) {\n      \
    \          counter += (int) word.chars().filter(ch -> ch == c.charAt(0)).count();\n\
    \            }\n            if (counter == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\"\\\\s+\"\
    );\n        for (String word : words) {\n            long num_consonants = 0;\n\
    \            char[] chars = word.toCharArray();\n            for (char ch : chars)\
    \ {\n                if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u') {\n                    continue;\n                }\n              \
    \  num_consonants += 1;\n            }\n            if (num_consonants == n) {\n\
    \                result.add(word);\n            }\n        }\n        return result;",
  "        // Implement this function\n        return new ArrayList<String>();", " \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return null;", "        // Your implementation here\n\
    \        return new ArrayList<String>();", '        return new ArrayList<String>();',
  "        ArrayList<String> ans = new ArrayList<String>();\n        // Write your\
    \ code here\n        return ans;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String word : s.split(\" \")) {\n            if (consonantsCount(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;", "        // Assume the input string contains only letters\
    \ and spaces.\n        if (s.length() == 0) {\n            return new ArrayList<String>();\n\
    \        }\n        String[] words = s.split(\"\\\\s+\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : words) {\n   \
    \         long consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (isConsonant(word.charAt(i))) {\n               \
    \     consonants++;\n                }\n            }\n            if (consonants\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;", "        ArrayList<String> words = new ArrayList<String>();\n\
    \        if (s.isEmpty()) return words;\n        String[] wordsInS = s.split(\"\
    \\\\s+\");\n        for (String word : wordsInS) {\n            if (isConsonant(word,\
    \ n)) words.add(word);\n        }\n        return words;", "        ArrayList<String>\
    \ arr = new ArrayList<String>();\n        String[] strs = s.split(\"\\\\s+\");\n\
    \        for (String str : strs) {\n            if (numConsonants(str) == n) {\n\
    \                arr.add(str);\n            }\n        }\n        return arr;",
  "        ArrayList<String> ret = new ArrayList<String>();\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            String wordInLowerCase\
    \ = word.toLowerCase();\n            long consonants = 0l;\n            for (char\
    \ c : wordInLowerCase.toCharArray()) {\n                switch (c) {\n       \
    \             case 'a':\n                    case 'e':\n                    case\
    \ 'i':\n                    case 'o':\n                    case 'u':\n       \
    \                 break;\n                    default:\n                     \
    \   consonants++;\n                        break;\n                }\n       \
    \     }\n            if (consonants == n) {\n                ret.add(word);\n\
    \            }\n        }\n        return ret;", "        ArrayList<String> res\
    \ = new ArrayList<String>();\n        String[] words = s.split(\"\\\\s+\");\n\
    \        for (String w : words) {\n            int count = 0;\n            for\
    \ (int i = 0; i < w.length(); i++) {\n                if (\"aeiou\".indexOf(w.charAt(i))\
    \ == -1) count++;\n            }\n            if (count == n) res.add(w);\n  \
    \      }\n        return res;", '        return new ArrayList<String>();', " \
    \       ArrayList<String> result = new ArrayList<String>();\n        Stream.of(s.split(\"\
    \\\\s\")).filter(s1 -> {\n            long numberOfConsonants = s1.toLowerCase().chars().filter(c\
    \ -> c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').count();\n    \
    \        return numberOfConsonants == n;\n        }).forEach(result::add);\n \
    \       return result;", '        throw new RuntimeException("Not implemented!");',
  "        // Implement the function here\n        return null;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String [] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (word.length() != 0 && getNumOfConsonants(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;", "        ArrayList<String> ans = new ArrayList<String>();\n\
    \        for (String w : s.split(\"\\\\s+\"))\n            if (countConsonants(w)\
    \ == n)\n                ans.add(w);\n        return ans;", '        return new
    ArrayList<String>();', "        ArrayList<String> arr = new ArrayList<String>();\n\
    \        // write your code here ...\n        return arr;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int counter = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (counter == n) {\n           \
    \     counter = 0;\n                String word = \"\";\n                while\
    \ (i < s.length() && Character.isLetter(s.charAt(i))) {\n                    word\
    \ += s.charAt(i);\n                    i++;\n                }\n             \
    \   result.add(word);\n            }\n            counter += isVowel(s.charAt(i))\
    \ ? -1 : 1;\n        }\n        return result;", "    }\n}", "        ArrayList<String>\
    \ xs = new ArrayList<String>();\n        String x = new String(\"\");\n      \
    \  for (int j = 0; j < s.length(); j++) {\n            String y = String.valueOf(s.charAt(j));\n\
    \            if (y.equals(\" \")) {\n                xs.add(x);\n            \
    \    x = new String(\"\");\n            } else {\n                x = x + y;\n\
    \            }\n        }\n        xs.add(x);\n        ArrayList<String> rs =\
    \ new ArrayList<String>();\n        for (int i = 0; i < xs.size(); i++) {\n  \
    \          String t = xs.get(i);\n            int c = 0;\n            for (int\
    \ j = 0; j < t.length(); j++) {\n                String y = String.valueOf(t.charAt(j));\n\
    \                if (y.equals(\"a\") || y.equals(\"e\") || y.equals(\"i\") ||\
    \ y.equals(\"o\") || y.equals(\"u\")) {\n                    c = c + 1;\n    \
    \            }\n            }\n            if (c == n) {\n                rs.add(t);\n\
    \            }\n        }\n        return rs;", "        ArrayList<String> res\
    \ = new ArrayList<String>();\n        if (s.length() == 0) {\n            return\
    \ res;\n        }\n        char[] consonants = new char[]{'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'};\n\
    \        List<Character> cons = new ArrayList<Character>();\n        for (char\
    \ c : consonants) {\n            cons.add(c);\n        }\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            long count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                if (cons.contains(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                res.add(word);\n            }\n      \
    \  }\n        return res;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (n == 0) {\n            return result;\n        }\n        if (s.equals(\"\
    \")) {\n            return result;\n        }\n        char[] arr = s.toCharArray();\n\
    \        int start = 0;\n        int end = 0;\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (arr[i] == ' ') {\n                end = i;\n       \
    \         String word = s.substring(start, end);\n                if (consonants(word)\
    \ == n) {\n                    result.add(word);\n                }\n        \
    \        start = i + 1;\n            }\n        }\n        if (start < arr.length)\
    \ {\n            String word = s.substring(start, arr.length);\n            if\
    \ (consonants(word) == n) {\n                result.add(word);\n            }\n\
    \        }\n        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String word : s.split(\"\\\\s+\")) {\n            long c = Arrays.stream(word.split(\"\
    \")).filter(e -> !\"aeiouAEIOU\".contains(e)).count();\n            if (c == n)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", '        return new ArrayList<String>();', "        String[] words\
    \ = s.split(\" \");\n        ArrayList<String> list = new ArrayList<String>();\n\
    \        for (String word : words) {\n            if (consonantsInWord(word) ==\
    \ n) {\n                list.add(word);\n            }\n        }\n        return\
    \ list;", "        ArrayList<String> t = new ArrayList<String>();\n        s =\
    \ s.toLowerCase();\n        for (String word : s.split(\" \")) {\n           \
    \ long c = 0;\n            for (int i = 0; i < word.length(); i++) {\n       \
    \         char ch = word.charAt(i);\n                if (ch != 'a' && ch != 'e'\
    \ && ch != 'i' && ch != 'o' && ch != 'u')\n                    c++;\n        \
    \    }\n            if (c == n)\n                t.add(word);\n        }\n   \
    \     return t;", '        throw new UnsupportedOperationException("Not supported
    yet.");', '        return null;', "        ArrayList<String> al = new ArrayList<String>();\n\
    \        String[] temp = s.split(\" \");\n        for (String s : temp) {\n  \
    \          if (countConsonants(s) == n) {\n                al.add(s);\n      \
    \      }\n        }\n        return al;", "        ArrayList<String> result =\
    \ new ArrayList<String>();\n        for (String w : s.split(\" \")) {\n      \
    \      if (w.length() - countVowels(w) == n) {\n                result.add(w);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        if (s.length() == 0l) return output;\n\
    \        String[] strings = s.split(\" \");\n        String vowels = \"AEIOUaeiou\"\
    ;\n        for (String word : strings) {\n            int count = 0;\n       \
    \     for (int i = 0; i < word.length(); i++) {\n                if (vowels.indexOf(word.charAt(i))\
    \ == -1) count++;\n            }\n            if (count == n) output.add(word);\n\
    \        }\n        return output;", '        return new ArrayList<String>();',
  "        ArrayList<String> r = new ArrayList<String>();\n        ArrayList<String>\
    \ w = new ArrayList<String>(Arrays.asList(s.split(\" \")));\n        for (String\
    \ v : w) {\n            if (v.replaceAll(\"[aeiouAEIOU]\", \"\").length() == n)\
    \ {\n                r.add(v);\n            }\n        }\n        return r;",
  "        ArrayList<String> words = new ArrayList<String>();\n        // Implementation\
    \ of selectWords here\n        return words;", "        // \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \n        // \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \n        // \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \n        // \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \n       \
    \ // \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380 \U0001F380\
    \ \U0001F380 \U0001F380 \U0001F380 \n        return new ArrayList<String>();",
  "        String[] words = s.split(\" \");\n        ArrayList<String> list = new\
    \ ArrayList<String>();\n        for (String w : words) {\n            if (consonants(w)\
    \ == n) {\n                list.add(w);\n            }\n        }\n        return\
    \ list;", "        ArrayList<String> consonants = new ArrayList<String>();\n \
    \       if (s.length() > 0) {\n            String[] words = s.split(\"\\\\s+\"\
    );\n            for (String word : words) {\n                int count = 0;\n\
    \                for (int i = 0; i < word.length(); i++) {\n                 \
    \   switch (word.charAt(i)) {\n                        case 'b':\n           \
    \             case 'c':\n                        case 'd':\n                 \
    \       case 'f':\n                        case 'g':\n                       \
    \ case 'h':\n                        case 'j':\n                        case 'k':\n\
    \                        case 'l':\n                        case 'm':\n      \
    \                  case 'n':\n                        case 'p':\n            \
    \            case 'q':\n                        case 'r':\n                  \
    \      case 's':\n                        case 't':\n                        case\
    \ 'v':\n                        case 'w':\n                        case 'x':\n\
    \                        case 'y':\n                        case 'z':\n      \
    \                      count++;\n                            break;\n        \
    \                default:\n                            break;\n              \
    \      }\n                }\n                if (count == n) {\n             \
    \       consonants.add(word);\n                }\n            }\n        }\n \
    \       return consonants;", "        ArrayList<String> words = new ArrayList<String>();\n\
    \        String cons = \"bcdfghjklmnpqrstvwxyz\";\n        String vowels = \"\
    aeiou\";\n        ArrayList<String> selected = new ArrayList<String>();\n    \
    \    int count = 0;\n        for (String word : s.split(\" \")) {\n          \
    \  for (int i = 0; i < word.length(); i++) {\n                if (cons.contains(word.substring(i,\
    \ i + 1))) {\n                    count++;\n                }\n            }\n\
    \            if (count == n) {\n                selected.add(word);\n        \
    \    }\n            count = 0;\n        }\n        return selected;", "      \
    \  // type your solution here\n        ArrayList<String> list = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (consonants(word) == n) {\n                list.add(word);\n \
    \           }\n        }\n        return list;", "        ArrayList<String> selectedWords\
    \ = new ArrayList<String>();\n        String[] words = s.split(\" \");\n     \
    \   for (String word : words) {\n            if (countConsonants(word) == n) {\n\
    \                selectedWords.add(word);\n            }\n        }\n        return\
    \ selectedWords;", "        // // write the body of your function here\n     \
    \   // return new ArrayList<String>();\n        List<String> splitStr = Arrays.asList(s.split(\"\
    \ \"));\n        ArrayList<String> resList = new ArrayList<String>();\n      \
    \  for (String str : splitStr) {\n            if (str.chars().filter(ch -> \"\
    aeiouAEIOU\".indexOf(ch) < 0).count() == n) {\n                resList.add(str);\n\
    \            }\n        }\n        return resList;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (s.isEmpty()) return result;\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (conutConsonants(word) == n) result.add(word);\n        }\n  \
    \      return result;", "        // { write your code here }\n        return null;",
  "        // Your code goes here\n        ArrayList<String> r = new ArrayList<String>();\n\
    \        String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            long nc = 0l;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    continue;\n\
    \                }\n                nc += 1l;\n            }\n            if (nc\
    \ == n) {\n                r.add(word);\n            }\n        }\n        return\
    \ r;", "        ArrayList<String> ret = new ArrayList<String>();\n        String[]\
    \ words = s.split(\" \");\n        for (String word : words) {\n            if\
    \ (Problem.countConsonants(word) == n) {\n                ret.add(word);\n   \
    \         }\n        }\n        return ret;", "        ArrayList<String> l = new\
    \ ArrayList<String>();\n        String[] words = s.split(\" \");\n        for\
    \ (String w : words) {\n            String[] letters = w.split(\"\");\n      \
    \      String[] cons = new String[letters.length];\n            int cons_idx =\
    \ 0;\n            for (String letter : letters) {\n                if (!(\"aeiou\"\
    .contains(letter))) {\n                    cons[cons_idx] = letter;\n        \
    \            cons_idx += 1;\n                }\n            }\n            if\
    \ (cons_idx == n) {\n                l.add(w);\n            }\n        }\n   \
    \     return l;", '        // Write your code here.', "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        String[] words = s.split(\"\\\\s+\"\
    );\n        for (String word : words) {\n            if (consonants(word) == n)\
    \ {\n                res.add(word);\n            }\n        }\n        return\
    \ res;", "        // your code goes here\n        ArrayList<String> ans = new\
    \ ArrayList<String>();\n        String[] words = s.split(\" \");\n        for\
    \ (String word : words) {\n            long count = 0;\n            for (char\
    \ ch : word.toCharArray()) {\n                if (isConsonant(ch)) {\n       \
    \             count++;\n                }\n            }\n            if (count\
    \ == n) {\n                ans.add(word);\n            }\n        }\n        return\
    \ ans;", '        return new ArrayList<String>();', "        ArrayList<String>\
    \ words = new ArrayList<String>();\n        // Your solution here\n        //\
    \ Create a local variable words, to hold the result.\n        // Iterate over\
    \ the words in the string s (delimited by space).\n        // For each word, check\
    \ if it contains exactly n consonants.\n        // If yes, then append the word\
    \ to the list words.\n        // Return the list words.\n        return words;",
  '        return new ArrayList<String>();', "        ArrayList<String> result = new\
    \ ArrayList<String>();\n        String[] words = s.split(\" \");\n        for\
    \ (String word : words) {\n            if (countVowels(word) == n) {\n       \
    \         result.add(word);\n            }\n        }\n        return result;",
  "        if(s.length() == 0) {\n            return new ArrayList<String>();\n  \
    \      } else {\n            // Creates a stream where each element is a word\
    \ from s.\n            Stream<String> stream = Arrays.stream(s.split(\" \"));\n\
    \            // Filters out the words that do not contain exactly n consonants.\n\
    \            Stream<String> filtered = stream.filter(e -> Problem.countConsonants(e)\
    \ == n);\n            // Returns an array list of the filtered words.\n      \
    \      return filtered.collect(Collectors.toCollection(ArrayList::new));\n   \
    \     }", "        if (s.length() == 0) {\n            return new ArrayList<String>();\n\
    \        }\n        List<String> words = Arrays.asList(s.split(\" \"));\n    \
    \    List<String> selectedWords = new ArrayList<String>();\n        for (String\
    \ word : words) {\n            if (countConsonants(word) == n) {\n           \
    \     selectedWords.add(word);\n            }\n        }\n        return new ArrayList<String>(selectedWords);",
  "        // Write your code here.\n        ArrayList<String> ret = new ArrayList<String>();\n\
    \        ArrayList<String> words = new ArrayList<String>(Arrays.asList(s.split(\"\
    \ \")));\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                ret.add(word);\n            }\n        }\n        return\
    \ ret;", '        return null;', "        String[] words = s.split(\"\\\\s+\"\
    );\n        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ word : words) {\n            int consonants = 0;\n            for (int i = 0;\
    \ i < word.length(); i++) {\n                if (isConsonant(word.charAt(i)))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;", "        // Write your code here\n\
    \        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        String[] arrOfStr = s.split(\" \"\
    , 0); \n        for (String a : arrOfStr) {\n            if (consonantsInWord(a)\
    \ == n) {\n                words.add(a);\n            }\n        }\n        return\
    \ words;", '        return new ArrayList<String>();', "        if (s.length()\
    \ == 0) {\n            return new ArrayList<String>();\n        } else {\n   \
    \         String[] words = s.split(\"\\\\s+\");\n            // List<String> words\
    \ = Arrays.asList(s.split(\"\\\\s+\"));\n            ArrayList<String> res = new\
    \ ArrayList<String>();\n            for (String word : words) {\n            \
    \    if (Problem.countConsonants(word) == n) {\n                    res.add(word);\n\
    \                }\n            }\n            return res;\n        }", '        return
    Problem1.selectWords(s, n);', "        String[] words = s.split(\" \");\n    \
    \    ArrayList<String> vowels = new ArrayList<String>(Arrays.asList(new String[]{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}));\n        ArrayList<String> selectedWords =\
    \ new ArrayList<String>();\n        for (String word : words) {\n            int\
    \ numConsonants = 0;\n            for (char c : word.toCharArray()) {\n      \
    \          if (!vowels.contains(String.valueOf(c))) {\n                    numConsonants++;\n\
    \                }\n            }\n            if (numConsonants == n) {\n   \
    \             selectedWords.add(word);\n            }\n        }\n        return\
    \ selectedWords;", "        ArrayList<String> ll = new ArrayList<String>();\n\
    \        // Iterate through each string in the array\n        for (String word\
    \ : s.split(\" \")) {\n            // Check that every character is a consonant\n\
    \            if (word.chars().mapToObj(i -> (char) i).filter(c -> !\"aeiouAEIOU\"\
    .contains(c + \"\")).count() == n) {\n                ll.add(word);\n        \
    \    }\n        }\n        return ll;", "        ArrayList<String> ret = new ArrayList<String>();\n\
    \        String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            long cons = 0;\n            for (char c : word.toCharArray())\
    \ {\n                switch (c) {\n                    case 'b':\n           \
    \         case 'c':\n                    case 'd':\n                    case 'f':\n\
    \                    case 'g':\n                    case 'h':\n              \
    \      case 'j':\n                    case 'k':\n                    case 'l':\n\
    \                    case 'm':\n                    case 'n':\n              \
    \      case 'p':\n                    case 'q':\n                    case 'r':\n\
    \                    case 's':\n                    case 't':\n              \
    \      case 'v':\n                    case 'w':\n                    case 'x':\n\
    \                    case 'y':\n                    case 'z':\n              \
    \          cons += 1;\n                        break;\n                    default:\n\
    \                        break;\n                }\n            }\n          \
    \  if (cons == n) {\n                ret.add(word);\n            }\n        }\n\
    \        return ret;", "        ArrayList<String> matches = new ArrayList<String>();\n\
    \        String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            int result = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (word.charAt(i) == 'a' || word.charAt(i) == 'e' ||\
    \ word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n\
    \                    result++;\n                }\n            }\n           \
    \ if (result == n) {\n                matches.add(word);\n            }\n    \
    \    }\n        return matches;", "        // Good luck!\n        return new ArrayList<String>();",
  "        // Implementation goes here\n        // You can write your own helper functions.\
    \ \n        // You can also write private classes, or \n        // declare private\
    \ variables in this file.\n        return new ArrayList<String>();", "       \
    \ ArrayList<String> ret = new ArrayList<String>();\n        int sum = 0;\n   \
    \     int k = 0;\n        boolean inWord = false;\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            if (!inWord && s.charAt(i) != ' ') {\n     \
    \           inWord = true;\n                sum = 0;\n                k = i;\n\
    \            }\n            if (inWord && s.charAt(i) == ' ') {\n            \
    \    inWord = false;\n                if (sum == n) {\n                    ret.add(s.substring(k,\
    \ i));\n                }\n            }\n            if (inWord && s.charAt(i)\
    \ != ' ') {\n                sum += isConsonant(s.charAt(i)) ? 1 : 0;\n      \
    \      }\n        }\n        if (inWord && sum == n) {\n            ret.add(s.substring(k,\
    \ s.length()));\n        }\n        return ret;", "        // Implement this placeholder.\n\
    \        return new ArrayList<String>();", "        ArrayList<String> out = new\
    \ ArrayList<String>();\n        String[] tmp = s.split(\" \");\n        for (String\
    \ word : tmp) {\n            int vowelcount = 0;\n            String vowels =\
    \ \"aeiouAEIOU\";\n            for (int i = 0; i < word.length(); i++) {\n   \
    \             if (vowels.indexOf(word.charAt(i)) == -1) {\n                  \
    \  vowelcount++;\n                }\n            }\n            if (vowelcount\
    \ == n) {\n                out.add(word);\n            }\n        }\n        return\
    \ out;", "        // Initialize an empty array list.\n        ArrayList<String>\
    \ rs = new ArrayList<String>();\n        // Split the input string on spaces.\n\
    \        String[] words = s.split(\" \");\n        // For each word in the array,\
    \ we want to count the number of consonants.\n        for (String word : words)\
    \ {\n            // Initialize the counter.\n            long count = 0;\n   \
    \         // For each letter in the word, we want to check if it is a consonant.\n\
    \            for (char letter : word.toCharArray()) {\n                // Check\
    \ if the letter is a consonant.\n                if (letter != 'a' && letter !=\
    \ 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n                \
    \    // If so, increment the counter.\n                    count++;\n        \
    \        }\n            }\n            // Check if the word has exactly n consonants.\n\
    \            if (count == n) {\n                // If so, add the word to the\
    \ list.\n                rs.add(word);\n            }\n        }\n        // Return\
    \ the list.\n        return rs;", "        // YOUR CODE HERE\n        return new\
    \ ArrayList<String>();", "        // \u2193\u2193\u2193\u2193 your code goes here\
    \ \u2193\u2193\u2193\u2193\n        \n        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
  "        ArrayList<String> result = new ArrayList<String>();\n        String[] words\
    \ = s.split(\"\\\\s+\");\n        for (String word : words) {\n            long\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        if (isConsonant(word.charAt(i))) {\n                    count++;\n  \
    \              }\n            }\n            if (count == n) {\n             \
    \   result.add(word);\n            }\n        }\n        return result;", "  \
    \      ArrayList<String> list = new ArrayList<String>();\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            long counter\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  if (\"bcdfghjklmnpqrstvwxyz\".contains(word.substring(i, i + 1))) {\n     \
    \               counter++;\n                }\n            }\n            if (counter\
    \ == n) {\n                list.add(word);\n            }\n        }\n       \
    \ return list;", '    throw new RuntimeException("replace this line with your
    solution");', "        long countConsonants = 0l;\n        ArrayList<String> words\
    \ = new ArrayList<String>();\n        String[] individualWords = s.split(\" \"\
    );\n        for (int i = 0; i < individualWords.length; i++) {\n            String\
    \ word = individualWords[i];\n            for (int j = 0; j < word.length(); j++)\
    \ {\n                if (!isVowel(word.charAt(j))) {\n                    countConsonants\
    \ += 1l;\n                }\n            }\n            if (countConsonants ==\
    \ n) {\n                words.add(word);\n            }\n            countConsonants\
    \ = 0l;\n        }\n        return words;", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        String[] words = s.split(\"\\\\s+\");\n\
    \        for (String word : words) {\n            long numConsonants = getNumConsonants(word);\n\
    \            if (numConsonants == n) {\n                result.add(word);\n  \
    \          }\n        }\n        return result;", "        // TODO: implement\
    \ me\n        ArrayList<String> output = new ArrayList<String>();\n        if(s.isEmpty())\
    \ {\n            return output;\n        }\n        String[] words = s.split(\"\
    \ \");\n        for(String word : words) {\n            if(checkConsonants(word)\
    \ == n) {\n                output.add(word);\n            }\n        }\n     \
    \   return output;", "        int count = 0;\n        ArrayList<String> al = new\
    \ ArrayList<String>();\n        String[] array = s.split(\" \");\n        for\
    \ (int i = 0; i < array.length; i++) {\n            for (int j = 0; j < array[i].length();\
    \ j++) {\n                if (isConsonant(array[i].charAt(j))) {\n           \
    \         count++;\n                }\n            }\n            if (count ==\
    \ n) {\n                al.add(array[i]);\n            }\n            count =\
    \ 0;\n        }\n        return al;", "        if(s.length() == 0) return new\
    \ ArrayList<String>();\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for(String word : words) {\n\
    \            if(consonantsCount(word) == n) result.add(word);\n        }\n   \
    \     return result;", "        // Your code goes here.\n        String[] words\
    \ = s.split(\" \");\n        List<String> res = new ArrayList<>();\n        for\
    \ (String w : words) {\n            if (countConsonants(w) == n) {\n         \
    \       res.add(w);\n            }\n        }\n        return new ArrayList<String>(res);",
  '        return new ArrayList<String>();', "        return Stream.of(s.split(\"\
    \ \"))\n            .filter(x -> countCon(x) == n)\n            .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> words = new ArrayList<String>();\n        for (String\
    \ word : s.split(\"\\\\s+\")) {\n            if (word.chars().filter(x -> \"aeiou\"\
    .indexOf(x) == -1).count() == n) {\n                words.add(word);\n       \
    \     }\n        }\n        return words;", '        return selectWords(new Scanner(s),
    n);', "        // Use the \n        // // stream API to implement this function.\n\
    \        return null;", "        // IMPLEMENT ME\n        return null;", '        throw
    new UnsupportedOperationException("Not implemented");', '        return new ArrayList<String>();',
  '        return null;', "        s = s.toLowerCase();\n        ArrayList<String>\
    \ results = new ArrayList<String>();\n        for (String word : s.split(\" \"\
    )) {\n            if (word.length() - word.replaceAll(\"[aeiou]\", \"\").length()\
    \ == n) {\n                results.add(word);\n            }\n        }\n    \
    \    return results;", '        return new ArrayList<String>();', "        //\
    \ TODO: Implement solution\n        return null;", "        if (n < 0 || n > 10)\
    \ {\n            return null;\n        }\n        ArrayList<String> res = new\
    \ ArrayList<String>();\n        for (String w : s.split(\" \")) {\n          \
    \  if (consonants(w) == n) {\n                res.add(w);\n            }\n   \
    \     }\n        return res;", "        String[] split = s.split(\" \");\n   \
    \     ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ word : split) {\n            if (getNumConsonants(word) == n) {\n          \
    \      result.add(word);\n            }\n        }\n        return result;", " \
    \       String[] arr = s.split(\" \");\n        ArrayList<String> ret = new ArrayList<String>();\n\
    \        for (String word : arr) {\n            if (countConsonants(word) == n)\
    \ {\n                ret.add(word);\n            }\n        }\n        return\
    \ ret;", '        throw new RuntimeException("Not implemented");', "        String[]\
    \ tokens = s.split(\" \");\n        ArrayList<String> out = new ArrayList<String>();\n\
    \        for (String token : tokens) {\n            if (numConsonants(token) ==\
    \ n) {\n                out.add(token);\n            }\n        }\n        return\
    \ out;", "        String[] strs = s.split(\" \");\n        String vowels = \"\
    aeiouAEIOU\";\n        ArrayList<String> res = new ArrayList<String>();\n    \
    \    for (String str : strs) {\n            int sum = 0;\n            for (int\
    \ i = 0; i < str.length(); i++) {\n                if (vowels.indexOf(str.charAt(i))\
    \ == -1) {\n                    sum++;\n                }\n            }\n   \
    \         if (sum == n) {\n                res.add(str);\n            }\n    \
    \    }\n        return res;", "        String[] words = s.split(\" \");\n    \
    \    ArrayList<String> selectedWords = new ArrayList<String>();\n        for (String\
    \ word : words) {\n            int consCount = 0;\n            for (char ch :\
    \ word.toCharArray()) {\n                if (!chIn(ch, \"aeiouAEIOU\")) {\n  \
    \                  consCount++;\n                }\n            }\n          \
    \  if (consCount == n) {\n                selectedWords.add(word);\n         \
    \   }\n        }\n        return selectedWords;", "        // IMPLEMENT ME\n \
    \       return new ArrayList<String>();", "        ArrayList<String> words = new\
    \ ArrayList<String>();\n        for (String word : s.split(\"\\\\s+\")) {\n  \
    \          if (isConsonantCount(word, n)) {\n                words.add(word);\n\
    \            }\n        }\n        return words;", '        return null;', " \
    \       // your code here\n        return null;", "        ArrayList<String> words\
    \ = new ArrayList<>();\n        String[] split = s.split(\" \");\n        for\
    \ (String word : split) {\n            if (countCon(word) == n) {\n          \
    \      words.add(word);\n            }\n        }\n        return words;", " \
    \       ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ array = s.split(\" \");\n        for (String word : array) {\n            if\
    \ (countConsonants(word) == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;", "        ArrayList<String> ret = new\
    \ ArrayList<String>();\n        String[] words = s.split(\" \");\n        for\
    \ (String word : words) {\n            int consonants = 0;\n            for (char\
    \ c : word.toCharArray()) {\n                if (\"bcdfghjklmnpqrstvwxyz\".indexOf(c)\
    \ > -1) {\n                    consonants++;\n                }\n            }\n\
    \            if (consonants == n) {\n                ret.add(word);\n        \
    \    }\n        }\n        return ret;", '        return null;', "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (s.length() == 0) {\n           \
    \ return res;\n        }\n        String[] words = s.split(\" \");\n        for\
    \ (String word : words) {\n            if (consonants(word) == n) {\n        \
    \        res.add(word);\n            }\n        }\n        return res;", "   \
    \     String[] words = s.split(\"\\\\s+\");\n        ArrayList<String> wordsToReturn\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  if (consonantsInWord(word) == n) {\n                wordsToReturn.add(word);\n\
    \            }\n        }\n        return wordsToReturn;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\"\\\\s+\"\
    );\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                result.add(word);\n            }\n        }\n     \
    \   return result;", '        return new ArrayList<String>();', "        ArrayList<String>\
    \ t = new ArrayList<String>();\n        Pattern p = Pattern.compile(\"\\\\b[^aeiouAEIOU\\\
    \\s]+\\\\b\");\n        Matcher m = p.matcher(s);\n        while (m.find()) {\n\
    \            t.add(m.group());\n        }\n        ArrayList<String> r = new ArrayList<String>();\n\
    \        for (String c : t) {\n            if (c.length() == n) {\n          \
    \      r.add(c);\n            }\n        }\n        return r;", '        return
    null;', "        ArrayList<String> a = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (numberOfConsonants(word) == n) {\n\
    \                a.add(word);\n            }\n        }\n        return a;", " \
    \       ArrayList<String> output = new ArrayList<String>();\n        for (String\
    \ word : s.split(\" \")) {\n            if (countConsonants(word) == n) {\n  \
    \              output.add(word);\n            }\n        }\n        return output;",
  "        if (s.isEmpty()) return new ArrayList<String>();\n        // Code here\
    \ ^^\n        return new ArrayList<String>();", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        int vowelCount = 0;\n        int consonantCount\
    \ = 0;\n        boolean word = false;\n        int start = 0;\n        int end\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \               vowelCount++;\n            else if (c != ' ')\n              \
    \  consonantCount++;\n            if (c == ' ' || i == s.length() - 1) {\n   \
    \             if (word) {\n                    if (consonantCount == n) {\n  \
    \                      result.add(s.substring(start, end));\n                \
    \    }\n                    word = false;\n                    vowelCount = 0;\n\
    \                    consonantCount = 0;\n                }\n            } else\
    \ if (!word) {\n                word = true;\n                start = i;\n   \
    \             end = i + 1;\n            } else {\n                end++;\n   \
    \         }\n        }\n        return result;", "        String[] arr = s.split(\"\
    \ \");\n        ArrayList<String> res = new ArrayList<String>();\n        for\
    \ (String x : arr) {\n            if (x.replaceAll(\"[^aeiou]\", \"\").length()\
    \ == n) {\n                res.add(x);\n            }\n        }\n        return\
    \ res;", '        return null;', '        return new ArrayList<String>();', " \
    \       // >>>YOUR CODE HERE<<<\n        return new ArrayList<String>();", " \
    \       // Put your code here.\n        // It should return an array list.", " \
    \       // Your code here!\n        return null;", '        throw new UnsupportedOperationException("Method
    not implemented yet");', '        return new ArrayList<String>();', "        ArrayList<String>\
    \ words = new ArrayList<String>();\n        for (String word : s.split(\" \"))\
    \ {\n            if (countConsonants(word) == n) {\n                words.add(word);\n\
    \            }\n        }\n        return words;", '        throw new RuntimeException("Not
    implemented");', "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        // WRITE YOUR CODE\
    \ HERE\n        return new ArrayList<String>();", "        String vowels = \"\
    aeiouAEIOU\";\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (word.length() == 0) continue;\n            long counter = 0;\n\
    \            for (char c : word.toCharArray()) {\n                if (vowels.indexOf(c)\
    \ == -1) counter++;\n            }\n            if (counter == n) result.add(word);\n\
    \        }\n        return result;", "        if(n == 0) {\n            return\
    \ new ArrayList<String>();\n        }\n        String[] array = s.split(\" \"\
    );\n        ArrayList<String> arr = new ArrayList<String>();\n        for(String\
    \ str : array) {\n            if(str.length() - str.replaceAll(\"[aeiou]\", \"\
    \").length() == n) {\n                arr.add(str);\n            }\n        }\n\
    \        return arr;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String [] words = s.split(\" \");\n        for (String word : words)\
    \ {\n            if (consonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        // Hint: implement\
    \ allStringFromArrayList\n        return null;", '        return null;', "   \
    \     ArrayList<String> ret = new ArrayList<String>();\n        String[] words\
    \ = s.split(\" \");\n        for (String word : words) {\n            if (countConsonants(word)\
    \ == n) {\n                ret.add(word);\n            }\n        }\n        return\
    \ ret;", "        ArrayList<String> res = new ArrayList<String>();\n        String[]\
    \ words = s.split(\"\\\\s+\");\n        for (String word : words) {\n        \
    \    long count = 0;\n            for (char ch : word.toCharArray()) {\n     \
    \           if (isConsonant(ch)) count++;\n            }\n            if (count\
    \ == n) res.add(word);\n        }\n        return res;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int consonants = 0;\n        String\
    \ word = \"\";\n        String[] words = s.split(\" \");\n        for (int i =\
    \ 0; i < words.length; i++) {\n            word = words[i];\n            for (int\
    \ j = 0; j < word.length(); j++) {\n                if (word.charAt(j) != 'a'\
    \ && word.charAt(j) != 'e' && word.charAt(j) != 'i' && word.charAt(j) != 'o' &&\
    \ word.charAt(j) != 'u') {\n                    consonants++;\n              \
    \  }\n            }\n            if (consonants == n) {\n                result.add(word);\n\
    \            }\n            consonants = 0;\n        }\n        return result;",
  '        // write your code here', "        ArrayList<String> words = new ArrayList<String>();\n\
    \        String[] wordsArray = s.split(\" \");\n        for (String word : wordsArray)\
    \ {\n            int consonants = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (!\"AEIOUaeiou\".contains(word.substring(i, i + 1)))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                words.add(word);\n         \
    \   }\n        }\n        return words;", "        ArrayList<String> l = new ArrayList<String>();\n\
    \        for (String a : s.split(\" \")) {\n            if (countConsonants(a)\
    \ == n) {\n                l.add(a);\n            }\n        }\n        return\
    \ l;", "        // WRITE YOUR CODE HERE\n        String[] words = s.split(\" \"\
    );\n        long consonants = 0;\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String word : words) {\n            consonants = 0;\n          \
    \  for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                result.add(word);\n        \
    \    }\n        }\n        return result;", "        String[] words = s.split(\"\
    \ \");\n        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String word : words) {\n            if (isConsonant(word) == n) {\n       \
    \         result.add(word);\n            }\n        }\n        return result;",
  "        ArrayList<String> $ = new ArrayList<String>();\n        String[] arr =\
    \ s.split(\" \");\n        for (String el : arr) {\n            long c = consonants(el);\n\
    \            if (c == n) {\n                $.add(el);\n            }\n      \
    \  }\n        return $;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        for (String word : words) {\n\
    \            if (countConsonants(word) == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ words = new ArrayList<>();\n        for (String w : s.split(\"\\\\s+\")) {\n\
    \            long consonants = w.chars().filter(c -> \"bcdfghjklmnpqrstvwxyz\"\
    .indexOf(c) >= 0).count();\n            if (consonants == n) words.add(w);\n \
    \       }\n        return words;", "        // TODO: Implement me\n        return\
    \ new ArrayList<String>();", '        return null;', "        ArrayList<String>\
    \ words = new ArrayList<String>();\n        for (String word : s.split(\" \"))\
    \ {\n            int vowel = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char ch = word.charAt(i);\n                if (Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u').contains(ch)) {\n                    vowel++;\n        \
    \        }\n            }\n            if (word.length() - vowel == n) {\n   \
    \             words.add(word);\n            }\n        }\n        return words;",
  "        ArrayList<String> result = new ArrayList<String>();\n        result.addAll(Arrays.asList(s.split(\"\
    \ \")));\n        result.removeIf(word -> consonants(word).length() != n);\n \
    \       return result;", '        return null;', "        // Write your code here.\n\
    \        // Return an array list of the required words.\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        String[] arr = s.split(\" \");\n       \
    \ for (String word : arr) {\n            if (word.length() - consonants(word)\
    \ == n) {\n                words.add(word);\n            }\n        }\n      \
    \  return words;", "        ArrayList<String> words = new ArrayList<String>();\n\
    \        for (String word : s.split(\" \")) {\n            if (consonants(word)\
    \ == n) {\n                words.add(word);\n            }\n        }\n      \
    \  return words;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\" \");\n        // Write your code here\n \
    \       for (String word : words) {\n            if (word.length() >= n) {\n \
    \               result.add(word);\n            }\n        }\n        return result;",
  "        // BEGIN \n        // END", '        throw new UnsupportedOperationException("Not
    implemented yet.");', "        ArrayList<String> arr = new ArrayList<String>();\n\
    \        if (s == null || s.length() == 0) {\n            return arr;\n      \
    \  }\n        if (s.trim().length() == 0) {\n            return arr;\n       \
    \ }\n        String[] words = s.split(\" \");\n        for (String word : words)\
    \ {\n            int numOfConst = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (isConst(word.charAt(i))) {\n                   \
    \ numOfConst++;\n                }\n            }\n            if (numOfConst\
    \ == n) {\n                arr.add(word);\n            }\n        }\n        return\
    \ arr;", "        ArrayList<String> a = new ArrayList<String>();\n        int\
    \ i = 0;\n        int j = 0;\n        int k = 0;\n        int count = 0;\n   \
    \     boolean insideWord = false;\n        for (char c : s.toCharArray()) {\n\
    \            if (c == ' ' && insideWord) {\n                insideWord = false;\n\
    \                count = 0;\n                j = i;\n            } else if (c\
    \ != ' ' && !insideWord) {\n                insideWord = true;\n             \
    \   k = i;\n            }\n            if (insideWord) {\n                switch\
    \ (c) {\n                    case 'B':\n                    case 'C':\n      \
    \              case 'D':\n                    case 'F':\n                    case\
    \ 'G':\n                    case 'H':\n                    case 'J':\n       \
    \             case 'K':\n                    case 'L':\n                    case\
    \ 'M':\n                    case 'N':\n                    case 'P':\n       \
    \             case 'Q':\n                    case 'R':\n                    case\
    \ 'S':\n                    case 'T':\n                    case 'V':\n       \
    \             case 'W':\n                    case 'X':\n                    case\
    \ 'Y':\n                    case 'Z':\n                    case 'b':\n       \
    \             case 'c':\n                    case 'd':\n                    case\
    \ 'f':\n                    case 'g':\n                    case 'h':\n       \
    \             case 'j':\n                    case 'k':\n                    case\
    \ 'l':\n                    case 'm':\n                    case 'n':\n       \
    \             case 'p':\n                    case 'q':\n                    case\
    \ 'r':\n                    case 's':\n                    case 't':\n       \
    \             case 'v':\n                    case 'w':\n                    case\
    \ 'x':\n                    case 'y':\n                    case 'z':\n       \
    \                 count++;\n                }\n            }\n            if (!insideWord\
    \ && count == n) {\n                a.add(s.substring(k, j));\n            }\n\
    \            i++;\n        }\n        if (insideWord && count == n) {\n      \
    \      a.add(s.substring(k, i));\n        }\n        return a;", '        return
    null;', "        // Your code here\n        return null;", "        ArrayList<String>\
    \ arrayList = new ArrayList<String>();\n        Pattern pattern = Pattern.compile(\"\
    ((?i)[b-df-hj-np-tv-z])\");\n        String[] split = s.split(\" \");\n      \
    \  for (String word : split) {\n            Matcher matcher = pattern.matcher(word);\n\
    \            if (matcher.results().count() == n) {\n                arrayList.add(word);\n\
    \            }\n        }\n        return arrayList;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n\
    \        for (String word : words) {\n            if (countConsonants(word) ==\
    \ n) {\n                result.add(word);\n            }\n        }\n        return\
    \ result;", "        String[] words = s.split(\" \");\n        String vowels =\
    \ \"aeiouAEIOU\";\n        ArrayList<String> results = new ArrayList<String>();\n\
    \        for (String word : words) {\n            long consonants = word.length()\
    \ - word.chars().filter(ch -> vowels.indexOf(ch) != -1).count();\n           \
    \ if (consonants == n) {\n                results.add(word);\n            }\n\
    \        }\n        return results;", "        ArrayList<String> result = new\
    \ ArrayList<String>();\n        for (String w : s.split(\" \")) {\n          \
    \  long cn = w.chars().filter(c -> !\"aeiou\".contains(\"\" + (char)c)).count();\n\
    \            if (cn == n) result.add(w);\n        }\n        return result;",
  "        // your code goes here\n        if (s.equals(\"\")) {\n            return\
    \ new ArrayList<String>();\n        } else {\n            String[] words = s.split(\"\
    \ \");\n            ArrayList<String> result = new ArrayList<String>();\n    \
    \        for (String word : words) {\n                if (isValid(word, n)) {\n\
    \                    result.add(word);\n                }\n            }\n   \
    \         return result;\n        }", "        ArrayList<String> result = new\
    \ ArrayList<String>();\n        String[] words = s.split(\" \");\n        for\
    \ (String word : words) {\n            if (getNumberOfConsonants(word) == n) {\n\
    \                result.add(word);\n            }\n        }\n        return result;",
  "        String[] words = s.split(\" \");\n        ArrayList<String> out = new ArrayList<String>();\n\
    \        for (String word : words) {\n            int consonants = 0;\n      \
    \      for (char c : word.toCharArray()) {\n                if (c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          out.add(word);\n            }\n        }\n        return out;", " \
    \       //#############################\n        // Please implement this method\n\
    \        //#############################\n        return new ArrayList<String>();",
  "        if (s.isEmpty()) {\n            return new ArrayList<String>();\n     \
    \   }\n        String[] words = s.split(\" \");\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String word : words) {\n          \
    \  long count = 0;\n            for (int i = 0; i < word.length(); i++) {\n  \
    \              if (\"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\".indexOf(word.charAt(i))\
    \ != -1) {\n                    count++;\n                }\n            }\n \
    \           if (count == n) {\n                result.add(word);\n           \
    \ }\n        }\n        return result;", '        return null;', "        // TODO:\
    \ implement this function\n        return new ArrayList<String>();", "       \
    \ var vowels = Set.of(\"a\", \"e\", \"i\", \"o\", \"u\");\n        var words =\
    \ List.of(s.split(\" \"));\n        var result = new ArrayList<String>();\n  \
    \      for (var word : words) {\n            var count = 0;\n            for (var\
    \ charr : word.toCharArray()) {\n                if (!vowels.contains(String.valueOf(charr).toLowerCase()))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.add(word);\n            }\n   \
    \     }\n        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        String[] words = s.split(\"\\\\s+\");\n        for (String word : words)\
    \ {\n            if (word.length() == n) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        // Type your code\
    \ here and return the result\n        String[] words = s.split(\" \");\n     \
    \   ArrayList<String> result = new ArrayList<String>();\n        for (String word\
    \ : words) {\n            if (getConsonantCount(word) == n) {\n              \
    \  result.add(word);\n            }\n        }\n        return result;", "   \
    \     // >>> YOUR CODE HERE <<<\n        ArrayList<String> selectedWords = new\
    \ ArrayList<String>();\n        String[] words = s.split(\" \");\n        for\
    \ (String word : words) {\n            if (word.length() == n) {\n           \
    \     boolean isWord = true;\n                for (char c : word.toCharArray())\
    \ {\n                    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                        isWord = false;\n                       \
    \ break;\n                    }\n                }\n                if (isWord)\
    \ {\n                    selectedWords.add(word);\n                }\n       \
    \     }\n        }\n        return selectedWords;", "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String word : s.split(\" \"\
    )) {\n            int count = 0;\n            for (char ch : word.toCharArray())\
    \ {\n                if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch\
    \ != 'u') {\n                    count++;\n                }\n            }\n\
    \            if (count == n) {\n                output.add(word);\n          \
    \  }\n        }\n        return output;", "        if (s.isEmpty()) {\n      \
    \      return new ArrayList<String>();\n        }\n        ArrayList<String> ret\
    \ = new ArrayList<String>();\n        String[] words = s.split(\" \");\n     \
    \   for (String word : words) {\n            if (countConsonants(word) == n) {\n\
    \                ret.add(word);\n            }\n        }\n        return ret;",
  '        return null;', "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String w : s.split(\" \")) {\n            if (consonants(w) == n)\
    \ {\n                result.add(w);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> ans = new ArrayList<String>();\n      \
    \  String[] words = s.split(\" \");\n        for (String word : words) {\n   \
    \         if (countConsonants(word) == n) {\n                ans.add(word);\n\
    \            }\n        }\n        return ans;", "        if (s.isEmpty()) {\n\
    \            return new ArrayList<String>();\n        }\n        return null;",
  "        ArrayList<String> words = new ArrayList<String>();\n        if (s.length()\
    \ != 0) {\n            int spaces = 0;\n            int current = 0;\n       \
    \     int index = 0;\n            while (index < s.length()) {\n             \
    \   char ch = s.charAt(index);\n                if (ch == ' ') {\n           \
    \         if (current == n) {\n                        words.add(s.substring(index\
    \ - current, index));\n                    }\n                    current = 0;\n\
    \                    spaces += 1;\n                } else {\n                \
    \    current += 1;\n                }\n                index += 1;\n         \
    \   }\n            if (current == n) {\n                words.add(s.substring(index\
    \ - current, index));\n            }\n        }\n        return words;"]
stop_tokens:
- "\n    }\n"
