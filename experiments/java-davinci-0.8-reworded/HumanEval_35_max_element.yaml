name: HumanEval_35_max_element
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return maximum element in the array list.\n    // >>> maxElement((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (3l)\n\
  \    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l,\
  \ (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n\
  \    // (123l)\n    public static long maxElement(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maxElement((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n   \
  \ assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l,\
  \ (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l))))\
  \ == (124l));\n    }\n\n}\n"
completions: ["        Long max = Long.MIN_VALUE;\n        for (int i = 0; i < l.size();\
    \ i += 1) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n\
    \            }\n        }\n        return max;", "        // Fill in the function.\n\
    \        return l.stream().max(Long::compare).get();", "        long max = l.get(0);\n\
    \        for (long lp : l) {\n            if (lp > max) max = lp;\n        }\n\
    \        return max;", "        long maxElement = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            if (l.get(i) > maxElement) {\n    \
    \            maxElement = l.get(i);\n            }\n        }\n        return\
    \ maxElement;", '        return l.stream().max(Long::compare).get();', '        //
    >>> YOUR CODE HERE <<<', "        // YOUR CODE HERE\n        long curMax = Long.MIN_VALUE;\n\
    \        for (long element : l) {\n            if (element > curMax) {\n     \
    \           curMax = element;\n            }\n        }\n        return curMax;",
  "        long a = l.get(0);\n        for (int i = 1; i < l.size(); i += 1) {\n \
    \           a = Math.max(a, l.get(i));\n        }\n        return a;", "     \
    \   // \u541B\u306E\u529B\u3067\u306F\u89E3\u3051\u306A\u3044\uFF01\n        //\
    \ \u7D20\u76F4\u306B\u5168\u63A2\u7D22\uFF01\n        long n = l.size();\n   \
    \     long max = Long.MIN_VALUE;\n        for (long i = 0; i < n; i++) {\n   \
    \         max = Math.max(max, l.get((int)i));\n        }\n        return max;",
  "        long result = l.get(0);\n        for (long item : l) {\n            if\
    \ (item > result) {\n                result = item;\n            }\n        }\n\
    \        return result;", "        long max = l.get(0);\n        for (long a :\
    \ l) {\n            if (a > max) {\n                max = a;\n            }\n\
    \        }\n        return max;", "        long m = Long.MIN_VALUE;\n        for\
    \ (long i : l)\n            m = Math.max(m, i);\n        return m;", "       \
    \ long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n       \
    \     if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
    \        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  '        return l.stream().max(Long::compare).get();', '        return (long)l.stream().max(Comparator.comparing(Long::valueOf)).get();',
  "        long ret = Long.MIN_VALUE;\n        for (Long i : l) {\n            ret\
    \ = Math.max(ret, i);\n        }\n        return ret;", '        return l.stream().reduce(0l,
    Math::max);', "        long max = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n\
    \            }\n        }\n        return max;", '        return null;', "   \
    \     long[] a = new long[l.size()];\n        for (int i = 0; i < l.size(); i++)\n\
    \            a[i] = l.get(i);\n        long max = a[0];\n        for (int i =\
    \ 1; i < a.length; i++)\n            if (a[i] > max)\n                max = a[i];\n\
    \        return max;", "        long max = l.get(0);\n        for (long i: l)\
    \ {\n            if (i > max) {\n                max = i;\n            }\n   \
    \     }\n        return max;", "        long max = Long.MIN_VALUE;\n        for\
    \ (long i : l)\n            if (i > max)\n                max = i;\n        return\
    \ max;", "        if (l.size() == 0) {\n            throw new Error(\"Empty list\
    \ is provided.\");\n        }\n        long max = Long.MIN_VALUE;\n        for\
    \ (long i : l) {\n            if (i > max) {\n                max = i;\n     \
    \       }\n        }\n        return max;", "        long max = l.get(0);\n  \
    \      for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", "        // Insert code here.\n\
    \        long max = Long.MIN_VALUE;\n        for (long elem : l) {\n         \
    \   if (elem > max) {\n                max = elem;\n            }\n        }\n\
    \        return max;", '        return l.stream().reduce(0l, Math::max);', " \
    \       long max = -1000000000;\n        for (long elem : l) {\n            if\
    \ (elem > max) {\n                max = elem;\n            }\n        }\n    \
    \    return max;", '        return l.stream().max(Long::compare).get();', "  \
    \      long max = Long.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > max) {\n                max = l.get(i);\n    \
    \        }\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        // Fill up this function\n        long max=l.get(0);\n        for(int i=1;i<l.size();i++)\n\
    \        {\n            if(l.get(i)>max)\n            {\n                max=l.get(i);\n\
    \            }\n        }\n        return max;", "        if (l.size() == 0) {\n\
    \            return 0;\n        }\n        else {\n            long max = l.get(0);\n\
    \            for (int i = 1; i < l.size(); i++) {\n                if (l.get(i)\
    \ > max) {\n                    max = l.get(i);\n                }\n         \
    \   }\n            return max;\n        }", "        long max=l.get(0);\n    \
    \    for(int i=1;i<l.size();i++)\n            if(l.get(i)>max)\n             \
    \   max=l.get(i);\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max)\
    \ {\n                max = l.get(i);\n            }\n        }\n        return\
    \ max;", "        long max = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > max)\n                max = l.get(i);\n \
    \       }\n        return max;", '        return l.stream().reduce(Long.MIN_VALUE,
    (a, b) -> Long.max(a, b));', "        long max = Long.MIN_VALUE;\n        for\
    \ (long e : l) {\n            if (e > max) max = e;\n        }\n        return\
    \ max;", "        long max = l.get(0);\n        for (long e : l) {\n         \
    \   if (e > max) {\n                max = e;\n            }\n        }\n     \
    \   return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long maxElement = -10000000000l;\n        for (long i: l) {\n         \
    \   if (i > maxElement) {\n                maxElement = i;\n            }\n  \
    \      }\n        return maxElement;", "        if (l.size() == 0) return 0;\n\
    \        return Collections.max(l);", '        return Collections.max(l);', " \
    \       long max = Long.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > max) {\n                max = l.get(i);\n    \
    \        }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        Collections.sort(l);\n        return l.get(l.size() - 1);", "        long\
    \ max = -100000000000l;\n        for (long v : l)\n            if (v > max)\n\
    \                max = v;\n        return max;", '        return Collections.max(l);',
  "        long max = 0;\n        for (int i = 0; i < l.size(); i++) {\n         \
    \   if (l.get(i) > max) {\n                max = l.get(i);\n            }\n  \
    \      }\n        return max;", "        // Write your code here.\n        return\
    \ -1;", "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n    \
    \        if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", '        return Collections.max(l);', '        return Collections.max(l);',
  "        long max = Long.MIN_VALUE;\n        for (long x : l) {\n            if\
    \ (x > max) {\n                max = x;\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Long::compare).get();', "        long\
    \ mx = -1000000000000000000l;\n        for (long elem : l) {\n            if (elem\
    \ > mx) {\n                mx = elem;\n            }\n        }\n        return\
    \ mx;", '        return l.stream().max(Comparator.naturalOrder()).get();', " \
    \       // Fill in code here.\n        long max=Long.MIN_VALUE;\n        for(long\
    \ a:l){\n            if(a>max){\n                max=a;\n            }\n     \
    \   }\n        return max;", '        return l.stream().reduce(Long.MIN_VALUE,
    Math::max);', "        long max = -1000000000;\n        for (long value : l) {\n\
    \            if (value > max) {\n                max = value;\n            }\n\
    \        }\n        return max;", "        // Replace line below with your code.\n\
    \        return l.stream().max(Long::compare).get();", '        return l.stream().max(Long::compare).get();',
  '        return l.stream().max(Comparator.naturalOrder()).get();', '        return
    l.stream().max(Long::compare).get();', '        return Collections.max(l);', '        return
    Collections.max(l);', "        long max = l.get(0);\n        for (long i: l) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        return max;", '        return l.stream().reduce(Long.MIN_VALUE, Math::max);',
  '        return Collections.max(l);', '        return 0;', "        // >>> Solution\n\
    \        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (l.get(i) > max) {\n                max = l.get(i);\n        \
    \    }\n        }\n        return max;\n        // <<< Solution", "        /*\
    \ Solution */\n        return l.stream().max(Comparator.naturalOrder()).get();",
  '        return l.stream().max(Long::compare).get();', "        long m = Long.MIN_VALUE;\n\
    \        for (long a : l) {\n            if (a > m) {\n                m = a;\n\
    \            }\n        }\n        return m;", '        return l.stream().reduce(Long.MIN_VALUE,
    Math::max);', '        return l.stream().reduce(Long.MIN_VALUE, Math::max);',
  "        // REPLACE WITH YOUR CODE\n        if (l.size() == 0) {\n            return\
    \ 0;\n        }\n        long max = l.get(0);\n        for (long i : l) {\n  \
    \          if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return max;", '        throw new RuntimeException("Not implemented.");',
  "        long maxElement = Long.MIN_VALUE;\n        for (long x : l) {\n       \
    \     if (x > maxElement) {\n                maxElement = x;\n            }\n\
    \        }\n        return maxElement;", "        long ret = l.get(0);\n     \
    \   for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > ret) ret\
    \ = l.get(i);\n        }\n        return ret;", '        return Collections.max(l);',
  "\tlong a = l.get(0);\n\tfor (int i = 1; i < l.size(); i++) {\n\t    a = Math.max(a,\
    \ l.get(i));\n\t}\n\treturn a;", "        long max = l.get(0);\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", "        // Fill in the implementation here.\n\
    \        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
    \            long num = l.get(i);\n            if (num > max) {\n            \
    \    max = num;\n            }\n        }\n        return max;", "        long\
    \ max = 0;\n        for (long x : l) {\n            if (x > max) {\n         \
    \       max = x;\n            }\n        }\n        return max;", '        return
    (long) l.stream().max(Long::compare).get();', "        long max = l.get(0);\n\
    \        for (long l_ : l)\n            if (l_ > max)\n                max = l_;\n\
    \        return max;", "        // >>> Solution\n        long max = 0;\n     \
    \   for (long e : l) {\n            if (e > max) {\n                max = e;\n\
    \            }\n        }\n        return max;\n        // <<< Solution", '        return
    0;', '        return l.stream().max(Comparator.naturalOrder()).get();', "    \
    \    long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n    \
    \        long n = l.get(i);\n            if (n > max) {\n                max =\
    \ n;\n            }\n        }\n        return max;", '        return 0l;', " \
    \       long max = l.get(0);\n        for (long i : l) {\n            if (i >\
    \ max) {\n                max = i;\n            }\n        }\n        return max;",
  "        // return the maximum element in l.\n        return 0;", "        if (l.size()\
    \ == 0) {\n            throw new IllegalArgumentException(\"empty\");\n      \
    \  }\n        return Collections.max(l);", "        long max = 0;\n        int\
    \ i = 0;\n        while (i < l.size()) {\n            if (l.get(i) > max) {\n\
    \                max = l.get(i);\n            }\n            i = i + 1;\n    \
    \    }\n        return max;", '        return Collections.max(l);', "        long\
    \ max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if\
    \ (l.get(i) > max)\n                max = l.get(i);\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long elem : l) {\n\
    \            if (elem > max) {\n                max = elem;\n            }\n \
    \       }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > max) {\n                max = l.get(i);\n    \
    \        }\n        }\n        return max;", "        Long[] a = l.toArray(new\
    \ Long[l.size()]);\n        Arrays.sort(a);\n        return a[a.length - 1];",
  "        long max = Long.MIN_VALUE;\n        for (long n : l) {\n            if\
    \ (n > max) max = n;\n        }\n        return max;", "\tlong max = Long.MIN_VALUE;\n\
    \tfor (long i : l) {\n\t    if (i > max) {\n\t\tmax = i;\n\t    }\n\t}\n\treturn\
    \ max;", '        return Collections.max(l);', "        long max = Long.MIN_VALUE;\n\
    \        for (long x : l) {\n            if (x > max) {\n                max =\
    \ x;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long e : l) {\n            if (e > max) {\n                max =\
    \ e;\n            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long r = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n    \
    \        if (l.get(i) > r) {\n                r = l.get(i);\n            }\n \
    \       }\n        return r;", "        Collections.sort(l);\n        return l.get(l.size()\
    \ - 1);", "        long result = -(2l << 51);\n        for (long i: l) {\n   \
    \         if (i > result) {\n                result = i;\n            }\n    \
    \    }\n        return result;", "        long max;\n        if (l.size() == 0)\
    \ {\n            max = 0l;\n        } else {\n            max = l.get(0);\n  \
    \          for (int i = 1; i < l.size(); i++) {\n                if (l.get(i)\
    \ > max) {\n                    max = l.get(i);\n                }\n         \
    \   }\n        }\n        return max;", "        Long max_elem = Long.MIN_VALUE;\n\
    \        for (Long elem : l) {\n            if (elem > max_elem) {\n         \
    \       max_elem = elem;\n            }\n        }\n        return max_elem;",
  "        long max = Long.MIN_VALUE;\n        for (long x : l) {\n            if\
    \ (x > max) {\n                max = x;\n            }\n        }\n        return\
    \ max;", "        // Your Code Here\n        return 0l;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return Collections.max(l);', "        long max = Long.MIN_VALUE;\n    \
    \    for (long i : l) {\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", '        return l.stream().max(Long::compare).get();',
  "        long max = Long.MIN_VALUE;\n        for (long i : l)\n            if (i\
    \ > max)\n                max = i;\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = 0;\n        for (int i = 0; i < l.size(); i++) {\n         \
    \   if (l.get(i) > max) {\n                max = l.get(i);\n            }\n  \
    \      }\n        return max;", '        return 0l;', "        long r = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > r) {\n\
    \                r = l.get(i);\n            }\n        }\n        return r;",
  '        return (long) l.stream().max(Long::compare).get();', "        long max\
    \ = l.get(0);\n        for (long i : l) {\n            if (i > max) {\n      \
    \          max = i;\n            }\n        }\n        return max;", "       \
    \ long max = Long.MIN_VALUE;\n        for (long elem : l) {\n            if (elem\
    \ > max) {\n                max = elem;\n            }\n        }\n        return\
    \ max;", "        long max = Long.MIN_VALUE;\n        for (long elem : l) {\n\
    \            if (elem > max) {\n                max = elem;\n            }\n \
    \       }\n        return max;", "        long max = Long.MIN_VALUE;\n       \
    \ for (long v : l)\n            if (v > max)\n                max = v;\n     \
    \   return max;", '        return Collections.max(l);', "        // >>> YOUR CODE\
    \ HERE <<<\n        return l.stream().max(Long::compare).get();", "        Long\
    \ m = Long.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n        \
    \    m = Math.max(m, l.get(i));\n        }\n        return m;", '        return
    l.stream().reduce(Long.MIN_VALUE, (a, b) -> Math.max(a, b));', '        return
    l.stream().reduce(0l, Math::max);', "        //get the max element from the list\n\
    \        long max = 0;\n        for(int i = 0; i < l.size(); i++){\n         \
    \   if(l.get(i) > max){\n                max = l.get(i);\n            }\n    \
    \    }\n        return max;", '        throw new RuntimeException("Not implemented.");',
  '        return l.stream().max(Comparator.naturalOrder()).get();', "        long\
    \ maxElement = Long.MIN_VALUE;\n        for (long i : l) {\n            if (i\
    \ > maxElement) {\n                maxElement = i;\n            }\n        }\n\
    \        return maxElement;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for (long e : l) {\n            if\
    \ (e > max) {\n                max = e;\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Comparator.naturalOrder()).get();', " \
    \       long max;\n        max = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long current;\n            current = l.get(i);\n       \
    \     if (current > max) {\n                max = current;\n            }\n  \
    \      }\n        return max;", "        long max = Long.MIN_VALUE;\n        for\
    \ (long i : l) {\n            if (i > max) {\n                max = i;\n     \
    \       }\n        }\n        return max;", '        return (long) Collections.max(l);',
  '        return l.stream().max(Long::compare).get();', "        if (l.size() ==\
    \ 0) {\n            return 0;\n        }\n        long m = l.get(0);\n       \
    \ for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n    \
    \            m = l.get(i);\n            }\n        }\n        return m;", "  \
    \      long max = Long.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > max)\n                max = l.get(i);\n      \
    \  }\n        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", "        if (l.size() == 0) return 0l;\n\
    \        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (l.get(i) > max) {\n                max = l.get(i);\n        \
    \    }\n        }\n        return max;", '        return Collections.max(l);',
  '        throw new RuntimeException("IMPLEMENT ME");', '        return Collections.max(l);',
  "        long max = Long.MIN_VALUE;\n        for (long x : l) {\n            if\
    \ (x > max) {\n                max = x;\n            }\n        }\n        return\
    \ max;", '        return l.stream().max(Long::compare).get();', '        return
    l.stream().max(Long::compare).get();', "        long m = Long.MIN_VALUE;\n   \
    \     for (long i : l) {\n            if (i > m) {\n                m = i;\n \
    \           }\n        }\n        return m;", "        long max = l.get(0);\n\
    \        for (long x : l) {\n            if (x > max) max = x;\n        }\n  \
    \      return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().max(Comparator.naturalOrder()).get();', '        return
    Collections.max(l);', '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          long a = l.get(i);\n            if (a > max) {\n                max\
    \ = a;\n            }\n        }\n        return max;", "        if (l.size()\
    \ == 0)\n            return 0;\n        return l.stream().reduce((long)0, (a,\
    \ b) -> (a > b) ? a : b);", "        long max = -1000000000;\n        for (long\
    \ a : l) {\n            if (a > max) {\n                max = a;\n           \
    \ }\n        }\n        return max;", "        long max = l.get(0);\n        for\
    \ (long i : l) {\n            if (i > max) {\n                max = i;\n     \
    \       }\n        }\n        return max;", "        long res = l.get(0);\n  \
    \      for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > res) {\n\
    \                res = l.get(i);\n            }\n        }\n        return res;",
  '        return l.stream().max(Comparator.naturalOrder()).get();', '        return
    Collections.max(l);', "        long max = Long.MIN_VALUE;\n        for (long x\
    \ : l) {\n            if (x > max) {\n                max = x;\n            }\n\
    \        }\n        return max;", "        long max = l.get(0);\n        for (long\
    \ i : l) {\n            if (i > max) {\n                max = i;\n           \
    \ }\n        }\n        return max;", '        return Collections.max(l);', '        return
    Collections.max(l);', '        return l.stream().max(Long::compare).get();', " \
    \       // Your code here\n        return 0l;", "        // Write your code here.\n\
    \        return Collections.max(l);", "        // REPLACE WITH YOUR CODE\n   \
    \     return 0l;", '        return Collections.max(l);', "        long maxElement\
    \ = Long.MIN_VALUE;\n        for (long elem : l) {\n            if (elem > maxElement)\
    \ {\n                maxElement = elem;\n            }\n        }\n        return\
    \ maxElement;", '        return l.stream().reduce(Long.MIN_VALUE, (a, b) -> Math.max(a,
    b));', '        return l.stream().max(Long::compare).get();', '        return
    0;', '        return Collections.max(l);', "        long max = Long.MIN_VALUE;\n\
    \        for (long v : l) {\n            if (v > max) {\n                max =\
    \ v;\n            }\n        }\n        return max;", "        long m = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n\
    \                m = l.get(i);\n            }\n        }\n        return m;",
  '        return Collections.max(l);', "        long max = l.get(0);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max)\n        \
    \        max = l.get(i);\n        }\n        return max;", "        long max =\
    \ Long.MIN_VALUE;\n        for (long e : l) {\n            if (e > max) {\n  \
    \              max = e;\n            }\n        }\n        return max;", '        return
    l.stream().max(Long::compare).get();', '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return Collections.max(l);', '        return Collections.max(l);', '        return
    Collections.max(l);', '        return Collections.max(l);', "        // Replace\
    \ this code with your own.\n        return 1;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return l.stream().reduce(Long.MIN_VALUE, Math::max);', "        long max\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            long\
    \ x = l.get(i);\n            if (x > max) {\n                max = x;\n      \
    \      }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (long e : l) {\n            if (e > max) max = e;\n        }\n  \
    \      return max;", "        long max = l.get(0);\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            long e = l.get(i);\n            if (e > max)\
    \ {\n                max = e;\n            }\n        }\n        return max;",
  "        long max = 0;\n        for (int i = 0; i < l.size(); i++) {\n         \
    \   if (max < l.get(i)) {\n                max = l.get(i);\n            }\n  \
    \      }\n        return max;"]
stop_tokens:
- "\n    }\n"
