language: java
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return range(0, n + 1).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw0cpze17.java:15: error: cannot find symbol\n        return range(0,\
    \ n + 1).mapToObj(Long::toString).collect(Collectors.joining(\" \"));\n      \
    \         ^\n  symbol:   method range(int,long)\n  location: class Problem\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n \
    \       return result.trim();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String res = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            res += i + \" \";\n        }\n        return\
    \ res.trim();\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder builder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            builder.append(i);\n   \
    \         builder.append(\" \");\n        }\n        builder.deleteCharAt(builder.length()\
    \ - 1);\n        return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return Stream.iterate(0l, i -> i +\
    \ 1).limit(n + 1).map(Object::toString).collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(long)\"\
    \ is null\n\tat Problem.main(tmp75_dtg73.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(long)\"\
    \ is null\n\tat Problem.main(tmp75_dtg73.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktcn3r_0.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String ans = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            ans += Long.toString(i) + \" \";\n      \
    \  }\n        return ans.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += Long.toString(i) + \" \"\
    ;\n        }\n        return result.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuffer sb = new StringBuffer();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(String.valueOf(i)\
    \ + \" \");\n        }\n        return sb.toString().trim();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0l; i <= n; i++) {\n            sb.append(i).append(\"\
    \ \");\n        }\n        if (sb.length() > 0) {\n            sb.deleteCharAt(sb.length()\
    \ - 1);\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // STUDENT-TODO\n        // Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \        // >>> stringSequence((0l))\n        // (\"0\")\n        // >>> stringSequence((5l))\n\
    \        // (\"0 1 2 3 4 5\")\n        //\n        // return \"\" + n;\n     \
    \   return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String ans = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            ans += Long.toString(i) + \" \";\n      \
    \  }\n        return ans.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n\
    \        for (long i = 0; i <= n; i++)\n            arr.add(i);\n        return\
    \ arr.stream().map(Object::toString).collect(Collectors.joining(\" \"));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // REPLACE THE PREVIOUS LINE WITH YOUR\
    \ CODE\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString().trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return longsToSpaceDelimitedString(longSequence(n));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppec7ce5z.java:15: error: cannot find symbol\n        return longsToSpaceDelimitedString(longSequence(n));\n\
    \                                           ^\n  symbol:   method longSequence(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringJoiner sj = new StringJoiner(\"\
    \ \");\n        for (long i = 0; i <= n; i++) {\n            sj.add(Long.toString(i));\n\
    \        }\n        return sj.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        String result = \"\";\n        if (n == 0) {\n            result = \"\
    0\";\n        } else {\n            for (int i = 0; i <= n; i++) {\n         \
    \       sb.append(i + \" \");\n            }\n            result = sb.toString().trim();\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        throw new RuntimeException(\"Not implemented.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented.\n\
    \tat Problem.stringSequence(tmpf6ckv0j7.java:15)\n\tat Problem.main(tmpf6ckv0j7.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return new StringJoiner(\" \").add(Long.toString(n)).toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4ufsunx.java:19)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        long[] arr = new long[(int)n + 1];\n\
    \        long i = 0;\n        while (i <= n) {\n            arr[(int)i] = i;\n\
    \            i += 1;\n        }\n        return Arrays.stream(arr).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // Implementation here\n        return\
    \ LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return java.util.stream.LongStream.rangeClosed(0,\
    \ n).mapToObj(e -> String.valueOf(e)).collect(Collectors.joining(\" \"));\n  \
    \  }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i).append(\" \"\
    );\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String result = \"\";\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.append(i);\n            sb.append(\" \");\n        }\n        result\
    \ = sb.toString();\n        return result.trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        final StringBuilder result = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.append(i);\n    \
    \        result.append(\" \");\n        }\n        return result.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String range = IntStream.rangeClosed(0,\
    \ (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\n  \
    \      return range;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // REPLACE THE CODE BELOW WITH YOUR\
    \ SOLUTION\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeoe9q2j7.java:19)\n"
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return (n < 0) ? \"\" : Stream.iterate(0l,\
    \ i -> i+1).limit(n+1).map(Object::toString).collect(Collectors.joining(\" \"\
    ));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        final StringBuilder result = new StringBuilder();\n\
    \        IntStream.rangeClosed(0, (int)n).forEach(value -> result.append(value).append(\"\
    \ \"));\n        return result.toString().trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i).append(\" \"\
    );\n        }\n        return sb.toString().trim();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // REPLACE WITH YOUR CODE\n       \
    \ return \"\";\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgs0he8f6.java:19)\n"
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktcn3r_0.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(x\
    \ -> Long.toString(x)).collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String sequence = \"\";\n        for\
    \ (int i = 0; i <= n; i++) {\n            sequence += i + \" \";\n        }\n\
    \        return sequence.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            stringBuilder.append(String.valueOf(i));\n\
    \            stringBuilder.append(\" \");\n        }\n        return stringBuilder.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String[] a = new String[(int)n+1];\n\
    \        for (int i = 0; i <= n; i++) {\n            a[i] = String.valueOf(i);\n\
    \        }\n        return String.join(\" \", a);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String ret = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            ret += i + \" \";\n        }\n        return\
    \ ret.trim();\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return\
    \ s.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n      String s = new String();\n      int i;\n\
    \      for (i = 0; i <= n; i++) {\n        s += Integer.toString(i) + \" \";\n\
    \      }\n      return s;\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquwnmi1h.java:23)\n"
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n      return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0l; i <= n; i++) {\n            sb.append(i);\n       \
    \     sb.append(\" \");\n        }\n        return sb.toString().trim();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder builder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            builder.append(i);\n   \
    \         builder.append(\" \");\n        }\n        builder.deleteCharAt(builder.length()\
    \ - 1);\n        return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return \n\t\t\tIntStream.range(0,(int)n+1)\n\
    \t\t\t.mapToObj(i->\"\"+i)\n\t\t\t.collect(Collectors.joining(\" \"));\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0l, n).mapToObj(x\
    \ -> Long.toString(x)).collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(long)\"\
    \ is null\n\tat Problem.main(tmp75_dtg73.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return\
    \ s.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return (n >= 0) ? IntStream.range(0,\
    \ (int) n + 1).mapToObj(Integer::toString).collect(Collectors.joining(\" \"))\
    \ : \"\";\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i).append(\" \"\
    );\n        }\n        return sb.toString().trim();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(i\
    \ -> String.valueOf(i)).collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        List<String> result = new ArrayList<>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.add(Long.toString(i));\n\
    \        }\n        return String.join(\" \", result);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // START SOLUTION\n        return LongStream.rangeClosed(0,\
    \ n).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));\n        //\
    \ END SOLUTION\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return String.join(\" \", LongStream.rangeClosed(0l,\
    \ n).mapToObj(Long::toString).collect(Collectors.toList()));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n      StringBuilder sb = new StringBuilder();\n\
    \      for (int i = 0; i <= n; i++) {\n        sb.append(i);\n        sb.append(\"\
    \ \");\n      }\n      sb.deleteCharAt(sb.length() - 1);\n      return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return new String(IntStream.rangeClosed(0,(int)n).mapToObj(i\
    \ -> Integer.toString(i)).collect(Collectors.joining(\" \")));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder str = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            str.append(i + \" \");\n\
    \        }\n        return str.toString().trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.append(i).append(\" \");\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(n);\n        while (n > 0) {\n            sb.append(\" \").append(--n);\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82vyk_6c.java:24)\n"
  stdout: ''
  timestamp: 1660010906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.stringSequence(long)\"\
    \ is null\n\tat Problem.main(tmp75_dtg73.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        List<Long> list = new ArrayList<>();\n\
    \        long i = 0;\n        while (i <= n) {\n            list.add(i);\n   \
    \         i++;\n        }\n        return String.join(\" \", list.stream().map(Object::toString).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010907
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n\treturn LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqci2wunq.java:15: error: incompatible types: invalid method reference\n\
    \        return LongStream.rangeClosed(0, n).mapToObj(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n                                                     ^\n    method toString\
    \ in class Object cannot be applied to given types\n      required: no arguments\n\
    \      found:    long\n      reason: actual and formal argument lists differ in\
    \ length\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010906
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        throw new RuntimeException(\"Not implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.stringSequence(tmp4_2g5sn5.java:15)\n\tat Problem.main(tmp4_2g5sn5.java:18)\n"
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        if (n == 0) {\n            return \"\
    0\";\n        }\n        String ans = \"\";\n        for (int i = 0; i <= n; i++)\
    \ {\n            ans += Integer.toString(i) + \" \";\n        }\n        return\
    \ ans.trim();\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010907
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0l, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010907
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        long[] arr = LongStream.rangeClosed(0,\
    \ n).toArray();\n        String s = \"\";\n        for (long i = 0; i < arr.length;\
    \ i++) {\n            s += arr[(int) i] + \" \";\n        }\n        return s.trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuffer sb = new StringBuffer();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010907
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder res = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            res.append(String.valueOf(i)\
    \ + \" \");\n        }\n        return res.toString().trim();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010907
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String ans = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            ans += (i + \" \");\n        }\n        return\
    \ ans.trim();\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010907
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String res = LongStream.rangeClosed(0,\
    \ n).mapToObj(Long::toString).collect(Collectors.joining(\" \"));\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010907
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        if (n < 0)\n            throw new RuntimeException(\"\
    Negative number\");\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i).append(\" \"\
    );\n        }\n        return sb.toString().trim();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        long[] numbers = new long[(int)n +\
    \ 1];\n        for (int i = 0; i <= n; i++) {\n            numbers[i] = i;\n \
    \       }\n        return Arrays.stream(numbers).mapToObj(i -> Long.toString(i)).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0l; i <= n; i++) {\n            sb.append(i);\n       \
    \     sb.append(\" \");\n        }\n        String ans = sb.toString();\n    \
    \    return ans.substring(0, ans.length() - 1);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010908
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return Util.stringSequence(n);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3uo4mwe.java:15: error: cannot find symbol\n        return Util.stringSequence(n);\n\
    \               ^\n  symbol:   variable Util\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010908
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i).append(\" \"\
    );\n        }\n        return sb.toString().trim();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqci2wunq.java:15: error: incompatible types: invalid method reference\n\
    \        return LongStream.rangeClosed(0, n).mapToObj(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n                                                     ^\n    method toString\
    \ in class Object cannot be applied to given types\n      required: no arguments\n\
    \      found:    long\n      reason: actual and formal argument lists differ in\
    \ length\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // Your code goes here.\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.append(i);\n            sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n\tStringBuilder sb = new StringBuilder();\n\
    \tfor (long i = 0; i <= n; i++) {\n\t    sb.append(i);\n\t    sb.append(\" \"\
    );\n\t}\n\treturn sb.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010908
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        if (n == 0) {\n            return \"\
    0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i <= n; i++) {\n            sb.append(i + \" \");\n        }\n \
    \       return sb.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(i\
    \ -> String.valueOf(i)).collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010906
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return Arrays.stream(java.util.stream.LongStream.rangeClosed(0,\
    \ n).toArray()).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0l; i <= n; i++) {\n            sb.append(i);\n       \
    \     sb.append(\" \");\n        }\n        return sb.toString().trim();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        List<Long> numbers = new ArrayList<>();\n\
    \        for (long i = 0; i <= n; i++) {\n            numbers.add(i);\n      \
    \  }\n        return String.join(\" \", numbers.stream().map(String::valueOf).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktcn3r_0.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0,(int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder builder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            builder.append(i).append(\"\
    \ \");\n        }\n        return builder.toString().trim();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0,(int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String res = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            res += Integer.toString(i) + \" \";\n   \
    \     }\n        return res.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += String.valueOf(i) + \" \"\
    ;\n        }\n        return result.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        List<String> nthList = new ArrayList<String>();\n\
    \        int nth = 0;\n        while (nth <= n) {\n            nthList.add(Integer.toString(nth));\n\
    \            nth++;\n        }\n        return String.join(\" \", nthList);\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return\
    \ s.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n\t\tStringBuilder sb = new StringBuilder();\n\
    \t\tfor (int i = 0; i <= n; i++) {\n\t\t\tsb.append(i + \" \");\n\t\t}\n\t\treturn\
    \ sb.toString().trim();\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        return LongStream.rangeClosed(0l,\
    \ n).mapToObj(Object::toString).collect(Collectors.joining(\" \"));\n    }\n \
    \   public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1kbndbi.java:18: error: incompatible types: invalid method reference\n\
    \        return LongStream.rangeClosed(0l, n).mapToObj(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n                                                      ^\n    method toString\
    \ in class Object cannot be applied to given types\n      required: no arguments\n\
    \      found:    long\n      reason: actual and formal argument lists differ in\
    \ length\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder builder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            builder.append(i);\n   \
    \         builder.append(\" \");\n        }\n        builder.deleteCharAt(builder.length()\
    \ - 1);\n        return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(0);\n        for (int i = 1; i <= n; i++) {\n            sb.append(\"\
    \ \");\n            sb.append(i);\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        long i = 0;\n        String result\
    \ = \"\";\n        while (i < n) {\n            if (i == 0) {\n              \
    \  result = result + String.valueOf(i);\n            } else {\n              \
    \  result = result + \" \" + String.valueOf(i);\n            }\n            i\
    \ = i + 1;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsqw90jpk.java:28)\n"
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(String.valueOf(i));\n\
    \            sb.append(\" \");\n        }\n        return sb.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String result = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            result += Long.toString(i) + \" \"\
    ;\n        }\n        return result.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpktcn3r_0.java:18)\n"
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n      ArrayList<Long> list = new ArrayList<Long>();\n\
    \      for (int i = 0; i <= n; i++) {\n        list.add((long) i);\n      }\n\
    \      return list.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder strBuilder = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            strBuilder.append(i);\n\
    \            strBuilder.append(\" \");\n        }\n        return strBuilder.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String seq = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            seq += String.valueOf(i) + \" \";\n     \
    \   }\n        return seq.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010910
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String str = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            str += String.valueOf(i) + \" \";\n     \
    \   }\n        return str.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010910
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder ret = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            ret.append(i);\n       \
    \     ret.append(\" \");\n        }\n        ret.deleteCharAt(ret.length() - 1);\n\
    \        return ret.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n      StringBuilder sb = new StringBuilder();\n\
    \      for (int i = 0; i <= n; i++) {\n        sb.append(i + \" \");\n      }\n\
    \      return sb.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String ans = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            ans += Long.toString(i) + \" \";\n      \
    \  }\n        return ans.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        int i;\n        StringBuilder sequence\
    \ = new StringBuilder();\n        for (i = 0; i <= n; i++) {\n            sequence.append(i\
    \ + \" \");\n        }\n        return sequence.toString().trim();\n    }\n  \
    \  public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0l, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        List<String> arr = new ArrayList<>();\n\
    \        for (int i = 0; i <= n; i++) {\n            arr.add(Integer.toString(i));\n\
    \        }\n        return String.join(\" \", arr);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        if (n == 0) return \"0\";\n       \
    \ String r = \"\";\n        for (int i = 0; i <= n; i++) {\n            r += i\
    \ + \" \";\n        }\n        return r.trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n \
    \   assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        // BEGIN SOLUTION\n        return LongStream.rangeClosed(0l,\
    \ n).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));\n        //\
    \ END SOLUTION\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        long[] seq = new long[(int)n+1];\n\
    \        for (int i = 0; i <= n; i++) {\n            seq[i] = i;\n        }\n\
    \        return String.join(\" \", Arrays.stream(seq).mapToObj(Long::toString).toArray(String[]::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return Stream.iterate(0, i -> i + 1).limit(n\
    \ + 1).map(i -> String.valueOf(i)).collect(Collectors.joining(\" \"));\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i).append(\" \"\
    );\n        }\n        return sb.toString().trim();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return Stream.iterate(0l, x -> x +\
    \ 1l).limit(n + 1).map(String::valueOf).collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String out_ = \"\";\n        for (long\
    \ i = 0l; i <= n; i += 1l) {\n            out_ = out_ + Long.toString(i) + \"\
    \ \";\n        }\n        return out_.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0, (int)n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder res = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            res.append(i);\n       \
    \     res.append(\" \");\n        }\n        return res.toString().trim();\n \
    \   }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String[] nums = new String[(int)n +\
    \ 1];\n        for (int i = 0; i <= n; i++) {\n            nums[i] = String.valueOf(i);\n\
    \        }\n        return String.join(\" \", nums);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n\
    \    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuffer sb = new StringBuffer();\n\
    \        long i;\n        for (i = 0; i < n; i++) {\n            sb.append(i +\
    \ \" \");\n        }\n        sb.append(i);\n        return sb.toString();\n \
    \   }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return \n            IntStream.range(0,(int)n+1)\n\
    \                .mapToObj(i -> String.valueOf(i))\n                .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.append(i);\n    \
    \        result.append(\" \");\n        }\n        return result.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String answer = \"\";\n        for\
    \ (long i = 0l; i <= n; i++) {\n            answer += i + \" \";\n        }\n\
    \        return answer.trim();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return java.util.stream.LongStream.rangeClosed(0,\
    \ n).mapToObj(java.lang.Long::toString).collect(java.util.stream.Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(i\
    \ -> Long.toString(i)).collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += String.valueOf(i) + \" \";\n       \
    \ }\n        return s.trim();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        int i = 0;\n        StringBuilder res\
    \ = new StringBuilder();\n        while (i <= n) {\n            res.append(Integer.toString(i));\n\
    \            res.append(\" \");\n            i++;\n        }\n        return res.toString().trim();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String res = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            res += String.valueOf(i) + \" \";\n     \
    \   }\n        return res.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return Stream.iterate(0, i -> i + 1).limit(n\
    \ + 1).map(i -> Long.toString(i)).collect(Collectors.joining(\" \"));\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        int[] arr = new int[(int)n+1];\n  \
    \      for(int i=0;i<=n;i++)\n        {\n            arr[i]=i;\n        }\n  \
    \      return Arrays.toString(arr).replaceAll(\"[\\\\[\\\\]\\\\,]\", \"\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return Arrays.stream(LongStream.rangeClosed(0l,\
    \ n).toArray()).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n\t\treturn IntStream.rangeClosed(0, (int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010902
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        throw new UnsupportedOperationException(\"\
    Problem.stringSequence\");\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem.stringSequence\n\
    \tat Problem.stringSequence(tmp7lzhcpr3.java:15)\n\tat Problem.main(tmp7lzhcpr3.java:18)\n"
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return IntStream.rangeClosed(0,(int)n).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010909
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010901
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String result = \"\";\n        for\
    \ (long k = 0; k <= n; k++) {\n            result += Long.toString(k) + \" \"\
    ;\n        }\n        return result.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.append(i);\n        \
    \    sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010904
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        return LongStream.rangeClosed(0l, n).mapToObj(Long::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010911
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n\
    \    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static\
    \ String stringSequence(long n) {\n        String s = \"\";\n        for (int\
    \ i = 0; i <= n; i++) {\n            s += String.valueOf(i) + \" \";\n       \
    \ }\n        return s.trim();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010912
