name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>>\
  \ largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
  \ n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        List<Long> primes = new ArrayList<>();\n        long x = n;\n\
    \        for (long i = 2; i * i <= x; i++) {\n            if (x % i == 0) {\n\
    \                primes.add(i);\n                x /= i;\n                i--;\n\
    \            }\n        }\n        if (x > 1) {\n            primes.add(x);\n\
    \        }\n        return primes.get(primes.size() - 1);", '        return 0l;',
  "        long end = (long)Math.sqrt(n);\n        while (n % 2 == 0) {\n        \
    \    n /= 2;\n        }\n        if (n == 1) {\n            return 2;\n      \
    \  }\n        for (long i = 3; i <= end; i += 2) {\n            while (n % i ==\
    \ 0) {\n                n /= i;\n            }\n        }\n        return n;",
  "        // >>> largestPrimeFactor((10l))\n        // (5l)\n        // >>> largestPrimeFactor((40l))\n\
    \        // (5l)\n        // >>> largestPrimeFactor((18l))\n        // (3l)\n\
    \        // >>> largestPrimeFactor((7l))\n        // (7l)\n        // >>> largestPrimeFactor((16l))\n\
    \        // (2l)\n        // >>> largestPrimeFactor((14l))\n        // (7l)\n\
    \        // >>> largestPrimeFactor((30l))\n        // (5l)\n        // >>> largestPrimeFactor((21l))\n\
    \        // (7l)\n        // >>> largestPrimeFactor((2l))\n        // (2l)\n \
    \       // >>> largestPrimeFactor((3l))\n        // (3l)\n        // >>> largestPrimeFactor((4l))\n\
    \        // (2l)\n        // >>> largestPrimeFactor((5l))\n        // (5l)\n \
    \       // >>> largestPrimeFactor((6l))\n        // (3l)\n        // >>> largestPrimeFactor((8l))\n\
    \        // (2l)\n        // >>> largestPrimeFactor((9l))\n        // (3l)\n \
    \       // >>> largestPrimeFactor((11l))\n        // (11l)\n        // >>> largestPrimeFactor((12l))\n\
    \        // (3l)\n        // >>> largestPrimeFactor((15l))\n        // (5l)\n\
    \        // >>> largestPrimeFactor((17l))\n        // (17l)\n        // >>> largestPrimeFactor((19l))\n\
    \        // (19l)\n        // >>> largestPrimeFactor((23l))\n        // (23l)\n\
    \        // >>> largestPrimeFactor((24l))\n        // (3l)\n        // >>> largestPrimeFactor((26l))\n\
    \        // (13l)\n        // >>> largestPrimeFactor((27l))\n        // (3l)\n\
    \        // >>> largestPrimeFactor((28l))\n        // (7l)\n        // >>> largestPrimeFactor((29l))\n\
    \        // (29l)\n        // >>> largestPrimeFactor((31l))\n        // (31l)\n\
    \        // >>> largestPrimeFactor((32l))\n        // (2l)\n        // >>> largestPrimeFactor((",
  "        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return n;", "        // If n is odd, then at least\
    \ one of its prime factors must be odd.\n        // Therefore, if n is a multiple\
    \ of 2, 3 and 5 then 2, 3 and 5 are not\n        // prime factors of n, in other\
    \ words, if n is divisible by 30, then n\n        // has a prime factor >= 7.\
    \ (Note: n is odd.)\n        while (n % 2 == 0) n /= 2;\n        while (n % 3\
    \ == 0) n /= 3;\n        while (n % 5 == 0) n /= 5;\n        // If n is not a\
    \ prime then it has a prime factor >= 7.\n        if (n > 1) {\n            //\
    \ m is the largest number we need to check for divisibility by prime\n       \
    \     // numbers. For example if n = 23 * 31 * 53 * 67 * 71, then m = 71.\n  \
    \          long m = n;\n            // Every prime number >= 7 is of the form\
    \ 6k + 1 or 6k - 1.\n            // If n is divisible by a number p >= 7 then,\n\
    \            // Either p is of the form 6k + 1,\n            // and then n is\
    \ divisible by a number of the form 6k + 1 <= m,\n            // Or p is of the\
    \ form 6k - 1,\n            // and then n is divisible by a number of the form\
    \ 6k - 1 <= m.\n            for (long i = 5; i * i <= m; i += 6) {\n         \
    \       while (n % i == 0) n /= i;\n                while (n % (i + 2) == 0) n\
    \ /= i + 2;\n            }\n        }\n        return n;", "        long cur =\
    \ 2;\n        while (n % cur == 0) {\n            n /= cur;\n        }\n     \
    \   for (long i = 3; i < Math.sqrt(n); i += 2) {\n            while (n % i ==\
    \ 0) {\n                n /= i;\n            }\n        }\n        return n;",
  '        return 0l;', "        long largest = 0;\n        for (long l=1; l<=n; l+=2)\
    \ {\n            if (n % l == 0) {\n                boolean prime = true;\n  \
    \              for (long m=2; m<=l/2; m++) {\n                    if (l % m ==\
    \ 0) {\n                        prime = false;\n                        break;\n\
    \                    }\n                }\n                if (prime) {\n    \
    \                if (largest < l) {\n                        largest = l;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ largest;", '        return largestPrimeFactor_(n);', "        long cur = 2;\n\
    \        long max = 0;\n        while (n > 1) {\n            while (n % cur ==\
    \ 0) {\n                max = cur;\n                n /= cur;\n            }\n\
    \            cur += 1;\n        }\n        return max;", "        long factor\
    \ = n;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n\
    \ % i == 0) {\n                factor = i;\n                break;\n         \
    \   }\n        }\n        return factor;", "        // Fill in your answer here.\n\
    \        return 0;", "        long greatest = -1;\n        for (long i = 2; i\
    \ < n; i++) {\n            if (n % i == 0) {\n                greatest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return greatest;", "        // We can use a Sieve of Eratosthenes to find\
    \ the prime numbers:\n        // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        //\n        // However, it's a little faster to just do trial division\
    \ on the prime numbers.\n        int[] primes = new int[] {2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,\
    \ 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,\
    \ 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269,\
    \ 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,\
    \ 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,\
    \ 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571,\
    \ 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661,\
    \ 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773,\
    \ 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\
    \ 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n\
    \        for (int p : primes) {\n            if (n % p ==", "        long i =\
    \ 2;\n        while (n % i != 0) i++;\n        if (n == i) return n;\n       \
    \ else return largestPrimeFactor(n / i);", "        for (long i = 2; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return n;", "        long largest = 1;\n  \
    \      int limit = (int)Math.sqrt(n);\n        for (int i = 2; i <= limit; i++)\
    \ {\n            if (n % i == 0) {\n                if (isPrime(i)) largest =\
    \ i;\n                if (isPrime(n / i)) largest = n / i;\n            }\n  \
    \      }\n        return largest;", "        long largestPrimeFactor = -1;\n \
    \       for (long i = 1; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                if (isPrime(i)) {\n                    largestPrimeFactor\
    \ = i;\n                }\n                if (isPrime(n / i)) {\n           \
    \         largestPrimeFactor = n / i;\n                }\n            }\n    \
    \    }\n        return largestPrimeFactor;", "        long result = 0;\n     \
    \   if (n % 2 == 0) {\n            result = 2;\n            while (n % 2 == 0)\
    \ {\n                n /= 2;\n            }\n        } else {\n            result\
    \ = 1;\n        }\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n   \
    \         if (n % i == 0) {\n                result = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 2) {\n            result = n;\n        }\n   \
    \     return result;", "        long largest = 2;\n        long max = (long) Math.sqrt(n);\n\
    \        for (long i = 2; i <= max; i++) {\n            if (n % i == 0) {\n  \
    \              if (isPrime(i)) {\n                    largest = i;\n         \
    \       }\n            }\n        }\n        return largest;", "        List<Long>\
    \ factors = primeFactors(n);\n        return factors.get(factors.size() - 1);",
  "        long d = 2;\n        while (d <= n) {\n            if (n % d == 0) {\n\
    \                n /= d;\n            } else {\n                d++;\n       \
    \     }\n        }\n        return d;", "        long i = 2l;\n        while (i\
    \ * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n      \
    \      } else {\n                i++;\n            }\n        }\n        return\
    \ n;", "        long[] arr = primeFactors(n);\n        return arr[arr.length -\
    \ 1];", '        return largestPrimeFactor(n, 2);', "        long last_prime =\
    \ 1;\n        long largest_prime = 1;\n        while (n > 1) {\n            if\
    \ (n % last_prime == 0) {\n                n /= last_prime;\n                largest_prime\
    \ = last_prime;\n            }\n            else {\n                last_prime++;\n\
    \            }\n        }\n        return largest_prime;", "        for (long\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                n /= i;\n\
    \                return largestPrimeFactor(n);\n            }\n        }\n   \
    \     return n;", "\tlong largest = -1;\n\tlong max = (long)Math.sqrt(n);\n\t\
    for (long i = 2; i <= max; i++) {\n\t    if (n % i == 0) {\n\t\tlargest = (long)Math.max(largest,\
    \ largestPrimeFactor(n / i));\n\t    }\n\t}\n\treturn (largest == -1) ? n : largest;",
  "        long largest = 1;\n        for (long l = 2; l <= n / 2; l++) {\n      \
    \      if (n % l == 0 && isPrime(l)) {\n                largest = l;\n       \
    \     }\n        }\n        return largest;", "        long lastFactor = 1;\n\
    \        long factor = 2;\n        while (n > 1) {\n            if (n % factor\
    \ == 0) {\n                lastFactor = factor;\n                n /= factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return lastFactor;", "        long current = 2;\n        long largest = 0;\n\
    \        while (n > 1) {\n            while (n % current == 0) {\n           \
    \     largest = current;\n                n /= current;\n            }\n     \
    \       current += 1;\n        }\n        return largest;", '        return 0;',
  "        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          n /= i;\n                i--;\n            }\n        }\n        return\
    \ n;", "        if (n < 0) throw new IllegalArgumentException();\n        if (n\
    \ == 0) return 1;\n        long biggestPrime = 0;\n        long target = n;\n\
    \        // Keep dividing the largest possible prime factor until it isn't divisible\
    \ anymore\n        for (long p : primeFactors(target)) {\n            if (p ==\
    \ biggestPrime) continue;\n            while (target % p == 0) {\n           \
    \     target /= p;\n                biggestPrime = p;\n            }\n       \
    \ }\n        return biggestPrime;", "        assert(!isPrime(n));\n        long[]\
    \ factors = factorsOf(n);\n        long largest = 0;\n        for (long factor\
    \ : factors) {\n            if (isPrime(factor)) {\n                largest =\
    \ Math.max(largest, factor);\n            }\n        }\n        return largest;",
  "        long i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n \
    \               n /= i;\n            } else {\n                i++;\n        \
    \    }\n        }\n        return n;", "        long factor = 1;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     factor = i;\n                while (n % i == 0) {\n                    n\
    \ /= i;\n                }\n            }\n        }\n        return n == 1 ?\
    \ factor : n;", '        return largestPrimeFactor(n, 2l);', "        for (long\
    \ i = 2; i < n; i++) {\n            if (n % i == 0)\n                return largestPrimeFactor(n\
    \ / i);\n        }\n        return n;", "        for (long i = 2l; i < (1 + Math.sqrt(n));\
    \ i++) {\n            if ((n % i) == 0) {\n                return largestPrimeFactor(n\
    \ / i);\n            }\n        }\n        return n;", "        long largestPrimeFactor\
    \ = -1;\n        // Write your code here.\n        return largestPrimeFactor;",
  "        boolean[] isPrime = new boolean[(int)Math.sqrt(n) + 1];\n        Arrays.fill(isPrime,\
    \ true);\n        for (int i = 2; i < isPrime.length; i++) {\n            if (isPrime[i])\
    \ {\n                for (int j = i * i; j < isPrime.length; j += i)\n       \
    \             isPrime[j] = false;\n            }\n        }\n        for (int\
    \ i = isPrime.length - 1; i >= 2; i--) {\n            if (isPrime[i] && n % i\
    \ == 0)\n                return i;\n        }\n        return -1;", "        long\
    \ result = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                result = i;\n                n /= i;\n            \
    \    i--;\n            }\n        }\n        return result;", '        throw new
    RuntimeException("not implemented");', "        long ans = 0;\n        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                n\
    \ /= i;\n                ans = i;\n            }\n        }\n        if (n > 1)\
    \ ans = n;\n        return ans;", "        long largest = 2;\n        while (n\
    \ > 1) {\n            if (n % largest == 0) {\n                n /= largest;\n\
    \            } else {\n                largest++;\n            }\n        }\n\
    \        return largest;", "        long a = 2;\n        long res = 0;\n     \
    \   while (a * a <= n) {\n            if (n % a == 0) {\n                n /=\
    \ a;\n                res = a;\n            } else {\n                a += 1;\n\
    \            }\n        }\n        return Math.max(res, n);", "        // Write\
    \ your code here.\n        int i;\n        long max = 0;\n        for (i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n  \
    \              n /= i;\n                i--;\n            }\n        }\n     \
    \   return max;", "        // Note that this algorithm works because when you\
    \ repeatedly divide\n        // out a factor, the next prime will be the largest\
    \ factor.\n        int i = 2;\n        while (i <= n) {\n            if (n % i\
    \ == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return i;", "        long f = 2;\n        while\
    \ (n % f == 0) {\n            n /= f;\n        }\n        if (n == 1) {\n    \
    \        return f;\n        }\n        f = 3;\n        while (f * f <= n) {\n\
    \            if (n % f == 0) {\n                n /= f;\n            } else {\n\
    \                f += 2;\n            }\n        }\n        return n;", "    \
    \    // Write your code here.\n        List<Long> factors = new ArrayList<>();\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            factors.add(i);\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return factors.get(factors.size() - 1);", '        return
    -1;', '        return 0l;', "        long max = n;\n        for (long l = 2; l\
    \ <= Math.sqrt(n); l++) {\n            if (n % l == 0) {\n                max\
    \ = l;\n                n /= l;\n                l--;\n            }\n       \
    \ }\n        return max;", "        // your code here\n        long largestPrimeFactor\
    \ = 0;\n        for (long i = n; i > 0; i--) {\n            if (n % i == 0 &&\
    \ isPrime(i)) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;", "        for (long\
    \ i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return\
    \ largestPrimeFactor(n / i);\n            }\n        }\n        return n;", " \
    \       long max = -1;\n        int divisor = 2;\n        while (n > 1) {\n  \
    \          while (n % divisor == 0) {\n                max = divisor;\n      \
    \          n /= divisor;\n            }\n            divisor++;\n        }\n \
    \       return max;", '        return largestPrimeFactorRecursive(n, nextPrime(2),
    0l);', "        // >>> largestPrimeFactor((13195l))\n        // (29l)\n      \
    \  // >>> largestPrimeFactor((2048l))\n        // (2l)\n        long p = 2;\n\
    \        while (n != 1) {\n            if (n % p == 0) {\n                n /=\
    \ p;\n            } else {\n                p++;\n            }\n        }\n \
    \       return p;", '        return largestPrimeFactorInt(n);', "        long\
    \ f = 2;\n        while (f <= n) {\n            if (n % f == 0) {\n          \
    \      n /= f;\n            } else {\n                f++;\n            }\n  \
    \      }\n        return f;", "        // long p = 2;\n        // while (n % p\
    \ == 0) {\n        //     n /= p;\n        // }\n        // p++;\n        // while\
    \ (p * p <= n) {\n        //     while (n % p == 0) {\n        //         n /=\
    \ p;\n        //     }\n        //     p += 2;\n        // }\n        // return\
    \ n;\n        return largestPrimeFactor(n, 2);", '        return Arrays.stream(primeFactors(n)).max().getAsLong();',
  "        long i = 2;\n        for (; i < n; i++) {\n            if (n % i == 0)\
    \ {\n                break;\n            }\n        }\n        return largestPrimeFactor(n\
    \ / i) * i;", "        for (long i = 2; i <= Math.sqrt(n); i++) {\n          \
    \  if (n % i == 0) {\n                return largestPrimeFactor(n / i);\n    \
    \        }\n        }\n        return n;", "        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                return largestPrimeFactor(n\
    \ / i);\n            }\n        }\n        return n;", "        long c = n;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (c % i == 0) {\n\
    \                c /= i;\n                while (c % i == 0) {\n             \
    \       c /= i;\n                }\n            }\n        }\n        return c;",
  "        if (n == 2) {\n            return n;\n        }\n        long m = n;\n\
    \        long i = 2;\n        while (m > 1) {\n            if (m % i == 0) {\n\
    \                m /= i;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n        return i;", "        long largest = 2;\n      \
    \  for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n          \
    \      n /= i;\n                largest = i;\n            }\n        }\n     \
    \   return largest;", "        // TODO: write code here\n        return n;", '        throw
    new UnsupportedOperationException("Problem #3");', "        // >>> largestPrimeFactor((13195l))\n\
    \        // (29l)\n        // >>> largestPrimeFactor((2048l))\n        // (2l)\n\
    \        // >>> largestPrimeFactor((10129l))\n        // (10129l)\n        //\
    \ >>> largestPrimeFactor((13l))\n        // (13l)\n        // >>> largestPrimeFactor((4l))\n\
    \        // (2l)\n        // >>> largestPrimeFactor((3l))\n        // (3l)\n \
    \       // >>> largestPrimeFactor((2l))\n        // (2l)\n        // >>> largestPrimeFactor((1l))\n\
    \        // (1l)\n        throw new UnsupportedOperationException(\"TODO: replace\
    \ with your code and remove this line\");", "        Set<Long> factors = new HashSet<>();\n\
    \        while (n % 2 == 0) {\n            factors.add(2l);\n            n /=\
    \ 2;\n        }\n        for (long i = 3; i <= Math.sqrt(n); i+=2) {\n       \
    \     while (n % i == 0) {\n                factors.add(i);\n                n\
    \ /= i;\n            }\n        }\n        if (n > 2) factors.add(n);\n      \
    \  return factors.stream().max(Comparator.naturalOrder()).get();", "        //\
    \ >>> largestPrimeFactor(600851475143l)\n        // 6857\n        return 0;",
  "        long x = n;\n        int lpf = 2;\n        // while n > 1, keep finding\
    \ lpf, and divide n by lpf\n        while (x > 1) {\n            int j = 2;\n\
    \            for (; j <= x; j++) {\n                if (x % j == 0) {\n      \
    \              lpf = j;\n                    x /= j;\n                    break;\n\
    \                }\n            }\n        }\n        return lpf;", "        long\
    \ largestPrimeFactor = 1;\n        long remaining = n;\n        while (remaining\
    \ > 1) {\n            largestPrimeFactor++;\n            while (remaining % largestPrimeFactor\
    \ == 0) {\n                remaining /= largestPrimeFactor;\n            }\n \
    \       }\n        return largestPrimeFactor;", "        if (n == 1) return 1;\n\
    \        long largest = 1;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if (n % i == 0) {\n                largest = Math.max(largest, largestPrimeFactor(n\
    \ / i));\n            }\n        }\n        return largest;", "        long largest\
    \ = -1;\n        long number = n;\n        for (long i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (number % i == 0) {\n                largest = i;\n \
    \               number /= i;\n                i--;\n            }\n        }\n\
    \        if (number > largest) {\n            largest = number;\n        }\n \
    \       return largest;", "        long p = 2;\n        while (p * p <= n) {\n\
    \            if (n % p == 0) {\n                n /= p;\n            } else {\n\
    \                p += p == 2 ? 1 : 2;\n            }\n        }\n        return\
    \ n;", '        return 1;', "        long l = 2;\n        while (n != 1) {\n \
    \           if (n % l == 0) {\n                n /= l;\n            } else {\n\
    \                l++;\n            }\n        }\n        return l;", "       \
    \ long ans = 0;\n        for (long i = 2; i * i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long a = largestPrimeFactor(n / i);\n         \
    \       long b = largestPrimeFactor(i);\n                if (a == 0 && b == 0)\n\
    \                    ans = Math.max(n / i, i);\n                else\n       \
    \             ans = Math.max(a, b);\n            }\n        }\n        return\
    \ ans;", "        assert n > 1;\n        assert !isPrime(n);\n        // BEGIN\n\
    \        // END", "        long prime = (2l);\n        long largestPrime = (2l);\n\
    \        while (prime * prime <= n) {\n            if (n % prime == 0) {\n   \
    \             n /= prime;\n                largestPrime = prime;\n           \
    \ } else {\n                prime++;\n            }\n        }\n        if (n\
    \ > largestPrime) {\n            largestPrime = n;\n        }\n        return\
    \ largestPrime;", "        long divisor = 2l;\n        long lastFactor = 0l;\n\
    \        while (n > 1) {\n            if (n % divisor == 0) {\n              \
    \  lastFactor = divisor;\n                n /= divisor;\n                while\
    \ (n % divisor == 0) {\n                    n /= divisor;\n                }\n\
    \            }\n            divisor += 1;\n        }\n        return lastFactor;",
  "        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n      \
    \          return largestPrimeFactor(n / i);\n            }\n        }\n     \
    \   return n;", "        for (long d = 2; d <= n; d++) {\n            if (n %\
    \ d == 0) {\n                n /= d;\n                d--;\n            }\n  \
    \      }\n        return n;", "        long factor = 2;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                n /= factor;\n   \
    \         }\n            factor++;\n        }\n        return factor - 1;", " \
    \       for (long i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        return n;", '        return
    factorL(n).stream().sorted().filter(v -> isPrime(v)).reduce((r, v) -> v).get();',
  "        long x = n;\n        long largest = 1;\n        while(x > 1) {\n      \
    \      boolean found = false;\n            for(long i = 2; i <= x; i++) {\n  \
    \              if(x % i == 0) {\n                    x /= i;\n               \
    \     largest = i;\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found) {\n                throw\
    \ new IllegalArgumentException(\"n is prime.\");\n            }\n        }\n \
    \       return largest;", "        long largestPrimeFactor = 0;\n        for (long\
    \ i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n              \
    \  largestPrimeFactor = i;\n                n /= i;\n            }\n        }\n\
    \        if (n > 1) {\n            largestPrimeFactor = n;\n        }\n      \
    \  return largestPrimeFactor;", "        for (long i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                return largestPrimeFactor(n\
    \ / i);\n            }\n        }\n        return n;", "        int largestPrimeFactor\
    \ = 0;\n        // The maximum factor of n can not be greater than the sqrt(n).\n\
    \        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                // After divisibility test, test if i is prime.\n       \
    \         if (isPrime(i)) {\n                    largestPrimeFactor = i;\n   \
    \             }\n            }\n        }\n        return largestPrimeFactor;",
  "        // find 2 factors\n        long f1 = 2;\n        long f2 = n / f1;\n  \
    \      long remainder = n % f1;\n        if (remainder == 0) {\n            //\
    \ we have a factor pair\n            if (isPrime(f1)) {\n                return\
    \ f1;\n            } else if (isPrime(f2)) {\n                return f2;\n   \
    \         }\n        }\n        // no luck so far, let's try some more\n     \
    \   for (long i = 3; i < f2; i += 2) {\n            f1 = i;\n            f2 =\
    \ n / f1;\n            remainder = n % f1;\n            if (remainder == 0) {\n\
    \                // we have a factor pair\n                if (isPrime(f1)) {\n\
    \                    return f1;\n                } else if (isPrime(f2)) {\n \
    \                   return f2;\n                }\n            }\n        }\n\
    \        // no prime factors found, assume n is prime\n        return n;", " \
    \       long maxp = 2;\n        while (n > 1) {\n            long m = n;\n   \
    \         while (m % maxp != 0) {\n                maxp++;\n            }\n  \
    \          n /= maxp;\n        }\n        return maxp;", "        // Fill in your\
    \ solution here.\n        return 0;", "        for (long i = 3; i <= n; i += 2)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n                i\
    \ -= 2;\n            }\n        }\n        return n;", "        long cur = n;\n\
    \        while (cur % 2 == 0) {\n            cur /= 2;\n        }\n        for\
    \ (long i = 3; i * i <= cur; i += 2) {\n            while (cur % i == 0) {\n \
    \               cur /= i;\n            }\n        }\n        return cur;", " \
    \       long ans = -1;\n        while (n % 2 == 0) {\n            ans = 2;\n \
    \           n /= 2;\n        }\n        long m = (long) Math.sqrt(n);\n      \
    \  for (long i = 3; i <= m; i += 2) {\n            while (n % i == 0) {\n    \
    \            ans = i;\n                n /= i;\n            }\n        }\n   \
    \     if (n > 2) {\n            ans = n;\n        }\n        return ans;", " \
    \       long result = 0;\n        while (n % 2 == 0) {\n            result = 2;\n\
    \            n = n / 2;\n        }\n        for (long i = 3; i <= Math.sqrt(n);\
    \ i = i + 2) {\n            while (n % i == 0) {\n                result = i;\n\
    \                n = n / i;\n            }\n        }\n        if (n > 2) {\n\
    \            result = n;\n        }\n        return result;", '        throw new
    UnsupportedOperationException("Problem2.largestPrimeFactor");', "        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                return\
    \ largestPrimeFactor(n / i);\n            }\n        }\n        return n;", " \
    \       if (n == 1) return 1;\n        // A prime can't be even\n        if (n\
    \ % 2 == 0) return largestPrimeFactor(n / 2);\n        long limit = (long) Math.sqrt(n);\n\
    \        for (long i = 3; i <= limit; i += 2) {\n            if (n % i == 0) return\
    \ largestPrimeFactor(n / i);\n        }\n        return n;", "        int factor\
    \ = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n        \
    \        n /= factor;\n            } else {\n                factor++;\n     \
    \       }\n        }\n        return factor;", "        List<Long> factors = new\
    \ ArrayList<>();\n        while (n % 2 == 0) {\n            factors.add(2l);\n\
    \            n /= 2;\n        }\n        for (long i = 3; i <= n; i += 2) {\n\
    \            while (n % i == 0) {\n                factors.add(i);\n         \
    \       n /= i;\n            }\n        }\n        return factors.get(factors.size()\
    \ - 1);", "        long i = 2;\n        while (i * i <= n) {\n            if (n\
    \ % i == 0) {\n                n /= i;\n            } else {\n               \
    \ i++;\n            }\n        }\n        return n;", "        long largestFactor\
    \ = 1;\n        while (n % 2 == 0) {\n            largestFactor = 2;\n       \
    \     n = n / 2;\n        }\n        long factor = 3;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                largestFactor = factor;\n\
    \                n = n / factor;\n            } else {\n                factor\
    \ += 2;\n            }\n        }\n        return largestFactor;", "        long\
    \ current = n;\n        long largestPrimeFactor = 2;\n        long i = 2;\n  \
    \      while (i * i <= current) {\n            if (current % i == 0) {\n     \
    \           largestPrimeFactor = i;\n                current /= i;\n         \
    \   } else {\n                i++;\n            }\n        }\n        return current;",
  "        List<Long> primeFactors = Prime.factorize(n);\n        return Collections.max(primeFactors);",
  "        // BEGIN SOLUTION\n        long p = 2;\n        while (n % p == 0) {\n\
    \            n /= p;\n        }\n        p = 3;\n        while (n > 1) {\n   \
    \         long next = p * p;\n            while (n % p == 0) {\n             \
    \   n /= p;\n            }\n            p += 2;\n            if (next > n) break;\n\
    \        }\n        return n;\n        // END SOLUTION", "        long factor\
    \ = 1;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                factor = i;\n                while (n % i == 0) {\n         \
    \           n /= i;\n                }\n            }\n        }\n        return\
    \ factor;", "        long largestPrimeFactor = -1;\n        for (long i = 2; i\
    \ <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largestPrimeFactor;", "        long f = n;\n        while(true)\
    \ {\n            long p = PollardRho.factor(f);\n            if(p == f) {\n  \
    \              return p;\n            }\n            f = p;\n        }", "   \
    \     long ans = 0;\n        for (long d = 2; d * d <= n; d++) {\n           \
    \ if (n % d == 0) {\n                n /= d;\n                ans = d;\n     \
    \       }\n        }\n        return n > 1 ? n : ans;", "\tboolean isPrime = true;\n\
    \tlong ans = -1;\n\tfor (long i = 2; i < n; i++) {\n\t    if (n % i == 0) {\n\t\
    \tlong k = i;\n\t\tfor (long j = 2; j <= Math.sqrt(k); j++) {\n\t\t    if (k %\
    \ j == 0) {\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (isPrime)\
    \ {\n\t\t    ans = i;\n\t\t}\n\t    }\n\t}\n\treturn ans;", "        // >>> largestPrimeFactor((13195l))\n\
    \        // (29l)\n        // >>> largestPrimeFactor((2048l))\n        // (2l)\n\
    \        long factor = -1;\n        for (long i = 2; i <= n; i++) {\n        \
    \    if (n % i == 0) {\n                factor = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return factor;", "  \
    \      // TODO\n        long result = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            while (n % i == 0) {\n                result = i;\n         \
    \       n /= i;\n            }\n        }\n        return result;", '        return
    largestPrimeFactorHelper(n, 2);', "        long result = -1;\n        long sqrtN\
    \ = (long) Math.sqrt(n);\n        while(!isPrime(n)) {\n            long maxFactor\
    \ = getMaxFactor(n, sqrtN);\n            n /= maxFactor;\n            sqrtN =\
    \ (long) Math.sqrt(n);\n            result = n;\n        }\n        return result;",
  "        long answer = n;\n        for (long i = 2; i < n; i++) {\n            if\
    \ (n % i == 0) {\n                answer = largestPrimeFactor(n / i);\n      \
    \          break;\n            }\n        }\n        return answer;", "      \
    \  long factor = 2;\n        while (n > 1) {\n            if (n % factor == 0)\
    \ {\n                n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factor;", "        if (n < 2) {\n  \
    \          throw new IllegalArgumentException();\n        }\n        for (long\
    \ d = n - 1; d > 1; d--) {\n            if (n % d == 0 && isPrime(d)) {\n    \
    \            return d;\n            }\n        }\n        throw new IllegalArgumentException();",
  "        for (long i = n - 1; i > 0; i--) {\n            if (isPrime(i) && n % i\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;", "        long d = 2l;\n        while (d * d <= n) {\n            if (n\
    \ % d == 0) {\n                n /= d;\n            } else {\n               \
    \ d += 1;\n            }\n        }\n        return n;", '        return largestPrimeFactorIterative(n);',
  "        long i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return i;", "        ArrayList<Long> factors = new\
    \ ArrayList<Long>();\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                n /= i;\n                factors.add(i);\n \
    \               i--;\n            }\n        }\n        return factors.get(factors.size()\
    \ - 1);", "        long largestFactor = 1;\n        long factor = 2;\n       \
    \ while (n > 1) {\n            if (n % factor == 0) {\n                n /= factor;\n\
    \                largestFactor = factor;\n            } else {\n             \
    \   factor++;\n            }\n        }\n        return largestFactor;", "\t//\
    \ First, find the smallest factor of n, which is guaranteed to be prime.\n\tlong\
    \ p = 2;\n\twhile (n % p != 0) {\n\t    p++;\n\t}\n\treturn largestPrimeFactor(n\
    \ / p);", "        long current = 2;\n        long max = 1;\n        while (current\
    \ <= n) {\n            if (n % current == 0) {\n                max = current;\n\
    \                n /= current;\n            } else {\n                current++;\n\
    \            }\n        }\n        return max;", "        long maxPrime = -1;\n\
    \        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1;\n\
    \        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n           \
    \ while (n % i == 0) {\n                maxPrime = i;\n                n = n /\
    \ i;\n            }\n        }\n        if (n > 2) {\n            maxPrime = n;\n\
    \        }\n        return maxPrime;", "        return new ArrayList<Long>() {\n\
    \            {\n                for (long i = 2; i <= n; i++) {\n            \
    \        if (n % i == 0) {\n                        add(i);\n                \
    \        n /= i;\n                        i--;\n                    }\n      \
    \          }\n            }\n        }.stream().max(Long::compare).get();", " \
    \       // BEGIN SECRET\n        long largest_prime_factor = n;\n        long\
    \ k = 2;\n        while (k < largest_prime_factor) {\n            if (largest_prime_factor\
    \ % k == 0) {\n                largest_prime_factor /= k;\n            } else\
    \ {\n                k += 1;\n            }\n        }\n        return largest_prime_factor;\n\
    \        // END SECRET", "        long k = n;\n        for (long i = 2; i * i\
    \ <= n; i++) {\n            if (k % i == 0) {\n                k /= i;\n     \
    \           while (k % i == 0) {\n                    k /= i;\n              \
    \  }\n            }\n        }\n        return k;", "        // >>> largestPrimeFactor((13195l))\n\
    \        // (29l)\n        // >>> largestPrimeFactor((2048l))\n        // (2l)\n\
    \        long curr = 2;\n        while (curr < n) {\n            if (n % curr\
    \ == 0) {\n                n /= curr;\n            } else {\n                curr++;\n\
    \            }\n        }\n        return n;", "        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0)\n                n /= i;\n     \
    \       else\n                i++;\n        }\n        return n;", "        if\
    \ (n == 2) {\n            return n;\n        }\n        else if (n % 2 == 0) {\n\
    \            return largestPrimeFactor(n / 2);\n        }\n        else {\n  \
    \          return Arrays.stream(primeFactors(n))\n                .filter(p ->\
    \ p > 2 && n % p == 0)\n                .max()\n                .getAsLong();\n\
    \        }", "        long largest = -1;\n        long sqrt = (long) Math.sqrt(n);\n\
    \        long next = 2;\n        while (next <= sqrt) {\n            if (n % next\
    \ == 0) {\n                long factor = n / next;\n                if (isPrime(factor))\
    \ {\n                    return factor;\n                }\n                largest\
    \ = largestPrimeFactor(n / next);\n            }\n            next++;\n      \
    \  }\n        return largest;", "        long d = 2;\n        while (n > 1) {\n\
    \            while (n % d == 0) {\n                n /= d;\n            }\n  \
    \          d += 1;\n        }\n        return d - 1;", "        for (long i =\
    \ 2; i <= n; i++) {\n            if (n % i == 0) {\n                long n2 =\
    \ n / i;\n                if (isPrime(n2)) {\n                    return n2;\n\
    \                }\n            }\n        }\n        throw new RuntimeException(\"\
    Impossible condition\");", "        for (long i = 2; i <= Math.sqrt(n); i++) {\n\
    \            if (n % i == 0) {\n                if (isPrime(n / i)) {\n      \
    \              return n / i;\n                } else {\n                    return\
    \ largestPrimeFactor(n / i);\n                }\n            }\n        }\n  \
    \      return n;", "        List<Long> factors = Problem.primeFactors(n);\n  \
    \      return factors.get(factors.size() - 1);", "        long lpf = 1;\n    \
    \    for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n        \
    \        n /= i;\n                lpf = i;\n                i--;\n           \
    \ }\n        }\n        return lpf;", "        // Your code here.\n        return\
    \ 0;", '        return (long) ef.last();', "        int max = 0;\n        for\
    \ (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                boolean\
    \ isPrime = true;\n                for (int j = 2; j <= (int) Math.sqrt(i); j++)\
    \ {\n                    if (i % j == 0) {\n                        isPrime =\
    \ false;\n                        break;\n                    }\n            \
    \    }\n                if (isPrime) {\n                    max = i;\n       \
    \         }\n            }\n        }\n        return max;", '        return sieve(n).stream().max(Long::compare).get();',
  "        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0)\
    \ {\n                return largestPrimeFactor(n / i);\n            }\n      \
    \  }\n        return n;", "        BigInteger ln = BigInteger.valueOf(n);\n  \
    \      Stream<Pair<BigInteger, BigInteger>> primesToFactorize = range(BigInteger.valueOf(2),\
    \ ln.divide(BigInteger.valueOf(2))).filter(x -> x.isProbablePrime(64)).map(x ->\
    \ new Pair<BigInteger, BigInteger>(x, ln.divide(x)));\n        return primesToFactorize.filter(x\
    \ -> x.getValue1().isProbablePrime(64)).map(x -> x.getValue1()).max(Comparator.naturalOrder()).get().longValue();",
  "        return IntStream.rangeClosed(2, (int)Math.sqrt(n))\n            .filter(i\
    \ -> n % i == 0)\n            .filter(i -> isPrime(i))\n            .mapToLong(i\
    \ -> i)\n            .max()\n            .getAsLong();", "        ArrayList<Long>\
    \ pf = primeFactors(n);\n        Collections.sort(pf);\n        return pf.get(pf.size()\
    \ - 1);", "        for (long i = (long)Math.sqrt(n); i > 1; i--) {\n         \
    \   if (n % i == 0 && (isPrime(i))) {\n                return i;\n           \
    \ }\n        }\n        return n;", "        if (n <= 1) {\n            throw\
    \ new IllegalArgumentException(\"largestPrimeFactor(\" + n + \")\");\n       \
    \ }\n        long p = 0;\n        for (long k = 2; k * k <= n; k++) {\n      \
    \      if (n % k == 0) {\n                p = k;\n                while (n % k\
    \ == 0) {\n                    n /= k;\n                }\n            }\n   \
    \     }\n        if (n > 1) {\n            p = n;\n        }\n        return p;",
  "        long half = n / 2;\n        for (long i = half; i > 1; i--) {\n       \
    \     if (n % i == 0 && isPrime(i)) {\n                return i;\n           \
    \ }\n        }\n        return 1;", "        long result = -1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (isPrime(i))\
    \ {\n                    result = i;\n                }\n            }\n     \
    \   }\n        return result;", "        long result = 0;\n        while (n %\
    \ 2 == 0) {\n            result = 2;\n            n /= 2;\n        }\n       \
    \ for (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n \
    \               result = i;\n                n /= i;\n            }\n        }\n\
    \        if (n > 2) {\n            result = n;\n        }\n        return result;",
  "        long largestSoFar = 1;\n        long a = 2;\n        while (a <= n) {\n\
    \            long p = n / a;\n            if (n % a == 0 && isPrime(p)) {\n  \
    \              largestSoFar = p;\n            }\n            ++a;\n        }\n\
    \        return largestSoFar;", "        if (n == 2) {\n            return 2;\n\
    \        }\n        long max = 2;\n        while (n > 2) {\n            long factor\
    \ = 2;\n            while (n % factor != 0) {\n                factor++;\n   \
    \         }\n            n /= factor;\n            max = factor;\n        }\n\
    \        return max;", "        // long p = 2;\n        // while (n > 1) {\n \
    \       //     if (n % p == 0) {\n        //         n /= p;\n        //     }\
    \ else {\n        //         p++;\n        //     }\n        // }\n        //\
    \ return p;\n        return primes(n)\n            .lastLong();", "        long\
    \ largest = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                largest = i;\n                n /= i;\n           \
    \     i = 2;\n            }\n        }\n        return largest;", "        long\
    \ i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          n /= i;\n            } else {\n                i++;\n            }\n\
    \        }\n        return n;", "        long largest = 1;\n        while (n %\
    \ 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n      \
    \  for (long i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n            }\n      \
    \  }\n        if (n > 2) {\n            largest = n;\n        }\n        return\
    \ largest;", "        for (long i = 2; i < n; i++) {\n            if (n % i ==\
    \ 0) {\n                return largestPrimeFactor(n / i);\n            }\n   \
    \     }\n        return n;", "        for (long i = 2; i <= Math.sqrt(n); i++)\
    \ {\n            if (n % i == 0) {\n                return Math.max(largestPrimeFactor(n\
    \ / i), i);\n            }\n        }\n        return n;", "        long max =\
    \ 1;\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i\
    \ == 0) {\n                max = i;\n                n /= i;\n            } else\
    \ {\n                i++;\n            }\n        }\n        if (n > 1) {\n  \
    \          max = n;\n        }\n        return max;", "        long lpf = 0;\n\
    \        if(n % 2 == 0) lpf = 2;\n        if(lpf != 0) n /= lpf;\n        if(n\
    \ % 2 == 0) n /= 2;\n        //n is now odd\n        long i = 3;\n        while(i\
    \ <= n) {\n            if(n % i == 0) {\n                n /= i;\n           \
    \     lpf = i;\n            } else {\n                i += 2;\n            }\n\
    \        }\n        return lpf;", "        long x = n;\n        for (long f =\
    \ 2; f <= x; f++) {\n            while (x % f == 0) {\n                x /= f;\n\
    \            }\n        }\n        return x;", '        return 0l;', "       \
    \ return Stream.iterate(2, i -> i + 1)\n                     .filter(x -> n %\
    \ x == 0)\n                     .filter(x -> isPrime(x))\n                   \
    \  .max(Comparator.naturalOrder())\n                     .get();", "        long\
    \ a=2;\n        if(n<=1) return -1;\n        while(n>a){\n            if(n%a==0){\n\
    \                n=n/a;\n                a=2;\n            }\n            else{\n\
    \                a++;\n            }\n        }\n        return a;", "       \
    \ long factor = 2;\n        while (n % factor != 0) {\n            factor++;\n\
    \        }\n        return factor;", "        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                n /= i;\n                i--;\n\
    \            }\n        }\n        return n;", "        long res = 1;\n      \
    \  long factor = 2;\n        while (n > 1) {\n            while (n % factor ==\
    \ 0) {\n                res = factor;\n                n /= factor;\n        \
    \    }\n            factor += 1;\n        }\n        return res;", "        long[]\
    \ data = new long[6];\n        data[0] = 2l;\n        data[1] = n;\n        data[2]\
    \ = 0l;\n        data[3] = 0l;\n        data[4] = 0l;\n        data[5] = 0l;\n\
    \        for (;;) {\n            long e0 = data[0];\n            long e1 = data[1];\n\
    \            long e2 = data[2];\n            long e3 = data[3];\n            long\
    \ e4 = data[4];\n            long e5 = data[5];\n            long e6 = 0l;\n \
    \           long e7 = 0l;\n            long e8 = 0l;\n            long e9 = 0l;\n\
    \            long e10 = 0l;\n            if ((e1 % e0) == 0l) {\n            \
    \    data[2] = e0;\n                data[1] = e1 / e0;\n                continue;\n\
    \            }\n            data[3] = 1l;\n            data[4] = e0;\n       \
    \     for (;;) {\n                long e11 = data[0];\n                long e12\
    \ = data[1];\n                long e13 = data[2];\n                long e14 =\
    \ data[3];\n                long e15 = data[4];\n                long e16 = data[5];\n\
    \                long e17 = 0l;\n                long e18 = 0l;\n            \
    \    long e19 = 0l;\n                long e20 = 0l;\n                long e21\
    \ = 0l;\n                if ((e11 * e14) >= e12) {\n                    data[0]\
    \ = e11;\n                    data[1] = e12;\n                    data[2] = e13;\n\
    \                    data[3] = e14;\n                    data[4] = e15;\n    \
    \                data[5] = e16;\n                    break;\n                }\n\
    \                if ((e12 % (e11 * e14)) == 0l) {\n                    data[3]\
    \ = e14;\n                    data[1] = e12 / (e11 * e14);\n                 \
    \   break;\n                }\n                data[4] = e11;\n              \
    \  data[3] = e", "        long largestFactor = 1;\n        long factor = 2;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    largestFactor = factor;\n                n /= factor;\n            }\n  \
    \          factor += 1;\n        }\n        return largestFactor;", "\treturn\
    \ 0;", "        long max = -1;\n        for (long i = 2; i <= n / i; i++) {\n\
    \            while (n % i == 0) {\n                max = i;\n                n\
    \ /= i;\n            }\n        }\n        if (n > 1)\n            max = n;\n\
    \        return max;", "        long lpf = 1;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                n /= i;\n           \
    \     lpf = i;\n                i--;\n            }\n        }\n        return\
    \ lpf;", '        return 0;', "        long largest = 0;\n        for (long i\
    \ = 2; i < n; i++) {\n            if (n % i == 0) {\n                if (isPrime(i))\
    \ {\n                    largest = i;\n                }\n            }\n    \
    \    }\n        return largest;", "        long[] result = {1};\n        // factorize\
    \ the first half of n, since the largest prime factor\n        // will never be\
    \ more than the halfway point\n        factorize(n, 1, n / 2, result);\n     \
    \   return result[0];", "        int d = 2;\n        while (n > 1) {\n       \
    \     while (n % d == 0) {\n                n /= d;\n            }\n         \
    \   d++;\n        }\n        return d - 1;", "        var primes = new ArrayList<Long>();\n\
    \        var factors = new ArrayList<Long>();\n        var i = 0l;\n        while\
    \ (n % 2 == 0) {\n            primes.add(2l);\n            factors.add(2l);\n\
    \            n /= 2;\n        }\n        for (i = 3; i <= n; i+=2) {\n       \
    \     if (n % i == 0) {\n                var isPrime = true;\n               \
    \ for (var j = 0; j < primes.size(); j++) {\n                    if (i % primes.get(j)\
    \ == 0) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n                if (isPrime) {\n  \
    \                  primes.add(i);\n                }\n                factors.add(i);\n\
    \                n /= i;\n            }\n        }\n        var max = 0l;\n  \
    \      for (i = 0; i < factors.size(); i++) {\n            if (max < factors.get(i))\
    \ {\n                max = factors.get(i);\n            }\n        }\n       \
    \ return max;", "        for (long i = 2; i <= n; i++) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n                i--;\n            }\n  \
    \      }\n        return n;", "        int res = 0;\n        while (n % 2 == 0)\
    \ {\n            res = 2;\n            n /= 2;\n        }\n        for (int i\
    \ = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n      \
    \          res = i;\n                n /= i;\n            }\n        }\n     \
    \   if (n > 2) {\n            res = (int) n;\n        }\n        return res;",
  "        long p = 2;\n        long n1 = n;\n        while (p * p <= n1) {\n    \
    \        if (n1 % p == 0) {\n                n1 /= p;\n            } else {\n\
    \                p++;\n            }\n        }\n        return n1;", "      \
    \  long lastFactor = 1;\n        if (n % 2 == 0) {\n            lastFactor = 2;\n\
    \            while (n % 2 == 0) {\n                n /= 2;\n            }\n  \
    \      }\n        long factor = 3;\n        long maxFactor = (long) Math.sqrt(n);\n\
    \        while (n > 1 && factor <= maxFactor) {\n            if (n % factor ==\
    \ 0) {\n                n /= factor;\n                lastFactor = factor;\n \
    \               while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n                maxFactor = (long) Math.sqrt(n);\n       \
    \     }\n            factor += 2;\n        }\n        if (n == 1) {\n        \
    \    return lastFactor;\n        } else {\n            return n;\n        }",
  "        long prime = 2;\n        while (n > 1) {\n            while (n % prime\
    \ == 0) {\n                n /= prime;\n            }\n            if (prime ==\
    \ 2) {\n                prime++;\n            } else {\n                prime\
    \ += 2;\n            }\n        }\n        return prime;", '        return 0;',
  "        long maxPrime = -1;\n        while (n % 2 == 0) {\n            maxPrime\
    \ = 2;\n            n >>= 1;\n        }\n        for (int i = 3; i <= Math.sqrt(n);\
    \ i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n\
    \                n = n / i;\n            }\n        }\n        if (n > 2)\n  \
    \          maxPrime = n;\n        return maxPrime;", "        long max = 1;\n\
    \        while (n % 2 == 0) {\n            max = 2;\n            n /= 2;\n   \
    \     }\n        for (long i = 3; i * i <= n; i += 2) {\n            while (n\
    \ % i == 0) {\n                max = i;\n                n /= i;\n           \
    \ }\n        }\n        if (n > 2) {\n            max = n;\n        }\n      \
    \  return max;", "        int f = 2;\n        while (n > 1) {\n            while\
    \ (n % f == 0) {\n                n /= f;\n            }\n            f++;\n \
    \       }\n        return f - 1;", "        for (long i = (long)Math.sqrt(n);\
    \ i > 1; i--) {\n            if (isPrime(i) && n % i == 0) {\n               \
    \ return i;\n            }\n        }\n        return 0;", "        long p = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            p = i;\n                while (n % i == 0)\n                    n\
    \ /= i;\n            }\n        }\n        return p;", "        for (long i =\
    \ 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        return n;", "        long num = n;\n\
    \        long factor = 2;\n        while (num != 1) {\n            if (num % factor\
    \ == 0) {\n                num /= factor;\n            } else {\n            \
    \    factor += 1;\n            }\n        }\n        return factor;", "      \
    \  long factor = 2;\n        while (factor < n) {\n            while (n % factor\
    \ == 0) {\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return n;", "        long largest = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i--;\n            }\n       \
    \ }\n        return largest;"]
stop_tokens:
- "\n    }\n"
