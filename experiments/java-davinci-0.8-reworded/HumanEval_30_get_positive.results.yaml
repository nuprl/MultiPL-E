language: java
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        throw new RuntimeException(\"\
    Please implement me!\");\n    }\n    public static void main(String[] args) {\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Please implement\
    \ me!\n\tat Problem.getPositive(tmphx9l81x4.java:15)\n\tat Problem.main(tmphx9l81x4.java:18)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        if (l == null)\
    \ {\n            return null;\n        }\n        else {\n            ArrayList<Long>\
    \ a = new ArrayList<Long>();\n            int i = 0;\n            while (i < l.size())\
    \ {\n                if (l.get(i) > 0) {\n                    a.add(l.get(i));\n\
    \                }\n                i = i + 1;\n            }\n            return\
    \ a;\n        }\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0l).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        //(start code)\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        for (Long i :\
    \ l) {\n            if (i > 0l) {\n                list.add(i);\n            }\n\
    \        }\n        return list;\n        //(end code)\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newL = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                newL.add(i);\n            }\n        }\n        return\
    \ newL;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long j : l) {\n            if (j\
    \ > 0) {\n                ret.add(j);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ r = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i >\
    \ 0) r.add(i);\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        if (l == null)\
    \ {\n            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                positive.add(l.get(i));\n\
    \            }\n        }\n        return positive;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)6l)));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjv5ezuaf.java:18)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long num : l) {\n            if\
    \ (num > 0) {\n                result.add(num);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) {\n                result.add(i);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // INSERT YOUR\
    \ CODE HERE\n        return l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpamjttmzr.java:19)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) {\n                result.add(i);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                positive.add(l.get(i));\n\
    \            }\n        }\n        return positive;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                pos.add(i);\n            }\n        }\n        return\
    \ pos;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.getPositive(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpwhixko32.java:18)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positiveList = new ArrayList<Long>();\n        for (Long n : l) {\n        \
    \    if (n > 0) {\n                positiveList.add(n);\n            }\n     \
    \   }\n        return positiveList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long long_obj : l) {\n       \
    \     if (long_obj > 0) {\n                result.add(long_obj);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ r = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n \
    \           if (l.get(i) > 0) {\n                r.add(l.get(i));\n          \
    \  }\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newList = new ArrayList<Long>();\n        for (Long item : l) {\n          \
    \  if (item > 0) {\n                newList.add(item);\n            }\n      \
    \  }\n        return newList;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long a : l) {\n            if (a\
    \ > 0) {\n                ret.add(a);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positiveNumbers = new ArrayList<Long>();\n        for (int i = 0; i < l.size();\
    \ i++) {\n            if (l.get(i) > 0) {\n                positiveNumbers.add(l.get(i));\n\
    \            }\n        }\n        return positiveNumbers;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long i : l) {\n           \
    \ if (i > 0) {\n                positives.add(i);\n            }\n        }\n\
    \        return positives;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // YOUR CODE\
    \ HERE\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.getPositive(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp9ze7_3_y.java:19)\n"
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Insert your\
    \ code here.\n        return new ArrayList<Long>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_gzjq5x.java:19)\n"
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ k = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n \
    \           if (l.get(i) > 0) {\n                k.add(l.get(i));\n          \
    \  }\n        }\n        return k;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.getPositive(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpwhixko32.java:18)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ll = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ll.add(l.get(i));\n        \
    \    }\n        }\n        return ll;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i >= 0) {\n                positive.add(i);\n            }\n        }\n   \
    \     return positive;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3unybsj8.java:25)\n"
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ m = new ArrayList<Long>();\n        for (Long n : l) {\n            if (n >\
    \ 0) {\n                m.add(n);\n            }\n        }\n        return m;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ toReturn = new ArrayList<Long>();\n        for (Long n : l) {\n            if\
    \ (n >= 0l) {\n                toReturn.add(n);\n            }\n        }\n  \
    \      return toReturn;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpggt05361.java:25)\n"
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long a : l) {\n            if (a\
    \ > 0) {\n                ret.add(a);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ret.add(l.get(i));\n       \
    \     }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ p = new ArrayList<Long>();\n        for (Long lo : l) {\n            if (lo\
    \ > 0) {\n                p.add(lo);\n            }\n        }\n        return\
    \ p;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newList = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) newList.add(i);\n        }\n        return newList;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Write your\
    \ code here.\n        ArrayList<Long> list = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n        \
    \        list.add(l.get(i));\n            }\n        }\n        return list;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(n -> n > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x\
    \ >= 0) {\n                pos.add(x);\n            }\n        }\n        return\
    \ pos;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7q772ws.java:25)\n"
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.getPositive(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpwhixko32.java:18)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.getPositive(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpwhixko32.java:18)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // BEGIN SOLUTION\n\
    \        return l.stream().filter(i -> i > 0).collect(Collectors.toCollection(ArrayList::new));\n\
    \        // END SOLUTION\n    }\n    public static void main(String[] args) {\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Iterate\
    \ over the entire list.\n        // Return the list containing only positive elements.\n\
    \        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp94z9bjha.java:20)\n"
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        int len = l.size();\n        for\
    \ (int i = 0; i < len; i++) {\n            long num = l.get(i);\n            if\
    \ (num > 0) {\n                positive.add(num);\n            }\n        }\n\
    \        return positive;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long elem : l) {\n         \
    \   if (elem > 0) {\n                positive.add(elem);\n            }\n    \
    \    }\n        return positive;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Do not change\
    \ the signature of this method.\n        // You need to override the getPositive\
    \ method from the superclass here.\n        return l.stream().filter(x -> x >\
    \ 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (Long ll : l) {\n            if (ll\
    \ > 0) {\n                ans.add(ll);\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(Arrays.asList((long)0l));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxjicsc5k.java:18)\n"
  stdout: ''
  timestamp: 1660011139
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                ans.add(i);\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011139
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Write your\
    \ code here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7899_o9.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011139
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(e -> e >= 0).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwa13hgpl.java:19)\n"
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ x = new ArrayList<Long>();\n        for (Long y : l) {\n            if (y >\
    \ 0) {\n                x.add(y);\n            }\n        }\n        return x;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long elem : l) {\n            if\
    \ (elem > 0) {\n                ret.add(elem);\n            }\n        }\n   \
    \     return ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long elem : l) {\n            if\
    \ (elem > 0) {\n                ret.add(elem);\n            }\n        }\n   \
    \     return ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ans.add(l.get(i));\n       \
    \     }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                ret.add(i);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                res.add(i);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(num\
    \ -> num > 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(i\
    \ -> i > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long lng : l) {\n            if\
    \ (lng > 0) {\n                result.add(lng);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(s -> (s.longValue() > 0l)).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ans.add(l.get(i));\n       \
    \     }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(a -> a > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0l).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                pos.add(i);\n            }\n        }\n        return\
    \ pos;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(i\
    \ -> i > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (Long el : l) {\n            if (el\
    \ > 0) {\n                ans.add(el);\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(a -> a > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long number : l) {\n         \
    \   if (number > 0) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        throw new UnsupportedOperationException(\"\
    Please implement the getPositive method\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement the getPositive method\n\tat Problem.getPositive(tmpet8o4qmz.java:15)\n\
    \tat Problem.main(tmpet8o4qmz.java:18)\n"
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ output = new ArrayList<Long>();\n        for (Long e : l) {\n            if\
    \ (e > 0) {\n                output.add(e);\n            }\n        }\n      \
    \  return output;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long x : l) {\n            if\
    \ (x > 0) {\n                result.add(x);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x\
    \ > 0) {\n                pos.add(x);\n            }\n        }\n        return\
    \ pos;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            Long x = l.get(i);\n            if (x > 0) {\n                res.add(x);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ r = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n \
    \           if (l.get(i) > 0) {\n                r.add(l.get(i));\n          \
    \  }\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                ret.add(i);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                ans.add(i);\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011139
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) {\n                result.add(i);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                pos.add(l.get(i));\n       \
    \     }\n        }\n        return pos;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            Long k = l.get(i);\n            if (k > 0) {\n              \
    \  result.add(k);\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x\
    \ > 0) {\n                ret.add(x);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                pos.add(i);\n            }\n        }\n        return\
    \ pos;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ rl = new ArrayList<Long>();\n        for (Long _l : l) {\n            if (_l\
    \ > 0) {\n                rl.add(_l);\n            }\n        }\n        return\
    \ rl;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(i\
    \ -> i > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                res.add(i);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // >>> start\
    \ of your code\n        l.removeIf(x -> x < 0);\n        return l;\n        //\
    \ >>> end of your code\n    }\n    public static void main(String[] args) {\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp85bidiyp.java:22)\n"
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (Long c : l) {\n            if (c\
    \ > 0) {\n                ans.add(c);\n            }\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long num : l) {\n            if\
    \ (num > 0) {\n                result.add(num);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                res.add(l.get(i));\n       \
    \     }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        throw new UnsupportedOperationException(\"\
    Not implemented yet!\");\n    }\n    public static void main(String[] args) {\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented yet!\n\tat Problem.getPositive(tmphupfh4_k.java:15)\n\tat Problem.main(tmphupfh4_k.java:18)\n"
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x\
    \ > 0) {\n                ret.add(x);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(n -> 0l < n).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) {\n                result.add(i);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x\
    \ > 0) {\n                res.add(x);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long n : l) {\n            if\
    \ (n > 0) {\n                result.add(n);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Fill in\
    \ with your solution\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.getPositive(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp1566r5h5.java:19)\n"
  stdout: ''
  timestamp: 1660011142
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        for (int i\
    \ = 0; i < l.size(); i++) {\n            if (l.get(i) < 0) {\n               \
    \ l.remove(i);\n                i--;\n            }\n        }\n        return\
    \ l;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmi2p_4a.java:25)\n"
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(el -> el > 0l).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ list = new ArrayList<Long>();\n        for (Long a : l) {\n            if (a\
    \ >= 0) {\n                list.add(a);\n            }\n        }\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbu0k8itl.java:25)\n"
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newL = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                newL.add(i);\n            }\n        }\n        return\
    \ newL;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(n\
    \ -> n > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) {\n                result.add(i);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long e : l) {\n            if (e\
    \ > 0) {\n                ret.add(e);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(num -> num > 0l).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positiveNumbers = new ArrayList<Long>();\n        for (int i = 0; i < l.size();\
    \ i++) {\n            if (l.get(i) > 0) {\n                positiveNumbers.add(l.get(i));\n\
    \            }\n        }\n        return positiveNumbers;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Write your\
    \ code here.\n        ArrayList<Long> temp = new ArrayList<Long>();\n        for(int\
    \ i = 0; i < l.size(); i++) {\n            if(l.get(i) > 0) {\n              \
    \  temp.add(l.get(i));\n            }\n        }\n        return temp;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ r = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x >\
    \ 0) {\n                r.add(x);\n            }\n        }\n        return r;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        List<Long>\
    \ l2 = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i >\
    \ 0) {\n                l2.add(i);\n            }\n        }\n        return (ArrayList<Long>)\
    \ l2;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                res.add(l.get(i));\n       \
    \     }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        l.removeIf(x\
    \ -> x <= 0);\n        return l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        l.removeIf(new\
    \ Predicate<Long>() {\n                public boolean test(Long x) {\n       \
    \             return x < (long)0l;\n                }\n            });\n     \
    \   return l;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2flwhst.java:15: error: cannot find symbol\n        l.removeIf(new\
    \ Predicate<Long>() {\n                       ^\n  symbol:   class Predicate\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x\
    \ > 0) {\n                pos.add(x);\n            }\n        }\n        return\
    \ pos;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                res.add(l.get(i));\n       \
    \     }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ s = new ArrayList<Long>();\n        for (Long a: l) {\n            if (a > 0)\
    \ s.add(a);\n        }\n        return s;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        for (int i\
    \ = 0; i < l.size(); i++) {\n            if (l.get(i) < 0) {\n               \
    \ l.remove(i);\n                i--;\n            }\n        }\n        return\
    \ l;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmi2p_4a.java:25)\n"
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newArray = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) {\n                newArray.add(i);\n            }\n        }\n    \
    \    return newArray;\n    }\n    public static void main(String[] args) {\n \
    \   assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newList = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                newList.add(l.get(i));\n\
    \            }\n        }\n        return newList;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011145
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(e -> e > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011145
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long e : l) {\n            if\
    \ (e > 0) {\n                result.add(e);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011145
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Your code\
    \ here.\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_jn207l.java:16: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011145
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long x : l) {\n            if\
    \ (x > 0) {\n                result.add(x);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long num : l) {\n            if (num\
    \ >= 0) {\n                res.add(num);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl386_apc.java:25)\n"
  stdout: ''
  timestamp: 1660011145
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        //Your code\
    \ goes here.\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq7f0mgyq.java:16: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011145
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i >\
    \ 0) {\n                a.add(i);\n            }\n        }\n        return a;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011145
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                res.add(l.get(i));\n       \
    \     }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(i -> i > 0).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0l).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> (x > 0l)).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            Long elem = l.get(i);\n            if (elem > 0) {\n            \
    \    ret.add(elem);\n            }\n        }\n        return ret;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long num : l) {\n            if (num\
    \ > 0) {\n                ret.add(num);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ans.add(l.get(i));\n       \
    \     }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ret.add(l.get(i));\n       \
    \     }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ l2 = new ArrayList<Long>();\n        for (Long x : l) {\n            if (x >\
    \ 0)\n                l2.add(x);\n        }\n        return l2;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(t\
    \ -> t > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(n -> n > 0).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(Arrays.asList((long)1l));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rvh6z3w.java:18)\n"
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(n\
    \ -> n > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // write your\
    \ code here, change return type and parameter type as needed\n        ArrayList<Long>\
    \ positives = new ArrayList<Long>();\n        for (Long n : l) {\n           \
    \ if (n > 0) {\n                positives.add(n);\n            }\n        }\n\
    \        return positives;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long e : l)\n            if (e >\
    \ 0)\n                res.add(e);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ o = new ArrayList<Long>();\n        for (Long a: l) {\n            if (a > 0)\
    \ {\n                o.add(a);\n            }\n        }\n        return o;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ans.add(l.get(i));\n       \
    \     }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(n -> n > 0).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long num : l) {\n            if (num\
    \ > 0) ret.add(num);\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ret.add(l.get(i));\n       \
    \     }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        for (int i\
    \ = 0; i < l.size(); i++) {\n            if (l.get(i) < 0) {\n               \
    \ l.remove(i);\n                i--;\n            }\n        }\n        return\
    \ l;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmi2p_4a.java:25)\n"
  stdout: ''
  timestamp: 1660011143
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ >= 0) {\n                ret.add(i);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcwbqzll.java:25)\n"
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long num : l) {\n            if (num\
    \ > 0) {\n                res.add(num);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011146
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(\n            l.stream()\n                .filter(val -> val\
    \ >= 0)\n                .collect(Collectors.toList())\n        );\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp699u71w5.java:23)\n"
  stdout: ''
  timestamp: 1660011146
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        throw new java.lang.UnsupportedOperationException(\"\
    Not implemented\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.getPositive(tmphlnf64v7.java:15)\n\tat Problem.main(tmphlnf64v7.java:18)\n"
  stdout: ''
  timestamp: 1660011146
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                res.add(i);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newList = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                newList.add(l.get(i));\n\
    \            }\n        }\n        return newList;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011145
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return (new\
    \ ArrayList<Long>(l.stream().filter(j -> j > 0).collect(Collectors.toList())));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011147
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Let's print\
    \ out the array.\n        String s = \"\";\n        for (int i = 0; i < l.size();\
    \ i++) {\n            s += (String)l.get(i) + \" \";\n        }\n        //System.out.println(s);\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                res.add(l.get(i));\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ydhjuaf.java:18: error: incompatible types: Long cannot be converted\
    \ to String\n            s += (String)l.get(i) + \" \";\n                    \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011147
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long i : l) {\n            if\
    \ (i > 0) {\n                result.add(i);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long value : l) {\n          \
    \  if (value > 0) {\n                result.add(value);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011147
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ temp = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            long val = l.get(i);\n            if (val > 0) {\n              \
    \  temp.add(val);\n            }\n        }\n        return temp;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011147
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        int sz = l.size();\n        for (int i\
    \ = 0; i < sz; i++) {\n            if (l.get(i) > 0) {\n                res.add(l.get(i));\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011147
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (Long e : l) {\n            if (e\
    \ > 0) {\n                ret.add(e);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                res.add(l.get(i));\n       \
    \     }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011143
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long n : l) {\n            if\
    \ (n > 0) {\n                result.add(n);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011142
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(i\
    \ -> i > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011140
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ newList = new ArrayList<Long>();\n        for (Long n : l) {\n            if\
    \ (n > 0) {\n                newList.add(n);\n            }\n        }\n     \
    \   return newList;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ positive = new ArrayList<Long>();\n        for (Long number : l) {\n       \
    \     if (number > 0) {\n                positive.add(number);\n            }\n\
    \        }\n        return positive;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011147
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                ret.add(l.get(i));\n       \
    \     }\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ out = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                out.add(l.get(i));\n       \
    \     }\n        }\n        return out;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.getPositive(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpwhixko32.java:18)\n"
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // >>> \n \
    \       ArrayList<Long> g = new ArrayList<Long>();\n        for (Long i : l) {\n\
    \            if (i > 0) {\n                g.add(i);\n            }\n        }\n\
    \        return g;\n        // <<<\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011147
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // Take advantage\
    \ of Java streams\n        return l.stream().filter(n -> n > 0l).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ pos = new ArrayList<Long>();\n        for (Long i : l) {\n            if (i\
    \ > 0) {\n                pos.add(i);\n            }\n        }\n        return\
    \ pos;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011134
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(i -> i >= 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq23g1v9a.java:19)\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        // YOUR CODE\
    \ HERE\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (Long\
    \ i : l) {\n            if (i > 0) res.add(i);\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(x -> (long)0l < x).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return new\
    \ ArrayList<Long>(l.stream().filter(n -> n > 0).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011137
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the array list.\n    //\
    \ >>> getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ list = new ArrayList<Long>();\n        for (int i = 0; i < l.size(); i++) {\n\
    \            if (l.get(i) > 0) {\n                list.add(l.get(i));\n      \
    \      }\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011147
