name: HumanEval_18_how_many_times
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Find how many times a given substring can be found in the\
  \ original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"\
  a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n \
  \   // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public static long\
  \ howManyTimes(String string, String substring) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
  \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        long count = 0;\n        int index = 0;\n        while (index\
    \ != -1) {\n            index = string.indexOf(substring, index);\n          \
    \  if (index != -1) {\n                index++;\n                count++;\n  \
    \          }\n        }\n        return count;", "        if (string.length()\
    \ < substring.length()) return 0l;\n        else if (string.equals(substring))\
    \ return 1l;\n        else if (string.contains(substring)) return 1l + howManyTimes(string.substring(string.indexOf(substring)\
    \ + 1), substring);\n        else return 0l;", '        return 0;', "        long\
    \ counter = 0;\n        int stringLength = string.length();\n        int substringLength\
    \ = substring.length();\n        for (int i = 0; i < stringLength; i++) {\n  \
    \          boolean match = true;\n            for (int j = 0; j < substringLength;\
    \ j++) {\n                if (i + j > stringLength - 1) {\n                  \
    \  break;\n                }\n                if (string.charAt(i + j) != substring.charAt(j))\
    \ {\n                    match = false;\n                    break;\n        \
    \        }\n            }\n            if (match) {\n                counter++;\n\
    \            }\n        }\n        return counter;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            if (i + substring.length()\
    \ > string.length()) {\n                return count;\n            }\n       \
    \     if (string.substring(i, i + substring.length()).equals(substring)) {\n \
    \               count++;\n            }\n        }\n        return count;", " \
    \       long res = 0;\n        // the implementation goes here\n        return\
    \ res;", "        int index = 0;\n        int count = 0;\n        while (index\
    \ != -1) {\n            index = string.indexOf(substring, index);\n          \
    \  if (index != -1) {\n                count++;\n                index++;\n  \
    \          }\n        }\n        return (long) count;", "        if(string.isEmpty()\
    \ || substring.isEmpty()) return 0;\n        long count = 0;\n        for(int\
    \ i = 0; i < string.length(); ++i) {\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                boolean isEqual = true;\n                for(int j = 1; j\
    \ < substring.length(); ++j) {\n                    if(i + j >= string.length()\
    \ || string.charAt(i + j) != substring.charAt(j)) {\n                        isEqual\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if(isEqual) {\n                    ++count;\n      \
    \              i += substring.length() - 1;\n                }\n            }\n\
    \        }\n        return count;", "        long n = (long) 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                for (int j = 0; j < substring.length(); j++) {\n        \
    \            if (i + j >= string.length())\n                        break;\n \
    \                   if (string.charAt(i + j) != substring.charAt(j))\n       \
    \                 break;\n                    if (j == substring.length() - 1)\n\
    \                        n++;\n                }\n            }\n        }\n \
    \       return n;", "        if (string.length() == 0 || substring.length() ==\
    \ 0) return 0l;\n        long ans = 0l;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            String chunk = string.substring(i, Math.min(i + substring.length(),\
    \ string.length()));\n            int len = chunk.length();\n            if (len\
    \ == substring.length() && chunk.equals(substring)) {\n                ans++;\n\
    \            }\n        }\n        return ans;", "        if (string.isEmpty()\
    \ || substring.isEmpty()) {\n            return 0l;\n        }\n        long count\
    \ = 0l;\n        int pos = string.indexOf(substring);\n        while (pos != -1)\
    \ {\n            count += 1l;\n            pos = string.indexOf(substring, pos\
    \ + 1);\n        }\n        return count;", "        int ls = string.length();\n\
    \        int lsub = substring.length();\n        int i = 0;\n        long n =\
    \ 0;\n        while(i <= ls - lsub) {\n            if(string.substring(i, i +\
    \ lsub).equals(substring)) {\n                n += 1;\n                i += lsub;\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return n;", "        // firstly, calculate the length of substring\n   \
    \     int sublen = substring.length();\n        if (sublen == 0) {\n         \
    \   return 0;\n        }\n        char[] sArr = string.toCharArray();\n      \
    \  char[] subArr = substring.toCharArray();\n        // count the number of substring\
    \ in the original string\n        long count = 0;\n        // then use a double\
    \ loop to find all the same substring in the original string\n        for (int\
    \ i = 0; i < sArr.length; i++) {\n            // It is possible that sArr[i] is\
    \ not the beginning of a substring.\n            // Hence, we only compare it\
    \ with subArr[0] if sArr[i] is the first char.\n            if (sArr[i] == subArr[0])\
    \ {\n                // after that, check the other characters in the substring\n\
    \                int j = 0;\n                for (j = 0; j < sublen; j++) {\n\
    \                    // if all the characters are the same, then count is plus\
    \ one\n                    if (sArr[i + j] != subArr[j]) {\n                 \
    \       break;\n                    }\n                }\n                if (j\
    \ == sublen) {\n                    count++;\n                }\n            }\n\
    \        }\n        return count;", '        return string.chars().filter(c ->
    c == substring.charAt(0)).mapToObj(i -> string.substring(i, i + substring.length())).filter(substring::equals).count();',
  "        long times = 0;\n        int i = 0;\n        while (i <= string.length()\
    \ - substring.length()) {\n            int j = 0;\n            while (j < substring.length()\
    \ && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n  \
    \          }\n            if (j == substring.length()) {\n                times++;\n\
    \                i += j;\n            } else {\n                i++;\n       \
    \     }\n        }\n        return times;", "        return IntStream.range(0,\
    \ string.length() - substring.length() + 1)\n            .mapToObj(i -> string.substring(i,\
    \ i + substring.length()))\n            .filter(string.substring(i, i + substring.length())::equals)\n\
    \            .count();", "        int idx = string.indexOf(substring);\n     \
    \   long count = 0;\n        while (idx >= 0) {\n            count++;\n      \
    \      idx = string.indexOf(substring, idx + 1);\n        }\n        return count;",
  "        if(string.equals(\"\") || substring.equals(\"\")) {\n            return\
    \ 0l;\n        }\n        final long[] result = {0l};\n        IntStream.range(0,\
    \ string.length()).forEach(i -> {\n            if(i + substring.length() - 1 <\
    \ string.length()) {\n                String token = string.substring(i, i + substring.length());\n\
    \                if(token.equals(substring)) {\n                    result[0]++;\n\
    \                }\n            }\n        });\n        return result[0];", " \
    \       // >>> howManyTimes((\"\"), (\"a\"))\n        // (0l)\n        // >>>\
    \ howManyTimes((\"aaa\"), (\"a\"))\n        // (3l)\n        // >>> howManyTimes((\"\
    aaaa\"), (\"aa\"))\n        // (3l)\n        long count = 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            if (i + substring.length() <=\
    \ string.length()) {\n                String cmp = string.substring(i, i + substring.length());\n\
    \                if (cmp.equals(substring)) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  if (string.length() == 0 || substring.length() == 0) {\n            return\
    \ 0;\n        }\n        // substring = \"abcde\"\n        // string = \"abcdefgabcdefghijk\"\
    \n        // string[i] -> \"abcde\"\n        // string[i + 1] -> \"bcdef\"\n \
    \       // string[i + 2] -> \"cdefg\"\n        long n = string.length() - substring.length()\
    \ + 1;\n        long cnt = 0;\n        for (int i = 0; i < n; i++) {\n       \
    \     if (string.substring(i, i + substring.length()).equals(substring)) {\n \
    \               cnt += 1;\n            }\n        }\n        return cnt;", " \
    \       long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (i + substring.length() <= string.length()) {\n              \
    \  String sub = string.substring(i, i + substring.length());\n               \
    \ if (sub.equals(substring)) {\n                    count++;\n               \
    \ }\n            }\n        }\n        return count;", "        return Stream.iterate(0,\
    \ i -> i <= string.length() - substring.length(), i -> i + 1)\n            .filter(i\
    \ -> string.substring(i, i + substring.length()).equals(substring))\n        \
    \    .count();", '        return string.chars().mapToObj(c -> (char) c).collect(Collectors.toList()).stream().map(x
    -> "".equals(x.toString()) ? "" : x.toString()).map(x -> x.length() == 0 ? 0 :
    1).reduce(0, (a, b) -> a + b);', "        int sizeOfString = string.length();\n\
    \        int sizeOfSubstring = substring.length();\n        return IntStream.range(0,\
    \ sizeOfString - sizeOfSubstring + 1)\n            .map(offset -> string.substring(offset,\
    \ offset + sizeOfSubstring))\n            .filter(substring::equals)\n       \
    \     .count();", '        return 0;', "        if(substring.length() > string.length())\
    \ return 0l;\n        long times = 0l;\n        for(int i = 0; i < string.length()\
    \ - substring.length() + 1; i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ times++;\n        }\n        return times;", '        return Arrays.stream(string.split(substring,
    -1)).count() - 1;', '        throw new RuntimeException("Not implemented");',
  '        return howManyTimes(string, substring, 0);', "        if (string.length()\
    \ < substring.length()) {\n            return 0l;\n        } else if (string.length()\
    \ == substring.length()) {\n            return string.equals(substring) ? 1l :\
    \ 0l;\n        } else {\n            int length = substring.length();\n      \
    \      long count = 0l;\n            for (int start = 0; start < string.length()\
    \ - length + 1; start++) {\n                if (string.substring(start, start\
    \ + length).equals(substring)) {\n                    count++;\n             \
    \   }\n            }\n            return count;\n        }", "        long count\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.indexOf(substring,\
    \ i) == i)\n                count++;\n        }\n        return count;", "   \
    \     long result = 0l;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (string.charAt(i) == substring.charAt(0)) {\n                StringBuilder\
    \ sb = new StringBuilder();\n                int j = 0;\n                while\
    \ (i < string.length() && j < substring.length() && string.charAt(i) == substring.charAt(j))\
    \ {\n                    sb.append(string.charAt(i));\n                    i++;\n\
    \                    j++;\n                }\n                if (sb.toString().equals(substring))\
    \ {\n                    result++;\n                }\n                i--;\n\
    \            }\n        }\n        return result;", "        // TODO: implement\n\
    \        return 0l;", "        long count = 0;\n        int index = 0;\n     \
    \   while (index >= 0) {\n            index = string.indexOf(substring, index);\n\
    \            if (index != -1) {\n                count += 1;\n               \
    \ index += substring.length();\n            }\n        }\n        return count;",
  "        String temp = string;\n        int step = substring.length();\n       \
    \ long count = 0;\n        for (int i = 0; i < temp.length(); i++) {\n       \
    \     if (temp.indexOf(substring) != -1) {\n                temp = temp.substring(temp.indexOf(substring)\
    \ + step);\n                count++;\n            }\n        }\n        return\
    \ count;", "        long length_string = (long)string.length();\n        long\
    \ length_substring = (long)substring.length();\n        long count = 0l;\n   \
    \     for (long i = 0l; i < (length_string - length_substring + 1l); i++) {\n\
    \            if (string.substring((int)i, (int)(i + length_substring)).equals(substring))\
    \ {\n                count = count + 1l;\n            }\n        }\n        return\
    \ count;", "        // >>> my_string = \"aklsdjasdjasdfasdf\"\n        // >>>\
    \ my_substring = \"asdf\"\n        // >>> my_string.count(my_substring)\n    \
    \    // 2\n        return (long)string.codePoints().filter(ch -> ch == substring.codePointAt(0)).count();",
  "        // *** your code here ***\n        // Use String methods.\n        return\
    \ 0;", "        long count = 0;\n        for (int i = 0; i < string.length();\
    \ ++i) {\n            for (int j = 0; j < substring.length(); ++j) {\n       \
    \         if (i + j >= string.length()) {\n                    break;\n      \
    \          }\n                if (string.charAt(i + j) != substring.charAt(j))\
    \ {\n                    break;\n                }\n                if (j == substring.length()\
    \ - 1) {\n                    ++count;\n                }\n            }\n   \
    \     }\n        return count;", "        long result = 0;\n        if (string.length()\
    \ < substring.length()) {\n            return result;\n        } else {\n    \
    \        int begin = 0;\n            while (begin + substring.length() <= string.length())\
    \ {\n                if (string.substring(begin, begin + substring.length()).equals(substring))\
    \ {\n                    result += 1;\n                    begin += substring.length();\n\
    \                } else {\n                    begin += 1;\n                }\n\
    \            }\n            return result;\n        }", '        return 0;', " \
    \       long result = 0;\n        int size = substring.length();\n        int\
    \ index = string.indexOf(substring);\n        while (index != -1) {\n        \
    \    result++;\n            index = string.indexOf(substring, index + size);\n\
    \        }\n        return result;", "        long c = 0;\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            int j = 0;\n            while\
    \ (i + j < string.length() && j < substring.length() && substring.charAt(j) ==\
    \ string.charAt(i + j)) {\n                j++;\n            }\n            if\
    \ (j == substring.length()) {\n                c++;\n            }\n        }\n\
    \        return c;", '        return -1;', "        if (string.isEmpty() || substring.isEmpty())\
    \ {\n            return 0;\n        }\n        long count = 0;\n        int index\
    \ = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n \
    \           count++;\n            index += substring.length();\n        }\n  \
    \      return count;", "        long count = 0;\n        int index = 0;\n    \
    \    while (true) {\n            index = string.indexOf(substring, index);\n \
    \           if (index == -1) break;\n            count++;\n            index++;\n\
    \        }\n        return count;", "        // >>> howManyTimes((\"\"), (\"a\"\
    ))\n        // (0l)\n        // >>> howManyTimes((\"aaa\"), (\"a\"))\n       \
    \ // (3l)\n        // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n        // (3l)\n\
    \        int sublen = substring.length();\n        int len = string.length();\n\
    \        long answer = 0l;\n        for (int i = 0; i <= len - sublen; i++) {\n\
    \            if (string.substring(i, i + sublen).equals(substring)) {\n      \
    \          answer++;\n            }\n        }\n        return answer;", "   \
    \     int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
    \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long result = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            for (int j = 0; j < substring.length(); j++) {\n                if\
    \ (i + j < string.length() && string.charAt(i + j) == substring.charAt(j)) {\n\
    \                    if (j == substring.length() - 1) {\n                    \
    \    result++;\n                    }\n                } else {\n            \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        if (string.length() < substring.length()) {\n            return 0;\n  \
    \      }\n        if (string.equals(substring)) {\n            return 1;\n   \
    \     }\n        return howManyTimes(string.substring(1), substring) + (string.substring(0,\
    \ substring.length()).equals(substring) ? 1 : 0);", "        long cnt = 0;\n \
    \       for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                cnt++;\n            }\n        }\n        return cnt;", " \
    \       return (long) IntStream.range(0, string.length()).filter(index -> {\n\
    \            return IntStream.range(0, substring.length()).allMatch(index2 ->\
    \ {\n                return index + index2 < string.length() && string.charAt(index\
    \ + index2) == substring.charAt(index2);\n            });\n        }).count();",
  "        long count = 0;\n        int slen = string.length();\n        int len =\
    \ substring.length();\n        int i = 0;\n        while (i < slen) {\n      \
    \      String curr = string.substring(i, i + len);\n            if (curr.equals(substring))\
    \ {\n                count += 1;\n                i += len;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n        return count;",
  "        return Stream.iterate(0, i -> i + 1)\n            .map(i -> string.indexOf(substring,\
    \ i))\n            .takeWhile(i -> i != -1)\n            .count();", '        return
    (long) Math.ceil((string.length() - substring.length() + 1) / (double) (substring.length()));',
  "        int len1 = string.length();\n        int len2 = substring.length();\n \
    \       int ret = 0;\n        int index = string.indexOf(substring);\n       \
    \ while (index >= 0) {\n            ret++;\n            string = string.substring(index\
    \ + len2);\n            index = string.indexOf(substring);\n        }\n      \
    \  return ret;", "        long count = 0;\n        // TODO: fill in here\n   \
    \     return count;", "        long l = 0;\n        for (int i = 0; i <= string.length()\
    \ - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                l++;\n            }\n        }\n        return l;", '        throw
    new UnsupportedOperationException("Please implement the howManyTimes() method");',
  "        long result = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (i + substring.length() <= string.length()) {\n              \
    \  String temp = string.substring(i, i + substring.length());\n              \
    \  if (temp.equals(substring)) {\n                    result++;\n            \
    \    }\n            }\n        }\n        return result;", "        long count\
    \ = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++)\
    \ {\n            String tmp = string.substring(i, i + substring.length());\n \
    \           if (tmp.equals(substring)) {\n                count += 1;\n      \
    \      }\n        }\n        return count;", "        long result = 0;\n     \
    \   for (int i = 0; i < string.length(); i++) {\n            for (int j = 0; j\
    \ < substring.length(); j++) {\n                if (string.charAt(i) == substring.charAt(j))\
    \ {\n                    result++;\n                }\n            }\n       \
    \ }\n        return result;", "        int counter = 0;\n        for (int i =\
    \ 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i,\
    \ i + substring.length()).equals(substring)) {\n                counter++;\n \
    \           }\n        }\n        return counter;", '        return (long)Math.ceil((double)string.length()/(double)substring.length());',
  "        int sizeOfString = string.length();\n        int sizeOfSubstring = substring.length();\n\
    \        if (sizeOfString == 0 || sizeOfSubstring == 0) return 0l;\n        int\
    \ howManyTimes = 0;\n        int index = string.indexOf(substring);\n        while\
    \ (index != -1) {\n            ++howManyTimes;\n            index = string.indexOf(substring,\
    \ index + 1);\n        }\n        return howManyTimes;", '        return IntStream.range(0,
    string.length()).filter(i -> string.regionMatches(i, substring, 0, substring.length())).count();',
  "        StringBuilder sb = new StringBuilder(string);\n        long count = 0;\n\
    \        for (int i = 0; i < sb.length(); ++i) {\n            if (sb.substring(i).startsWith(substring))\
    \ {\n                ++count;\n                i += substring.length() - 1;\n\
    \            }\n        }\n        return count;", '        return 0l;', "   \
    \     if (string.length() < substring.length()) {\n            return 0;\n   \
    \     }\n        if (string.length() == substring.length()) {\n            return\
    \ string.equals(substring) ? 1 : 0;\n        }\n        long count = 0;\n    \
    \    for (int i = 0; i <= string.length() - substring.length(); i++) {\n     \
    \       if (string.substring(i, i + substring.length()).equals(substring)) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       // Assert.assertNotNull(string);\n        // Assert.assertNotNull(substring);\n\
    \        // Assert.assertTrue(!string.isEmpty());\n        // Assert.assertTrue(!substring.isEmpty());\n\
    \        // Assert.assertTrue(string.length() >= substring.length());\n      \
    \  int N = string.length();\n        int M = substring.length();\n        int\
    \ n = N - M + 1;\n        long[] H = new long[n];\n        long[] pows = new long[M];\n\
    \        H[0] = substring.charAt(0);\n        pows[0] = 1;\n        long pow =\
    \ 1;\n        long P = 1000000007;\n        long x = 1;\n        long ans = 0;\n\
    \        for (int i = 1; i < M; i++) {\n            x = (x * x) % P;\n       \
    \     pows[i] = x;\n            H[0] = (H[0] * x + substring.charAt(i)) % P;\n\
    \        }\n        for (int i = 1; i < n; i++) {\n            H[i] = (H[i - 1]\
    \ * x + string.charAt(i + M - 1) - string.charAt(i - 1) * pows[M - 1]) % P;\n\
    \            if (H[i] < 0) {\n                H[i] += P;\n            }\n    \
    \    }\n        for (int i = 0; i < n; i++) {\n            if (H[i] == H[0]) {\n\
    \                boolean ok = true;\n                for (int j = 0; j < M; j++)\
    \ {\n                    if (string.charAt(i + j) != substring.charAt(j)) {\n\
    \                        ok = false;\n                        break;\n       \
    \             }\n                }\n                if (ok) {\n              \
    \      ans++;\n                }\n            }\n        }\n        return ans;",
  '        return 0;', "        long count = 0;\n        int index = 0;\n        while\
    \ ((index = string.indexOf(substring, index)) != -1) {\n            index += substring.length();\n\
    \            count++;\n        }\n        return count;", '        throw new UnsupportedOperationException("Not
    implemented yet.");', "        if (string.length() <= 0 || substring.length()\
    \ <= 0) {\n            return 0;\n        }\n        int count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            if (i + substring.length()\
    \ > string.length()) {\n                break;\n            }\n            if\
    \ (string.substring(i, i + substring.length()).equals(substring)) {\n        \
    \        count++;\n            }\n        }\n        return count;", "       \
    \ return Stream.iterate(0, n -> n + 1)\n            .limit(string.length() - substring.length()\
    \ + 1)\n            .filter(n -> string.substring(n, n + substring.length()).equals(substring))\n\
    \            .count();", "        return IntStream.range(0, string.length() -\
    \ substring.length() + 1)\n            .filter(s -> string.substring(s, s + substring.length()).equals(substring))\n\
    \            .count();", "        // >>> myString = \"aaaaaaaaa\"\n        //\
    \ >>> myString.replace(\"aa\", \"\")\n        // 'a'\n        // >>> myString.replace(\"\
    aa\", \"\").length()\n        // 1\n        return 0l;", "        long n = 0l;\n\
    \        long k = 0l;\n        long m = substring.length();\n        while (n\
    \ < string.length()) {\n            if (string.substring(n, Math.min(n + m, string.length())).equals(substring))\
    \ {\n                k++;\n                n += m;\n            } else {\n   \
    \             n++;\n            }\n        }\n        return k;", "        long\
    \ x = -1;\n        int index = 0;\n        while (true) {\n            x++;\n\
    \            index = string.indexOf(substring, index);\n            if (index\
    \ == -1) {\n                break;\n            }\n            index += substring.length();\n\
    \        }\n        return x;", "        int s = string.length();\n        int\
    \ u = substring.length();\n        if (u == 0) {\n            return 0;\n    \
    \    }\n        if (s == 0) {\n            return 0;\n        }\n        if (u\
    \ > s) {\n            return 0;\n        }\n        int l = s - u;\n        long\
    \ r = 0;\n        for (int i = 0; i <= l; i++) {\n            if (string.substring(i,\
    \ i + u).equals(substring)) {\n                r++;\n            }\n        }\n\
    \        return r;", "        int i = 0;\n        long n = 0;\n        while ((i\
    \ = string.indexOf(substring, i)) != -1) {\n            i++;\n            n++;\n\
    \        }\n        return n;", '        return 0;', "        if (string.length()\
    \ < substring.length()) return 0;\n        if (string.equals(substring)) return\
    \ 1;\n        if (string.substring(0, substring.length()).equals(substring)) return\
    \ 1 + howManyTimes(string.substring(1), substring);\n        return howManyTimes(string.substring(1),\
    \ substring);", '        return 0;', "        int count = 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            for (int j = 0; j < substring.length();\
    \ j++) {\n                if (string.charAt(i + j) != substring.charAt(j)) {\n\
    \                    break;\n                }\n                if (j == substring.length()\
    \ - 1) {\n                    count++;\n                }\n            }\n   \
    \     }\n        return count;", '        return string.split(substring, -1).length
    - 1;', "        return (long) Stream.iterate(0, n -> n + 1)\n            .takeWhile(n\
    \ -> n <= string.length() - substring.length())\n            .filter(n -> string.substring(n,\
    \ n + substring.length()).equals(substring))\n            .count();", "      \
    \  long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n    \
    \        if (string.substring(i).startsWith(substring)) {\n                count++;\n\
    \            }\n        }\n        return count;", '        return (long)Stream.iterate(0,
    i -> i + 1).takeWhile(i -> i <= string.length() - substring.length()).filter(i
    -> string.substring(i, i + substring.length()).equals(substring)).count();', " \
    \       int index = -1;\n        int count = 0;\n        while ((index = string.indexOf(substring,\
    \ index + 1)) != -1) {\n            count++;\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (string.charAt(i) == substring.charAt(0)) {\n                if\
    \ (i + substring.length() <= string.length()) {\n                    boolean found\
    \ = true;\n                    for (int j = 1; j < substring.length(); j++) {\n\
    \                        if (string.charAt(i + j) != substring.charAt(j)) {\n\
    \                            found = false;\n                            break;\n\
    \                        }\n                    }\n                    if (found)\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", "        long count = 0;\n\
    \        int pointer = 0;\n        while (pointer != -1) {\n            pointer\
    \ = string.indexOf(substring, pointer);\n            if (pointer != -1) {\n  \
    \              pointer += substring.length();\n                count++;\n    \
    \        }\n        }\n        return count;", "        if (string.equals(\"\"\
    ) || substring.equals(\"\")) {\n            return 0;\n        } else {\n    \
    \        return string.split(substring, -1).length - 1;\n        }", '        return
    java.util.regex.Pattern.compile(substring).matcher(string).results().count();',
  "        // no substring to find.\n        if (substring.length() == 0) {\n    \
    \        return 0l;\n        }\n        // no string to count.\n        if (string.length()\
    \ == 0) {\n            return 0l;\n        }\n        // String is smaller than\
    \ substring.\n        if (string.length() < substring.length()) {\n          \
    \  return 0l;\n        }\n        long n = 0l;\n        for (int i = 0; i <= string.length()\
    \ - substring.length(); i++) {\n            boolean match = true;\n          \
    \  for (int j = 0; j < substring.length(); j++) {\n                if (string.charAt(i\
    \ + j) != substring.charAt(j)) {\n                    match = false;\n       \
    \             break;\n                }\n            }\n            if (match)\
    \ {\n                n++;\n            }\n        }\n        return n;", "   \
    \     long cnt = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
    \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                cnt++;\n            }\n        }\n        return cnt;", '        return
    string.chars().mapToObj(c -> (char) c).collect(Collectors.toList()).stream().map(c
    -> string.split(c + "")).flatMap(Arrays::stream).filter(s -> s.indexOf(substring)
    >= 0).count();', '        return 0l;', "        int index = 0;\n        int count\
    \ = 0;\n        while(index >= 0) {\n            index = string.indexOf(substring,\
    \ index);\n            if(index >= 0) {\n                count += 1;\n       \
    \         index += substring.length();\n            }\n        }\n        return\
    \ (long) count;", "        int count = 0;\n        int index = 0;\n        while\
    \ (index != -1) {\n            index = string.indexOf(substring, index);\n   \
    \         if (index != -1) {\n                count++;\n                index\
    \ += substring.length();\n            }\n        }\n        return count;", " \
    \       int ans = 0;\n        int length = substring.length();\n        for (int\
    \ i = 0; i < string.length() - length + 1; i++) {\n            if (string.substring(i,\
    \ i + length).equals(substring)) {\n                ans++;\n            }\n  \
    \      }\n        return ans;", "        long ret = 0;\n        for (int i = 0;\
    \ i <= string.length() - substring.length(); i++) {\n            String substring1\
    \ = string.substring(i, i + substring.length());\n            if (substring1.equals(substring))\
    \ {\n                ret++;\n            }\n        }\n        return ret;", " \
    \       long result = 0;\n        if(string.length() < substring.length()) {\n\
    \            return result;\n        }\n        for(int i = 0; i < string.length()\
    \ - substring.length() + 1; i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        long count = 0;\n        for (int i = 0; i < string.length(); ++i) {\n\
    \            if (i+substring.length() > string.length()) {\n                break;\n\
    \            }\n            String currentString = string.substring(i, i+substring.length());\n\
    \            if (currentString.equals(substring)) {\n                count +=\
    \ 1;\n            }\n        }\n        return count;", "        String s = string;\n\
    \        String t = substring;\n        int n = s.length();\n        int m = t.length();\n\
    \        if (m > n) return 0;\n        long res = 0;\n        for (int i = 0;\
    \ i <= n - m; i++) {\n            int j = 0;\n            while (j < m && s.charAt(i\
    \ + j) == t.charAt(j)) {\n                j++;\n            }\n            if\
    \ (j == m) {\n                res++;\n            }\n        }\n        return\
    \ res;", "        long count = 0;\n        int index = 0;\n        while (index\
    \ < string.length()) {\n            index = string.indexOf(substring, index);\n\
    \            if (index == -1) {\n                break;\n            }\n     \
    \       count++;\n            index++;\n        }\n        return count;", '        return
    0;', "        // you code here\n        int l1 = string.length();\n        int\
    \ l2 = substring.length();\n        if (l1 < l2) return 0;\n        else if (l1\
    \ == l2) {\n            if (string.equals(substring)) return 1;\n            else\
    \ return 0;\n        }\n        else {\n            long count = 0;\n        \
    \    for (int i = 0; i <= l1 - l2; i++) {\n                if (string.substring(i,\
    \ i + l2).equals(substring)) {\n                    count += 1;\n            \
    \    }\n            }\n            return count;\n        }", "        long res\
    \ = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++)\
    \ {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                res++;\n            }\n        }\n        return res;", " \
    \       long count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
    \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\n\
    \                count++;\n        }\n        return count;", "        long result\
    \ = 0;\n        String sub = substring;\n        while (string.contains(sub))\
    \ {\n            result++;\n            int i = string.indexOf(sub);\n       \
    \     i++;\n            string = string.substring(i);\n        }\n        return\
    \ result;", '        return string.replaceAll("(?!" + substring + ")+", " ").split("
    ").length - 1;', '        return 0l;', "        long count = 0;\n        int index\
    \ = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n \
    \           count++;\n            index += substring.length();\n        }\n  \
    \      return count;", "        int index = 0;\n        int count = 0;\n     \
    \   while (index != -1) {\n            index = string.indexOf(substring, index);\n\
    \            if (index != -1) {\n                index += substring.length();\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       return Long.valueOf(\n                string.length() -\n            \
    \    string.replace(substring, \"\").length()\n        ) / substring.length();",
  "        long count = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (i + substring.length() <= string.length()) {\n              \
    \  String currentString = string.substring(i, i + substring.length());\n     \
    \           if (currentString.equals(substring)) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  if (string.length() == 0 || substring.length() == 0) {\n            return\
    \ 0l;\n        }\n        long count = 0l;\n        int j = 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(j))\
    \ {\n                j++;\n                if (j == substring.length()) {\n  \
    \                  count++;\n                    j = 0;\n                }\n \
    \           } else {\n                j = 0;\n            }\n        }\n     \
    \   return count;", "        long c=0;\n        int i=0;\n        while(i<string.length()){\n\
    \            if(string.substring(i).startsWith(substring)){\n                c++;\n\
    \                i+=substring.length();\n            }else{\n                i++;\n\
    \            }\n        }\n        return c;", "        long count = 0;\n    \
    \    int index = 0;\n        while ((index = string.indexOf(substring, index))\
    \ != -1) {\n            count++;\n            index += substring.length();\n \
    \       }\n        return count;", "        long count = 0;\n        int size\
    \ = substring.length();\n        int i = 0;\n        while (i < string.length())\
    \ {\n            if (string.substring(i, i + size).equals(substring)) {\n    \
    \            count += 1;\n                i += size;\n            } else {\n \
    \               i += 1;\n            }\n        }\n        return count;", " \
    \       long result = 0l;\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (i + substring.length() <= string.length()) {\n              \
    \  if (string.substring(i, i + substring.length()).equals(substring)) {\n    \
    \                result++;\n                }\n            }\n        }\n    \
    \    return result;", '        return IntStream.range(0, (string.length() - substring.length()
    + 1)).mapToObj(i -> string.substring(i, (i + substring.length()))).filter(substring::equals).count();',
  "        int subStringLength = substring.length();\n        int stringLength = string.length();\n\
    \        long count = 0;\n        for (int i = 0; i < stringLength; i++) {\n \
    \           for (int j = i + 1; j <= stringLength; j++) {\n                if\
    \ (j - i == subStringLength) {\n                    if (string.substring(i, j).equals(substring))\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", "        if (string.length()\
    \ < substring.length()) {\n            return 0;\n        }\n        if (string.equals(substring))\
    \ {\n            return 1;\n        }\n        int result = 0;\n        int i\
    \ = 0;\n        while (i < string.length() - substring.length() + 1) {\n     \
    \       if (string.substring(i, i + substring.length()).equals(substring)) {\n\
    \                result++;\n                i += substring.length();\n       \
    \     } else {\n                i++;\n            }\n        }\n        return\
    \ result;", "        if (string.length() < substring.length()) {\n           \
    \ return 0l;\n        }\n        if (string.length() == substring.length()) {\n\
    \            return (string.equals(substring)) ? 1l : 0l;\n        }\n       \
    \ long count = 0l;\n        long lastCount = howManyTimes(string.substring(1),\
    \ substring);\n        if (lastCount == 0) {\n            if (string.substring(0,\
    \ 1).equals(substring)) {\n                count++;\n            }\n        }\
    \ else {\n            if (string.substring(0, 1).equals(substring.substring(0,\
    \ 1))) {\n                count += lastCount;\n            }\n        }\n    \
    \    return count;", "        String regex = String.format(\"(?=%s)\", substring);\n\
    \        int num = (int) Arrays.stream(string.split(regex, -1)).count() - 1;\n\
    \        return num;", "        if (string.isEmpty() || substring.isEmpty()) return\
    \ 0;\n        return string.split(substring, -1).length - 1;", "        long counter\
    \ = 0;\n        int N = string.length();\n        int M = substring.length();\n\
    \        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++)\
    \ {\n                if (i + j < N && string.charAt(i + j) == substring.charAt(j))\
    \ {\n                    if (j == M - 1) counter++;\n                } else break;\n\
    \            }\n        }\n        return counter;", '        return Long.valueOf(string.split(substring,
    -1).length) - 1;', '        return string.split(substring, -1).length - 1;', " \
    \       long n = 0;\n        for (int i = 0; i < string.length(); i++) {\n   \
    \         int a = string.indexOf(substring, i);\n            if (a == -1) {\n\
    \                break;\n            }\n            n++;\n            i = a;\n\
    \        }\n        return n;", "        // >>> string.split(substring).length-1\n\
    \        // 3\n        // >>> \"\".split(\",\").length-1\n        // -1\n    \
    \    if (string.length() == 0 || substring.length() == 0) return 0;\n        return\
    \ (long) string.split(substring).length - 1;", '        return java.util.regex.Pattern.compile(substring).matcher(string).results().count();',
  "        return IntStream.range(0, string.length() - substring.length() + 1)\n \
    \               .filter(idx -> string.substring(idx, idx + substring.length()).equals(substring))\n\
    \                .count();", "        return (long)IntStream.range(0, string.length()\
    \ - substring.length() + 1)\n            .filter(i -> string.substring(i, i +\
    \ substring.length()).equals(substring))\n            .count();", '        return
    (long) string.split(substring, -1).length - 1;', "        int lastIndex = 0;\n\
    \        int count = 0;\n        while(lastIndex != -1){\n            lastIndex\
    \ = string.indexOf(substring,lastIndex);\n            if(lastIndex != -1){\n \
    \               count ++;\n                lastIndex += substring.length();\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            if (i + substring.length()\
    \ > string.length()) {\n                break;\n            }\n            if\
    \ (string.substring(i, i + substring.length()).equals(substring)) {\n        \
    \        count += 1;\n            }\n        }\n        return count;", '        return
    0;', "        long ans = 0;\n        int idx = 0;\n        while (idx < string.length())\
    \ {\n            idx = string.indexOf(substring, idx);\n            if (idx ==\
    \ -1) break;\n            ++ans;\n            idx += substring.length();\n   \
    \     }\n        return ans;", "        long count = 0;\n        if (string.length()\
    \ == 0) {\n            return count;\n        } else {\n            for (int i\
    \ = 0; i < string.length(); i++) {\n                if (string.substring(i).startsWith(substring))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    return count;\n        }", "        long result = 0;\n        int from =\
    \ 0;\n        int index = string.indexOf(substring, from);\n        while (index\
    \ >= 0) {\n            from = index + 1;\n            result++;\n            index\
    \ = string.indexOf(substring, from);\n        }\n        return result;", "  \
    \      return Stream.iterate(0, x -> x <= string.length() - substring.length(),\
    \ x -> x + 1)\n                .filter(x -> string.substring(x, x + substring.length()).equals(substring))\n\
    \                .count();", "        long count = 0;\n        int n = string.length();\n\
    \        int m = substring.length();\n        for (int i = 0; i < n; i++) {\n\
    \            if (i+m > n) {\n                break;\n            }\n         \
    \   String fragment = string.substring(i, i+m);\n            if (fragment.equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        int strIndex = 0;\n        int subIndex = 0;\n\
    \        int strLen = string.length();\n        int subLen = substring.length();\n\
    \        while (strIndex < strLen) {\n            char strChar = string.charAt(strIndex);\n\
    \            char subChar = substring.charAt(subIndex);\n            if (strChar\
    \ == subChar) {\n                subIndex += 1;\n                if (subIndex\
    \ == subLen) {\n                    count += 1;\n                    subIndex\
    \ = 0;\n                }\n            } else {\n                subIndex = 0;\n\
    \            }\n            strIndex += 1;\n        }\n        return count;",
  '        return string.chars().mapToObj(ch -> Character.toString((char) ch)).filter(c
    -> c.equals(substring)).count();', "        long howManyTimes = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            int index = string.indexOf(substring,\
    \ i);\n            if (index != -1) {\n                howManyTimes++;\n     \
    \           i = index;\n            }\n        }\n        return howManyTimes;",
  "        if (string.length() < substring.length()) {\n            return 0;\n  \
    \      }\n        long ret = 0;\n        int i = 0;\n        while (i <= string.length()\
    \ - substring.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                ret++;\n                i += substring.length();\n      \
    \      } else {\n                i++;\n            }\n        }\n        return\
    \ ret;", "        // BigInteger temp = BigInteger.ZERO;\n        // for (BigInteger\
    \ i = BigInteger.ZERO; i.compareTo(new BigInteger(string.length() + \"\")) < 0;\
    \ i = i.add(BigInteger.ONE)) {\n        //     if (i.add(new BigInteger(substring.length()\
    \ + \"\")).compareTo(new BigInteger(string.length() + \"\")) <= 0) {\n       \
    \ //         if (string.substring(i.intValue(), i.add(new BigInteger(substring.length()\
    \ + \"\")).intValue()).equals(substring)) {\n        //             temp = temp.add(BigInteger.ONE);\n\
    \        //         }\n        //     }\n        // }\n        // return temp;\n\
    \        long temp = 0;\n        for (long i = 0; i < string.length(); i++) {\n\
    \            if (i + substring.length() <= string.length()) {\n              \
    \  if (string.substring((int)i, (int)(i + substring.length())).equals(substring))\
    \ {\n                    temp++;\n                }\n            }\n        }\n\
    \        return temp;", "        Matcher matcher = Pattern.compile(Pattern.quote(substring)).matcher(string);\n\
    \        long count = 0;\n        while (matcher.find()) {\n            count++;\n\
    \        }\n        return count;", "        if (string.length() < substring.length())\
    \ {\n            return 0;\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < string.length() - substring.length() + 1; i++) {\n            if\
    \ (string.substring(i, i + substring.length()).equals(substring)) {\n        \
    \        count++;\n            }\n        }\n        return count;", "       \
    \ return \n            (long) IntStream.range(0, string.length() - substring.length()\
    \ + 1)\n                .filter(i -> substring.equals(string.substring(i, i +\
    \ substring.length())))\n                .count();", '        throw new RuntimeException("Not
    Implemented.");', '        return 0;', "        // >>> a = \"aaaaaa\"\n      \
    \  // >>> a.replace(\"aa\", \"A\")\n        // 'AaAaA'\n        // >>> a.replace(\"\
    aa\", \"A\").length()\n        // 5\n        // >>> a.length()\n        // 6\n\
    \        // >>> 6 - 5\n        // 1\n        return (long) Math.ceil(((double)\
    \ string.length() - (double) string.replace(substring, \"\").length()) / (double)\
    \ substring.length());", "        long total = 0;\n        int start = 0;\n  \
    \      while(true) {\n            int location = string.indexOf(substring, start);\n\
    \            if(location == -1) break;\n            total++;\n            start\
    \ = location + 1;\n        }\n        return total;", "        String[] parts\
    \ = string.split(substring);\n        return parts.length - 1;", "        long\
    \ count = 0;\n        int index = string.indexOf(substring);\n        while (index\
    \ != -1) {\n            count++;\n            index = string.indexOf(substring,\
    \ index + 1);\n        }\n        return count;", "        int size = substring.length();\n\
    \        long result = 0;\n        for (int i = 0; i < string.length() - size\
    \ + 1; i++) {\n            if (string.substring(i, i + size).equals(substring))\
    \ {\n                result += 1;\n            }\n        }\n        return result;",
  '        return 0;', "        long result = 0;\n        int index = 0;\n       \
    \ for (;;) {\n            index = string.indexOf(substring, index);\n        \
    \    if (index == -1) break;\n            result += 1;\n            index += 1;\n\
    \        }\n        return result;", "        long count = 0;\n        if (string.isEmpty()\
    \ || substring.isEmpty()) {\n            return count;\n        }\n        int\
    \ len = substring.length();\n        int index = string.indexOf(substring);\n\
    \        while (index != -1) {\n            count++;\n            index = string.indexOf(substring,\
    \ index + len);\n        }\n        return count;", "        long count = 0;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        return java.util.stream.IntStream.range(0, string.length() - substring.length()\
    \ + 1).map(i ->\n        {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                return 1;\n            } else {\n                return 0;\n\
    \            }\n        }).sum();", '        return Arrays.stream(string.split(substring)).length
    - 1;', "        long result = 0;\n        for (int i = 0; i <= string.length()\
    \ - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        int start = 0;\n        int end = substring.length();\n        int count\
    \ = 0;\n        int length = string.length();\n        while (end <= length) {\n\
    \            String sub = string.substring(start, end);\n            if (sub.equals(substring))\
    \ {\n                count++;\n            }\n            start++;\n         \
    \   end++;\n        }\n        return (long) count;", '        return 0l;', '        return
    (string + string).substring(1, string.length() + string.length() - 1).split(substring).length
    - 1;', "        // <<< Don't delete this line. It's used for automatic testing!\n\
    \        long result = 0;\n        // Iterate through the original string to find\
    \ the first occurence of the substring.\n        for (int i = 0; i < string.length();\
    \ i++) {\n            // If the first character of the substring matches, check\
    \ if the rest of the substring matches.\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                if (string.length() >= i + substring.length()) {\n      \
    \              boolean isMatch = true;\n                    for (int j = 0; j\
    \ < substring.length(); j++) {\n                        if (string.charAt(i +\
    \ j) != substring.charAt(j)) {\n                            isMatch = false;\n\
    \                            break;\n                        }\n             \
    \       }\n                    if (isMatch) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        long count = 0;\n        int index = 0;\n        while ((index\
    \ = string.indexOf(substring, index)) != -1) {\n            index++;\n       \
    \     count++;\n        }\n        return count;", '        return 0;', '        return
    stream(string.split(substring)).count();', "        int length = substring.length();\n\
    \        int count = 0;\n        for (int i = 0; i <= string.length() - length;\
    \ i++) {\n            if (string.substring(i, i + length).equals(substring)) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       int result = 0;\n        int index = 0;\n        while(index < string.length())\
    \ {\n            int match = string.indexOf(substring, index);\n            if(match\
    \ == -1) {\n                break;\n            }\n            result += 1;\n\
    \            index = match + 1;\n        }\n        return result;", '        return
    (long)string.split(substring, -1).length - 1;', "        long result = 0;\n  \
    \      int indexOf = string.indexOf(substring);\n        while (indexOf != -1)\
    \ {\n            result++;\n            indexOf = string.indexOf(substring, indexOf\
    \ + 1);\n        }\n        return result;", '        return (long)string.split(substring,
    -1).length - 1;', "        // BEGIN Solution\n        return (long) string.chars().parallel().mapToObj(i\
    \ -> new String(new char[]{(char) i})).collect(Collectors.joining()).split(substring).length\
    \ - 1;\n        // END Solution", "        long ans = 0;\n        for (int i =\
    \ 0; i < string.length(); i++) {\n            if (string.startsWith(substring,\
    \ i)) {\n                ans += 1;\n            }\n        }\n        return ans;",
  "        if (string.length() == 0 || substring.length() == 0) {\n            return\
    \ 0l;\n        }\n        long count = 0l;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n       \
    \         int index = 0;\n                boolean isFound = true;\n          \
    \      while (index < substring.length() && i + index < string.length()) {\n \
    \                   if (string.charAt(i + index) != substring.charAt(index)) {\n\
    \                        isFound = false;\n                        break;\n  \
    \                  }\n                    index++;\n                }\n      \
    \          if (isFound) {\n                    count++;\n                }\n \
    \           }\n        }\n        return count;", "        // your code here\n\
    \        long res = 0;\n        int index = 0;\n        int len = substring.length();\n\
    \        while(index != -1) {\n            index = string.indexOf(substring, index);\n\
    \            if(index != -1) {\n                index += len;\n              \
    \  res++;\n            }\n        }\n        return res;", "        int sl = string.length();\n\
    \        int subl = substring.length();\n        if (sl == 0 || subl == 0 || subl\
    \ > sl) {\n            return 0l;\n        }\n        int c = 0;\n        for\
    \ (int i = 0; i <= sl - subl; i++) {\n            if (string.substring(i, i +\
    \ subl).equals(substring)) {\n                c++;\n            }\n        }\n\
    \        return (long) c;", '        return (int) Stream.iterate(0,n->n+1).limit(string.length()).filter(n->string.substring(n).startsWith(substring)).count();',
  "        // >>> ENTER CODE HERE <<<\n        return 0l;", "        long counter\
    \ = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i +=\
    \ 1) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                counter += 1;\n            }\n        }\n        return counter;",
  "        if (string.length() == 0 || substring.length() == 0) return 0l;\n     \
    \   if (string.length() < substring.length()) return 0l;\n        long count =\
    \ 0l;\n        int lastIndex = 0;\n        for (;;) {\n            int index =\
    \ string.indexOf(substring, lastIndex);\n            if (index == -1) break;\n\
    \            count += 1l;\n            lastIndex = index + 1;\n        }\n   \
    \     return count;", "        int len = substring.length();\n        // We add\
    \ the last character of the original string to ensure we can find the last pattern\n\
    \        // in the string.\n        String stringWithLastCharacter = string +\
    \ string.charAt(string.length() - 1);\n        // 0 offset for the first position.\n\
    \        long offset = 0l;\n        long howManyTimes = 0l;\n        // We will\
    \ try to find the substring in the string using a sliding window in the original\
    \ string.\n        // The window will be of the same size as the substring (len).\n\
    \        while (offset < stringWithLastCharacter.length() - len) {\n         \
    \   // We get the substring in the sliding window in the original string.\n  \
    \          String sub = stringWithLastCharacter.substring(offset, offset + len);\n\
    \            // If it is equal to the pattern we are looking for we have found\
    \ one occurence of the\n            // pattern.\n            if (sub.equals(substring))\
    \ {\n                howManyTimes += 1l;\n                // We can skip the window\
    \ to the next occurence of the pattern.\n                offset += len;\n    \
    \        } else {\n                // Otherwise we move the window one position\
    \ to the right.\n                offset += 1l;\n            }\n        }\n   \
    \     return howManyTimes;", "        long result = 0;\n        int pos = string.indexOf(substring);\n\
    \        while (pos >= 0) {\n            result++;\n            pos = string.indexOf(substring,\
    \ pos + 1);\n        }\n        return result;", "        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n     \
    \   int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n    \
    \        int start = i;\n            int end = start + substring.length();\n \
    \           if (end <= string.length()) {\n                String found = string.substring(start,\
    \ end);\n                if (found.equals(substring)) {\n                    count\
    \ += 1;\n                }\n            }\n        }\n        return count;",
  "        return IntStream.range(0, string.length() - substring.length() + 1)\n \
    \         .mapToObj(i -> new Pair<>(string.substring(i, i + substring.length()),\
    \ i))\n          .filter(pair -> pair.getValue0().equals(substring))\n       \
    \   .count();", "        // >>> howManyTimes((\"\"), (\"a\"))\n        // (0l)\n\
    \        // >>> howManyTimes((\"aaa\"), (\"a\"))\n        // (3l)\n        //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n        // (3l)\n        // >>> howManyTimes((\"\
    ababa\"), (\"aba\"))\n        // (2l)\n        // >>> howManyTimes((\"aabaaabaaa\"\
    ), (\"aa\"))\n        // (7l)\n        // >>> howManyTimes((\"aabaaabaaa\"), (\"\
    a\"))\n        // (11l)\n        // >>> howManyTimes((\"abcabcabcabc\"), (\"abc\"\
    ))\n        // (4l)\n        // >>> howManyTimes((\"aaaaaa\"), (\"aa\"))\n   \
    \     // (5l)\n        // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n        // (3l)\n\
    \        // >>> howManyTimes((\"a\"), (\"a\"))\n        // (1l)\n        // >>>\
    \ howManyTimes((\"\"), (\"\"))\n        // (1l)\n        // >>> howManyTimes((\"\
    a\"), (\"\"))\n        // (1l)\n        // >>> howManyTimes((\"abcabcabcabc\"\
    ), (\"abcabcabcabc\"))\n        // (1l)\n        // >>> howManyTimes((\"abcabcabcabc\"\
    ), (\"abcabcabc\"))\n        // (1l)\n        // >>> howManyTimes((\"abcabcabcabc\"\
    ), (\"abcabcab\"))\n        // (0l)\n        // >>> howManyTimes((\"abcabcabcabc\"\
    ), (\"\"))\n        // (1l)\n        // >>> howManyTimes((\"abcabcabcabc\"), (\"\
    f\"))\n        // (0l)\n        // >>> howManyTimes((\"abcabcabcabc\"), (\"abcabcdef\"\
    ))\n        // (0l)\n        // >>> howManyTimes((\"abcabcabcabc\"), (\"abcdabcabc\"\
    ))\n        // (0l)\n        // >>> howManyTimes((\"abcabcabcabc\"), (\"abcd\"\
    ))\n        // (0l)\n        // >>> howManyTimes((\"abcabcabcabc\"), (\"abcdabcd\"\
    ))\n        // (0l)\n        // >>> howManyTimes((\"abcabcabcabc\"), (\"abcdabcdab",
  "        //return Pattern.compile(Pattern.quote(substring)).matcher(string).results().count();\n\
    \        long count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
    \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        return string.chars().mapToObj(\n            i -> string.substring(i, string.length())\n\
    \        ).filter(\n            s -> s.startsWith(substring)\n        ).count();",
  "        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n\
    \        }\n        return string.split(substring, -1).length - 1;", '        return
    (long) string.split(substring, -1).length - 1;', "        final int sl = string.length();\n\
    \        final int dl = substring.length();\n        int counter = 0;\n      \
    \  for (int i = 0; i < sl - dl + 1; i++) {\n            if (string.substring(i,\
    \ i + dl).equals(substring)) {\n                counter++;\n            }\n  \
    \      }\n        return counter;", "      int count = 0;\n      int idx = 0;\n\
    \      while ((idx = string.indexOf(substring, idx)) != -1) {\n        idx +=\
    \ substring.length();\n        count++;\n      }\n      return count;", "    \
    \    int sublen = substring.length();\n        long count = 0;\n        for (int\
    \ index = 0; index <= string.length() - sublen; index++) {\n            count\
    \ += string.substring(index, index + sublen).equals(substring) ? 1 : 0;\n    \
    \    }\n        return count;"]
stop_tokens:
- "\n    }\n"
