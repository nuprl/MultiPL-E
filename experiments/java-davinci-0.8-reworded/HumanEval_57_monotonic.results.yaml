language: java
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean inc = true;\n        boolean\
    \ dec = true;\n        long last = 0;\n        for (Long i : l) {\n          \
    \  if (last < i) {\n                dec = false;\n            }\n            if\
    \ (last > i) {\n                inc = false;\n            }\n            last\
    \ = i;\n        }\n        return inc || dec;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpznjujtqo.java:35)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long a = l.get(0);\n        boolean\
    \ inc = true;\n        boolean dec = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) < a) {\n                inc = false;\n    \
    \        }\n            if (l.get(i) > a) {\n                dec = false;\n  \
    \          }\n            a = l.get(i);\n        }\n        return inc || dec;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        int i = 0;\n        for (; i < l.size() - 1; i++)\
    \ {\n            if (l.get(i + 1) > l.get(i)) {\n                break;\n    \
    \        }\n        }\n        if (i == l.size() - 1) {\n            return true;\n\
    \        }\n        for (; i < l.size() - 1; i++) {\n            if (l.get(i +\
    \ 1) < l.get(i)) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean mono = true;\n        long prev\
    \ = l.get(0);\n        long diff = 0;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long curr = l.get(i);\n            if (i == 1) {\n          \
    \      diff = curr - prev;\n            } else {\n                if (diff * (curr\
    \ - prev) < 0) {\n                    mono = false;\n                    break;\n\
    \                }\n            }\n            prev = curr;\n        }\n     \
    \   return mono;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        throw new RuntimeException(\"Not implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.monotonic(tmpfx1n7du0.java:17)\n\tat Problem.main(tmpfx1n7du0.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = Long.MIN_VALUE;\n      \
    \  boolean inc = true;\n        boolean dec = true;\n        for (Long e : l)\
    \ {\n            if (prev <= e) {\n                dec = false;\n            }\n\
    \            if (prev >= e) {\n                inc = false;\n            }\n \
    \           prev = e;\n        }\n        return inc || dec;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpihpu_i_j.java:35)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n\tif (l.size() == 0) {\n\t    return true;\n\
    \t}\n\tlong current = l.get(0);\n\tif (l.size() == 1) {\n\t    return true;\n\t\
    }\n\tboolean increasing = current < l.get(1);\n\tboolean decreasing = current\
    \ > l.get(1);\n\tfor (long elt : l) {\n\t    if (increasing && elt < current)\
    \ {\n\t\treturn false;\n\t    }\n\t    if (decreasing && elt > current) {\n\t\t\
    return false;\n\t    }\n\t    current = elt;\n\t}\n\treturn true;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean inc = false;\n        boolean\
    \ dec = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n           \
    \ if (l.get(i + 1) > l.get(i)) {\n                inc = true;\n            }\n\
    \            if (l.get(i + 1) < l.get(i)) {\n                dec = true;\n   \
    \         }\n        }\n        return !(inc && dec);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean up = true;\n        boolean\
    \ down = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ < l.get(i - 1))\n                up = false;\n            if (l.get(i) > l.get(i\
    \ - 1))\n                down = false;\n        }\n        return up || down;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.size() < 2 || (monotonic(l.subList(1,\
    \ l.size())) && (l.get(0) <= l.get(1) || l.get(0) >= l.get(1)));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2gn2hz0.java:17: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return l.size() < 2 || (monotonic(l.subList(1,\
    \ l.size())) && (l.get(0) <= l.get(1) || l.get(0) >= l.get(1)));\n           \
    \                                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return IntStream.range(0, l.size() -\
    \ 1).allMatch(i -> l.get(i) <= l.get(i + 1)) || IntStream.range(0, l.size() -\
    \ 1).allMatch(i -> l.get(i) >= l.get(i + 1));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        int dir = 0;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long v = l.get(i);\n            long u = l.get(i - 1);\n\
    \            if (v > u) {\n                if (dir < 0) {\n                  \
    \  return false;\n                }\n                dir = 1;\n            } else\
    \ if (v < u) {\n                if (dir > 0) {\n                    return false;\n\
    \                }\n                dir = -1;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return (true)\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtpam922.java:17: error: ';' expected\n        return (true)\n\
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011590
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n        }\n        return (increasing || decreasing);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 3) {\n            return\
    \ true;\n        }\n        boolean flag = l.get(0) <= l.get(1);\n        for\
    \ (int i = 1; i < l.size() - 1; i++) {\n            if (flag) {\n            \
    \    if (l.get(i) > l.get(i + 1)) {\n                    return false;\n     \
    \           }\n            } else {\n                if (l.get(i) < l.get(i +\
    \ 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = prev < l.get(1);\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   long current = l.get(i);\n            if (increasing) {\n                if\
    \ (current < prev) {\n                    return false;\n                }\n \
    \           } else {\n                if (current > prev) {\n                \
    \    return false;\n                }\n            }\n            prev = current;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        boolean increasing = false;\n        if (l.get(0)\
    \ < l.get(1)) {\n            increasing = true;\n        }\n        for (int i\
    \ = 1; i < l.size(); i++) {\n            if (increasing) {\n                if\
    \ (l.get(i) < l.get(i - 1)) {\n                    return false;\n           \
    \     }\n            } else {\n                if (l.get(i) > l.get(i - 1)) {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) return true;\n  \
    \      boolean isDecreasing = l.get(0) > l.get(1);\n        for (int i = 1; i\
    \ < l.size() - 1; i++) {\n            if (isDecreasing) {\n                if\
    \ (l.get(i) < l.get(i + 1)) return false;\n            } else {\n            \
    \    if (l.get(i) > l.get(i + 1)) return false;\n            }\n        }\n  \
    \      return true;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if(l.size() < 3) {\n            return\
    \ true;\n        }\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i)\
    \ == l.get(i - 1)) {\n                continue;\n            }\n            if(l.get(i)\
    \ > l.get(i - 1)) {\n                for(int j = i + 1; j < l.size(); j++) {\n\
    \                    if(l.get(j) < l.get(j - 1)) {\n                        return\
    \ false;\n                    }\n                }\n                return true;\n\
    \            }\n            else {\n                for(int j = i + 1; j < l.size();\
    \ j++) {\n                    if(l.get(j) > l.get(j - 1)) {\n                \
    \        return false;\n                    }\n                }\n           \
    \     return true;\n            }\n        }\n        return true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // replace following code with your\
    \ implementation\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm46jf0r5.java:23)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return (\n                l.stream().allMatch(e\
    \ -> e <= l.get(0))\n                ||\n                l.stream().allMatch(e\
    \ -> e >= l.get(0))\n                );\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo7h6r20y.java:26)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = true;\n        boolean\
    \ decreasing = true;\n        boolean increasing = true;\n        for (int i =\
    \ 0; i < l.size() - 1; i += 1) {\n            if (l.get(i) > l.get(i + 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        result = increasing || decreasing;\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().sorted().equals(l)\
    \ || l.stream().sorted(Collections.reverseOrder()).equals(l);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpio22sw6u.java:20)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean ascending = true;\n        boolean\
    \ descending = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n     \
    \       if (l.get(i) > l.get(i + 1)) {\n                ascending = false;\n \
    \           }\n            if (l.get(i) < l.get(i + 1)) {\n                descending\
    \ = false;\n            }\n        }\n        return ascending || descending;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011592
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        long step = 0;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long diff = l.get(i) - l.get(i - 1);\n            if (diff\
    \ == 0) {\n                continue;\n            }\n            if (step == 0)\
    \ {\n                step = diff;\n            } else if (step * diff < 0) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean monotonically = true;\n    \
    \    long previousValue = l.get(0);\n        boolean increasing = false;\n   \
    \     boolean decreasing = false;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long value = l.get(i);\n            if (value > previousValue)\
    \ {\n                increasing = true;\n            } else if (value < previousValue)\
    \ {\n                decreasing = true;\n            }\n            if (increasing\
    \ && decreasing) {\n                monotonically = false;\n                break;\n\
    \            }\n            previousValue = value;\n        }\n        return\
    \ monotonically;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return (new Monotonic()).solve(l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ak7uqog.java:17: error: cannot find symbol\n        return (new\
    \ Monotonic()).solve(l);\n                    ^\n  symbol:   class Monotonic\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // REPLACE THIS CODE WITH YOUR SOLUTION\n\
    \        for (int i = 0; i < l.size() - 1; i++) {\n            long x = l.get(i);\n\
    \            long y = l.get(i + 1);\n            if (x > y) {\n              \
    \  if (i == 0) {\n                    return false;\n                }\n     \
    \           if (l.get(i - 1) < y) {\n                    return false;\n     \
    \           }\n            } else if (x < y) {\n                if (i == 0) {\n\
    \                    return false;\n                }\n                if (l.get(i\
    \ - 1) > y) {\n                    return false;\n                }\n        \
    \    }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwz6s4arl.java:40)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int direction = 0;\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n\
    \                if (direction == 1) {\n                    return false;\n  \
    \              }\n                direction = -1;\n            } else if (l.get(i)\
    \ < l.get(i + 1)) {\n                if (direction == -1) {\n                \
    \    return false;\n                }\n                direction = 1;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011592
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if(l.size() <= 1) return true;\n   \
    \     boolean inc = l.get(0) < l.get(1);\n        for(int i = 1; i < l.size()\
    \ - 1; i++) {\n            boolean curr = l.get(i) < l.get(i + 1);\n         \
    \   if(curr != inc) return false;\n        }\n        return true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) return true;\n  \
    \      long prev = l.get(0);\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   if (l.get(i) >= prev) {\n                decreasing = false;\n           \
    \ }\n            if (l.get(i) <= prev) {\n                increasing = false;\n\
    \            }\n            prev = l.get(i);\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1yaa9bn.java:37)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long last = l.get(0);\n        for (long\
    \ value : l) {\n            if (value < last) {\n                increasing =\
    \ false;\n            }\n            if (value > last) {\n                decreasing\
    \ = false;\n            }\n            last = value;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        long prev = l.get(0);\n        int direction = 0;\n\
    \        boolean inc = false;\n        boolean dec = false;\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n        \
    \    if (current > prev) {\n                if (direction == -1) {\n         \
    \           return false;\n                }\n                direction = 1;\n\
    \                inc = true;\n            } else if (current < prev) {\n     \
    \           if (direction == 1) {\n                    return false;\n       \
    \         }\n                direction = -1;\n                dec = true;\n  \
    \          }\n            prev = current;\n        }\n        return inc ^ dec;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4izwf50n.java:51)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // >>> YOUR CODE HERE <<<\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ipcg0u0.java:21)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) return true;\n  \
    \      boolean increasing = l.get(0) < l.get(1);\n        for (int i = 1; i <\
    \ l.size() - 1; i++) {\n            boolean newIncreasing = l.get(i) < l.get(i\
    \ + 1);\n            if (newIncreasing != increasing) return false;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return IntStream.range(0, l.size()-1).allMatch(i\
    \ -> l.get(i) <= l.get(i+1)) ||\n            IntStream.range(0, l.size()-1).allMatch(i\
    \ -> l.get(i) >= l.get(i+1));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long previous = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (long i\
    \ : l) {\n            if (i < previous) {\n                increasing = false;\n\
    \            }\n            if (i > previous) {\n                decreasing =\
    \ false;\n            }\n            previous = i;\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n\tif (l.size() == 0) {\n\t    return true;\n\
    \t}\n\tlong[] a = new long[l.size()];\n\tfor (int i = 0; i < l.size(); i++) {\n\
    \t    a[i] = l.get(i);\n\t}\n\tlong first = a[0];\n\tboolean increasing = a[0]\
    \ < a[1];\n\tfor (int i = 1; i < a.length; i++) {\n\t    if (increasing) {\n\t\
    \tif (a[i] < a[i-1]) {\n\t\t    return false;\n\t\t}\n\t    } else {\n\t\tif (a[i]\
    \ > a[i-1]) {\n\t\t    return false;\n\t\t}\n\t    }\n\t}\n\treturn true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        } else {\n            long first = l.get(0);\n            boolean\
    \ ascending = true;\n            boolean descending = true;\n            for (long\
    \ elt : l) {\n                if (elt < first) {\n                    ascending\
    \ = false;\n                } else if (elt > first) {\n                    descending\
    \ = false;\n                }\n                first = elt;\n            }\n \
    \           return ascending || descending;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            long c = l.get(i);\n            if (c <\
    \ prev) {\n                increasing = false;\n            }\n            if\
    \ (c > prev) {\n                decreasing = false;\n            }\n         \
    \   prev = c;\n        }\n        return increasing || decreasing;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        else {\n            if (l.size() == 1) {\n       \
    \         return true;\n            }\n            else {\n                if\
    \ (l.size() == 2) {\n                    return l.get(0) != l.get(1);\n      \
    \          }\n                else {\n                    long val = l.get(0);\n\
    \                    long val1 = l.get(1);\n                    boolean increasing\
    \ = val1 >= val;\n                    for (int i = 1; i < l.size(); i++) {\n \
    \                       long val2 = l.get(i);\n                        boolean\
    \ increasing2 = val2 >= val1;\n                        if (increasing2 != increasing)\
    \ {\n                            return false;\n                        }\n  \
    \                      else {\n                            val = val1;\n     \
    \                       val1 = val2;\n                        }\n            \
    \        }\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxc_6f5a.java:52)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Your code goes here.\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu3le0lqn.java:23)\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        long p = l.get(0);\n        int i = 1;\n        for\
    \ (i = 1; i < l.size(); i++) {\n            long c = l.get(i);\n            if\
    \ (c > p) {\n                break;\n            }\n            p = c;\n     \
    \   }\n        for (; i < l.size(); i++) {\n            long c = l.get(i);\n \
    \           if (c < p) {\n                return false;\n            }\n     \
    \       p = c;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        boolean\
    \ increasing = false;\n        boolean decreasing = false;\n        for (int i\
    \ = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n            if\
    \ (curr > prev) {\n                increasing = true;\n            } else if (curr\
    \ < prev) {\n                decreasing = true;\n            }\n            if\
    \ (increasing && decreasing) {\n                return false;\n            }\n\
    \            prev = curr;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        } else {\n            Pair<Boolean, Long> init = new Pair<Boolean,\
    \ Long>(false, (long) 0);\n            Pair<Boolean, Long> state = init;\n   \
    \         for (int i = 0; i < l.size() - 1; i++) {\n                state = op(state,\
    \ l.get(i), l.get(i + 1));\n            }\n            if (state.getValue0() &&\
    \ !state.getValue1().equals((long) 0)) {\n                return true;\n     \
    \       } else {\n                return false;\n            }\n        }\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdism3bnh.java:23: error: cannot find symbol\n                state\
    \ = op(state, l.get(i), l.get(i + 1));\n                        ^\n  symbol: \
    \  method op(Pair<Boolean,Long>,Long,Long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011593
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((a, b) -> a\
    \ <= b ? a : b).isPresent();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp252l0a98.java:22)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        else {\n            boolean pos = true;\n        \
    \    boolean neg = true;\n            for (int i = 0; i < l.size() - 1; i++) {\n\
    \                if (l.get(i) < l.get(i + 1)) {\n                    neg = false;\n\
    \                }\n                else if (l.get(i) > l.get(i + 1)) {\n    \
    \                pos = false;\n                }\n            }\n            return\
    \ pos || neg;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        long last = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            increasing = increasing && l.get(i) >= last;\n         \
    \   decreasing = decreasing && l.get(i) <= last;\n            last = l.get(i);\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long elem = l.get(0);\n        long\
    \ diff = (long)1l;\n        for (long el : l) {\n            if (diff < (long)0l)\
    \ {\n                if (el < elem) {\n                    elem = el;\n      \
    \          } else {\n                    return false;\n                }\n  \
    \          } else {\n                if (el > elem) {\n                    elem\
    \ = el;\n                } else {\n                    diff = (long)(diff) * (long)(-1l);\n\
    \                    elem = el;\n                }\n            }\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqjy_xme1.java:38)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            increasing = increasing && (l.get(i) <= l.get(i + 1));\n        \
    \    decreasing = decreasing && (l.get(i) >= l.get(i + 1));\n        }\n     \
    \   return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return true;\n   \
    \     boolean increasing = true;\n        boolean decreasing = true;\n       \
    \ long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n      \
    \      long curr = l.get(i);\n            if (curr > prev) {\n               \
    \ decreasing = false;\n            } else if (curr < prev) {\n               \
    \ increasing = false;\n            }\n            prev = curr;\n        }\n  \
    \      return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes6dsrd4.java:22)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        for (int i = 0; i < l.size() - 1; i++)\
    \ {\n            if (l.get(i) > l.get(i + 1)) {\n                for (int j =\
    \ i + 1; j < l.size() - 1; j++) {\n                    if (l.get(j) < l.get(j\
    \ + 1)) {\n                        return false;\n                    }\n    \
    \            }\n                return true;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                for (int j = i + 1; j < l.size() - 1; j++)\
    \ {\n                    if (l.get(j) > l.get(j + 1)) {\n                    \
    \    return false;\n                    }\n                }\n               \
    \ return true;\n            }\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().collect(Pairing.monotonic(BigInteger.ZERO)).getValue0();\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi3xju133.java:17: error: cannot find symbol\n        return l.stream().collect(Pairing.monotonic(BigInteger.ZERO)).getValue0();\n\
    \                                  ^\n  symbol:   variable Pairing\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes6dsrd4.java:22)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.size() <= 1 || l.get(0) < l.get(1)\
    \ && monotonic((new ArrayList<Long>(l.subList(1, l.size())))) || l.get(0) > l.get(1)\
    \ && monotonic((new ArrayList<Long>(l.subList(1, l.size()))));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv2ski8dn.java:22)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        long last = l.get(0);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (long i: l) {\n   \
    \         if (i > last) {\n                decreasing = false;\n            }\n\
    \            if (i < last) {\n                increasing = false;\n          \
    \  }\n            last = i;\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        if (first\
    \ == l.get(l.size() - 1)) {\n            return true;\n        }\n        boolean\
    \ increasing = first <= l.get(l.size() - 1);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) < l.get(i\
    \ - 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) > l.get(i - 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        ArrayList<Pair<Long, Long>> dl = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            dl.add(new\
    \ Pair<Long, Long>(l.get(i), l.get(i + 1)));\n        }\n        boolean dir =\
    \ false;\n        boolean inc = false;\n        for (Pair<Long, Long> p : dl)\
    \ {\n            if (p.getValue0() < p.getValue1()) {\n                if (dir\
    \ == false) {\n                    dir = true;\n                    inc = true;\n\
    \                } else {\n                    if (inc == false) {\n         \
    \               return false;\n                    }\n                }\n    \
    \        } else if (p.getValue0() > p.getValue1()) {\n                if (dir\
    \ == false) {\n                    dir = true;\n                    inc = false;\n\
    \                } else {\n                    if (inc == true) {\n          \
    \              return false;\n                    }\n                }\n     \
    \       }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.monotonic(tmpk4egly8b.java:22)\n\tat Problem.main(tmpk4egly8b.java:50)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean acending = true;\n        boolean\
    \ decending = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n      \
    \      acending = acending && l.get(i) <= l.get(i + 1);\n            decending\
    \ = decending && l.get(i) >= l.get(i + 1);\n        }\n        return acending\
    \ || decending;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n      \
    \  for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n \
    \               if (l.get(i) > l.get(i + 1)) {\n                    return false;\n\
    \                }\n            } else {\n                if (l.get(i) < l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int i = 0;\n        if (l.size() <=\
    \ 1) {\n            return true;\n        }\n        // p = previous, c = current\n\
    \        Long p = l.get(i);\n        Long c = l.get(i + 1);\n        boolean increasing\
    \ = p < c;\n        i = i + 1;\n        while (i < l.size() - 1) {\n         \
    \   p = l.get(i);\n            c = l.get(i + 1);\n            if (increasing)\
    \ {\n                if (p > c) {\n                    return false;\n       \
    \         }\n            } else {\n                if (p < c) {\n            \
    \        return false;\n                }\n            }\n            i = i +\
    \ 1;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        for (int i = 0; i < l.size() - 1; i++)\
    \ {\n            long current = l.get(i);\n            long next = l.get(i + 1);\n\
    \            if (current == next) {\n                continue;\n            }\n\
    \            boolean increasing = current < next;\n            boolean decreasing\
    \ = current > next;\n            if (increasing) {\n                // If increasing,\
    \ next element should be greater.\n                if (next < current) {\n   \
    \                 return false;\n                }\n            } else if (decreasing)\
    \ {\n                // If decreasing, next element should be less.\n        \
    \        if (next > current) {\n                    return false;\n          \
    \      }\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5yrhnysp.java:42)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long prev = l.get(0);\n        boolean\
    \ inc = false;\n        boolean dec = false;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            Long current = l.get(i);\n            if (current > prev)\
    \ {\n                inc = true;\n            } else if (current < prev) {\n \
    \               dec = true;\n            }\n            if (inc && dec) {\n  \
    \              return false;\n            }\n            prev = current;\n   \
    \     }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n\tboolean isIncreasing = true;\n\tboolean isDecreasing\
    \ = true;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t    if (l.get(i) > l.get(i\
    \ + 1)) {\n\t\tisIncreasing = false;\n\t    }\n\t    if (l.get(i) < l.get(i +\
    \ 1)) {\n\t\tisDecreasing = false;\n\t    }\n\t}\n\treturn isIncreasing || isDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n\treturn Problem.<Long>monotonic(l, (long a,\
    \ long b) -> a < b);\n    }\n    public static void main(String[] args) {\n  \
    \  assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprbyncw1c.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n\treturn Problem.<Long>monotonic(l, (long a, long\
    \ b) -> a < b);\n\t              ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,(long\
    \ a, l[...]a < b\n  reason: actual and formal argument lists differ in length\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Write your code here.\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgibs8bev.java:23)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return IntStream.range(0, l.size() -\
    \ 1).allMatch(i -> l.get(i) <= l.get(i + 1)) || IntStream.range(0, l.size() -\
    \ 1).allMatch(i -> l.get(i) >= l.get(i + 1));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean ascending = true;\n        boolean\
    \ descending = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n     \
    \       if (l.get(i) < l.get(i + 1)) {\n                descending = false;\n\
    \            }\n            if (l.get(i) > l.get(i + 1)) {\n                ascending\
    \ = false;\n            }\n        }\n        return ascending || descending;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        else {\n            int direction = Long.compare(l.get(1),\
    \ l.get(0));\n            for (int i = 2; i < l.size(); i++) {\n             \
    \   if (direction != Long.compare(l.get(i), l.get(i - 1))) {\n               \
    \     return false;\n                }\n            }\n            return true;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv2juw4gu.java:35)\n"
  stdout: ''
  timestamp: 1660011595
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long last = l.get(0);\n        boolean\
    \ inc = true;\n        boolean dec = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) < last) {\n                inc = false;\n \
    \           }\n            if (l.get(i) > last) {\n                dec = false;\n\
    \            }\n            last = l.get(i);\n        }\n        return inc ||\
    \ dec;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return true;\n   \
    \     final long a = l.get(0);\n        final long b = l.get(1);\n        if (a\
    \ < b) {\n            return l.stream().skip(1).reduce((x, y) -> {return (x >\
    \ y) ? false : true;}).get();\n        } else if (a > b) {\n            return\
    \ l.stream().skip(1).reduce((x, y) -> {return (x < y) ? false : true;}).get();\n\
    \        } else {\n            return monotonic(new ArrayList<Long>(l.subList(1,\
    \ l.size())));\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6yunovh.java:21: error: incompatible types: bad return type in\
    \ lambda expression\n            return l.stream().skip(1).reduce((x, y) -> {return\
    \ (x > y) ? false : true;}).get();\n                                         \
    \                              ^\n    boolean cannot be converted to Long\n/tmp/tmpn6yunovh.java:23:\
    \ error: incompatible types: bad return type in lambda expression\n          \
    \  return l.stream().skip(1).reduce((x, y) -> {return (x < y) ? false : true;}).get();\n\
    \                                                                       ^\n  \
    \  boolean cannot be converted to Long\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011595
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().collect(Collectors.toMap(x\
    \ -> x, x -> 1, (a, b) -> a + b)).keySet().size() <= 2;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc76g0eq6.java:20)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean m = true;\n        boolean increasing\
    \ = true;\n        if (l.size() > 1) {\n            Long l1 = l.get(0);\n    \
    \        Long l2 = l.get(1);\n            increasing = l1 <= l2;\n           \
    \ l = new ArrayList<Long>(l.subList(1, l.size()));\n            m = monotonic(l);\n\
    \        }\n        return m && ((l.size() == 1) || ((l.get(0) <= l.get(1)) ==\
    \ increasing));\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvc_39ikc.java:33)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        //javac -cp javatuples-1.2.jar Problem.java\n\
    \        //java -cp javatuples-1.2.jar:. Problem\n        // write your code here\n\
    \        boolean res = true;\n        // System.out.println(l);\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) >= l.get(i + 1)) {\n\
    \                res = true;\n            } else {\n                return false;\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ar3l2bl.java:32)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((x, y) -> (x\
    \ - y)).map(x -> x <= 0).orElse(true);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpybp4qnal.java:22)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((a, b) -> b\
    \ - a).get() == 0 ||\n            l.stream().reduce((a, b) -> a - b).get() ==\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzih9vrj5.java:21)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011593
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        else {\n            int direction = 0;\n         \
    \   for (int i = 1; i < l.size(); i++) {\n                if (direction == 0)\
    \ {\n                    if (l.get(i) > l.get(i - 1)) {\n                    \
    \    direction = 1;\n                    }\n                    else if (l.get(i)\
    \ < l.get(i - 1)) {\n                        direction = -1;\n               \
    \     }\n                }\n                else if (direction == 1) {\n     \
    \               if (l.get(i) < l.get(i - 1)) {\n                        return\
    \ false;\n                    }\n                }\n                else if (direction\
    \ == -1) {\n                    if (l.get(i) > l.get(i - 1)) {\n             \
    \           return false;\n                    }\n                }\n        \
    \    }\n            return true;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().sorted().equals(l)\
    \ || l.stream().sorted(Collections.reverseOrder()).equals(l);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpio22sw6u.java:20)\n"
  stdout: ''
  timestamp: 1660011592
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        else {\n            ArrayList<Long> diff = new ArrayList<Long>();\n\
    \            for (int i = 0; i < l.size() - 1; i++) {\n                diff.add(l.get(i\
    \ + 1) - l.get(i));\n            }\n            int f;\n            if (diff.get(0)\
    \ > 0) {\n                f = 1;\n            }\n            else if (diff.get(0)\
    \ < 0) {\n                f = -1;\n            }\n            else {\n       \
    \         f = 0;\n            }\n            for (int i = 0; i < diff.size();\
    \ i++) {\n                if (diff.get(i) > 0 && f < 0) {\n                  \
    \  return false;\n                }\n                else if (diff.get(i) < 0\
    \ && f > 0) {\n                    return false;\n                }\n        \
    \    }\n            return true;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((x, y) -> y\
    \ - x).get() >= 0;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp53zdvxct.java:22)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) return true;\n  \
    \      Long curr = l.get(0);\n        Long sign = null;\n        boolean ret =\
    \ true;\n        for (int i = 1; i < l.size(); i++) {\n            Long next =\
    \ l.get(i);\n            Long diff = next - curr;\n            if (sign == null)\
    \ {\n                sign = diff;\n            } else {\n                if (sign\
    \ * diff < 0) {\n                    ret = false;\n                    break;\n\
    \                }\n            }\n            curr = next;\n        }\n     \
    \   return ret;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        Boolean\
    \ firstGt = null;\n        for (long i: l) {\n            if (i > prev) {\n  \
    \              if (firstGt == null) {\n                    firstGt = true;\n \
    \               } else if (firstGt == false) {\n                    return false;\n\
    \                }\n            } else if (i < prev) {\n                if (firstGt\
    \ == null) {\n                    firstGt = false;\n                } else if\
    \ (firstGt == true) {\n                    return false;\n                }\n\
    \            }\n            prev = i;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean r = false;\n        if (l.size()\
    \ > 1) {\n            int c = 0;\n            for (int i = 0; i < l.size() - 1;\
    \ i++) {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ c++;\n                } else if (l.get(i) > l.get(i + 1)) {\n              \
    \      c--;\n                }\n            }\n            r = (c == 0) || (c\
    \ == l.size() - 1) || (c == -(l.size() - 1));\n        } else {\n            r\
    \ = true;\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptfr06ekr.java:38)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes6dsrd4.java:22)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        //return l.stream().reduce((x, y) ->\
    \ (x.longValue() > y.longValue()) ? y : x).get().longValue() < l.stream().reduce((x,\
    \ y) -> (x.longValue() < y.longValue()) ? y : x).get().longValue();\n        //return\
    \ true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i).longValue()\
    \ > l.get(i + 1).longValue()) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsa5spoao.java:30)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> d = new ArrayList<Long>();\n\
    \        for (int i = 0; i < l.size() - 1; i++) {\n            d.add(l.get(i +\
    \ 1) - l.get(i));\n        }\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 0; i < d.size(); i++) {\n         \
    \   if (d.get(i) < 0) {\n                increasing = false;\n            }\n\
    \            if (d.get(i) > 0) {\n                decreasing = false;\n      \
    \      }\n        }\n        return increasing || decreasing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long last = l.get(0);\n        boolean\
    \ inc = true;\n        boolean dec = true;\n        for (long x : l) {\n     \
    \       if (x > last) {\n                dec = false;\n            } else if (x\
    \ < last) {\n                inc = false;\n            }\n            last = x;\n\
    \        }\n        return (inc || dec);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean st = true;\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\n\
    \                st = false;\n        }\n        boolean sl = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\n\
    \                sl = false;\n        }\n        return (st || sl);\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // type your answer here\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n  \
    \              decreasing = false;\n            }\n            if (l.get(i) >\
    \ l.get(i + 1)) {\n                increasing = false;\n            }\n      \
    \  }\n        return (increasing || decreasing);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        if (l.size() == 1) {\n            return true;\n \
    \       }\n        int last_sign = 0;\n        for (int i = 0; i < l.size() -\
    \ 1; i++) {\n            long a = l.get(i);\n            long b = l.get(i + 1);\n\
    \            int sign = 0;\n            if (a > b) {\n                sign = -1;\n\
    \            }\n            if (a < b) {\n                sign = 1;\n        \
    \    }\n            if (sign == 0) {\n                continue;\n            }\n\
    \            if (last_sign == 0) {\n                last_sign = sign;\n      \
    \          continue;\n            }\n            if (last_sign != sign) {\n  \
    \              return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // >>> l = (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))\n        // >>> pairs = [(l[i-1], l[i]) for\
    \ i in range(1, len(l))]\n        // >>> pairs\n        // [(1, 2), (2, 4), (4,\
    \ 20)]\n        // >>> (False not in [x < y for x, y in pairs]) or (False not\
    \ in [x > y for x, y in pairs])\n        // True\n        // >>> pairs = [(l[i-1],\
    \ l[i]) for i in range(1, len(l))]\n        // >>> pairs\n        // [(1, 20),\
    \ (20, 4), (4, 10)]\n        // >>> (False not in [x < y for x, y in pairs]) or\
    \ (False not in [x > y for x, y in pairs])\n        // False\n        // >>> l\
    \ = (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l)))\n\
    \        // >>> pairs = [(l[i-1], l[i]) for i in range(1, len(l))]\n        //\
    \ >>> pairs\n        // [(4, 1), (1, 0), (0, -10)]\n        // >>> (False not\
    \ in [x < y for x, y in pairs]) or (False not in [x > y for x, y in pairs])\n\
    \        // True\n        ArrayList<Pair<Long, Long>> pairs = (new ArrayList<Pair<Long,\
    \ Long>>());\n        ArrayList<Boolean> bool_list = (new ArrayList<Boolean>());\n\
    \        for (int i = 1; i < l.size(); i += 1) {\n            pairs.add(Pair.with(l.get(i\
    \ - 1), l.get(i)));\n        }\n        for (Pair<Long, Long> p : pairs) {\n \
    \           bool_list.add(p.getValue0() < p.getValue1());\n        }\n       \
    \ for (Pair<Long, Long> p : pairs) {\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfoiv2jqg.java:45: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011595
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return IntStream.range(0, l.size()-1).allMatch(i\
    \ -> l.get(i) <= l.get(i+1)) ||\n               IntStream.range(0, l.size()-1).allMatch(i\
    \ -> l.get(i) >= l.get(i+1));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdn00eojx.java:17: error: incompatible types: <null> cannot be converted\
    \ to boolean\n        return null;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long cur = 0;\n        for (long i :\
    \ l) {\n            if (cur == 0) {\n                cur = i;\n            } else\
    \ if (cur > i) {\n                // decending\n                if (cur == 1)\
    \ {\n                    return false;\n                }\n                cur\
    \ = -1;\n            } else if (cur < i) {\n                // ascending\n   \
    \             if (cur == -1) {\n                    return false;\n          \
    \      }\n                cur = 1;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ndsi6ov.java:40)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Your code here.\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm674rjnt.java:21)\n"
  stdout: ''
  timestamp: 1660011597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long old = 0l;\n        long newVal = 0l;\n\
    \        for (int i = 0; i < l.size(); i++) {\n            newVal = l.get(i);\n\
    \            if (newVal < old) {\n                increasing = false;\n      \
    \      }\n            if (newVal > old) {\n                decreasing = false;\n\
    \            }\n            old = newVal;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzzfglou3.java:37)\n"
  stdout: ''
  timestamp: 1660011597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes6dsrd4.java:22)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // implement me!\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr5fvt76j.java:23)\n"
  stdout: ''
  timestamp: 1660011597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        Long last = null;\n        for (Long i : l) {\n  \
    \          if (last == null) {\n                last = i;\n            } else\
    \ {\n                if (last < i) {\n                    last = i;\n        \
    \        } else if (last > i) {\n                    last = i;\n             \
    \   } else {\n                    return false;\n                }\n         \
    \   }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqld0r0c3.java:39)\n"
  stdout: ''
  timestamp: 1660011597
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            increasing\
    \ = increasing && (l.get(i) >= l.get(i - 1));\n            decreasing = decreasing\
    \ && (l.get(i) <= l.get(i - 1));\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return !java.util.stream.IntStream.range(0,\
    \ l.size() - 1).mapToObj(i -> l.get(i) - l.get(i + 1)).distinct().skip(1).findAny().isPresent();\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7yyuxyjn.java:20)\n"
  stdout: ''
  timestamp: 1660011597
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long a = l.get(0);\n        long b =\
    \ l.get(1);\n        if (a < b) {\n            return l.stream().sorted().collect(Collectors.toList()).equals(l);\n\
    \        } else if (a > b) {\n            return l.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()).equals(l);\n\
    \        } else {\n            return true;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011597
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int sign = 0;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i + 1) > l.get(i)) {\n  \
    \              if (sign == -1) {\n                    return false;\n        \
    \        }\n                sign = 1;\n            } else if (l.get(i + 1) < l.get(i))\
    \ {\n                if (sign == 1) {\n                    return false;\n   \
    \             }\n                sign = -1;\n            }\n        }\n      \
    \  return true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011597
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean inc = true;\n        boolean\
    \ dec = true;\n        for (int i = 1; i < l.size(); i++) {\n            inc =\
    \ inc && (l.get(i) >= l.get(i - 1));\n            dec = dec && (l.get(i) <= l.get(i\
    \ - 1));\n        }\n        return inc || dec;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011597
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        long change = 0;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long d = l.get(i) - l.get(i - 1);\n            if (d !=\
    \ 0) {\n                if (change != 0 && Math.signum(change) != Math.signum(d))\
    \ {\n                    return false;\n                }\n                change\
    \ = d;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((x, y) -> {\n\
    \            if (y > x) {\n                return y - x;\n            } else {\n\
    \                return x - y;\n            }\n        }).orElse((long)0l) >=\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn3ylyuzm.java:28)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ long a = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   long b = l.get(i);\n            if (a > b) {\n                increasing =\
    \ false;\n                break;\n            }\n            a = b;\n        }\n\
    \        boolean decreasing = true;\n        a = l.get(0);\n        for (int i\
    \ = 1; i < l.size(); i++) {\n            long b = l.get(i);\n            if (a\
    \ < b) {\n                decreasing = false;\n                break;\n      \
    \      }\n            a = b;\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long last = Long.MIN_VALUE;\n      \
    \  boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (Long i : l) {\n            if (i > last) {\n                decreasing = false;\n\
    \            } else if (i < last) {\n                increasing = false;\n   \
    \         }\n            last = i;\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpavwc8g9a.java:34)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((x, y) -> {\n\
    \                long delta = y - x;\n                if (delta == 0l) return\
    \ x;\n                if (delta > 0l) return 1l;\n                else return\
    \ -1l;\n            }).map(x -> !(x < 0l || x > 0l)).orElse(true);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtr5kk92.java:25)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Boolean increase = null;\n        Long\
    \ last = null;\n        for (Long n : l) {\n            if (last != null) {\n\
    \                if (increase == null) {\n                    increase = n >=\
    \ last;\n                } else {\n                    if (increase && n < last)\
    \ {\n                        return false;\n                    } else if (!increase\
    \ && n > last) {\n                        return false;\n                    }\n\
    \                }\n            }\n            last = n;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Boolean result = true;\n        Long\
    \ prev = null;\n        Long sign = null;\n        Long current = null;\n    \
    \    for (int i = 0; i < l.size(); i++) {\n            current = l.get(i);\n \
    \           if (prev != null) {\n                Long newSign = current - prev;\n\
    \                if (sign == null) {\n                    sign = newSign;\n  \
    \              } else {\n                    if (sign * newSign < 0) {\n     \
    \                   result = false;\n                        break;\n        \
    \            }\n                }\n            }\n            prev = current;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011597
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().distinct().count()\
    \ == 1 ||\n            IntStream.range(0, l.size() - 1).allMatch(i -> l.get(i)\
    \ < l.get(i + 1)) ||\n            IntStream.range(0, l.size() - 1).allMatch(i\
    \ -> l.get(i) > l.get(i + 1));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf0c4p6_e.java:26)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Your code goes here.\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmim_lmlq.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((a, b) -> {\
    \ return (a > b) ? b : a; }).get() == l.get(0)\n            || l.stream().reduce((a,\
    \ b) -> { return (a < b) ? b : a; }).get() == l.get(0);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5j39umdh.java:23)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((c, e) -> {\n\
    \            if (c == null) {\n                return e;\n            } else {\n\
    \                long diff = c - e;\n                if (diff == 0l) {\n     \
    \               return c;\n                } else if (diff > 0l) {\n         \
    \           return diff;\n                } else {\n                    return\
    \ -diff;\n                }\n            }\n        }).get() == 0l;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp262icxac.java:33)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean m = false;\n        boolean\
    \ inc = false;\n        long last = l.get(0);\n        for (long e : l) {\n  \
    \          if (e > last) {\n                if (inc)\n                    m =\
    \ true;\n                else\n                    inc = true;\n            }\n\
    \            if (e < last) {\n                if (inc)\n                    return\
    \ false;\n                else\n                    m = true;\n            }\n\
    \            last = e;\n        }\n        return m;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21dvf2ty.java:45)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = 0;\n        boolean first\
    \ = true;\n        boolean allSame = true;\n        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        for (Long ll : l) {\n           \
    \ if (first) {\n                prev = ll;\n                first = false;\n \
    \           } else {\n                if (ll != prev) {\n                    allSame\
    \ = false;\n                }\n                if (ll < prev) {\n            \
    \        increasing = false;\n                }\n                if (ll > prev)\
    \ {\n                    decreasing = false;\n                }\n            \
    \    prev = ll;\n            }\n        }\n        return increasing || decreasing\
    \ || allSame;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) return true;\n  \
    \      boolean inc = false;\n        long first = l.get(0);\n        if (first\
    \ < l.get(1)) inc = true;\n        if (first > l.get(1)) inc = false;\n      \
    \  for (int i = 1; i < l.size() - 1; i++) {\n            long prev = l.get(i);\n\
    \            long next = l.get(i + 1);\n            if (inc && prev > next) return\
    \ false;\n            if (!inc && prev < next) return false;\n        }\n    \
    \    return true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        else {\n            long prev = l.get(0);\n      \
    \      boolean increasing = true;\n            boolean decreasing = true;\n  \
    \          for (long elt : l) {\n                if (elt > prev) {\n         \
    \           decreasing = false;\n                }\n                else if (elt\
    \ < prev) {\n                    increasing = false;\n                }\n    \
    \            prev = elt;\n            }\n            return increasing || decreasing;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        long previous = l.get(0);\n        long current =\
    \ l.get(1);\n        boolean rising = current >= previous;\n        for (int i\
    \ = 2; i < l.size(); i++) {\n            previous = current;\n            current\
    \ = l.get(i);\n            if (rising && current < previous) {\n             \
    \   return false;\n            }\n            if (!rising && current > previous)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return all_increasing(l) || all_decreasing(l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwk28k3gl.java:17: error: cannot find symbol\n        return all_increasing(l)\
    \ || all_decreasing(l);\n               ^\n  symbol:   method all_increasing(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmpwk28k3gl.java:17: error: cannot find symbol\n\
    \        return all_increasing(l) || all_decreasing(l);\n                    \
    \                ^\n  symbol:   method all_decreasing(ArrayList<Long>)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if(l.size() == 0) {\n            return\
    \ true;\n        }\n        long initial = l.get(0);\n        for(int i = 1; i\
    \ < l.size(); i++) {\n            if(l.get(i) < initial) {\n                return\
    \ false;\n            }\n            initial = l.get(i);\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltm9u74c.java:33)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean asc = false;\n        boolean\
    \ desc = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n          \
    \  if (l.get(i) < l.get(i + 1)) {\n                asc = true;\n            }\n\
    \            if (l.get(i) > l.get(i + 1)) {\n                desc = true;\n  \
    \          }\n        }\n        return asc ^ desc;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoof3nrst.java:37)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n      \
    \  for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing && l.get(i)\
    \ > l.get(i + 1)) {\n                return false;\n            }\n          \
    \  if (!increasing && l.get(i) < l.get(i + 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return true;\n   \
    \     int c = Long.compare(l.get(0), l.get(1));\n        for (int i = 1; i < l.size()\
    \ - 1; i++) {\n            int c1 = Long.compare(l.get(i), l.get(i + 1));\n  \
    \          if (c1 == 0) continue;\n            if (c == 0) c = c1;\n         \
    \   if (c * c1 < 0) return false;\n        }\n        return true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n      \
    \  for (int i = 1; i < l.size() - 1; i++) {\n            boolean current_is_increasing\
    \ = l.get(i) < l.get(i + 1);\n            if (current_is_increasing != increasing)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        int d = 1;\n        if (l.get(0) > l.get(1)) {\n \
    \           d = -1;\n        }\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (d * (l.get(i - 1) - l.get(i)) < 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67bsmd7l.java:32)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n\tif (l.size() < 2) {\n\t    return true;\n\t\
    }\n\tboolean inc = false;\n\tboolean dec = false;\n\tlong last = l.get(0);\n\t\
    for (int i = 1; i < l.size(); i++) {\n\t    long next = l.get(i);\n\t    if (next\
    \ > last) {\n\t\tinc = true;\n\t    } else if (next < last) {\n\t\tdec = true;\n\
    \t    }\n\t    if (inc && dec) {\n\t\treturn false;\n\t    }\n\t    last = next;\n\
    \t}\n\treturn true;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().reduce((Long acc,\
    \ Long x) -> {\n            if (acc > x) {\n                return (long)-1l;\n\
    \            } else if (acc < x) {\n                return (long)1l;\n       \
    \     } else {\n                return (long)0l;\n            }\n        }).get()\
    \ != (long)0l;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcl8vte02.java:30)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n        for\
    \ (long x : l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphkn1i09o.java:35)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // YOUR CODE HERE\n        boolean dec\
    \ = true;\n        boolean inc = true;\n        for (int i = 0; i < l.size() -\
    \ 1; i++){\n            if (l.get(i) > l.get(i+1)){\n                dec = false;\n\
    \            }\n            if (l.get(i) < l.get(i+1)){\n                inc =\
    \ false;\n            }\n        }\n        return (dec == true || inc == true);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return (Collections.frequency(l, Collections.max(l))\
    \ == l.size())\n            || (Collections.frequency(l, Collections.min(l)) ==\
    \ l.size());\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk7ngghtj.java:21)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        assert(l.size() > 0);\n        int sign\
    \ = 0;\n        for (int i = 1; i < l.size(); i++) {\n            long diff =\
    \ l.get(i) - l.get(i - 1);\n            if (sign != 0 && diff != 0) {\n      \
    \          if (sign > 0 && diff < 0) {\n                    return false;\n  \
    \              }\n                if (sign < 0 && diff > 0) {\n              \
    \      return false;\n                }\n            }\n            if (diff !=\
    \ 0) {\n                sign = (int)Math.signum(diff);\n            }\n      \
    \  }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return (IntStream.range(0, l.size()\
    \ - 1).mapToObj(i -> {\n            try {\n                return new Pair<Long,\
    \ Long>(l.get(i), l.get(i + 1));\n            } catch (Exception _) {\n      \
    \          return null;\n            }\n        }).filter(x -> x != null).map(x\
    \ -> (new Pair<Integer, Integer>(x.getValue0().compareTo(x.getValue1()), 1))).reduce((x,\
    \ y) -> (new Pair<Integer, Integer>(x.getValue0() + y.getValue0(), x.getValue1()\
    \ + y.getValue1()))).get().getValue0() == 0) || (IntStream.range(0, l.size() -\
    \ 1).mapToObj(i -> {\n            try {\n                return new Pair<Long,\
    \ Long>(l.get(i), l.get(i + 1));\n            } catch (Exception _) {\n      \
    \          return null;\n            }\n        }).filter(x -> x != null).map(x\
    \ -> (new Pair<Integer, Integer>(x.getValue0().compareTo(x.getValue1()), 1))).reduce((x,\
    \ y) -> (new Pair<Integer, Integer>(x.getValue0() + y.getValue0(), x.getValue1()\
    \ + y.getValue1()))).get().getValue0() == (l.size() - 1) * -1);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_v6dok7t.java:20: error: as of release 9, '_' is a keyword, and\
    \ may not be used as an identifier\n            } catch (Exception _) {\n    \
    \                           ^\n/tmp/tmp_v6dok7t.java:26: error: as of release\
    \ 9, '_' is a keyword, and may not be used as an identifier\n            } catch\
    \ (Exception _) {\n                               ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) return true;\n  \
    \      boolean asc = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size()\
    \ - 1; i++) {\n            if (asc && l.get(i) > l.get(i + 1)) return false;\n\
    \            if (!asc && l.get(i) < l.get(i + 1)) return false;\n        }\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        else {\n            boolean inc = true;\n        \
    \    boolean dec = true;\n            for (int i = 1; i < l.size(); i++) {\n \
    \               if (l.get(i-1) > l.get(i)) {\n                    inc = false;\n\
    \                }\n                if (l.get(i-1) < l.get(i)) {\n           \
    \         dec = false;\n                }\n            }\n            return inc\
    \ || dec;\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Your code goes here.\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobr8lx17.java:21)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        }\n        boolean increasing = l.get(0) < l.get(1);\n      \
    \  for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n \
    \               if (l.get(i) > l.get(i + 1)) {\n                    return false;\n\
    \                }\n            } else {\n                if (l.get(i) < l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011594
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        for (int i = 0; i < l.size() - 1; i++)\
    \ {\n            if (l.get(i) > l.get(i + 1)) {\n                for (int j =\
    \ i + 1; j < l.size() - 1; j++) {\n                    if (l.get(j) > l.get(j\
    \ + 1)) {\n                        return false;\n                    }\n    \
    \            }\n                return true;\n            } else if (l.get(i)\
    \ < l.get(i + 1)) {\n                for (int j = i + 1; j < l.size() - 1; j++)\
    \ {\n                    if (l.get(j) < l.get(j + 1)) {\n                    \
    \    return false;\n                    }\n                }\n               \
    \ return true;\n            }\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3dnw4gf.java:37)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        boolean direction = false;\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            boolean d = l.get(i) >= l.get(i - 1);\n  \
    \          if (direction != false && d != direction) {\n                return\
    \ false;\n            }\n            direction = d;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2wpr6qtw.java:35)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i\
    \ - 1) > l.get(i)) {\n                increasing = false;\n            }\n   \
    \         if (l.get(i - 1) < l.get(i)) {\n                decreasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long sl = (long)0l;\n        long ll\
    \ = (long)0l;\n        int i = (int)0;\n        int r = (int)0;\n        while\
    \ (r < l.size()) {\n            if (l.get(r) > ll) {\n                sl = (long)1l;\n\
    \                ll = l.get(r);\n            } else if (l.get(r) < ll) {\n   \
    \             sl = (long)-1l;\n                ll = l.get(r);\n            }\n\
    \            i = (int)(i + sl);\n            r = (int)(r + (long)1l);\n      \
    \  }\n        if (i == (long)l.size() - (long)1l || i == (long)-1l * (long)(l.size()\
    \ - (long)1l)) {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqvvfgw3s.java:39)\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) return true;\n  \
    \      return l.stream().reduce((l0, l1) -> {\n            if (l0 < l1) return\
    \ Tuple.with(l1, true);\n            if (l0 > l1) return Tuple.with(l1, false);\n\
    \            return Tuple.with(l1, l1);\n        }).getValue0();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqtd5g9f.java:19: error: cannot find symbol\n            if (l0\
    \ < l1) return Tuple.with(l1, true);\n                                     ^\n\
    \  symbol:   method with(Long,boolean)\n  location: class Tuple\n/tmp/tmpiqtd5g9f.java:20:\
    \ error: cannot find symbol\n            if (l0 > l1) return Tuple.with(l1, false);\n\
    \                                     ^\n  symbol:   method with(Long,boolean)\n\
    \  location: class Tuple\n/tmp/tmpiqtd5g9f.java:21: error: cannot find symbol\n\
    \            return Tuple.with(l1, l1);\n                        ^\n  symbol:\
    \   method with(Long,Long)\n  location: class Tuple\n/tmp/tmpiqtd5g9f.java:22:\
    \ error: cannot find symbol\n        }).getValue0();\n          ^\n  symbol: \
    \  method getValue0()\n  location: class Optional<Long>\n4 errors\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        long prev = l.get(0);\n        boolean increasing\
    \ = false;\n        for (int i = 1; i < l.size(); i++) {\n            long current\
    \ = l.get(i);\n            if (current > prev) {\n                if (increasing)\
    \ {\n                    return false;\n                }\n                increasing\
    \ = true;\n            } else if (current < prev) {\n                if (!increasing)\
    \ {\n                    return false;\n                }\n                increasing\
    \ = false;\n            }\n            prev = current;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpknnget8c.java:40)\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.get(0);\n        boolean\
    \ monotonic = true;\n        for (long item : l) {\n            if (item < prev)\
    \ {\n                monotonic = false;\n                break;\n            }\n\
    \            prev = item;\n        }\n        if (monotonic) {\n            return\
    \ true;\n        }\n        monotonic = true;\n        prev = l.get(0);\n    \
    \    for (long item : l) {\n            if (item > prev) {\n                monotonic\
    \ = false;\n                break;\n            }\n            prev = item;\n\
    \        }\n        return monotonic;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Write your code here!\n        //\
    \ boolean b = l.get(0) < l.get(1);\n        // boolean c = l.get(1) < l.get(2);\n\
    \        // return b && c || !b && !c;\n        return IntStream.range(0, l.size()\
    \ - 1).allMatch(i -> l.get(i) < l.get(i + 1)) || IntStream.range(0, l.size() -\
    \ 1).allMatch(i -> l.get(i) > l.get(i + 1));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmposdc2mz7.java:28)\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return (allGreaterEqual(l) || allLessEqual(l));\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr2rqr4mx.java:17: error: cannot find symbol\n        return (allGreaterEqual(l)\
    \ || allLessEqual(l));\n                ^\n  symbol:   method allGreaterEqual(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmpr2rqr4mx.java:17: error: cannot find symbol\n\
    \        return (allGreaterEqual(l) || allLessEqual(l));\n                   \
    \                   ^\n  symbol:   method allLessEqual(ArrayList<Long>)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Fill in answer.\n        if (l.size()\
    \ == 1) return true;\n        long prev = l.get(0);\n        int sign = 0;\n \
    \       for (int i = 1; i < l.size(); i++) {\n            long curr = l.get(i);\n\
    \            int currSign = Long.signum(curr - prev);\n            if (sign ==\
    \ 0) {\n                sign = currSign;\n            } else if (sign != currSign)\
    \ {\n                return false;\n            }\n            prev = curr;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9ni3_7l.java:38)\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ true;\n        } else {\n            boolean increasing = true;\n          \
    \  for (int i = 1; i < l.size(); i++) {\n                if (l.get(i) < l.get(i\
    \ - 1)) {\n                    increasing = false;\n                    break;\n\
    \                }\n            }\n            if (increasing) {\n           \
    \     return true;\n            } else {\n                for (int i = 1; i <\
    \ l.size(); i++) {\n                    if (l.get(i) > l.get(i - 1)) {\n     \
    \                   return false;\n                    }\n                }\n\
    \                return true;\n            }\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, true);\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3jezbyv2.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, true);\n           \
    \    ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,boolean\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        // System.out.println(l);\n\
    \        boolean inc = true;\n        boolean dec = true;\n        for (int i\
    \ = 0; i < l.size() - 1; i++) {\n            if (l.get(i) <= l.get(i + 1)) {\n\
    \                dec = false;\n            }\n            if (l.get(i) >= l.get(i\
    \ + 1)) {\n                inc = false;\n            }\n        }\n        return\
    \ inc || dec;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jpftcpj.java:38)\n"
  stdout: ''
  timestamp: 1660011600
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // fill in code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubsrkaz9.java:21)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return IntStream.range(0, l.size() -\
    \ 1).allMatch(i -> l.get(i) <= l.get(i + 1)) || IntStream.range(0, l.size() -\
    \ 1).allMatch(i -> l.get(i) >= l.get(i + 1));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // >>> Your code here <<<\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4pb4kzt.java:21)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i + 1) < l.get(i)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i + 1) > l.get(i)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        long prev = l.get(0);\n        long curr = l.get(1);\n\
    \        long diff = curr - prev;\n        if (diff == 0) {\n            return\
    \ monotonic(new ArrayList<Long>(l.subList(1, l.size())));\n        }\n       \
    \ for (int i = 2; i < l.size(); i++) {\n            prev = curr;\n           \
    \ curr = l.get(i);\n            long new_diff = curr - prev;\n            if (new_diff\
    \ == 0) {\n                return monotonic(new ArrayList<Long>(l.subList(i, l.size())));\n\
    \            }\n            if (new_diff * diff < 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // \u2193\u2193\u2193\u2193 your code\
    \ goes here \u2193\u2193\u2193\u2193\n        return false;\n        // \u2191\
    \u2191\u2191\u2191 end of your code \u2191\u2191\u2191\u2191\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk2gdk651.java:22)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long last = null;\n        for (Long\
    \ item : l) {\n            if (last != null) {\n                if (last == item)\
    \ {\n                    continue;\n                }\n                if (last\
    \ > item) {\n                    for (Long i : l) {\n                        if\
    \ (i > last) {\n                            return false;\n                  \
    \      }\n                        last = i;\n                    }\n         \
    \           return true;\n                }\n                if (last < item)\
    \ {\n                    for (Long i : l) {\n                        if (i < last)\
    \ {\n                            return false;\n                        }\n  \
    \                      last = i;\n                    }\n                    return\
    \ true;\n                }\n            }\n            last = item;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean nonIncreasing = true;\n    \
    \    boolean nonDecreasing = true;\n        long previous = l.get(0);\n      \
    \  for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < previous)\
    \ {\n                nonIncreasing = false;\n            }\n            if (l.get(i)\
    \ > previous) {\n                nonDecreasing = false;\n            }\n     \
    \       previous = l.get(i);\n        }\n        return nonIncreasing || nonDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long last = l.get(0);\n        boolean\
    \ isIncreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n       \
    \     long curr = l.get(i);\n            if (last == curr) {\n               \
    \ continue;\n            }\n            if (last < curr) {\n                if\
    \ (!isIncreasing) {\n                    return false;\n                }\n  \
    \          } else {\n                if (isIncreasing) {\n                   \
    \ isIncreasing = false;\n                }\n            }\n            last =\
    \ curr;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long old = Long.MIN_VALUE;\n       \
    \ boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (long x : l) {\n            if (old == Long.MIN_VALUE) {\n                old\
    \ = x;\n                continue;\n            }\n            if (x < old) {\n\
    \                increasing = false;\n            }\n            if (x > old)\
    \ {\n                decreasing = false;\n            }\n            old = x;\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return true;\n   \
    \     return IntStream.range(1, l.size()).filter(i -> Math.signum(l.get(i) - l.get(i\
    \ - 1)) != Math.signum(l.get(1) - l.get(0))).count() == 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfdvo6puk.java:25)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        throw new NotImplementedException();\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5bensiep.java:17: error: cannot find symbol\n        throw new\
    \ NotImplementedException();\n                  ^\n  symbol:   class NotImplementedException\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        int n = l.size();\n        for (int i =\
    \ 0; i < n - 1; i++) {\n            if (l.get(i + 1) > l.get(i)) {\n         \
    \       decreasing = false;\n            }\n            if (l.get(i + 1) < l.get(i))\
    \ {\n                increasing = false;\n            }\n        }\n        return\
    \ (increasing || decreasing);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().mapToLong(v -> v).distinct().count()\
    \ > 1 ? false : true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_r4g8y34.java:20)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        Long last = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            Long current = l.get(i);\n        \
    \    if (last < current) {\n                decreasing = false;\n            }\
    \ else if (last > current) {\n                increasing = false;\n          \
    \  }\n            last = current;\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Write your code here.\n        if\
    \ (l.size() < 2) {\n            return true;\n        }\n        boolean inc =\
    \ l.get(0) < l.get(1);\n        boolean dec = l.get(0) > l.get(1);\n        for\
    \ (int i = 1; i < l.size() - 1; i++) {\n            if (l.get(i) == l.get(i +\
    \ 1)) {\n                continue;\n            }\n            if ((inc && l.get(i)\
    \ > l.get(i + 1)) || (dec && l.get(i) < l.get(i + 1))) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes6dsrd4.java:22)\n"
  stdout: ''
  timestamp: 1660011594
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = false;\n      \
    \  boolean decreasing = false;\n        for (int i = 0; i < l.size() - 1; i++)\
    \ {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing =\
    \ true;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n         \
    \       decreasing = true;\n            }\n        }\n        return !increasing\
    \ || !decreasing;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean flag = true;\n        long first\
    \ = l.get(0);\n        for (long item : l) {\n            if (flag) {\n      \
    \          if (item == first) {\n                    continue;\n             \
    \   } else if (item > first) {\n                    flag = false;\n          \
    \      } else {\n                    return false;\n                }\n      \
    \      } else {\n                if (item < first) {\n                    return\
    \ false;\n                }\n            }\n            first = item;\n      \
    \  }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2l06ft_h.java:41)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> m = new ArrayList<Long>(l);\n\
    \        if (m.get(0) < m.get(1)) {\n            for (int i = 1; i < m.size()\
    \ - 1; i++) {\n                if (m.get(i) > m.get(i + 1)) {\n              \
    \      return false;\n                }\n            }\n        } else {\n   \
    \         for (int i = 1; i < m.size() - 1; i++) {\n                if (m.get(i)\
    \ < m.get(i + 1)) {\n                    return false;\n                }\n  \
    \          }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean up = true;\n        boolean\
    \ down = true;\n        Long previous = null;\n        for (Long num : l) {\n\
    \            if (previous != null) {\n                if (previous < num) {\n\
    \                    down = false;\n                } else if (previous > num)\
    \ {\n                    up = false;\n                }\n            }\n     \
    \       previous = num;\n        }\n        return (up || down);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsod55amb.java:20)\n"
  stdout: ''
  timestamp: 1660011591
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        boolean increasing = true;\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            if (l.get(i-1) > l.get(i)) {\n           \
    \     increasing = false;\n                break;\n            }\n        }\n\
    \        if (increasing) {\n            return true;\n        }\n        boolean\
    \ decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   if (l.get(i-1) < l.get(i)) {\n                decreasing = false;\n      \
    \          break;\n            }\n        }\n        return decreasing;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Cria uma nova lista a partir da original,\
    \ \n        // aumentando cada elemento da lista original 1.\n        ArrayList<Long>\
    \ l2 = (ArrayList<Long>) l.stream().map(x -> x + 1).collect(Collectors.toList());\n\
    \        // Remove os elementos iguais.\n        l2.removeAll(l);\n        //\
    \ Se a lista l2 for vazia, significa que a lista original \xE9 monot\xF4nica.\n\
    \        return l2.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbk5pfrm2.java:26)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int n = l.size();\n        if (n <=\
    \ 1) return true;\n        long a = l.get(0);\n        long b = l.get(1);\n  \
    \      if (a > b) {\n            for (int i = 2; i < n; i++) {\n             \
    \   long c = l.get(i);\n                if (c > b) return false;\n           \
    \     b = c;\n            }\n        } else {\n            for (int i = 2; i <\
    \ n; i++) {\n                long c = l.get(i);\n                if (c < b) return\
    \ false;\n                b = c;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long start = l.get(0);\n        int\
    \ monotonic_count = 0;\n        for (int i = 1; i < l.size(); i++) {\n       \
    \     long prev = l.get(i - 1);\n            long curr = l.get(i);\n         \
    \   if (curr > prev) {\n                if (monotonic_count < 0) {\n         \
    \           return false;\n                }\n                monotonic_count\
    \ = 1;\n            } else if (curr < prev) {\n                if (monotonic_count\
    \ > 0) {\n                    return false;\n                }\n             \
    \   monotonic_count = -1;\n            }\n        }\n        return true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long prev = l.get(0);\n        boolean\
    \ ascending = true;\n        boolean descending = true;\n        for (Long el:\
    \ l) {\n            if (el >= prev) {\n                descending = false;\n \
    \           }\n            if (el <= prev) {\n                ascending = false;\n\
    \            }\n            prev = el;\n        }\n        return ascending ||\
    \ descending;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7z57q9o1.java:32)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if(l.size() <= 1) {\n            return\
    \ true;\n        }\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i)\
    \ > l.get(i - 1)) {\n                decreasing = false;\n            }\n    \
    \        if(l.get(i) < l.get(i - 1)) {\n                increasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        long p = l.get(0);\n        boolean increasing = true;\n\
    \        for (long e : l) {\n            if (p > e) {\n                increasing\
    \ = false;\n                break;\n            }\n            p = e;\n      \
    \  }\n        if (increasing) {\n            return true;\n        }\n       \
    \ p = l.get(0);\n        for (long e : l) {\n            if (p < e) {\n      \
    \          return false;\n            }\n            p = e;\n        }\n     \
    \   return true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return IntStream.range(0, l.size()-1).allMatch(i\
    \ -> l.get(i) <= l.get(i+1))\n            || IntStream.range(0, l.size()-1).allMatch(i\
    \ -> l.get(i) >= l.get(i+1));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n\
    \            }\n            if (l.get(i) > l.get(i + 1)) {\n                increasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        boolean isMonotonic\
    \ = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ != l.get(i + 1)) {\n                isMonotonic = false;\n                break;\n\
    \            }\n        }\n        return isMonotonic;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptawztfnf.java:30)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            increasing\
    \ = increasing && (l.get(i - 1) <= l.get(i));\n            decreasing = decreasing\
    \ && (l.get(i - 1) >= l.get(i));\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ true;\n        }\n        boolean monotonic = true;\n        boolean increasing\
    \ = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n \
    \           if (increasing && l.get(i) > l.get(i + 1)) {\n                monotonic\
    \ = false;\n                break;\n            }\n            if (!increasing\
    \ && l.get(i) < l.get(i + 1)) {\n                monotonic = false;\n        \
    \        break;\n            }\n        }\n        return monotonic;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().allMatch(i -> i >\
    \ l.get(0)) || l.stream().allMatch(i -> i < l.get(0));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc120yomq.java:20)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i + 1) < l.get(i)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i + 1) > l.get(i)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011601
