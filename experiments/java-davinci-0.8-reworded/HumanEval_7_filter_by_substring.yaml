name: HumanEval_7_filter_by_substring
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter an input array list of strings only for ones that\
  \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
  \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
  cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
  \ filterBySubstring(ArrayList<String> strings, String substring) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"\
  xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
  , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
  prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  grunt\", (String)\"prune\")))));\n    }\n\n}\n"
completions: ['        return new ArrayList<String>(strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList()));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring))\n                result.add(s);\n\
    \        }\n        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        strings.forEach((s) -> {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        });\n        return result;",
  "        ArrayList<String> stringsContainingSubstring = new ArrayList<String>();\n\
    \        int i = 0;\n        while(i < strings.size()) {\n            if(strings.get(i).contains(substring))\
    \ {\n                stringsContainingSubstring.add(strings.get(i));\n       \
    \     }\n            i = i + 1;\n        }\n        return stringsContainingSubstring;",
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if (string.contains(substring)) {\n\
    \                filteredStrings.add(string);\n            }\n        }\n    \
    \    return filteredStrings;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return (ArrayList<String>)strings.stream().filter(e->e.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> arrayList = new ArrayList<String>();\n        Iterator<String>\
    \ iterator = strings.iterator();\n        while (iterator.hasNext()) {\n     \
    \       String str = iterator.next();\n            if (str.contains(substring))\
    \ {\n                arrayList.add(str);\n            }\n        }\n        return\
    \ arrayList;", "        ArrayList<String> retval = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                retval.add(s);\n            }\n        }\n        return retval;",
  "        // Fill in code here\n        return null;", '        return (new ArrayList<String>(strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList())));', '        return (ArrayList<String>)strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String str : strings)\
    \ {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n\
    \            }\n        }\n        return filteredStrings;", '        return (new
    ArrayList<String>(strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toList())));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String i : strings) {\n    \
    \        if (i.contains(substring)) {\n                output.add(i);\n      \
    \      }\n        }\n        return output;", "        ArrayList<String> answer\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                answer.add(string);\n\
    \            }\n        }\n        return answer;", "        ArrayList<String>\
    \ filteredList = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredList.add(string);\n\
    \            }\n        }\n        return filteredList;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", '        return (ArrayList<String>)strings.stream().filter(string
    -> string.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.contains(substring))\n                filtered.add(s);\n    \
    \    }\n        return filtered;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> filtered = new ArrayList<String>();\n \
    \       for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ stringList = new ArrayList<String>();\n        for (String s : strings) {\n\
    \            if (s.contains(substring)) {\n                stringList.add(s);\n\
    \            }\n        }\n        return stringList;", "        ArrayList<String>\
    \ newList = new ArrayList<String>();\n        for (String s : strings) {\n   \
    \         if (s.contains(substring)) {\n                newList.add(s);\n    \
    \        }\n        }\n        return newList;", "        ArrayList<String> filtered\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> returned = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         returned.add(string);\n            }\n        }\n        return returned;",
  "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if (string.contains(substring)) {\n\
    \                filteredStrings.add(string);\n            }\n        }\n    \
    \    return filteredStrings;", "        ArrayList<String> output = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                output.add(s);\n            }\n        }\n        return output;",
  "        ArrayList<String> matches = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                matches.add(s);\n\
    \            }\n        }\n        return matches;", '        return new ArrayList<String>(strings.stream().filter(string
    -> string.contains(substring)).collect(Collectors.toList()));', "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String str : strings) {\n  \
    \          if (str.contains(substring)) {\n                result.add(str);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.contains(substring)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String str : strings) {\n  \
    \          if (str.contains(substring)) {\n                result.add(str);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String each : strings) {\n \
    \           if (each.contains(substring)) {\n                result.add(each);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings;', "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                filtered.add(str);\n            }\n        }\n        return\
    \ filtered;", "        ///////\n        ArrayList<String> ret = new ArrayList<String>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\n\
    \                ret.add(str);\n        }\n        return ret;\n        ///////",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.contains(substring)) {\n             \
    \   result.add(str);\n            }\n        }\n        return result;", '        return
    (ArrayList<String>)strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> arrayList = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         arrayList.add(string);\n            }\n        }\n        return arrayList;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  '        return (ArrayList<String>)strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ out = new ArrayList<String>();\n        for (String string : strings) {\n  \
    \          if (string.contains(substring)) {\n                out.add(string);\n\
    \            }\n        }\n        return out;", "        ArrayList<String> stringsWithSubstring\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                stringsWithSubstring.add(string);\n\
    \            }\n        }\n        return stringsWithSubstring;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        // Iterate over all strings\n\
    \        for (String s : strings) {\n            // If the string contains the\
    \ substring then add it to the filtered strings\n            if (s.contains(substring))\
    \ {\n                filteredStrings.add(s);\n            }\n        }\n     \
    \   return filteredStrings;", "        ArrayList<String> stringsWithSubstring\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                stringsWithSubstring.add(string);\n\
    \            }\n        }\n        return stringsWithSubstring;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;", "        if (strings.size() == 0)\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String str : strings) {\n\
    \            if (str.contains(substring)) {\n                filtered.add(str);\n\
    \            }\n        }\n        return filtered;", '        return null;',
  "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
    \            }\n        }\n        return ret;", "        ArrayList<String> newList\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.contains(substring)) {\n                newList.add(s);\n            }\n\
    \        }\n        return newList;", "        ArrayList<String> newStrings =\
    \ new ArrayList<String>();\n        for (String string : strings) {\n        \
    \    if (string.contains(substring)) {\n                newStrings.add(string);\n\
    \            }\n        }\n        return newStrings;", '        return (ArrayList<String>)strings.stream().filter(a
    -> a.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                output.add(string);\n\
    \            }\n        }\n        return output;", "        // >>> your code\
    \ here <<<\n        ArrayList<String> rv = new ArrayList<String>();\n        for\
    \ (String s : strings) {\n            if (s.contains(substring)) {\n         \
    \       rv.add(s);\n            }\n        }\n        return rv;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.contains(substring)) {\n                filtered.add(s);\n  \
    \          }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String element : strings)\
    \ {\n            if (element.contains(substring)) {\n                filtered.add(element);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ newArray = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                newArray.add(string);\n\
    \            }\n        }\n        return newArray;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ stringsWithSubstring = new ArrayList<String>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  stringsWithSubstring.add(string);\n            }\n        }\n        return\
    \ stringsWithSubstring;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                result.add(str);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> output = new ArrayList<String>();\n   \
    \     for (String str : strings) {\n            if (str.contains(substring)) {\n\
    \                output.add(str);\n            }\n        }\n        return output;",
  "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if (string.contains(substring)) {\n\
    \                filteredStrings.add(string);\n            }\n        }\n    \
    \    return filteredStrings;", "        ArrayList<String> ret = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                ret.add(s);\n            }\n        }\n        return ret;",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        // Write your code here.\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> result = new ArrayList<String>();\n   \
    \     for (String s : strings) {\n            if (s.contains(substring)) {\n \
    \               result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring))\n                ret.add(s);\n\
    \        }\n        return ret;", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", '        return (ArrayList<String>) strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        // todo\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", '        return (ArrayList<String>)strings.stream().filter(x
    -> x.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ arrayList = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                arrayList.add(string);\n\
    \            }\n        }\n        return arrayList;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring))\n                result.add(s);\n        }\n\
    \        return result;", "        ArrayList<String> filteredStrings = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filteredStrings.add(s);\n            }\n        }\n        return\
    \ filteredStrings;", "        ArrayList<String> res = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                res.add(s);\n            }\n        }\n        return res;",
  '        return (ArrayList<String>)strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> newStrings = new ArrayList<String>();\n        strings.forEach((string)\
    \ -> {\n            if (string.contains(substring)) {\n                newStrings.add(string);\n\
    \            }\n        });\n        return newStrings;", "        return new\
    \ ArrayList<String>(strings.stream().filter(string -> {\n            if (string.contains(substring))\
    \ {\n                return true;\n            } else {\n                return\
    \ false;\n            }\n        }).collect(Collectors.toList()));", "       \
    \ ArrayList<String> filteredList = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filteredList.add(s);\n\
    \            }\n        }\n        return filteredList;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return (ArrayList<String>)strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> newStrings = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         newStrings.add(string);\n            }\n        }\n        return newStrings;",
  '        return (ArrayList<String>)strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());',
  '        return (new ArrayList<String>(strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList())));',
  "        ArrayList<String> ans = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                ans.add(s);\n\
    \            }\n        }\n        return ans;", "        ArrayList<String> arr\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                arr.add(string);\n \
    \           }\n        }\n        return arr;", "        ArrayList<String> filtered\
    \ = new ArrayList<String>();\n        for (String item : strings) {\n        \
    \    if (item.contains(substring)) {\n                filtered.add(item);\n  \
    \          }\n        }\n        return filtered;", "        ArrayList<String>\
    \ out = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.contains(substring)) {\n                out.add(s);\n            }\n\
    \        }\n        return out;", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> out = new ArrayList<String>();\n        for (String elem\
    \ : strings) {\n            if (elem.contains(substring)) {\n                out.add(elem);\n\
    \            }\n        }\n        return out;", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.contains(substring))\n                result.add(s);\n        }\n    \
    \    return result;", "        ArrayList<String> filteredStrings = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;", '        return (new ArrayList<String>(strings.stream().filter(x
    -> x.contains(substring)).collect(Collectors.toList())));', "        ArrayList<String>\
    \ ans = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.contains(substring)) {\n                ans.add(s);\n            }\n\
    \        }\n        return ans;", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> newStrings = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.contains(substring)) {\n             \
    \   newStrings.add(str);\n            }\n        }\n        return newStrings;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> ans = new ArrayList<String>();\n        for (String str\
    \ : strings) {\n            if (str.contains(substring)) {\n                ans.add(str);\n\
    \            }\n        }\n        return ans;", '        return (ArrayList<String>)strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "\treturn (ArrayList<String>)strings.stream().filter(s\
    \ -> s.contains(substring)).collect(Collectors.toList());", '        return new
    ArrayList<String>(Arrays.asList());', "        ArrayList<String> result = new\
    \ ArrayList<String>();\n        for (String string : strings) {\n            if\
    \ (string.contains(substring)) {\n                result.add(string);\n      \
    \      }\n        }\n        return result;", "        ArrayList<String> filteredStrings\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", '        return null;',
  "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         output.add(string);\n            }\n        }\n        return output;",
  "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
    \            }\n        }\n        return ret;", "        ArrayList<String> output\
    \ = new ArrayList<String>();\n        for (String str : strings) {\n         \
    \   if (str.contains(substring)) {\n                output.add(str);\n       \
    \     }\n        }\n        return output;", "        ArrayList<String> filtered\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.contains(substring)) {\n                filtered.add(s);\n           \
    \ }\n        }\n        return filtered;", '        return new ArrayList<String>(strings.stream().filter(str
    -> str.contains(substring)).collect(Collectors.toList()));', "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;", "        ArrayList<String> filteredStrings\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;", "        ArrayList<String> filtered\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.contains(substring)) {\n                filtered.add(s);\n           \
    \ }\n        }\n        return filtered;", "        ArrayList<String> result =\
    \ new ArrayList<String>();\n        for (String string : strings) {\n        \
    \    if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        int i = 0;\n        while (i <\
    \ strings.size()) {\n            String str = strings.get(i);\n            if\
    \ (str.contains(substring)) {\n                filtered.add(str);\n          \
    \  }\n            i = i + 1;\n        }\n        return filtered;", '        return
    (ArrayList<String>) strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        // <<< Don't change the function signature (it's used for testing)\n  \
    \      return strings;", "        ArrayList<String> answer = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                answer.add(s);\n            }\n        }\n        return answer;",
  "        ArrayList<String> temp = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                temp.add(s);\n\
    \            }\n        }\n        return temp;", '        return new ArrayList<String>(strings.stream().filter(item
    -> item.contains(substring)).collect(Collectors.toList()));', "        ArrayList<String>\
    \ answer = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                answer.add(s);\n      \
    \      }\n        }\n        return answer;", "        ArrayList<String> stringList\
    \ = new ArrayList<String>();\n        for (String str : strings) {\n         \
    \   if (str.contains(substring)) {\n                stringList.add(str);\n   \
    \         }\n        }\n        return stringList;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filteredList = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if (string.contains(substring)) {\n\
    \                filteredList.add(string);\n            }\n        }\n       \
    \ return filteredList;", "        ArrayList<String> l = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                l.add(s);\n            }\n        }\n        return l;", "  \
    \      ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.contains(substring)) {\n             \
    \   filtered.add(str);\n            }\n        }\n        return filtered;", " \
    \       ArrayList<String> answer = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                answer.add(s);\n\
    \            }\n        }\n        return answer;", "        ArrayList<String>\
    \ filteredList = new ArrayList<String>();\n        for (String str : strings)\
    \ {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n\
    \            }\n        }\n        return filteredList;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        if (strings.isEmpty())\
    \ {\n            return strings;\n        }\n        else {\n            ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n            for (String string :\
    \ strings) {\n                if (string.contains(substring)) {\n            \
    \        filteredStrings.add(string);\n                }\n            }\n    \
    \        return filteredStrings;\n        }", "        // strings - the array\
    \ list of strings to filter\n        // substring - the substring to filter the\
    \ strings by\n        // return - an array list containing only strings that contain\
    \ the substring\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", '        return (new ArrayList<String>(strings.stream().filter(x
    -> x.contains(substring)).collect(Collectors.toList())));', '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"a\"))\n        // (new ArrayList<String>(Arrays.asList()))\n\
    \        if(strings.size() == 0) {\n            return strings;\n        } else\
    \ {\n            // >>> filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"cde\", (String)\"array\"))), (\"a\"))\n   \
    \         // (new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"\
    bacd\", (String)\"array\")))\n            ArrayList<String> filtered = new ArrayList<String>();\n\
    \            for(String s : strings) {\n                if(s.contains(substring))\
    \ {\n                    filtered.add(s);\n                }\n            }\n\
    \            return filtered;\n        }", "        return new ArrayList<String>(\n\
    \            strings.stream()\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toList())\n        );", "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String str : strings) {\n  \
    \          if (str.contains(substring)) {\n                output.add(str);\n\
    \            }\n        }\n        return output;", "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                output.add(string);\n\
    \            }\n        }\n        return output;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String word : strings) {\n \
    \           if (word.contains(substring)) {\n                result.add(word);\n\
    \            }\n        }\n        return result;", "        // fill-in\n    \
    \    ArrayList<String> newStrings = new ArrayList<String>();\n        int i =\
    \ 0;\n        for (; i < strings.size(); i++) {\n            String element =\
    \ strings.get(i);\n            int j = 0;\n            for (; j < element.length();\
    \ j++) {\n                if (element.charAt(j) == substring.charAt(0)) {\n  \
    \                  newStrings.add(element);\n                    break;\n    \
    \            }\n            }\n        }\n        return newStrings;", "     \
    \   for (int i = 0; i < strings.size(); i++) {\n            if (!strings.get(i).contains(substring))\
    \ {\n                strings.remove(i);\n                i -= 1;\n           \
    \ }\n        }\n        return strings;", '        return strings.stream().filter(x
    -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    a\"))\n        // (new ArrayList<String>(Arrays.asList()))\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.contains(substring))\n                filtered.add(s);\n    \
    \    }\n        return filtered;", "        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;", "        ArrayList<String> res =\
    \ new ArrayList<String>();\n        for (String string : strings) {\n        \
    \    if (string.contains(substring)) {\n                res.add(string);\n   \
    \         }\n        }\n        return res;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        // Your code goes here!', "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> ans = new ArrayList<String>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  ans.add(string);\n            }\n        }\n        return ans;", "       \
    \ ArrayList<String> substrList = new ArrayList<String>();\n        for (String\
    \ i : strings) {\n            if (i.contains(substring)) {\n                substrList.add(i);\n\
    \            }\n        }\n        return substrList;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        strings.forEach((string) -> {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        });\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
    \            }\n        }\n        return ret;", '        return new ArrayList<String>(strings.stream().filter(x
    -> x.contains(substring)).collect(Collectors.toList()));', "        // Missing\
    \ code here\n        return null;", '        return strings.stream().filter(string
    -> string.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> a = new ArrayList<String>();\n        for (String st\
    \ : strings) {\n            if (st.contains(substring)) {\n                a.add(st);\n\
    \            }\n        }\n        return a;", "        ArrayList<String> filteredStrings\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        strings.forEach(((item) -> {\n\
    \            if (item.contains(substring)) {\n                filtered.add(item);\n\
    \            }\n        }));\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String str : strings) {\n  \
    \          if (str.contains(substring)) {\n                result.add(str);\n\
    \            }\n        }\n        return result;", '        return (ArrayList<String>)strings.stream().filter(x
    -> x.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            //  Add all strings that contain the given substring\n          \
    \  if (string.contains(substring)) {\n                output.add(string);\n  \
    \          }\n        }\n        return output;", "        ArrayList<String> filtered\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.contains(substring)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", '        return (ArrayList<String>)strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;", "        // Method which runs upon\
    \ creation to take the lambda expression\n        // and returns a function which\
    \ calls the lambda with the given\n        // parameters.\n        // >>> callFunc(((String,\
    \ String) -> { System.out.println(<call_to_self>.name); }), (\"hello\", \"world\"\
    ))\n        // <generated_class_name>\n        // >>> callFunc((int x, int y)\
    \ -> { return (x + y); }, (1, 2))\n        // 3\n        return ((Function<ArrayList<String>,\
    \ ArrayList<String>>)\n            (ArrayList<String> stringsLocal) -> {\n   \
    \             ArrayList<String> ans = new ArrayList<String>();\n             \
    \   for (String string : stringsLocal) {\n                    if (string.contains(substring))\
    \ {\n                        ans.add(string);\n                    }\n       \
    \         }\n                return ans;\n            }\n        ).apply(strings);",
  "        ArrayList<String> res = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                res.add(s);\n\
    \            }\n        }\n        return res;", "        ArrayList<String> filteredStrings\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ filteredList = new ArrayList<String>();\n        for (String s : strings) {\n\
    \            if (s.contains(substring)) {\n                filteredList.add(s);\n\
    \            }\n        }\n        return filteredList;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        // >>> END CSSE220_STUDENT_HERE\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        // Remove characters from string\n        return (ArrayList<String>)strings.stream().filter(x\
    \ -> x.contains(substring)).collect(Collectors.toList());", "        ArrayList<String>\
    \ newList = new ArrayList<String>();\n        for (String item : strings) {\n\
    \            if (item.contains(substring)) {\n                newList.add(item);\n\
    \            }\n        }\n        return newList;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", '        return ((ArrayList<String>)strings.stream().filter((string)
    -> (string.contains(substring))).collect(Collectors.toList()));', "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                output.add(s);\n      \
    \      }\n        }\n        return output;", "        ArrayList<String> newArray\
    \ = new ArrayList<String>();\n        // TODO\n        return newArray;", "  \
    \      ArrayList<String> result = new ArrayList<String>();\n        strings.forEach((s)\
    \ -> {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        });\n        return result;", "        ArrayList<String>\
    \ answer = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring))\n                answer.add(string);\n\
    \        }\n        return answer;", "        ArrayList<String> ret = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                ret.add(s);\n            }\n        }\n        return ret;",
  "        ArrayList<String> newStrings = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         newStrings.add(string);\n            }\n        }\n        return newStrings;",
  "        int length = strings.size();\n        ArrayList<String> output = new ArrayList<String>();\n\
    \        for (int index = 0; index < length; index = index + 1) {\n          \
    \  String string = strings.get(index);\n            if (string.contains(substring))\
    \ {\n                output.add(string);\n            }\n        }\n        return\
    \ output;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));']
stop_tokens:
- "\n    }\n"
