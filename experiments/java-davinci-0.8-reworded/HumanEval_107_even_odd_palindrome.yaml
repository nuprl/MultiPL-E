name: HumanEval_107_even_odd_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer n, return a pair that has the number\
  \ of even and odd\n    // integer palindromes that fall within the range(1, n),\
  \ inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // (Pair.with(1l,\
  \ 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them\
  \ is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // (Pair.with(4l, 6l))\n    // Explanation:\n    // Integer palindrome are\
  \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  \    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned pair has the number\
  \ of even and odd integer palindromes respectively.\n    public static Pair<Long,\
  \ Long> evenOddPalindrome(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(evenOddPalindrome((123l)).equals((Pair.with(8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals((Pair.with(4l, 6l))));\n\
  \    assert(evenOddPalindrome((3l)).equals((Pair.with(1l, 2l))));\n    assert(evenOddPalindrome((63l)).equals((Pair.with(6l,\
  \ 8l))));\n    assert(evenOddPalindrome((25l)).equals((Pair.with(5l, 6l))));\n \
  \   assert(evenOddPalindrome((19l)).equals((Pair.with(4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals((Pair.with(4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals((Pair.with(0l, 1l))));\n  \
  \  }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
