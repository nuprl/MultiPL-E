language: java
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n    }\n   \
    \ // Create a function which takes a string representing a file's name, and returns\
    \ 'Yes'\n    // if the the file's name is valid, and returns 'No' otherwise.\n\
    \    // A file's name is considered to be valid if and only if all the following\
    \ conditions\n    // are met:\n    // - The file's name contains exactly two dots\
    \ '.'\n    // - The substring before the first dot should not be empty, and it\
    \ starts with a letter \n    // from the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the first dot and before the second dot should contain\
    \ only \n    // alphanumeric characters, and there should not be more than three\
    \ digits ('0'-'9') \n    // in the substring.\n    // - The substring after the\
    \ second dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n\
    \    // >>> fileNameCheck1((\"example.01.txt\"))\n    // (\"Yes\")\n    // >>>\
    \ fileNameCheck1((\"1example.1dll\"))\n    // (\"No\")\n    public static String\
    \ fileNameCheck1(String file_name) {\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhfhhs2p.java:24: error: missing return statement\n    }\n    ^\n\
    /tmp/tmpwhfhhs2p.java:42: error: missing return statement\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n    // Your\
    \ code here\n    int numOfDigits = 0;\n    int numOfDots = 0;\n    int lastDot\
    \ = 0;\n    int firstLetter = 0;\n    char[] tempArr = file_name.toCharArray();\n\
    \    for (int i = 0; i < tempArr.length; i++) {\n      if (Character.isDigit(tempArr[i]))\
    \ {\n        numOfDigits++;\n      }\n      if (tempArr[i] == '.') {\n       \
    \ numOfDots++;\n        lastDot = i;\n      }\n      if (Character.isLetter(tempArr[i]))\
    \ {\n        firstLetter = i;\n        break;\n      }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc404f700.java:43: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011790
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ num = 0;\n        int dot = 0;\n        int dotIndex = 0;\n        boolean b\
    \ = false;\n        int i = 0;\n        while (i < file_name.length()) {\n   \
    \         if (file_name.charAt(i) == '.') {\n                dot++;\n        \
    \        dotIndex = i;\n            }\n            if (file_name.charAt(i) >=\
    \ '0' && file_name.charAt(i) <= '9') {\n                num++;\n            }\n\
    \            if (file_name.charAt(i) >= 'a' && file_name.charAt(i) <= 'z' || file_name.charAt(i)\
    \ >= 'A' && file_name.charAt(i) <= 'Z') {\n                b = true;\n       \
    \     }\n            i++;\n        }\n        if (dot != 1 || num > 3 || !b) {\n\
    \            return \"No\";\n        }\n        String str = file_name.substring(dotIndex\
    \ + 1);\n        if (str.equals(\"txt\") || str.equals(\"exe\") || str.equals(\"\
    dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaxhblj83.java:53)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ count = 0;\n        String[] split = file_name.split(\"\\\\.\");\n        String\
    \ extension = split[1];\n        String validExtensions[] = new String[] {\"txt\"\
    , \"exe\", \"dll\"};\n        for (String a : validExtensions) {\n           \
    \ if (a.equals(extension)) {\n                extension = \"valid\";\n       \
    \     }\n        }\n        if (split.length > 2) {\n            return \"No\"\
    ;\n        }\n        for (int i = 0; i < split[0].length(); i++) {\n        \
    \    if (split[0].charAt(i) == '0' || split[0].charAt(i) == '1' || split[0].charAt(i)\
    \ == '2' || split[0].charAt(i) == '3' || split[0].charAt(i) == '4' || split[0].charAt(i)\
    \ == '5' || split[0].charAt(i) == '6' || split[0].charAt(i) == '7' || split[0].charAt(i)\
    \ == '8' || split[0].charAt(i) == '9') {\n                count++;\n         \
    \   }\n        }\n        if (count > 3) {\n            return \"No\";\n     \
    \   }\n        if (split[0].length() == 0) {\n            return \"No\";\n   \
    \     }\n        if (extension.equals(\"valid\")) {\n            return \"Yes\"\
    ;\n        }\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo8fso28r.java:54)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"^[a-zA-Z]\\\\w{0,3}\\\\.(txt|exe|dll)$\");\n        Matcher\
    \ m = p.matcher(file_name);\n        return m.matches()?\"Yes\":\"No\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57nb32wh.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"^[a-zA-Z]\\\\w{0,3}\\\\.(txt|exe|dll)$\");\n        ^\n\
    \  symbol:   class Pattern\n  location: class Problem\n/tmp/tmp57nb32wh.java:24:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"^[a-zA-Z]\\\
    \\w{0,3}\\\\.(txt|exe|dll)$\");\n                    ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmp57nb32wh.java:25: error: cannot find symbol\n\
    \        Matcher m = p.matcher(file_name);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ result = \"No\";\n        String[] tokens = file_name.split(\"\\\\.\");\n  \
    \      if (tokens.length != 2) {\n            return result;\n        }\n    \
    \    String extension = tokens[1];\n        if (!(extension.equals(\"txt\") ||\
    \ extension.equals(\"exe\") || extension.equals(\"dll\"))) {\n            return\
    \ result;\n        }\n        String name = tokens[0];\n        int count = 0;\n\
    \        for (int i = 0; i < name.length(); i++) {\n            if (Character.isDigit(name.charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        if (count > 3)\
    \ {\n            return result;\n        }\n        if (name.length() == 0) {\n\
    \            return result;\n        }\n        if (!Character.isLetter(name.charAt(0)))\
    \ {\n            return result;\n        }\n        return \"Yes\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"([a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll))\");\n        Matcher\
    \ m = p.matcher(file_name);\n        return m.matches() ? \"Yes\" : \"No\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpodxgl8my.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"([a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll))\");\n        ^\n\
    \  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpodxgl8my.java:24:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"([a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll))\");\n                    ^\n  symbol:   variable Pattern\n \
    \ location: class Problem\n/tmp/tmpodxgl8my.java:25: error: cannot find symbol\n\
    \        Matcher m = p.matcher(file_name);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ file_name.matches(\"(?i)([a-z]{1}[a-z0-9]{0,2})((\\\\.txt)|(\\\\.exe)|(\\\\\
    .dll))\") ? \"Yes\" : \"No\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq44_fvfr.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ split = file_name.split(\"[.]\");\n        if (split.length != 2) {\n      \
    \      return \"No\";\n        }\n        String before = split[0];\n        String\
    \ after = split[1];\n        boolean before_match = before.matches(\"[A-Za-z]+[0-9]{0,3}\"\
    );\n        boolean after_match = after.matches(\"(txt|exe|dll)\");\n        if\
    \ (before_match && after_match) {\n            return \"Yes\";\n        }\n  \
    \      return \"No\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpakgeasdh.java:42)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ Arrays.stream(file_name.split(\"\\\\.\"))\n            .map(x -> x.replaceAll(\"\
    [^a-zA-Z0-9]\", \"\"))\n            .filter(x -> !x.isEmpty())\n            .map(x\
    \ -> String.format(\"%s%s\", x.replaceAll(\"[0-9]\", \"\").length() == 0 ? \"\
    No\" : \"Yes\",\n                                    x.replaceAll(\"[a-zA-Z]\"\
    , \"\").length() > 3 ? \"No\" : \"Yes\"))\n            .reduce((x, y) -> String.format(\"\
    %s%s\", x, y))\n            .get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc19a0ag9.java:33)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ items = file_name.split(\"[.]\");\n        String extension = items[1];\n  \
    \      String name = items[0];\n        String regex = \"\\\\d\";\n        Pattern\
    \ p = Pattern.compile(regex);\n        Matcher m = p.matcher(name);\n        int\
    \ count = 0;\n        while (m.find()) {\n            count++;\n        }\n  \
    \      if (count > 3) {\n            return \"No\";\n        }\n        boolean\
    \ extensionValid = false;\n        for (String ext : new String[] {\"txt\", \"\
    exe\", \"dll\"}) {\n            if (extension.equals(ext)) {\n               \
    \ extensionValid = true;\n            }\n        }\n        if (!extensionValid)\
    \ {\n            return \"No\";\n        }\n        regex = \"[a-zA-Z]\";\n  \
    \      p = Pattern.compile(regex);\n        m = p.matcher(name);\n        if (!m.find())\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpespfy663.java:28: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(regex);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpespfy663.java:28: error: cannot find symbol\n       \
    \ Pattern p = Pattern.compile(regex);\n                    ^\n  symbol:   variable\
    \ Pattern\n  location: class Problem\n/tmp/tmpespfy663.java:29: error: cannot\
    \ find symbol\n        Matcher m = p.matcher(name);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n/tmp/tmpespfy663.java:47: error: cannot\
    \ find symbol\n        p = Pattern.compile(regex);\n            ^\n  symbol: \
    \  variable Pattern\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Use the regular expression package to check if the file's name is valid.\n \
    \       Pattern file_name_pattern = Pattern.compile(\"^(?=.*[a-zA-Z])(?=.*[0-9]{1,3})(?=.*\\\
    \\.txt|exe|dll)$\");\n        Matcher match = file_name_pattern.matcher(file_name);\n\
    \        // Return Yes if the file's name is valid and No otherwise.\n       \
    \ return match.matches() ? \"Yes\" : \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdhp_mc3w.java:25: error: cannot find symbol\n        Pattern file_name_pattern\
    \ = Pattern.compile(\"^(?=.*[a-zA-Z])(?=.*[0-9]{1,3})(?=.*\\\\.txt|exe|dll)$\"\
    );\n        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpdhp_mc3w.java:25:\
    \ error: cannot find symbol\n        Pattern file_name_pattern = Pattern.compile(\"\
    ^(?=.*[a-zA-Z])(?=.*[0-9]{1,3})(?=.*\\\\.txt|exe|dll)$\");\n                 \
    \                   ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmpdhp_mc3w.java:26: error: cannot find symbol\n        Matcher match = file_name_pattern.matcher(file_name);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ This is the answer, but the answer which was submitted\n        // had a lot\
    \ of white space. The problem is that it is not\n        // clear whether the\
    \ spaces should be removed or not.\n        //\n        // return ((file_name.matches(\"\
    ^[a-zA-Z][^0-9]*\\\\.txt$\") ||\n        //         file_name.matches(\"^[a-zA-Z][^0-9]*\\\
    \\.exe$\") ||\n        //         file_name.matches(\"^[a-zA-Z][^0-9]*\\\\.dll$\"\
    )) &&\n        //         (file_name.chars().filter(ch -> ch >= '0' && ch <= '9').count()\
    \ <= 3)) ? \"Yes\" : \"No\";\n        String[] tmp = file_name.split(\"\\\\.\"\
    );\n        if (tmp.length != 2) {\n            return \"No\";\n        }\n  \
    \      if (!tmp[0].matches(\"^[a-zA-Z][^0-9]*$\")) {\n            return \"No\"\
    ;\n        }\n        if (!tmp[1].matches(\"^(txt|exe|dll)$\")) {\n          \
    \  return \"No\";\n        }\n        if (tmp[0].chars().filter(ch -> ch >= '0'\
    \ && ch <= '9').count() > 3) {\n            return \"No\";\n        }\n      \
    \  return \"Yes\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11s1fpvk.java:52)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here!\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2awrzcv1.java:28)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ result = \"No\";\n        String[] f = file_name.split(\"\\\\.\");\n       \
    \ String digits = \"0123456789\";\n        String letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        String lettersBig = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String\
    \ types = \"txtexejdl\";\n        char[] c1 = f[0].toCharArray();\n        char[]\
    \ c2 = f[1].toCharArray();\n        int d = 0;\n        int c = 0;\n        boolean\
    \ l = false;\n        boolean b = false;\n        for (int i = 0; i < c1.length;\
    \ i++) {\n            if (digits.contains(String.valueOf(c1[i]))) {\n        \
    \        d++;\n            }\n            if (letters.contains(String.valueOf(c1[i])))\
    \ {\n                c++;\n            }\n            if (lettersBig.contains(String.valueOf(c1[i])))\
    \ {\n                b = true;\n            }\n        }\n        if (letters.contains(String.valueOf(c1[0])))\
    \ {\n            l = true;\n        }\n        if (d <= 3 && l && c > 0 && types.contains(f[1])\
    \ && !b) {\n            result = \"Yes\";\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhd_h7qz.java:59)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmpxjwz21y4.java:28)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ your code here\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vx3fku1.java:28)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ name = file_name.split(\"[.]\");\n        String[] letters = new String[2];\n\
    \        letters[0] = name[0].replaceAll(\"[^a-zA-Z]\", \"\");\n        letters[1]\
    \ = name[1].replaceAll(\"[^a-zA-Z]\", \"\");\n        Integer[] number = new Integer[2];\n\
    \        number[0] = name[0].length() - letters[0].length();\n        number[1]\
    \ = name[1].length() - letters[1].length();\n        if(number[0] == 0) return\
    \ \"No\";\n        if(number[0] > 3) return \"No\";\n        if(number[1] == 0)\
    \ return \"No\";\n        if(number[1] > 3) return \"No\";\n        if(name.length\
    \ != 2) return \"No\";\n        if(!(name[1].equals(\"txt\") || name[1].equals(\"\
    exe\") || name[1].equals(\"dll\"))) return \"No\";\n        return \"Yes\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9s0urglu.java:40)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code is here\n        // You can add additional classes if needed\n   \
    \     String[] splitted = file_name.split(\"\\\\.\");\n        String basename\
    \ = splitted[0];\n        String extension = splitted[1];\n        if(Character.isLetter(basename.charAt(0))\
    \ && (extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\")) && (basename.chars().filter(x -> x >= '0' && x <= '9').count() <= 3))\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppacu2a3w.java:50)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.chars().filter(s -> s > 47 && s < 58).count() > 3) {\n          \
    \  return \"No\";\n        }\n        if (file_name.chars().filter(s -> s == 46).count()\
    \ != 1) {\n            return \"No\";\n        }\n        if (file_name.chars().filter(s\
    \ -> s == 46).mapToObj(s -> (char) s).findFirst().get().equals(\".\")) {\n   \
    \         return \"No\";\n        }\n        String[] temp = file_name.split(\"\
    \\\\.\");\n        String extension = temp[1];\n        String name = temp[0];\n\
    \        if (name.chars().filter(s -> s < 65 || s > 122 || (s > 90 && s < 97)).count()\
    \ > 0) {\n            return \"No\";\n        }\n        if (!extension.equals(\"\
    txt\") && !extension.equals(\"exe\") && !extension.equals(\"dll\")) {\n      \
    \      return \"No\";\n        }\n        return \"Yes\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphad4t0u8.java:49)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ your code goes here\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdg1ck15c.java:28)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ n1 = file_name.split(\"\\\\.\");\n        String s1 = n1[0];\n        String\
    \ s2 = n1[1];\n        int count = 0;\n        for (int i = 0; i < s1.length();\
    \ i++) {\n            if (Character.isDigit(s1.charAt(i))) {\n               \
    \ count++;\n            }\n        }\n        if (count > 3) {\n            return\
    \ \"No\";\n        }\n        else if (s2.equals(\"txt\") || s2.equals(\"exe\"\
    ) || s2.equals(\"dll\")) {\n            return \"Yes\";\n        }\n        else\
    \ {\n            return \"No\";\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzphqcw1.java:45)\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ regex = \"^[a-zA-Z]+[\\\\d]{0,3}\\\\.[txt|exe|dll]$\";\n        Pattern pattern\
    \ = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(file_name);\n\
    \        if (matcher.matches()) {\n            return \"Yes\";\n        }\n  \
    \      return \"No\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbjiql9l.java:25: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(regex);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpbbjiql9l.java:25: error: cannot find symbol\n       \
    \ Pattern pattern = Pattern.compile(regex);\n                          ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmpbbjiql9l.java:26: error:\
    \ cannot find symbol\n        Matcher matcher = pattern.matcher(file_name);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ re = \"^[A-Za-z]\\\\d{0,3}\\\\.(exe|txt|dll)$\";\n        return file_name.matches(re)\
    \ ? \"Yes\" : \"No\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokshqai7.java:28)\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here\n        String [] parts = file_name.split(\"\\\\.\");\n    \
    \    if (parts.length != 2) {\n            return \"No\";\n        }\n       \
    \ String first = parts[0];\n        String second = parts[1];\n        if (!first.matches(\"\
    [a-zA-Z]+\\\\d{0,3}\")) {\n            return \"No\";\n        }\n        if (!second.matches(\"\
    (txt|exe|dll)\")) {\n            return \"No\";\n        }\n        return \"\
    Yes\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkifhz072.java:44)\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ The expression below is the same as\n        //\n        // if (file_name.length()\
    \ == 0) {\n        //     return \"No\";\n        // }\n        //\n        //\
    \ However, when the `file_name` is the empty string (\"\"), we get the following\
    \ error\n        //\n        // (\"Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String \n        // index out of range: 0\n        //  at java.lang.String.charAt(String.java:646)\n\
    \        //  at Problem.fileNameCheck(Problem.java:25)\n        //  at Problem.main(Problem.java:167)\"\
    )\n        //\n        // That is why we need to check if the `file_name` is empty.\n\
    \        if (file_name.length() == 0) {\n            return \"No\";\n        }\n\
    \        // If the first character of the `file_name` is a digit ('0'-'9'), return\
    \ \"No\".\n        if (Character.isDigit(file_name.charAt(0))) {\n           \
    \ return \"No\";\n        }\n        // Set this to 0. We will increase it by\
    \ 1 every time we found a digit ('0'-'9') in the \n        // `file_name`. If\
    \ it is more than 3, we will return \"No\".\n        int num_of_digits = 0;\n\
    \        // If `num_of_dots` is more than 1, we will return \"No\".\n        int\
    \ num_of_dots = 0;\n        // Set this to `false`. If we found a character that\
    \ is not a digit ('0'-'9') or a letter\n        // ('a'-'z' and 'A'-'Z'), we will\
    \ set it to `true`. If it is `true`, we will return \"No\".\n        boolean contains_other_chars\
    \ = false;\n        // Set this to 0. We will increase it by 1 every time we found\
    \ a letter ('a'-'z' and \n        // 'A'-'Z') in the `file_name`. If it is 0,\
    \ we will return \"No\".\n        int num_of_letters = 0;\n        // Iterate\
    \ through all the characters in the `file_name`.\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9evqu6s6.java:58: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (Pattern.matches(\"^[a-zA-Z]\\\\w{0,9}\\\\.(txt|exe|dll)$\", file_name))\n \
    \           return \"Yes\";\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpook4z4ov.java:24: error: cannot find symbol\n        if (Pattern.matches(\"\
    ^[a-zA-Z]\\\\w{0,9}\\\\.(txt|exe|dll)$\", file_name))\n            ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        // System.out.println(parts[0]);\n\
    \        // System.out.println(parts[1]);\n        Pattern pattern = Pattern.compile(\"\
    \\\\d{4}\");\n        Matcher matcher = pattern.matcher(parts[0]);\n        if\
    \ (matcher.find()) {\n            return \"No\";\n        }\n        String[]\
    \ exts = {\"txt\", \"exe\", \"dll\"};\n        for (String s : exts) {\n     \
    \       if (s.equals(parts[1])) {\n                return \"Yes\";\n         \
    \   }\n        }\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkht_52xi.java:27: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"\\\\d{4}\");\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpkht_52xi.java:27: error: cannot find symbol\n       \
    \ Pattern pattern = Pattern.compile(\"\\\\d{4}\");\n                         \
    \ ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmpkht_52xi.java:28:\
    \ error: cannot find symbol\n        Matcher matcher = pattern.matcher(parts[0]);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ result;\n        String[] file_name_parts = file_name.split(\"\\\\.\");\n  \
    \      String extension = file_name_parts[1];\n        String name = file_name_parts[0];\n\
    \        result = checkName(name) && checkExtension(extension) ? \"Yes\" : \"\
    No\";\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz42nke__.java:28: error: cannot find symbol\n        result = checkName(name)\
    \ && checkExtension(extension) ? \"Yes\" : \"No\";\n                 ^\n  symbol:\
    \   method checkName(String)\n  location: class Problem\n/tmp/tmpz42nke__.java:28:\
    \ error: cannot find symbol\n        result = checkName(name) && checkExtension(extension)\
    \ ? \"Yes\" : \"No\";\n                                    ^\n  symbol:   method\
    \ checkExtension(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ number_of_digits = 0;\n        int number_of_dots = 0;\n        boolean substring_is_empty\
    \ = false;\n        boolean starts_with_latin_letter = false;\n        boolean\
    \ ends_with_acceptable_extension = false;\n        for (int i = 0; i < file_name.length();\
    \ i++) {\n            if (Character.isDigit(file_name.charAt(i))) {\n        \
    \        number_of_digits++;\n            }\n            if (file_name.charAt(i)\
    \ == '.') {\n                number_of_dots++;\n            }\n            if\
    \ (i == 0) {\n                if (Character.isLetter(file_name.charAt(i))) {\n\
    \                    starts_with_latin_letter = true;\n                }\n   \
    \         }\n            if (i == file_name.length() - 1) {\n                if\
    \ (file_name.charAt(i) == 't' && file_name.charAt(i - 1) == 'x' && file_name.charAt(i\
    \ - 2) == 't') {\n                    ends_with_acceptable_extension = true;\n\
    \                }\n                if (file_name.charAt(i) == 'e' && file_name.charAt(i\
    \ - 1) == 'x' && file_name.charAt(i - 2) == 'e') {\n                    ends_with_acceptable_extension\
    \ = true;\n                }\n                if (file_name.charAt(i) == 'l' &&\
    \ file_name.charAt(i - 1) == 'l' && file_name.charAt(i - 2) == 'd') {\n      \
    \              ends_with_acceptable_extension = true;\n                }\n   \
    \         }\n        }\n        if (number_of_digits <= 3 && number_of_dots ==\
    \ 1 && !substring_is_empty && starts_with_latin_letter && ends_with_acceptable_extension)\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhx45gs6.java:70)\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if(file_name.chars().filter(Character::isDigit).count()\
    \ > 3){\n            return \"No\";\n        }\n        else if(file_name.indexOf('.')\
    \ != file_name.lastIndexOf('.')){\n            return \"No\";\n        }\n   \
    \     else if(!file_name.substring(0, file_name.indexOf('.')).chars().anyMatch(Character::isLetter)){\n\
    \            return \"No\";\n        }\n        else if(!file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"txt\") && !file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    exe\") && !file_name.substring(file_name.indexOf('.') + 1).equals(\"dll\")){\n\
    \            return \"No\";\n        }\n        else {\n            return \"\
    Yes\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9wn2uvlg.java:42)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckxxxez3.java:27: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ regex = \"^[a-zA-Z][\\\\d]{0,3}\\\\.[a-z]{3}$\";\n        if (file_name.matches(regex))\
    \ {\n            String end = file_name.substring(file_name.length() - 3);\n \
    \           String[] exts = {\"txt\", \"exe\", \"dll\"};\n            return Arrays.asList(exts).contains(end)\
    \ ? \"Yes\" : \"No\";\n        }\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyu91li84.java:33)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ TODO: write your code here...\n        int dotCount = 0;\n        int numberCount\
    \ = 0;\n        int startIndex = 0;\n        int endIndex = 0;\n        String\
    \ startWith = \"\";\n        String endWith = \"\";\n        boolean startIndexAssigned\
    \ = false;\n        boolean endIndexAssigned = false;\n        for (int i = 0;\
    \ i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n\
    \            if (Character.isDigit(c)) {\n                numberCount++;\n   \
    \         }\n            if (c == '.') {\n                dotCount++;\n      \
    \          if (!startIndexAssigned) {\n                    startIndex = i + 1;\n\
    \                    startIndexAssigned = true;\n                }\n         \
    \   }\n            if (dotCount == 1 && !endIndexAssigned) {\n               \
    \ endIndex = i;\n                endIndexAssigned = true;\n            }\n   \
    \     }\n        startWith = file_name.substring(startIndex, endIndex);\n    \
    \    endWith = file_name.substring(endIndex + 1);\n        if (numberCount <=\
    \ 3 && dotCount == 1 && startWith.matches(\"[a-zA-Z]+\") && \n            (endWith.equals(\"\
    txt\") || endWith.equals(\"exe\") || endWith.equals(\"dll\"))) {\n           \
    \ return \"Yes\";\n        }\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 8, end 7, length 11\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.fileNameCheck(tmpfnpxwg3b.java:50)\n\
    \tat Problem.main(tmpfnpxwg3b.java:59)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ count = 0;\n        int dot_index = 0;\n        String extension = \"\";\n \
    \       String sub = \"\";\n        char c = ' ';\n        if (file_name.length()\
    \ > 3) {\n            // return \"No\";\n            for (int i = 0; i < file_name.length();\
    \ i++) {\n                c = file_name.charAt(i);\n                if (c == '.')\
    \ {\n                    dot_index = i;\n                    if (count > 3) {\n\
    \                        return \"No\";\n                    }\n             \
    \       count = 0;\n                } else if (c == '0' || c == '1' || c == '2'\
    \ || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c\
    \ == '9') {\n                    count++;\n                }\n            }\n\
    \            if (count > 3) {\n                return \"No\";\n            }\n\
    \            if (dot_index == 0) {\n                return \"No\";\n         \
    \   }\n            sub = file_name.substring(0, dot_index);\n            extension\
    \ = file_name.substring(dot_index + 1);\n            if (!sub.substring(0, 1).matches(\"\
    [a-zA-Z]\")) {\n                return \"No\";\n            }\n            if\
    \ (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"\
    dll\")) {\n                return \"No\";\n            }\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06o3o12b.java:77)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"[0-9]\");\n        Matcher m = p.matcher(file_name);\n\
    \        int count = 0;\n        while (m.find()) {\n            count++;\n  \
    \      }\n        if (count > 3) {\n            return \"No\";\n        }\n  \
    \      if (file_name.indexOf(\".\") == -1) {\n            return \"No\";\n   \
    \     }\n        String[] split = file_name.split(\"\\\\.\");\n        if (split[0].equals(\"\
    \")) {\n            return \"No\";\n        }\n        if (!Pattern.matches(\"\
    [a-zA-Z]+\", split[0])) {\n            return \"No\";\n        }\n        if (!split[1].equals(\"\
    txt\") && !split[1].equals(\"exe\") && !split[1].equals(\"dll\")) {\n        \
    \    return \"No\";\n        }\n        return \"Yes\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0buyd8fd.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"[0-9]\");\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmp0buyd8fd.java:24: error: cannot find symbol\n       \
    \ Pattern p = Pattern.compile(\"[0-9]\");\n                    ^\n  symbol:  \
    \ variable Pattern\n  location: class Problem\n/tmp/tmp0buyd8fd.java:25: error:\
    \ cannot find symbol\n        Matcher m = p.matcher(file_name);\n        ^\n \
    \ symbol:   class Matcher\n  location: class Problem\n/tmp/tmp0buyd8fd.java:40:\
    \ error: cannot find symbol\n        if (!Pattern.matches(\"[a-zA-Z]+\", split[0]))\
    \ {\n             ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011792
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ s = file_name.split(\"\\\\.\");\n        return (IntStream.range(0, s[0].length()).map(i\
    \ -> {\n            if (s[0].charAt(i) >= '0' && s[0].charAt(i) <= '9') {\n  \
    \              return 1;\n            }\n            return 0;\n        }).sum()\
    \ <= 3 && s[0].length() != 0 && Character.isLetter(s[0].charAt(0)) && (s[1].equals(\"\
    txt\") || s[1].equals(\"exe\") || s[1].equals(\"dll\"))) ? \"Yes\" : \"No\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps31ie_ot.java:48)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        throw\
    \ new UnsupportedOperationException(\"Add missing code to function 'fileNameCheck'.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Add\
    \ missing code to function 'fileNameCheck'.\n\tat Problem.fileNameCheck(tmp4kz4ddq9.java:24)\n\
    \tat Problem.main(tmp4kz4ddq9.java:27)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your solution here\n        if (file_name.matches(\"[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)\")) {\n            return \"Yes\";\n        }\n        return\
    \ \"No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnab_uzfe.java:31)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here\n        int dotPosition = -1;\n        int numOfDigits = 0;\n\
    \        int len = file_name.length();\n        for (int i = 0; i < len; i++)\
    \ {\n            char c = file_name.charAt(i);\n            if (c == '.') {\n\
    \                dotPosition = i;\n            } else if (c >= '0' && c <= '9')\
    \ {\n                numOfDigits++;\n            }\n        }\n        if (numOfDigits\
    \ > 3) {\n            return \"No\";\n        }\n        if (dotPosition == -1)\
    \ {\n            return \"No\";\n        }\n        String beforeDot = file_name.substring(0,\
    \ dotPosition);\n        String afterDot = file_name.substring(dotPosition + 1);\n\
    \        if (beforeDot.length() == 0) {\n            return \"No\";\n        }\n\
    \        char firstChar = beforeDot.charAt(0);\n        if (firstChar < 'A' ||\
    \ firstChar > 'Z' && firstChar < 'a' || firstChar > 'z') {\n            return\
    \ \"No\";\n        }\n        if (!(afterDot.equals(\"txt\") || afterDot.equals(\"\
    exe\") || afterDot.equals(\"dll\"))) {\n            return \"No\";\n        }\n\
    \        return \"Yes\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpusy3ar8f.java:72)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code goes here\n        int dot_counter = 0;\n        boolean alpha_flag\
    \ = false;\n        boolean first_number_flag = false;\n        boolean valid_extension_flag\
    \ = false;\n        for (int i = 0; i < file_name.length(); i++) {\n         \
    \   if (file_name.charAt(i) == '.') {\n                dot_counter++;\n      \
    \      }\n            if (dot_counter > 1) {\n                return \"No\";\n\
    \            }\n            if ((i == 0 || i == file_name.length() - 1) && (file_name.charAt(i)\
    \ == '.')) {\n                return \"No\";\n            }\n            if (file_name.charAt(i)\
    \ < '0' || file_name.charAt(i) > '9') {\n                first_number_flag = true;\n\
    \            }\n            if ((file_name.charAt(i) >= 'a' && file_name.charAt(i)\
    \ <= 'z') ||\n                (file_name.charAt(i) >= 'A' && file_name.charAt(i)\
    \ <= 'Z')) {\n                alpha_flag = true;\n            }\n            if\
    \ (file_name.substring(i, file_name.length()).equals(\".txt\") ||\n          \
    \      file_name.substring(i, file_name.length()).equals(\".exe\") ||\n      \
    \          file_name.substring(i, file_name.length()).equals(\".dll\")) {\n  \
    \              valid_extension_flag = true;\n            }\n        }\n      \
    \  if (first_number_flag && alpha_flag && valid_extension_flag) {\n          \
    \  return \"Yes\";\n        }\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajldem3k.java:59)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        char[] in = file_name.toCharArray();\n        int count\
    \ = 0;\n        int hasDot = 0;\n        int hasDot2 = 0;\n        String after\
    \ = \"\";\n        String before = \"\";\n        String[] rightNames = new String[]{\"\
    txt\", \"exe\", \"dll\"};\n        for (int i = 0; i < in.length; i++) {\n   \
    \         if (in[i] > '0' && in[i] < '9') {\n                count++;\n      \
    \      }\n            if (in[i] == '.') {\n                hasDot++;\n       \
    \         hasDot2 = i;\n            }\n        }\n        if (count > 3) {\n \
    \           return \"No\";\n        }\n        if (hasDot != 1) {\n          \
    \  return \"No\";\n        }\n        for (int i = 0; i < hasDot2; i++) {\n  \
    \          before += in[i];\n        }\n        for (int i = hasDot2 + 1; i <\
    \ in.length; i++) {\n            after += in[i];\n        }\n        if (before.length()\
    \ == 0) {\n            return \"No\";\n        }\n        if (after.length() !=\
    \ 3) {\n            return \"No\";\n        }\n        if (!Character.isAlphabetic(before.charAt(0)))\
    \ {\n            return \"No\";\n        }\n        if (!Arrays.asList(rightNames).contains(after))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd7b2rwa7.java:75)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        String firstPart = parts[0];\n\
    \        String extension = parts[1];\n        boolean validExtension = false;\n\
    \        if (extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\")) {\n            validExtension = true;\n        }\n        if (firstPart.length()\
    \ == 0 || !Character.isLetter(firstPart.charAt(0))) {\n            return \"No\"\
    ;\n        }\n        int numDigits = 0;\n        for (int i = 0; i < firstPart.length();\
    \ i++) {\n            if (Character.isDigit(firstPart.charAt(i))) {\n        \
    \        numDigits++;\n            }\n        }\n        if (numDigits > 3) {\n\
    \            return \"No\";\n        }\n        if (validExtension) {\n      \
    \      return \"Yes\";\n        }\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvlis_0q2.java:64)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code should be here.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_74a3dti.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Pattern p = Pattern.compile(\"^\\\\w[\\\\w\\\\d\\\\.]{1,254}$\");\n        Pattern\
    \ p = Pattern.compile(\"^[a-zA-Z]{1}\\\\w{0,254}\\\\.(txt|exe|dll)$\");\n    \
    \    Matcher m = p.matcher(file_name);\n        return m.matches() ? \"Yes\" :\
    \ \"No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxf0jsmc_.java:25: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"^[a-zA-Z]{1}\\\\w{0,254}\\\\.(txt|exe|dll)$\");\n      \
    \  ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpxf0jsmc_.java:25:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"^[a-zA-Z]{1}\\\
    \\w{0,254}\\\\.(txt|exe|dll)$\");\n                    ^\n  symbol:   variable\
    \ Pattern\n  location: class Problem\n/tmp/tmpxf0jsmc_.java:26: error: cannot\
    \ find symbol\n        Matcher m = p.matcher(file_name);\n        ^\n  symbol:\
    \   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here\n        // No digits in the name\n        // Exactly one dot\
    \ in the name\n        // The substring before the dot is not empty, and starts\
    \ with a letter\n        // The substring after the dot is one of the accepted\
    \ string literals\n        // If all these four conditions are met, then the file\
    \ name is valid, otherwise it is invalid.\n        // First, check that there\
    \ are no more than three digits in the file's name.\n        int n_digits = 0;\n\
    \        for (int i = 0; i < file_name.length(); i++) {\n            if (Character.isDigit(file_name.charAt(i)))\
    \ {\n                n_digits += 1;\n            }\n        }\n        if (n_digits\
    \ > 3) {\n            return \"No\";\n        }\n        // Next, check that there\
    \ is exactly one dot in the file's name.\n        int n_dots = 0;\n        for\
    \ (int i = 0; i < file_name.length(); i++) {\n            if (file_name.charAt(i)\
    \ == '.') {\n                n_dots += 1;\n            }\n        }\n        if\
    \ (n_dots != 1) {\n            return \"No\";\n        }\n        // Next, check\
    \ that the substring before the dot is not empty, and that it starts with a letter.\n\
    \        // To do this, we can iterate through the file's name's characters until\
    \ we reach the dot,\n        // and then we check that the first character before\
    \ the dot is a letter, and that there is at least\n        // one character before\
    \ the dot.\n        int n_letters_before_dot = 0;\n        for (int i = 0; i <\
    \ file_name.length(); i++) {\n            if (file_name.charAt(i) == '.') {\n\
    \                break;\n            }\n            if (Character.isLetter(file_name.charAt(i)))\
    \ {\n                n_letters_before_dot += 1;\n            }\n        }\n  \
    \      if (n_letters_before_dot == 0) {\n            return \"No\";\n        }\n\
    \        // Next, check that the substring after the dot is one of the accepted\
    \ strings.\n       \n    }\n    public static void main(String[] args) {\n   \
    \ assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6thfhoij.java:68: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here.\n        // See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\n\
    \        // and https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmp8_hhsnwd.java:30)\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your Code Here!\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvi43k0w.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ fileNameSplit = file_name.split(\"\\\\.\");\n        String regex = \"\\\\d{4,}\"\
    ;\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher\
    \ = pattern.matcher(file_name);\n        if (fileNameSplit.length != 2 || matcher.find()\
    \ || !fileNameSplit[0].matches(\"[a-zA-Z]+.*\")) {\n            return \"No\"\
    ;\n        }\n        String[] fileExt = {\"txt\", \"exe\", \"dll\"};\n      \
    \  for (String s : fileExt) {\n            if (fileNameSplit[1].equals(s)) {\n\
    \                return \"Yes\";\n            }\n        }\n        return \"\
    No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrc8kjym.java:26: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(regex);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpyrc8kjym.java:26: error: cannot find symbol\n       \
    \ Pattern pattern = Pattern.compile(regex);\n                          ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmpyrc8kjym.java:27: error:\
    \ cannot find symbol\n        Matcher matcher = pattern.matcher(file_name);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\");\n        Matcher\
    \ m = p.matcher(file_name);\n        return m.matches() ? \"Yes\" : \"No\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpaj6l67.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\");\n        ^\n \
    \ symbol:   class Pattern\n  location: class Problem\n/tmp/tmpkpaj6l67.java:24:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\");\n                    ^\n  symbol:   variable Pattern\n  location:\
    \ class Problem\n/tmp/tmpkpaj6l67.java:25: error: cannot find symbol\n       \
    \ Matcher m = p.matcher(file_name);\n        ^\n  symbol:   class Matcher\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.matches(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\")) {\n    \
    \        return \"Yes\";\n        }\n        return \"No\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7yduzwy6.java:30)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here.\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuemgcct8.java:28)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ pattern = Pattern.compile(\"^[a-zA-Z]\\\\w{1,3}\\\\.(txt|exe|dll)$\");\n   \
    \     Matcher matcher = pattern.matcher(file_name);\n        return matcher.matches()\
    \ ? \"Yes\" : \"No\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr52m1t4r.java:24: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"^[a-zA-Z]\\\\w{1,3}\\\\.(txt|exe|dll)$\");\n        ^\n\
    \  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpr52m1t4r.java:24:\
    \ error: cannot find symbol\n        Pattern pattern = Pattern.compile(\"^[a-zA-Z]\\\
    \\w{1,3}\\\\.(txt|exe|dll)$\");\n                          ^\n  symbol:   variable\
    \ Pattern\n  location: class Problem\n/tmp/tmpr52m1t4r.java:25: error: cannot\
    \ find symbol\n        Matcher matcher = pattern.matcher(file_name);\n       \
    \ ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011793
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ counter_digit = 0;\n        int counter_dot = 0;\n        boolean flag_start\
    \ = false;\n        int tmp_len = file_name.length();\n        if (tmp_len ==\
    \ 0) {\n            return \"No\";\n        }\n        char tmp_char;\n      \
    \  for (int i = 0; i < tmp_len; i++) {\n            tmp_char = file_name.charAt(i);\n\
    \            if (tmp_char >= 'a' && tmp_char <= 'z') {\n                flag_start\
    \ = true;\n            } else if (tmp_char >= 'A' && tmp_char <= 'Z') {\n    \
    \            flag_start = true;\n            } else if (tmp_char >= '0' && tmp_char\
    \ <= '9') {\n                counter_digit++;\n            } else if (tmp_char\
    \ == '.') {\n                counter_dot++;\n            } else {\n          \
    \      return \"No\";\n            }\n        }\n        if (counter_digit > 3\
    \ || counter_dot != 1 || !flag_start) {\n            return \"No\";\n        }\n\
    \        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length\
    \ != 2) {\n            return \"No\";\n        }\n        if (file_name_split[1].equals(\"\
    txt\") || file_name_split[1].equals(\"exe\") || file_name_split[1].equals(\"dll\"\
    )) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxugxv19b.java:60)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ your code here\n        int n = file_name.length();\n        int i, count =\
    \ 0;\n        for(i = 0; i < n; i++) {\n            if(file_name.charAt(i) >=\
    \ '0' && file_name.charAt(i) <= '9')\n                count++;\n        }\n  \
    \      if(count > 3)\n            return \"No\";\n        else {\n           \
    \ int dot = 0;\n            for(i = 0; i < n; i++) {\n                if(file_name.charAt(i)\
    \ == '.') {\n                    dot = i;\n                    break;\n      \
    \          }\n            }\n            String ext = file_name.substring(dot+1);\n\
    \            String pre = file_name.substring(0, dot);\n            if(ext.equals(\"\
    txt\") || ext.equals(\"exe\") || ext.equals(\"dll\")) {\n                if(pre.length()\
    \ > 0 && ((pre.charAt(0) >= 'a' && pre.charAt(0) <= 'z') || (pre.charAt(0) >=\
    \ 'A' && pre.charAt(0) <= 'Z')))\n                    return \"Yes\";\n      \
    \          else\n                    return \"No\";\n            }\n         \
    \   else\n                return \"No\";\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if(file_name.length()\
    \ < 5) return \"No\";\n        String[] tokens = file_name.split(\"\\\\.\");\n\
    \        if(tokens.length != 2) return \"No\";\n        if(!tokens[0].matches(\"\
    ^[a-zA-Z]\\\\w*$\")) return \"No\";\n        if(!tokens[1].matches(\"^(txt|exe|dll)$\"\
    )) return \"No\";\n        return \"Yes\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp69os9gxr.java:37)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2_mfe2u.java:27)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here.\n        boolean result = false;\n        if (file_name.matches(\"\
    [a-zA-Z]+[\\\\d]{0,3}\\\\.[txt|exe|dll]\")){\n            result = true;\n   \
    \     }\n        if (result){\n            return \"Yes\";\n        }\n      \
    \  else{\n            return \"No\";\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq1io2tk.java:37)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ The regex pattern for the file_name\n        String pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.[txe]{1}xt$\";\n        // The Pattern object\n        Pattern r = Pattern.compile(pattern);\n\
    \        // The Matcher object\n        Matcher m = r.matcher(file_name);\n  \
    \      // If the file_name matches the pattern, return Yes\n        if (m.find())\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxwqkf2h.java:27: error: cannot find symbol\n        Pattern r\
    \ = Pattern.compile(pattern);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpzxwqkf2h.java:27: error: cannot find symbol\n       \
    \ Pattern r = Pattern.compile(pattern);\n                    ^\n  symbol:   variable\
    \ Pattern\n  location: class Problem\n/tmp/tmpzxwqkf2h.java:29: error: cannot\
    \ find symbol\n        Matcher m = r.matcher(file_name);\n        ^\n  symbol:\
    \   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.contains(\"....\")) {\n            return \"No\";\n        }\n  \
    \      if (file_name.charAt(0) < 'A' || file_name.charAt(0) > 'z') {\n       \
    \     return \"No\";\n        }\n        if (file_name.charAt(file_name.length()\
    \ - 1) == '.') {\n            return \"No\";\n        }\n        if (file_name.split(\"\
    \\\\.\").length != 2) {\n            return \"No\";\n        }\n        if (file_name.split(\"\
    \\\\.\").length == 2) {\n            String filename = file_name.split(\"\\\\\
    .\")[0];\n            String extension = file_name.split(\"\\\\.\")[1];\n    \
    \        boolean bool = true;\n            for (int i = 0; i < filename.length();\
    \ i++) {\n                if (filename.charAt(i) >= '0' && filename.charAt(i)\
    \ <= '9') {\n                    bool = false;\n                }\n          \
    \  }\n            if (!bool) {\n                return \"No\";\n            }\n\
    \            if (!(extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\"))) {\n                return \"No\";\n            }\n        }\n       \
    \ return \"Yes\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2e7uap89.java:59)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ your code here\n        // the variable 'result' should store the output\n \
    \       // you can use the following variable to represent the output\n      \
    \  // final boolean result = false;\n        // if result == true, then output\
    \ \"Yes\"\n        // else output \"No\"\n        // you can modify the \"result\"\
    \ variable, but not the \"output\" variable\n        return \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0bacilkl.java:34)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ ans = \"Yes\";\n        String[] arr = file_name.split(\"\\\\.\");\n       \
    \ if (arr.length != 2) {\n            ans = \"No\";\n        } else {\n      \
    \      if (countDigits(arr[0]) > 3) {\n                ans = \"No\";\n       \
    \     } else {\n                if (!checkLetter(arr[0].charAt(0))) {\n      \
    \              ans = \"No\";\n                } else {\n                    if\
    \ (!checkExtension(arr[1])) {\n                        ans = \"No\";\n       \
    \             }\n                }\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0eqzri48.java:29: error: cannot find symbol\n            if (countDigits(arr[0])\
    \ > 3) {\n                ^\n  symbol:   method countDigits(String)\n  location:\
    \ class Problem\n/tmp/tmp0eqzri48.java:32: error: cannot find symbol\n       \
    \         if (!checkLetter(arr[0].charAt(0))) {\n                     ^\n  symbol:\
    \   method checkLetter(char)\n  location: class Problem\n/tmp/tmp0eqzri48.java:35:\
    \ error: cannot find symbol\n                    if (!checkExtension(arr[1]))\
    \ {\n                         ^\n  symbol:   method checkExtension(String)\n \
    \ location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ digits_cnt = 0;\n        int dots_cnt = 0;\n        int alpha_cnt = 0;\n   \
    \     int ext = -1;\n        for (int i = 0; i < file_name.length(); i++) {\n\
    \            if (file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9') {\n\
    \                digits_cnt++;\n            } else if (file_name.charAt(i) ==\
    \ '.') {\n                dots_cnt++;\n            } else if ((file_name.charAt(i)\
    \ >= 'a' && file_name.charAt(i) <= 'z')\n                    || (file_name.charAt(i)\
    \ >= 'A' && file_name.charAt(i) <= 'Z')) {\n                alpha_cnt++;\n   \
    \         }\n        }\n        if (dots_cnt != 1 || digits_cnt > 3 || alpha_cnt\
    \ == 0) {\n            return \"No\";\n        }\n        String[] exten = file_name.split(\"\
    \\\\.\");\n        String ext_type = exten[1];\n        if (ext_type.equals(\"\
    txt\")) {\n            ext = 0;\n        } else if (ext_type.equals(\"exe\"))\
    \ {\n            ext = 1;\n        } else if (ext_type.equals(\"dll\")) {\n  \
    \          ext = 2;\n        }\n        if (ext == -1) {\n            return \"\
    No\";\n        }\n        return \"Yes\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpikaumkx6.java:57)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ pattern = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n\
    \        Matcher m = pattern.matcher(file_name);\n        return m.matches() ?\
    \ \"Yes\" : \"No\";\n    }\n    public static void main(String[] args) {\n   \
    \ assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv38gnn8l.java:24: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n       \
    \ ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpv38gnn8l.java:24:\
    \ error: cannot find symbol\n        Pattern pattern = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)\");\n                          ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmpv38gnn8l.java:25: error: cannot find symbol\n\
    \        Matcher m = pattern.matcher(file_name);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ pattern = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n\
    \        Matcher matcher = pattern.matcher(file_name);\n        if (matcher.matches())\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeupyudzh.java:24: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n       \
    \ ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpeupyudzh.java:24:\
    \ error: cannot find symbol\n        Pattern pattern = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)\");\n                          ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmpeupyudzh.java:25: error: cannot find symbol\n\
    \        Matcher matcher = pattern.matcher(file_name);\n        ^\n  symbol: \
    \  class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        \n        // Read the input and write the output\n     \
    \   String[] name_parts = file_name.split(\"\\\\.\");\n        if (name_parts.length\
    \ != 2) return \"No\";\n        if (name_parts[0].length() == 0) return \"No\"\
    ;\n        if (name_parts[1].length() == 0) return \"No\";\n        if (name_parts[1].length()\
    \ > 3) return \"No\";\n        if (name_parts[1].equals(\"txt\") || name_parts[1].equals(\"\
    exe\") || name_parts[1].equals(\"dll\")) {\n            return \"Yes\";\n    \
    \    }\n        return \"No\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tc5qdwb.java:41)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ tokens = file_name.split(\"\\\\.\");\n        String numOfDigits = Arrays.stream(tokens[0].split(\"\
    \")).filter(x -> Character.isDigit(x.charAt(0))).collect(Collectors.joining());\n\
    \        return (tokens.length == 2 && tokens[0].length() > 0 && isAlpha(tokens[0].charAt(0))\
    \ && numOfDigits.length() <= 3 && (tokens[1].equals(\"txt\") || tokens[1].equals(\"\
    exe\") || tokens[1].equals(\"dll\"))) ? \"Yes\" : \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tecwzov.java:26: error: cannot find symbol\n        return (tokens.length\
    \ == 2 && tokens[0].length() > 0 && isAlpha(tokens[0].charAt(0)) && numOfDigits.length()\
    \ <= 3 && (tokens[1].equals(\"txt\") || tokens[1].equals(\"exe\") || tokens[1].equals(\"\
    dll\"))) ? \"Yes\" : \"No\";\n                                               \
    \                 ^\n  symbol:   method isAlpha(char)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ maxNumOfDigits = 3;\n        List<String> extensions = Arrays.asList(\"txt\"\
    , \"exe\", \"dll\");\n        int dotIdx = file_name.indexOf('.');\n        if\
    \ (dotIdx < 0) {\n            return \"No\";\n        }\n        String[] parts\
    \ = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n          \
    \  return \"No\";\n        }\n        String prefix = parts[0];\n        String\
    \ extension = parts[1];\n        if (extensions.indexOf(extension) < 0) {\n  \
    \          return \"No\";\n        }\n        String beforeDot = prefix.substring(0,\
    \ dotIdx);\n        String afterDot = prefix.substring(dotIdx + 1);\n        int\
    \ numDigits = 0;\n        for (int i = 0; i < beforeDot.length(); i++) {\n   \
    \         char c = beforeDot.charAt(i);\n            if (c >= '0' && c <= '9')\
    \ {\n                numDigits++;\n            }\n        }\n        if (numDigits\
    \ > maxNumOfDigits) {\n            return \"No\";\n        }\n        if (afterDot.length()\
    \ > 0) {\n            return \"No\";\n        }\n        if (prefix.length() ==\
    \ 0) {\n            return \"No\";\n        }\n        char firstChar = prefix.charAt(0);\n\
    \        if (firstChar < 'a' || firstChar > 'z') {\n            if (firstChar\
    \ < 'A' || firstChar > 'Z') {\n                return \"No\";\n            }\n\
    \        }\n        return \"Yes\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 8, end 7, length 7\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.fileNameCheck(tmpmn19ihhp.java:40)\n\tat Problem.main(tmpmn19ihhp.java:66)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.matches(\"[A-Za-z]*\\\\d{0,3}\\\\.(txt|exe|dll)\")) {\n         \
    \   return \"Yes\";\n        }\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9cgcd4rl.java:34)\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //take\
    \ the file name and split it by .\n        String[] split_file_name = file_name.split(\"\
    \\\\.\");\n        //check if there is only one .\n        if (split_file_name.length\
    \ != 2) {\n            return \"No\";\n        }\n        //check if the prefix\
    \ is a valid word \n        Pattern pattern = Pattern.compile(\"^[a-zA-Z]+[a-zA-Z0-9]*$\"\
    );\n        Matcher matcher = pattern.matcher(split_file_name[0]);\n        if\
    \ (matcher.matches() == false) {\n            return \"No\";\n        }\n    \
    \    //check if the extension is valid\n        if (split_file_name[1].equals(\"\
    txt\") || split_file_name[1].equals(\"exe\") || split_file_name[1].equals(\"dll\"\
    )) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pxkzqh5.java:31: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"^[a-zA-Z]+[a-zA-Z0-9]*$\");\n        ^\n  symbol:   class\
    \ Pattern\n  location: class Problem\n/tmp/tmp4pxkzqh5.java:31: error: cannot\
    \ find symbol\n        Pattern pattern = Pattern.compile(\"^[a-zA-Z]+[a-zA-Z0-9]*$\"\
    );\n                          ^\n  symbol:   variable Pattern\n  location: class\
    \ Problem\n/tmp/tmp4pxkzqh5.java:32: error: cannot find symbol\n        Matcher\
    \ matcher = pattern.matcher(split_file_name[0]);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011794
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        throw\
    \ new RuntimeException(\"Not implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.fileNameCheck(tmp0jbstjzo.java:24)\n\tat Problem.main(tmp0jbstjzo.java:27)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ result = \"Yes\";\n        String[] parts = file_name.split(\"\\\\.\");\n  \
    \      String file_name_pattern = \"[A-Za-z]\\\\w{0,}\";\n        String extensions_pattern\
    \ = \"(txt|exe|dll)\";\n        if(!file_name.matches(file_name_pattern + \"\\\
    \\.\" + extensions_pattern)) {\n            result = \"No\";\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvr_l2zb6.java:39)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ write code here\n        // Find the period\n        int periodIndex = file_name.indexOf('.');\n\
    \        // Find the number of digits in the string\n        long numberOfDigits\
    \ = file_name.chars().filter(Character::isDigit).count();\n        // Find the\
    \ number of periods\n        long numberOfPeriods = file_name.chars().filter(ch\
    \ -> ch == '.').count();\n        // Create a list of valid file extensions\n\
    \        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\"\
    );\n        // Get the substring before the period\n        String substringBefore\
    \ = file_name.substring(0, periodIndex);\n        // Get the substring after the\
    \ period\n        String substringAfter = file_name.substring(periodIndex + 1);\n\
    \        // Check if the file name is valid\n        if (numberOfDigits > 3) {\n\
    \            return \"No\";\n        } else if (numberOfPeriods != 1) {\n    \
    \        return \"No\";\n        } else if (substringBefore.isEmpty()) {\n   \
    \         return \"No\";\n        } else if (!Character.isLetter(substringBefore.charAt(0)))\
    \ {\n            return \"No\";\n        } else if (!validExtensions.contains(substringAfter))\
    \ {\n            return \"No\";\n        } else {\n            return \"Yes\"\
    ;\n        }\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 8\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.fileNameCheck(tmpe41mehe3.java:34)\n\
    \tat Problem.main(tmpe41mehe3.java:75)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) return \"\
    No\";\n        if (parts[0].length() == 0) return \"No\";\n        if (parts[0].matches(\"\
    .*\\\\d.*\\\\d.*\\\\d.*\")) return \"No\";\n        if (parts[0].matches(\"[0-9].*\"\
    )) return \"No\";\n        if (!parts[1].equals(\"txt\") && !parts[1].equals(\"\
    exe\") && !parts[1].equals(\"dll\")) return \"No\";\n        return \"Yes\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35tsiu0k.java:37)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n      return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqts15x0z.java:27)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Check the number of digits.\n        int digits_count = file_name.chars().filter(Character::isDigit).count();\n\
    \        if (digits_count > 3) {\n            return \"No\";\n        }\n    \
    \    // Check if the file's name contains exactly one dot '.'\n        int dot_count\
    \ = file_name.chars().filter(i -> i == '.').count();\n        if (dot_count !=\
    \ 1) {\n            return \"No\";\n        }\n        // Check the substring\
    \ before the dot.\n        String[] strings = file_name.split(\"\\\\.\");\n  \
    \      // Check if the substring is empty.\n        if (strings[0].length() ==\
    \ 0) {\n            return \"No\";\n        }\n        // Check if the substring\
    \ starts with a letter from the latin alphapet.\n        char first_char = strings[0].charAt(0);\n\
    \        if (!Character.isLetter(first_char)) {\n            return \"No\";\n\
    \        }\n        // Check the substring after the dot.\n        if (!Objects.equals(strings[1],\
    \ \"txt\") && !Objects.equals(strings[1], \"exe\") && !Objects.equals(strings[1],\
    \ \"dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiooifho9.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int digits_count = file_name.chars().filter(Character::isDigit).count();\n\
    \                                                                            \
    \ ^\n/tmp/tmpiooifho9.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int dot_count = file_name.chars().filter(i -> i ==\
    \ '.').count();\n                                                            \
    \         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code goes here\n        return \"NO\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31xbrsd6.java:28)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ num_digit = file_name.replaceAll(\"[^0-9]\", \"\").length();\n        if (num_digit\
    \ > 3) {\n            return \"No\";\n        }\n        String[] tokens = file_name.split(\"\
    \\\\.\");\n        if (tokens.length != 2) {\n            return \"No\";\n   \
    \     }\n        if (tokens[0].length() == 0) {\n            return \"No\";\n\
    \        }\n        if (!Character.isLetter(tokens[0].charAt(0))) {\n        \
    \    return \"No\";\n        }\n        if (!Arrays.asList(new String[] {\"txt\"\
    , \"exe\", \"dll\"}).contains(tokens[1])) {\n            return \"No\";\n    \
    \    }\n        return \"Yes\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n      // Your\
    \ code here\n      String sub1 = file_name.substring(0, file_name.indexOf(\".\"\
    ));\n      String sub2 = file_name.substring(file_name.indexOf(\".\") + 1);\n\
    \      return !(file_name.length() - file_name.replaceAll(\"[0-9]\", \"\").length()\
    \ > 3) && sub1.length() > 0 && sub1.matches(\"[a-zA-Z]+\") && Arrays.asList(\"\
    txt\", \"exe\", \"dll\").contains(sub2) ? \"Yes\" : \"No\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcq2q975s.java:34)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here!\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl8fyi7w0.java:28)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"^[a-zA-Z]+[^.]+\\\\.(txt|exe|dll)$\");\n        Matcher\
    \ m = p.matcher(file_name);\n        return m.matches() ? \"Yes\" : \"No\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_vp3n08k.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"^[a-zA-Z]+[^.]+\\\\.(txt|exe|dll)$\");\n        ^\n  symbol:\
    \   class Pattern\n  location: class Problem\n/tmp/tmp_vp3n08k.java:24: error:\
    \ cannot find symbol\n        Pattern p = Pattern.compile(\"^[a-zA-Z]+[^.]+\\\\\
    .(txt|exe|dll)$\");\n                    ^\n  symbol:   variable Pattern\n  location:\
    \ class Problem\n/tmp/tmp_vp3n08k.java:25: error: cannot find symbol\n       \
    \ Matcher m = p.matcher(file_name);\n        ^\n  symbol:   class Matcher\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ sub1 = file_name.substring(0, file_name.indexOf(\".\"));\n        String sub2\
    \ = file_name.substring(file_name.indexOf(\".\") + 1);\n        List<Character>\
    \ charList = sub1.chars().mapToObj(c -> (char) c).collect(Collectors.toList());\n\
    \        List<Character> digitList = new ArrayList<Character>();\n        for\
    \ (char c : charList) {\n            if (Character.isDigit(c)) {\n           \
    \     digitList.add(c);\n            }\n        }\n        List<String> validList\
    \ = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        return ((digitList.size()\
    \ <= 3) && (file_name.length() - file_name.replace(\".\", \"\").length() == 1)\
    \ && (charList.get(0).isAlphabetic(charList.get(0))) && (validList.contains(sub2)))\
    \ ? \"Yes\" : \"No\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 8\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.fileNameCheck(tmp3cjp3bca.java:24)\n\
    \tat Problem.main(tmp3cjp3bca.java:59)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.matches(\"[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)\")) {\n         \
    \   return \"Yes\";\n        }\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjpu3bf_s.java:34)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"^[a-zA-Z][0-9]{0,3}.[txt|exe|dll]$\");\n        Matcher\
    \ m = p.matcher(file_name);\n        return m.matches() ? \"Yes\" : \"No\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjnmuqw7g.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"^[a-zA-Z][0-9]{0,3}.[txt|exe|dll]$\");\n        ^\n  symbol:\
    \   class Pattern\n  location: class Problem\n/tmp/tmpjnmuqw7g.java:24: error:\
    \ cannot find symbol\n        Pattern p = Pattern.compile(\"^[a-zA-Z][0-9]{0,3}.[txt|exe|dll]$\"\
    );\n                    ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmpjnmuqw7g.java:25: error: cannot find symbol\n        Matcher m = p.matcher(file_name);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ extension = \".txt\" + \".exe\" + \".dll\";\n        String[] arr = file_name.split(\"\
    \\\\.\");\n        // System.out.println(Arrays.toString(arr));\n        if (arr.length\
    \ == 2 && arr[0].charAt(0) >= 65 && arr[0].charAt(0) <= 122 && extension.contains(arr[1]))\n\
    \            return \"Yes\";\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnvjfdbd.java:37)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ digits_count = 0;\n        int dot_count = 0;\n        String prefix = \"\"\
    ;\n        String suffix = \"\";\n        for (int i = 0; i < file_name.length();\
    \ i++) {\n            if (Character.isDigit(file_name.charAt(i))) {\n        \
    \        digits_count++;\n            }\n            if (file_name.charAt(i) ==\
    \ '.') {\n                dot_count++;\n                prefix = file_name.substring(0,\
    \ i);\n                suffix = file_name.substring(i + 1);\n            }\n \
    \       }\n        if (digits_count > 3 || dot_count != 1 || !Character.isLetter(prefix.charAt(0))\
    \ || !(suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"dll\"\
    ))) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 0\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.fileNameCheck(tmp23rr1xow.java:38)\n\
    \tat Problem.main(tmp23rr1xow.java:68)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if(file_name.length()\
    \ > 10) return \"No\";\n        if(file_name.indexOf('.') == -1) return \"No\"\
    ;\n        if(!Character.isLetter(file_name.charAt(0))) return \"No\";\n     \
    \   var extension = file_name.substring(file_name.indexOf('.') + 1);\n       \
    \ if(!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"\
    dll\")) return \"No\";\n        var sub = file_name.substring(0, file_name.indexOf('.'));\n\
    \        if(!Character.isLetter(sub.charAt(0))) return \"No\";\n        for(int\
    \ i = 0; i < sub.length(); i++) {\n            if(!Character.isLetter(sub.charAt(i))\
    \ && !Character.isDigit(sub.charAt(i))) return \"No\";\n        }\n        return\
    \ \"Yes\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9bxb1f_c.java:37)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ check for file name rules\n        if(file_name.matches(\"^[a-zA-Z][a-zA-Z0-9]{1,29}\\\
    \\.txt$|^[a-zA-Z][a-zA-Z0-9]{1,29}\\\\.exe$|^[a-zA-Z][a-zA-Z0-9]{1,29}\\\\.dll$\"\
    )){\n            // return the answer\n            return \"Yes\";\n        }else{\n\
    \            // return the answer\n            return \"No\";\n        }\n   \
    \ }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqyhocdh.java:37)\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here.\n        return \"Hello\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm40pi55r.java:28)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ TODO: Implement the function\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmpeada2013.java:28)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmpb1d7yn5s.java:30)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"Yes\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq5qdf74.java:28)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        final\
    \ String file_extension_to_check = \"txt\";\n        final String file_extension_to_check_1\
    \ = \"exe\";\n        final String file_extension_to_check_2 = \"dll\";\n    \
    \    boolean result = false;\n        boolean result_1 = false;\n        boolean\
    \ result_2 = false;\n        boolean result_3 = false;\n        int counter =\
    \ 0;\n        // Scanning through the string and counting the number of digits\
    \ in the file_name\n        for (int j = 0; j < file_name.length(); j++) {\n \
    \           if (Character.isDigit(file_name.charAt(j))) {\n                counter++;\n\
    \            }\n        }\n        // Checking if the file_name's extension is\
    \ one of those accepted\n        if (file_name.substring(file_name.length() -\
    \ file_extension_to_check.length(), file_name.length()).equals(file_extension_to_check))\
    \ {\n            result = true;\n        }\n        else if (file_name.substring(file_name.length()\
    \ - file_extension_to_check_1.length(), file_name.length()).equals(file_extension_to_check_1))\
    \ {\n            result_1 = true;\n        }\n        else if (file_name.substring(file_name.length()\
    \ - file_extension_to_check_2.length(), file_name.length()).equals(file_extension_to_check_2))\
    \ {\n            result_2 = true;\n        }\n        else {\n            result_3\
    \ = true;\n        }\n        // Checking if the number of digits is greater than\
    \ three\n        if (counter > 3) {\n            return \"No\";\n        }\n \
    \       // Checking if the string contains exactly one dot '.'\n        else if\
    \ (file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return\
    \ \"No\";\n        }\n        // Checking if the substring before the dot is not\
    \ empty and starts with a letter\n        else if (file_name.charAt(0) == '.'\
    \ || !Character.isLetter(file_name.charAt(0)))\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkp7zk0t3.java:61: error: illegal start of statement\n    }\n  \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011795
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ name, extension;\n        String[] split_file_name = file_name.split(\"\\\\\
    .\");\n        if (split_file_name.length != 2) {\n            return \"No\";\n\
    \        }\n        name = split_file_name[0];\n        extension = split_file_name[1];\n\
    \        if (name.matches(\"[a-zA-Z]{1}[a-zA-Z0-9]*\") && extension.matches(\"\
    (txt|exe|dll)\")) {\n            return \"Yes\";\n        }\n        return \"\
    No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdw2arphu.java:42)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        String base = parts[0];\n     \
    \   String extension = parts[1];\n        if (base.matches(\"^[a-zA-Z]+[a-zA-Z0-9]*$\"\
    ) && extension.matches(\"^[\\\\w]+$\")) {\n            if (base.matches(\"[0-9]+\"\
    )) {\n                return \"No\";\n            }\n            if (extension.equals(\"\
    exe\") || extension.equals(\"txt\") || extension.equals(\"dll\")) {\n        \
    \        return \"Yes\";\n            }\n        }\n        return \"No\";\n \
    \   }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz07cbkq7.java:43)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ res = \"No\";\n        String[] name_ext = file_name.split(\"\\\\.\");\n   \
    \     int idx = 0;\n        String name = name_ext[0];\n        String ext = name_ext[1];\n\
    \        for (char c : name.toCharArray()) {\n            if (Character.isDigit(c))\
    \ {\n                idx++;\n            }\n        }\n        if (idx <= 3 &&\
    \ Character.isLetter(name.charAt(0)) && \n            (ext.equals(\"txt\") ||\
    \ ext.equals(\"exe\") || ext.equals(\"dll\"))) {\n            res = \"Yes\";\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfwhqqmew.java:56)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Place your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        \n        //String file_name = \"exam.txt\";\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        String part1 = parts[0];\n    \
    \    String part2 = parts[1];\n        String result = \"No\";\n        String[]\
    \ parts2 = part1.split(\"\\\\d\");\n        String part12 = parts2[0];\n     \
    \   String part22 = parts2[1];\n        String[] parts3 = part12.split(\"\\\\\
    D\");\n        String part13 = parts3[0];\n        String part23 = parts3[1];\n\
    \        //System.out.println(part1);\n        //System.out.println(part2);\n\
    \        //System.out.println(part12);\n        //System.out.println(part22);\n\
    \        //System.out.println(part13);\n        //System.out.println(part23);\n\
    \        if(part22.length() > 3){\n            result = \"No\";\n        }else\
    \ if(part13.length() != 0 || part23.length() == 0){\n            result = \"No\"\
    ;\n        }else if(!part2.equals(\"txt\") && !part2.equals(\"exe\") && !part2.equals(\"\
    dll\")){\n            result = \"No\";\n        }else{\n            result = \"\
    Yes\";\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.fileNameCheck(tmpckv8d_tg.java:35)\n\
    \tat Problem.main(tmpckv8d_tg.java:57)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if(file_name.matches(\"\
    [a-zA-Z]+[a-zA-Z0-9]*(\\\\.txt|\\\\.exe|\\\\.dll)\")) {\n            return \"\
    Yes\";\n        }\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn61x4nz5.java:35)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3h7fmpen.java:30)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Replace the following line with your code\n        if (file_name.length() <\
    \ 4) {\n            return \"No\";\n        }\n        int len = file_name.length();\n\
    \        int dot = file_name.indexOf('.');\n        if (dot == -1 || dot >= len\
    \ - 3) {\n            return \"No\";\n        }\n        String before = file_name.substring(0,\
    \ dot);\n        String after = file_name.substring(dot+1);\n        if (before.length()\
    \ == 0 || before.length() > 10) {\n            return \"No\";\n        }\n   \
    \     if (!Character.isLetter(before.charAt(0))) {\n            return \"No\"\
    ;\n        }\n        if (!after.equals(\"txt\") && !after.equals(\"exe\") &&\
    \ !after.equals(\"dll\")) {\n            return \"No\";\n        }\n        int\
    \ digits = 0;\n        for (int i = 0; i < before.length(); i++) {\n         \
    \   if (Character.isDigit(before.charAt(i))) {\n                digits++;\n  \
    \          }\n        }\n        if (digits > 3) {\n            return \"No\"\
    ;\n        }\n        return \"Yes\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpczsrv9_p.java:66)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ TODO: implement\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmpetpgdewu.java:28)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ begin your code here\n        int count = 0;\n        int dot = 0;\n       \
    \ boolean valid = true;\n        if(file_name.length() < 6)\n            return\
    \ \"No\";\n        for(int i = 0; i < file_name.length(); i++){\n            if(file_name.charAt(i)\
    \ >= '0' && file_name.charAt(i) <= '9')\n                count++;\n          \
    \  if(file_name.charAt(i) == '.')\n                dot++;\n        }\n       \
    \ if(dot != 1 || count > 3)\n            return \"No\";\n        String[] subs\
    \ = file_name.split(\"\\\\.\");\n        if(subs[0].length() == 0)\n         \
    \   return \"No\";\n        if(subs[0].charAt(0) < 'a' || subs[0].charAt(0) >\
    \ 'z')\n            if(subs[0].charAt(0) < 'A' || subs[0].charAt(0) > 'Z')\n \
    \               return \"No\";\n        if(!subs[1].equals(\"txt\") && !subs[1].equals(\"\
    exe\") && !subs[1].equals(\"dll\"))\n            return \"No\";\n        return\
    \ \"Yes\";\n        // end your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppfyqifzr.java:53)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3h7fmpen.java:30)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code goes here\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lubyfii.java:28)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n    // Fill\
    \ in your answer\n\t\treturn null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmp2lsg6flq.java:28)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Empty string is false\n        if (file_name.length() == 0) {\n            return\
    \ \"No\";\n        }\n        if (file_name.split(\"\\\\.\").length > 2) {\n \
    \           return \"No\";\n        }\n        String[] name = file_name.split(\"\
    \\\\.\");\n        // Check that the first part of the string contains a letter\n\
    \        if (name[0].length() == 0 || !name[0].matches(\"[a-zA-Z]+\")) {\n   \
    \         return \"No\";\n        }\n        // Check that the first part of the\
    \ string contains no more than 3 digits\n        if (name[0].matches(\".*\\\\\
    d.*\\\\d.*\\\\d.*\")) {\n            return \"No\";\n        }\n        // Check\
    \ that the second part of the string is one of the allowed file types\n      \
    \  if (!name[1].equals(\"txt\") && !name[1].equals(\"exe\") && !name[1].equals(\"\
    dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsslpwkss.java:51)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        String[] parts = file_name.split(\"\\\\.\");\n        if\
    \ (parts.length == 2) {\n            if (parts[0].length() > 0) {\n          \
    \      if (parts[0].chars().allMatch(c -> c >= '0' && c <= '9')) {\n         \
    \           return \"No\";\n                }\n                if (parts[0].length()\
    \ <= 3) {\n                    if (parts[1].equals(\"txt\") || parts[1].equals(\"\
    exe\") || parts[1].equals(\"dll\")) {\n                        return \"Yes\"\
    ;\n                    }\n                }\n            }\n        }\n      \
    \  return \"No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwjyunch4.java:43)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Create a method that takes a String file_name and returns 'Yes' if the file's\
    \ name is valid, and returns 'No' otherwise.\n        String substr = \"\";\n\
    \        String ext = \"\";\n        String[] tokens = file_name.split(\"\\\\\
    .\");\n        String[] tokens_no_0 = file_name.split(\"[^0-9]\");\n        String[]\
    \ tokens_no_letter = file_name.split(\"[a-zA-Z]\");\n        //System.out.println(file_name);\n\
    \        //System.out.println(Arrays.toString(tokens));\n        //System.out.println(Arrays.toString(tokens_no_0));\n\
    \        //System.out.println(Arrays.toString(tokens_no_letter));\n        if\
    \ (tokens.length == 2 && tokens_no_0.length <= 4 && tokens_no_letter.length ==\
    \ 2) {\n            ext = tokens[1];\n            substr = tokens[0];\n      \
    \      //System.out.println(substr);\n            //System.out.println(ext);\n\
    \            //System.out.println(substr.length());\n            if (substr.length()\
    \ >= 1 && (ext.equals(\"txt\") || ext.equals(\"exe\") || ext.equals(\"dll\")))\
    \ {\n                return (\"Yes\");\n            }\n        }\n        return\
    \ (\"No\");\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqatn87zc.java:47)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ split_file_name = file_name.split(\"\\\\.\");\n        String subfile_name =\
    \ split_file_name[0];\n        String file_type = split_file_name[1];\n      \
    \  int counter = 0;\n        boolean flag = false;\n        for (int i = 0; i\
    \ < subfile_name.length(); i++) {\n            char char_file_name = subfile_name.charAt(i);\n\
    \            if (Character.isDigit(char_file_name)) {\n                counter\
    \ += 1;\n            }\n            if (counter > 3) {\n                flag =\
    \ true;\n            }\n        }\n        if (flag == true) {\n            return\
    \ \"No\";\n        }\n        if (file_type.equals(\"txt\") || file_type.equals(\"\
    exe\") || file_type.equals(\"dll\")) {\n            return \"Yes\";\n        }\n\
    \        return \"No\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxv1qd70.java:48)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ dot_count = 0;\n        int digits_count = 0;\n        boolean is_valid = true;\n\
    \        boolean invalid_dot_count = false;\n        boolean empty_before_dot\
    \ = false;\n        boolean not_alpha_before_dot = false;\n        boolean invalid_after_dot\
    \ = false;\n        for (int i = 0; i < file_name.length(); i++) {\n         \
    \   char c = file_name.charAt(i);\n            if (c == '.') {\n             \
    \   dot_count++;\n            }\n            if (Character.isDigit(c)) {\n   \
    \             digits_count++;\n            }\n        }\n        if (dot_count\
    \ != 1) {\n            invalid_dot_count = true;\n        }\n        if (file_name.substring(0,\
    \ file_name.indexOf('.')).equals(\"\")) {\n            empty_before_dot = true;\n\
    \        }\n        if (!(Character.isLetter(file_name.charAt(0)) && (Character.isUpperCase(file_name.charAt(0))\
    \ || Character.isLowerCase(file_name.charAt(0))))) {\n            not_alpha_before_dot\
    \ = true;\n        }\n        if (!(file_name.substring(file_name.indexOf('.')\
    \ + 1).equals(\"txt\") || file_name.substring(file_name.indexOf('.') + 1).equals(\"\
    exe\") || file_name.substring(file_name.indexOf('.') + 1).equals(\"dll\"))) {\n\
    \            invalid_after_dot = true;\n        }\n        if (digits_count >\
    \ 3 || invalid_dot_count || empty_before_dot || not_alpha_before_dot || invalid_after_dot)\
    \ {\n            is_valid = false;\n        }\n        if (is_valid) {\n     \
    \       return \"Yes\";\n        } else {\n            return \"No\";\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 8\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.fileNameCheck(tmptbyo22u4.java:43)\n\
    \tat Problem.main(tmptbyo22u4.java:84)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Insert your code here\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1m2z5w_.java:28)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ >>> YOUR CODE HERE <<<\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmp9b4fp7ya.java:28)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        try\
    \ {\n            return file_name\n                .matches(\"^[a-zA-Z]+([0-9]{1,3})?\\\
    \\.(txt|exe|dll)$\") ? \"Yes\" : \"No\";\n        } catch (NullPointerException\
    \ e) {\n            return \"No\";\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2kx7c0s.java:36)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmpb1d7yn5s.java:30)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nw7hdqm.java:29)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here\n        String regex = \"^[a-zA-Z]{1}(\\\\d{0,3})([a-zA-Z]*)(\\\
    \\.txt|\\\\.exe|\\\\.dll)$\";\n        if (file_name.matches(regex)) {\n     \
    \       return \"Yes\";\n        }\n        return \"No\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1_es8swf.java:36)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //return\
    \ \"Yes\";\n        String[] splitedString = file_name.split(\"\\\\.\");\n   \
    \     String extension = splitedString[1];\n        if (extension.equals(\"txt\"\
    ) || extension.equals(\"exe\") || extension.equals(\"dll\")) {\n            String[]\
    \ digis = file_name.split(\"\\\\d+\");\n            if (digis.length == 2) {\n\
    \                char firstChar = file_name.charAt(0);\n                if (Character.isLetter(firstChar))\
    \ {\n                    return \"Yes\";\n                }\n            }\n \
    \       }\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmov7r2op.java:39)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ BEGIN YOUR CODE HERE\n        return \"\";\n        // END YOUR CODE HERE\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz6f3liz_.java:29)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmpc59y_pnk.java:28)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code goes here\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lubyfii.java:28)\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Pattern class provides methods to create special types of strings which are\
    \ used \n        // in specific applications like emails, websites, etc.\n   \
    \     // Pattern.compile() method compiles a given pattern and returns a new pattern\
    \ matcher.\n        // Matcher.matches() method returns true if the pattern matches\
    \ the entire input string.\n        // \\\\d indicates any numeric character.\n\
    \        // \\\\w indicates any word character.\n        // .* indicates 0 or\
    \ more occurrences of any character.\n        // [a-zA-Z] indicates the range\
    \ of alphabets in both the cases.\n        // ^[a-zA-Z]* indicates the string\
    \ must start with a letter in both the cases.\n        // \\\\d{1,3} indicates\
    \ the length of the string should be between 1 and 3.\n        // \\\\w{1,20}\
    \ indicates the length of the string should be between 1 and 20.\n        // [a-zA-Z]{1,20}\
    \ indicates the length of the string should be between 1 and 20\n        // including\
    \ alphabets only.\n        // $ indicates the end of the string.\n        // (\\\
    \\.txt$|\\\\.exe$|\\\\.dll$) indicates the string must end with any of the 3 \n\
    \        // extensions.\n        return Pattern.compile(\"^[a-zA-Z]\\\\w{1,20}\\\
    \\.(txt$|exe$|dll$)\").matcher(file_name).matches() ? \"Yes\" : \"No\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiguhex57.java:40: error: cannot find symbol\n        return Pattern.compile(\"\
    ^[a-zA-Z]\\\\w{1,20}\\\\.(txt$|exe$|dll$)\").matcher(file_name).matches() ? \"\
    Yes\" : \"No\";\n               ^\n  symbol:   variable Pattern\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code goes here\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd85w1hta.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ temp=file_name.split(\"\\\\.\");\n        String file_ext=temp[1];\n       \
    \ String file_before_ext=temp[0];\n        String pattern = \"^[a-zA-Z]+\\\\.?[a-zA-Z0-9]*$\"\
    ;\n        boolean result=Pattern.matches(pattern, file_before_ext);\n       \
    \ if(result){\n            if(file_ext.equals(\"txt\") || file_ext.equals(\"exe\"\
    ) || file_ext.equals(\"dll\")){\n                if(file_before_ext.replaceAll(\"\
    [^0-9]\", \"\").length()<=3){\n                    return \"Yes\";\n         \
    \       }else{\n                    return \"No\";\n                }\n      \
    \      }else{\n                return \"No\";\n            }\n        }else{\n\
    \            return \"No\";\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcfnxz3r.java:28: error: cannot find symbol\n        boolean result=Pattern.matches(pattern,\
    \ file_before_ext);\n                       ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011797
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ TODO: implement this function.\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdo2bzmmg.java:28)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwyaespbg.java:28)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ ext = \"txt|exe|dll\";\n        String[] split = file_name.split(\"\\\\.\");\n\
    \        if (split.length == 2) {\n            String fname = split[0];\n    \
    \        String ex = split[1];\n            int count = 0;\n            for (int\
    \ i = 0; i < fname.length(); i++) {\n                if (Character.isDigit(fname.charAt(i)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count <= 3 && Character.isLetter(fname.charAt(0)) && Pattern.matches(ext,\
    \ ex)) {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8oo798iu.java:35: error: cannot find symbol\n            if (count\
    \ <= 3 && Character.isLetter(fname.charAt(0)) && Pattern.matches(ext, ex)) {\n\
    \                                                                     ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if(file_name.matches(\"\
    ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\")) {\n            return \"Yes\"\
    ;\n        }\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9izcwrvg.java:30)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.length() == 0) {\n            return \"No\";\n        }\n       \
    \ String[] x = file_name.split(\"\\\\.\");\n        String name = x[0];\n    \
    \    String extension = x[1];\n        if (extension.equals(\"exe\") == false\
    \ &&\n            extension.equals(\"txt\") == false &&\n            extension.equals(\"\
    dll\") == false) {\n            return \"No\";\n        }\n        if (name.length()\
    \ == 0) {\n            return \"No\";\n        }\n        int counter = 0;\n \
    \       for (int i = 0; i < name.length(); i++) {\n            if (Character.isDigit(name.charAt(i)))\
    \ {\n                counter += 1;\n            }\n        }\n        if (counter\
    \ > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n   \
    \ }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph8makzet.java:51)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\n\
    \        // Your code here\n        //\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnlc_quu0.java:30)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ pattern = Pattern.compile(\"[a-zA-Z]+\\\\d{0,3}\\\\.(txt|exe|dll)\");\n    \
    \    Matcher matcher = pattern.matcher(file_name);\n        if (matcher.matches())\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprnd_m8_a.java:24: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"[a-zA-Z]+\\\\d{0,3}\\\\.(txt|exe|dll)\");\n        ^\n \
    \ symbol:   class Pattern\n  location: class Problem\n/tmp/tmprnd_m8_a.java:24:\
    \ error: cannot find symbol\n        Pattern pattern = Pattern.compile(\"[a-zA-Z]+\\\
    \\d{0,3}\\\\.(txt|exe|dll)\");\n                          ^\n  symbol:   variable\
    \ Pattern\n  location: class Problem\n/tmp/tmprnd_m8_a.java:25: error: cannot\
    \ find symbol\n        Matcher matcher = pattern.matcher(file_name);\n       \
    \ ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ BEGIN YOUR CODE\n        if (file_name.length() >= 3) {\n            if (file_name.charAt(0)\
    \ >= 'a' && file_name.charAt(0) <= 'z' || file_name.charAt(0) >= 'A' && file_name.charAt(0)\
    \ <= 'Z') {\n                String[] fileNameSplit = file_name.split(\"\\\\.\"\
    );\n                if (fileNameSplit.length == 2) {\n                    if (fileNameSplit[0].length()\
    \ > 0) {\n                        int counter = 0;\n                        for\
    \ (int i = 0; i < fileNameSplit[0].length(); i++) {\n                        \
    \    if (fileNameSplit[0].charAt(i) >= '0' && fileNameSplit[0].charAt(i) <= '9')\
    \ {\n                                counter++;\n                            }\n\
    \                        }\n                        if (counter <= 3) {\n    \
    \                        if (fileNameSplit[1].equals(\"txt\") || fileNameSplit[1].equals(\"\
    exe\") || fileNameSplit[1].equals(\"dll\")) {\n                              \
    \  return \"Yes\";\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"No\";\n        // END YOUR CODE\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        List<String>\
    \ valid_extensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        Pattern\
    \ p = Pattern.compile(\"^[a-zA-Z]+[a-zA-Z0-9]*\\\\.(txt|exe|dll)$\");\n      \
    \  Matcher m = p.matcher(file_name);\n        boolean matches = m.matches();\n\
    \        if (matches) {\n            String extension = file_name.substring(file_name.lastIndexOf(\"\
    .\") + 1);\n            if (valid_extensions.contains(extension)) {\n        \
    \        String pre_extension = file_name.substring(0, file_name.lastIndexOf(\"\
    .\"));\n                String digits = pre_extension.replaceAll(\"[^0-9]\", \"\
    \");\n                if (digits.length() <= 3) {\n                    return\
    \ \"Yes\";\n                }\n            }\n        }\n        return \"No\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmui77bnb.java:25: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"^[a-zA-Z]+[a-zA-Z0-9]*\\\\.(txt|exe|dll)$\");\n        ^\n\
    \  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpmui77bnb.java:25:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"^[a-zA-Z]+[a-zA-Z0-9]*\\\
    \\.(txt|exe|dll)$\");\n                    ^\n  symbol:   variable Pattern\n \
    \ location: class Problem\n/tmp/tmpmui77bnb.java:26: error: cannot find symbol\n\
    \        Matcher m = p.matcher(file_name);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //implement\
    \ your code here\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00fdtl_a.java:28)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ fileName = file_name;\n        String res = \"Yes\";\n        String[] fileNameArray\
    \ = fileName.split(\"\\\\.\");\n        String extension = fileNameArray[1];\n\
    \        String fileNameWithoutExtension = fileNameArray[0];\n        if (fileNameWithoutExtension.length()\
    \ == 0) {\n            res = \"No\";\n        }\n        Pattern p = Pattern.compile(\"\
    [^a-zA-Z0-9]\");\n        boolean hasSpecialChar = p.matcher(fileNameWithoutExtension).find();\n\
    \        if (hasSpecialChar) {\n            res = \"No\";\n        }\n       \
    \ Pattern p2 = Pattern.compile(\"[0-9]\");\n        Matcher m = p2.matcher(fileNameWithoutExtension);\n\
    \        int count = 0;\n        while (m.find()) {\n            count += 1;\n\
    \        }\n        if (count > 3) {\n            res = \"No\";\n        }\n \
    \       if (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"\
    dll\")) {\n            res = \"No\";\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcxvp4le5.java:32: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"[^a-zA-Z0-9]\");\n        ^\n  symbol:   class Pattern\n\
    \  location: class Problem\n/tmp/tmpcxvp4le5.java:32: error: cannot find symbol\n\
    \        Pattern p = Pattern.compile(\"[^a-zA-Z0-9]\");\n                    ^\n\
    \  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmpcxvp4le5.java:37:\
    \ error: cannot find symbol\n        Pattern p2 = Pattern.compile(\"[0-9]\");\n\
    \        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpcxvp4le5.java:37:\
    \ error: cannot find symbol\n        Pattern p2 = Pattern.compile(\"[0-9]\");\n\
    \                     ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmpcxvp4le5.java:38: error: cannot find symbol\n        Matcher m = p2.matcher(fileNameWithoutExtension);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n5 errors\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ TODO: add your code here\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuiu6avij.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ BEGIN SOLUTION\n        if (file_name.matches(\"^[a-zA-Z]+\\\\d{0,3}\\\\.(txt|exe|dll)$\"\
    )) {\n            return \"Yes\";\n        }\n        return \"No\";\n       \
    \ // END SOLUTION\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwi4khqa.java:36)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ result = \"No\";\n        String[] str = file_name.split(\"\\\\.\");\n     \
    \   if (str.length == 2) {\n            String name = str[0];\n            String\
    \ ext = str[1];\n            if (name.length() > 0 && name.substring(0, 1).matches(\"\
    [a-zA-Z]\") && name.length() - name.replaceAll(\"[0-9]\", \"\").length() <= 3\
    \ && ext.equals(\"txt\") || ext.equals(\"exe\") || ext.equals(\"dll\")) {\n  \
    \              result = \"Yes\";\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6ibt0l0.java:37)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        boolean\
    \ correct_name = false;\n        // TODO: Implement your solution here\n     \
    \   return correct_name ? \"Yes\" : \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfmvpy8io.java:29)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code goes here\n        int number_of_dots = file_name.length() - file_name.replace(\"\
    .\", \"\").length();\n        String[] dot_split = file_name.split(\"\\\\.\");\n\
    \        String name = dot_split[0];\n        String extension = dot_split[1];\n\
    \        if (dot_split.length != 2 || number_of_dots != 1) {\n            return\
    \ \"No\";\n        }\n        if (name.matches(\".*\\\\d.*\")) {\n           \
    \ return \"No\";\n        }\n        if (!Character.isLetter(name.charAt(0)))\
    \ {\n            return \"No\";\n        }\n        if (!(extension.equals(\"\
    txt\") || extension.equals(\"exe\") || extension.equals(\"dll\"))) {\n       \
    \     return \"No\";\n        }\n        return \"Yes\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppbfzhba4.java:48)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"Yes\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq5qdf74.java:28)\n"
  stdout: ''
  timestamp: 1660011796
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        throw\
    \ new UnsupportedOperationException(\"Waiting to be implemented.\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Waiting\
    \ to be implemented.\n\tat Problem.fileNameCheck(tmpt9sv4xfl.java:24)\n\tat Problem.main(tmpt9sv4xfl.java:27)\n"
  stdout: ''
  timestamp: 1660011798
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here.\n        String[] split = file_name.split(\"\\\\.\");\n    \
    \    if (split.length != 2) {\n            return \"No\";\n        }\n       \
    \ String before = split[0];\n        String after = split[1];\n        if (before.matches(\"\
    ^[0-9]+$\")) {\n            return \"No\";\n        }\n        if (after.equals(\"\
    txt\") || after.equals(\"exe\") || after.equals(\"dll\")) {\n            return\
    \ \"Yes\";\n        }\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1uydrlft.java:41)\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ splitted = file_name.split(\"\\\\.\");\n        String extension = splitted[1];\n\
    \        String name = splitted[0];\n        if(name.matches(\"\\\\D{1}\\\\d{0,3}\"\
    ) && (extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\"))) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72ekwqn8.java:34)\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ YOUR CODE HERE\n        if(file_name.length() <= 3){\n            return \"\
    No\";\n        }\n        int count = 0;\n        for(int i = 0; i < file_name.length();\
    \ i++){\n            if(Character.isDigit(file_name.charAt(i))){\n           \
    \     count++;\n            }\n        }\n        if(count > 3){\n           \
    \ return \"No\";\n        }\n        if(!file_name.contains(\".\")){\n       \
    \     return \"No\";\n        }\n        if(file_name.indexOf(\".\") < 1){\n \
    \           return \"No\";\n        }\n        if(!Character.isLetter(file_name.charAt(0))){\n\
    \            return \"No\";\n        }\n        String[] endings = {\"txt\", \"\
    exe\", \"dll\"};\n        boolean contains = false;\n        for(int i = 0; i\
    \ < endings.length; i++){\n            if(file_name.substring(file_name.indexOf(\"\
    .\") + 1).equals(endings[i])){\n                contains = true;\n           \
    \ }\n        }\n        if(!contains){\n            return \"No\";\n        }\n\
    \        return \"Yes\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ null;\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.fileNameCheck(String)\"\
    \ is null\n\tat Problem.main(tmprzoo30dd.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ sub_file_name = file_name.substring(0, file_name.indexOf(\".\"));\n        String\
    \ extension = file_name.substring(file_name.indexOf(\".\") + 1);\n        int\
    \ count_digits = 0;\n        for (int i = 0; i < sub_file_name.length(); i++)\
    \ {\n            if (Character.isDigit(sub_file_name.charAt(i))) {\n         \
    \       count_digits++;\n            }\n        }\n        if (count_digits <=\
    \ 3 && file_name.contains(\".\") && (extension.equals(\"txt\") || extension.equals(\"\
    exe\") || extension.equals(\"dll\"))) {\n            return \"Yes\";\n       \
    \ }\n        return \"No\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpive9jqgq.java:39)\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //ADD\
    \ CODE HERE\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50fo8llg.java:28)\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}(\\\\.txt|\\\\.exe|\\\\.dll)$\";\n      \
    \  Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(file_name);\n\
    \        if (matcher.find()) {\n            return \"Yes\";\n        }\n     \
    \   return \"No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzemsts4.java:25: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(regex);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpmzemsts4.java:25: error: cannot find symbol\n       \
    \ Pattern pattern = Pattern.compile(regex);\n                          ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmpmzemsts4.java:26: error:\
    \ cannot find symbol\n        Matcher matcher = pattern.matcher(file_name);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ count = 0;\n        boolean is_valid = true;\n        int i = 0;\n        while\
    \ (i < file_name.length() && count <= 3) {\n            char c = file_name.charAt(i);\n\
    \            if (c >= '0' && c <= '9') {\n                count++;\n         \
    \   }\n            i++;\n        }\n        if (count > 3) {\n            is_valid\
    \ = false;\n        }\n        i = 0;\n        int dot_count = 0;\n        while\
    \ (i < file_name.length() && dot_count <= 1) {\n            char c = file_name.charAt(i);\n\
    \            if (c == '.') {\n                dot_count++;\n            }\n  \
    \          i++;\n        }\n        if (dot_count != 1) {\n            is_valid\
    \ = false;\n        }\n        String[] parts = file_name.split(\"\\\\.\");\n\
    \        String before_dot = parts[0];\n        String after_dot = parts[1];\n\
    \        String[] valid_extensions = {\"txt\", \"exe\", \"dll\"};\n        if\
    \ (before_dot.length() == 0 || !Character.isLetter(before_dot.charAt(0))) {\n\
    \            is_valid = false;\n        }\n        boolean is_valid_extension\
    \ = false;\n        for (String extension : valid_extensions) {\n            if\
    \ (extension.equals(after_dot)) {\n                is_valid_extension = true;\n\
    \            }\n        }\n        if (!is_valid_extension) {\n            is_valid\
    \ = false;\n        }\n        if (is_valid) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.fileNameCheck(tmp73yc7kt8.java:51)\n\
    \tat Problem.main(tmp73yc7kt8.java:94)\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ regex = \"^[a-zA-Z][a-zA-Z0-9]{0,9}\\\\.((txt)|(exe)|(dll))$\";\n        if\
    \ (file_name.matches(regex)) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp12vwe3_6.java:42)\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here.\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa54jofkb.java:28)\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ <----  Implement your code here. ---->\n        boolean foundDot = false;\n\
    \        int count = 0;\n        if(file_name.length() < 1){\n            return\
    \ \"No\";\n        }\n        if(!(Character.isLetter(file_name.charAt(0)))){\n\
    \            return \"No\";\n        }\n        for(int i = 0; i < file_name.length();\
    \ i++){\n            if(Character.isDigit(file_name.charAt(i))){\n           \
    \     count++;\n            }\n            if(file_name.charAt(i) == '.'){\n \
    \               foundDot = true;\n            }\n        }\n        if(!foundDot){\n\
    \            return \"No\";\n        }\n        if(count > 3){\n            return\
    \ \"No\";\n        }\n        String[] file_array = file_name.split(\"\\\\.\"\
    );\n        if(file_array.length != 2){\n            return \"No\";\n        }\n\
    \        if(file_array[1].equals(\"txt\") || file_array[1].equals(\"exe\") ||\
    \ file_array[1].equals(\"dll\")){\n            return \"Yes\";\n        }\n  \
    \      return \"No\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"^[a-zA-Z]+\\\\d{0,3}\\\\.(exe|txt|dll)$\");\n        Matcher\
    \ m = p.matcher(file_name);\n        return m.matches() ? \"Yes\" : \"No\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5u29uhi.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"^[a-zA-Z]+\\\\d{0,3}\\\\.(exe|txt|dll)$\");\n        ^\n\
    \  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpa5u29uhi.java:24:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"^[a-zA-Z]+\\\
    \\d{0,3}\\\\.(exe|txt|dll)$\");\n                    ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmpa5u29uhi.java:25: error: cannot find symbol\n\
    \        Matcher m = p.matcher(file_name);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        final\
    \ long three = 3;\n        final long one = 1;\n        final long two = 2;\n\
    \        final long three_char_count = 3;\n        final long four_char_count\
    \ = 4;\n        final long five_char_count = 5;\n        final long six_char_count\
    \ = 6;\n        final long seven_char_count = 7;\n        final long eight_char_count\
    \ = 8;\n        final long nine_char_count = 9;\n        final long dot_count\
    \ = file_name.chars().filter(c -> c == '.').count();\n        final long digit_count\
    \ = file_name.chars().filter(c -> Character.isDigit(c)).count();\n        final\
    \ String dot = \".\";\n        final String txt = \"txt\";\n        final String\
    \ exe = \"exe\";\n        final String dll = \"dll\";\n        final String empty\
    \ = \"\";\n        final String regex = \"^[a-zA-Z0-9]+$\";\n        final List<String>\
    \ result = new ArrayList<>();\n        final String valid = \"Yes\";\n       \
    \ final String invalid = \"No\";\n        if (digit_count <= three && dot_count\
    \ == one) {\n            // Split around dot\n            final List<String> splitted\
    \ = Arrays.asList(file_name.split(\"\\\\.\"));\n            if (splitted.size()\
    \ == two) {\n                final String substring_before_dot = splitted.get(0);\n\
    \                final String substring_after_dot = splitted.get(1);\n       \
    \         if (substring_before_dot.length() > 0) {\n                    if (substring_before_dot.length()\
    \ >= three_char_count &&\n                        substring_before_dot.length()\
    \ <= nine_char_count) {\n                        if (substring_before_dot.matches(regex))\
    \ {\n                            final boolean check_txt = substring_after_dot.equals(txt);\n\
    \                            final boolean check_exe = substring_after_dot.equals(exe);\n\
    \                            final boolean check_dll = substring_after_dot.equals(dll);\n\
    \                            if (check_txt || check_exe || check\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9hj3zdh.java:58: error: ')' expected\n                       \
    \     if (check_txt || check_exe || check\n                                  \
    \                             ^\n/tmp/tmps9hj3zdh.java:59: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmps9hj3zdh.java:60: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ if there are more than 3 digits, return \"No\"\n        int number_of_digits\
    \ = 0;\n        for (int i = 0; i < file_name.length(); i++) {\n            char\
    \ current_char = file_name.charAt(i);\n            if (current_char >= '0' &&\
    \ current_char <= '9') {\n                number_of_digits += 1;\n           \
    \ }\n        }\n        if (number_of_digits > 3) {\n            return \"No\"\
    ;\n        }\n        // the file's name contains exactly one dot '.'\n      \
    \  int dot_count = 0;\n        for (int i = 0; i < file_name.length(); i++) {\n\
    \            char current_char = file_name.charAt(i);\n            if (current_char\
    \ == '.') {\n                dot_count += 1;\n            }\n        }\n     \
    \   if (dot_count != 1) {\n            return \"No\";\n        }\n        // the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z').\n        int dot_position = 0;\n \
    \       for (int i = 0; i < file_name.length(); i++) {\n            char current_char\
    \ = file_name.charAt(i);\n            if (current_char == '.') {\n           \
    \     dot_position = i;\n            }\n        }\n        String before_dot =\
    \ file_name.substring(0, dot_position);\n        if (before_dot.equals(\"\"))\
    \ {\n            return \"No\";\n        }\n        char first_char = before_dot.charAt(0);\n\
    \        if (!((first_char >= 'a' && first_char <= 'z') || (first_char >= 'A'\
    \ && first_char <= 'Z'))) {\n            return \"No\";\n        }\n        //\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \        String after_dot = file_name.substring(dot_position + 1);\n        Set<String>\
    \ valid_substrings = new HashSet<>(Arrays.asList(\"txt\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrk4k_ge.java:64: error: unclosed string literal\n        Set<String>\
    \ valid_substrings = new HashSet<>(Arrays.asList(\"txt\n                     \
    \                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ check_pattern = Pattern.compile(\"^[a-zA-Z]{1}[^0-9.]{0,}[.][txt|exe|dll]{1}$\"\
    );\n        Matcher match = check_pattern.matcher(file_name);\n        return\
    \ match.matches()?\"Yes\":\"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rvjoq6s.java:24: error: cannot find symbol\n        Pattern check_pattern\
    \ = Pattern.compile(\"^[a-zA-Z]{1}[^0-9.]{0,}[.][txt|exe|dll]{1}$\");\n      \
    \  ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmp5rvjoq6s.java:24:\
    \ error: cannot find symbol\n        Pattern check_pattern = Pattern.compile(\"\
    ^[a-zA-Z]{1}[^0-9.]{0,}[.][txt|exe|dll]{1}$\");\n                            \
    \    ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmp5rvjoq6s.java:25:\
    \ error: cannot find symbol\n        Matcher match = check_pattern.matcher(file_name);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n    \
    \        return \"No\";\n        }\n        String pre = parts[0];\n        String\
    \ post = parts[1];\n        if (pre.length() == 0) {\n            return \"No\"\
    ;\n        }\n        if (!Character.isLetter(pre.charAt(0))) {\n            return\
    \ \"No\";\n        }\n        if (!post.equals(\"txt\") && !post.equals(\"exe\"\
    ) && !post.equals(\"dll\")) {\n            return \"No\";\n        }\n       \
    \ if (pre.replaceAll(\"[^0-9]\", \"\").length() > 3) {\n            return \"\
    No\";\n        }\n        return \"Yes\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ p = Pattern.compile(\"([a-zA-Z][0-9]{0,3})(\\\\.)((txt)|(exe)|(dll))\");\n \
    \       Matcher m = p.matcher(file_name);\n        if (m.matches()) {\n      \
    \      return \"Yes\";\n        }\n        return \"No\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7kr29o95.java:24: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"([a-zA-Z][0-9]{0,3})(\\\\.)((txt)|(exe)|(dll))\");\n   \
    \     ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmp7kr29o95.java:24:\
    \ error: cannot find symbol\n        Pattern p = Pattern.compile(\"([a-zA-Z][0-9]{0,3})(\\\
    \\.)((txt)|(exe)|(dll))\");\n                    ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmp7kr29o95.java:25: error: cannot find symbol\n\
    \        Matcher m = p.matcher(file_name);\n        ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //for\
    \ loop and check each element, if the element is . or a number and if the string\
    \ is less than 255 characters long.\n        //split(\\\\.)\n        //if(str.length()\
    \ > 255){\n        //      return \"No\";\n        // }\n        //for(int i =\
    \ 0; i < file_name.length(); i++){\n        //if((file_name.charAt(i) == '.')\
    \ || (file_name.charAt(i) == '1') || (file_name.charAt(i) == '2') || (file_name.charAt(i)\
    \ == '3') || (file_name.charAt(i) == '4') || (file_name.charAt(i) == '5') || (file_name.charAt(i)\
    \ == '6') || (file_name.charAt(i) == '7') || (file_name.charAt(i) == '8') || (file_name.charAt(i)\
    \ == '9') || (file_name.charAt(i) == '0')){\n            //return \"No\";\n  \
    \          //}\n        //}\n        //split the file name into two parts around\
    \ the '.' \n        //use the CharMatcher library to test that the first part\
    \ starts with a letter\n        //String regex = \"[^a-zA-Z]\";\n        //if((file_name.matches(regex))\
    \ == true){\n            //return \"No\";\n        //}\n        //use the CharMatcher\
    \ library to test that the second part is \"txt\", \"exe\", or \"dll\"\n     \
    \   //if(file_name.substring(file_name.length() - 3, file_name.length()).equals(\"\
    txt\") || file_name.substring(file_name.length() - 3, file_name.length()).equals(\"\
    exe\") || file_name.substring(file_name.length() - 3, file_name.length()).equals(\"\
    dll\")){\n            //return \"Yes\";\n        //}\n        //return \"No\"\
    ;\n        //declare a string split at the period, then count how many numbers\
    \ are in the first one and check if the other one is what you\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp9g7hj5u.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011799
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ splitted = file_name.split(\"\\\\.\");\n        String file_name_without_extension\
    \ = splitted[0];\n        String extension = splitted[1];\n        String[] chars_array\
    \ = file_name_without_extension.split(\"\");\n        if(file_name_without_extension.length()\
    \ == 0 || !Character.isLetter(file_name_without_extension.charAt(0))) {\n    \
    \        return \"No\";\n        }\n        if(!Arrays.asList(new String[]{\"\
    txt\", \"exe\", \"dll\"}).contains(extension)) {\n            return \"No\";\n\
    \        }\n        if(file_name_without_extension.chars().filter(num -> num >=\
    \ 48 && num <= 57).count() > 3) {\n            return \"No\";\n        }\n   \
    \     return \"Yes\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpel2t8jt8.java:55)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String[]\
    \ parts = file_name.split(\"\\\\.\");\n        String file_name_no_ext = parts[0];\n\
    \        String file_ext = parts[1];\n        return file_name_no_ext.matches(\"\
    ^[a-zA-Z][\\\\w]*$\")\n            && file_name_no_ext.length() <= 8\n       \
    \     && file_ext.matches(\"^(txt|exe|dll)$\") ? \"Yes\" : \"No\";\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6_u5tor6.java:36)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ res = \"Yes\";\n        // Checking the total number of digits in the file's\
    \ name.\n        if (file_name.replaceAll(\"[^0-9]\", \"\").length() > 3) {\n\
    \            res = \"No\";\n        }\n        // Checking the number of dots\
    \ in the file's name.\n        if (file_name.split(\"\\\\.\").length != 2) {\n\
    \            res = \"No\";\n        }\n        // Checking that the substring\
    \ before the dot does not start with a digit.\n        if (file_name.split(\"\\\
    \\.\")[0].charAt(0) >= '0' && file_name.split(\"\\\\.\")[0].charAt(0) <= '9')\
    \ {\n            res = \"No\";\n        }\n        // Checking that the substring\
    \ after the dot is one of the allowed substrings.\n        if (!(file_name.split(\"\
    \\\\.\")[1].equals(\"txt\") || file_name.split(\"\\\\.\")[1].equals(\"exe\") ||\
    \ file_name.split(\"\\\\.\")[1].equals(\"dll\"))) {\n            res = \"No\"\
    ;\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyk78pyxu.java:50)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.length() < 5) {\n            return \"No\";\n        }\n        if\
    \ (file_name.indexOf('.') == -1) {\n            return \"No\";\n        }\n  \
    \      String first = file_name.substring(0, file_name.indexOf('.'));\n      \
    \  if (first.length() < 1) {\n            return \"No\";\n        }\n        String\
    \ last = file_name.substring(file_name.indexOf('.') + 1);\n        if (!last.equals(\"\
    txt\") && !last.equals(\"exe\") && !last.equals(\"dll\")) {\n            return\
    \ \"No\";\n        }\n        int i = 0;\n        int count = 0;\n        for\
    \ (i = 0; i < first.length(); i++) {\n            if (!Character.isLetter(first.charAt(i)))\
    \ {\n                return \"No\";\n            }\n        }\n        for (i\
    \ = 0; i < first.length(); i++) {\n            if (Character.isDigit(first.charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        if (count > 3)\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnruvgl_7.java:60)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ digitsCount = 0;\n        boolean dotFound = false;\n        int dotIndex =\
    \ -1;\n        boolean isFirstChar = true;\n        for (int i = 0; i < file_name.length();\
    \ i++) {\n            char c = file_name.charAt(i);\n            if (c >= '0'\
    \ && c <= '9') {\n                digitsCount++;\n            } else if (c ==\
    \ '.') {\n                dotFound = true;\n                dotIndex = i;\n  \
    \          } else if (isFirstChar) {\n                if (!((c >= 'a' && c <=\
    \ 'z') || (c >= 'A' && c <= 'Z'))) {\n                    return \"No\";\n   \
    \             }\n                isFirstChar = false;\n            }\n       \
    \ }\n        if (digitsCount > 3) {\n            return \"No\";\n        }\n \
    \       if (!dotFound) {\n            return \"No\";\n        }\n        if (dotIndex\
    \ == 0) {\n            return \"No\";\n        }\n        String ext = file_name.substring(dotIndex\
    \ + 1);\n        if (!ext.equals(\"txt\") && !ext.equals(\"exe\") && !ext.equals(\"\
    dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4b6lbj03.java:59)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ count = 0;\n        for (int i = 0; i < file_name.length(); i++) {\n       \
    \     char c = file_name.charAt(i);\n            if ('0' <= c && c <= '9') {\n\
    \                count += 1;\n            }\n        }\n        if (count > 3)\
    \ {\n            return \"No\";\n        }\n        int dot_idx = file_name.indexOf('.');\n\
    \        if (dot_idx == -1) {\n            return \"No\";\n        }\n       \
    \ String before_dot = file_name.substring(0, dot_idx);\n        String after_dot\
    \ = file_name.substring(dot_idx + 1);\n        if (before_dot.length() == 0) {\n\
    \            return \"No\";\n        }\n        if (after_dot.length() == 0) {\n\
    \            return \"No\";\n        }\n        char ch = before_dot.charAt(0);\n\
    \        if (!('a' <= ch && ch <= 'z') && !('A' <= ch && ch <= 'Z')) {\n     \
    \       return \"No\";\n        }\n        String[] exts = {\"txt\", \"exe\",\
    \ \"dll\"};\n        for (String ext : exts) {\n            if (ext.equals(after_dot))\
    \ {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ num_counter = 0;\n        int dot_counter = 0;\n        String res = \"No\"\
    ;\n        String file_name_without_ext = file_name.substring(0, file_name.indexOf(\"\
    .\"));\n        if (Character.isLetter(file_name_without_ext.charAt(0))) {\n \
    \           for (int i = 0; i < file_name.length(); i++) {\n                if\
    \ (Character.isDigit(file_name.charAt(i)))\n                    num_counter++;\n\
    \                if (file_name.charAt(i) == '.')\n                    dot_counter++;\n\
    \            }\n            if (num_counter <= 3 && dot_counter == 1) {\n    \
    \            if (file_name.contains(\".txt\") || file_name.contains(\".exe\")\
    \ || file_name.contains(\".dll\"))\n                    res = \"Yes\";\n     \
    \       }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeivmgppe.java:54)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        if\
    \ (file_name.length() < 5) {\n            return \"No\";\n        }\n        String\
    \ fname = file_name.substring(0, file_name.indexOf(\".\"));\n        String fext\
    \ = file_name.substring(file_name.indexOf(\".\") + 1);\n        if (!Arrays.asList(\"\
    txt\", \"exe\", \"dll\").contains(fext)) {\n            return \"No\";\n     \
    \   }\n        if (fname.matches(\".*\\\\d+.*\")) {\n            return \"No\"\
    ;\n        }\n        return \"Yes\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpldgsg5ca.java:42)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Your code here\n        if (file_name.matches(\"[a-zA-Z]*\\\\d{0,3}[.]{1}[txt|exe|dll]{3}\"\
    )) {\n          return \"Yes\";\n        }\n        return \"No\";\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4ok9ues.java:35)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ regex_string = \"^[a-zA-Z][\\\\w]{1,3}\\\\.[a-zA-Z]{3}$\";\n        if (file_name.matches(regex_string))\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwol64tq.java:32)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        int\
    \ period_index = file_name.indexOf('.');\n        int digit_count = 0;\n     \
    \   for (int i = 0; i < file_name.length(); i++) {\n            if ('0' <= file_name.charAt(i)\
    \ && file_name.charAt(i) <= '9') {\n                digit_count++;\n         \
    \   }\n        }\n        String extension = file_name.substring(period_index\
    \ + 1);\n        return (Character.isLetter(file_name.charAt(0)) && \n       \
    \         (file_name.lastIndexOf('.') == period_index) && \n                (digit_count\
    \ <= 3) && \n                (new String[] {\"txt\", \"exe\", \"dll\"}).contains(extension))\
    \ ? \n            \"Yes\" : \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34zn01gd.java:35: error: cannot find symbol\n                (new\
    \ String[] {\"txt\", \"exe\", \"dll\"}).contains(extension)) ? \n            \
    \                                        ^\n  symbol:   method contains(String)\n\
    \  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ [] parts = file_name.split(\"\\\\.\");\n        String [] digits = parts[0].split(\"\
    (?<=\\\\D)(?=\\\\d)\");\n        if (parts.length != 2) {\n            return\
    \ \"No\";\n        }\n        if (digits.length > 3) {\n            return \"\
    No\";\n        }\n        if (!parts[1].equals(\"txt\") && !parts[1].equals(\"\
    exe\") && !parts[1].equals(\"dll\")) {\n            return \"No\";\n        }\n\
    \        char [] chars = parts[0].toCharArray();\n        if (chars.length < 1)\
    \ {\n            return \"No\";\n        }\n        if (!Character.isLetter(chars[0]))\
    \ {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n \
    \   public static void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtxzrdqs.java:50)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here!\n        int count = 0;\n        int dot = 0;\n      \
    \  int length = file_name.length();\n        for(int i = 0; i < length; i++){\n\
    \            if(file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9'){\n \
    \               count++;\n            }\n            if(file_name.charAt(i) ==\
    \ '.'){\n                dot++;\n            }\n        }\n        if(count >\
    \ 3 || dot != 1){\n            return \"No\";\n        }\n        String[] strs\
    \ = file_name.split(\"\\\\.\");\n        if(strs[0].length() <= 0 || (strs[0].charAt(0)\
    \ < 'a' || strs[0].charAt(0) > 'z') && (strs[0].charAt(0) < 'A' || strs[0].charAt(0)\
    \ > 'Z')){\n            return \"No\";\n        }\n        if(!strs[1].equals(\"\
    txt\") && !strs[1].equals(\"exe\") && !strs[1].equals(\"dll\")){\n           \
    \ return \"No\";\n        }\n        return \"Yes\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.fileNameCheck(tmp667kd_w0.java:43)\n\
    \tat Problem.main(tmp667kd_w0.java:74)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        String\
    \ name_parts[] = file_name.split(\"\\\\.\");\n        if (name_parts.length !=\
    \ 2) {\n            return \"No\";\n        }\n        String name = name_parts[0];\n\
    \        String extension = name_parts[1];\n        if (name.matches(\"[a-zA-Z]+[0-9]{0,3}\"\
    )) {\n            if (extension.equals(\"txt\") || extension.equals(\"exe\") ||\
    \ extension.equals(\"dll\")) {\n                return \"Yes\";\n            }\n\
    \        }\n        return \"No\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx40htzcl.java:42)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ @TODO: Your code here\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphbja8_r5.java:28)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6v6h7gj.java:27)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n    // ...\
    \ your code here ...\n        if (file_name.matches(\"[a-zA-Z]{1}[a-zA-Z0-9]{1,}\\\
    \\.txt\")) {\n            return \"Yes\";\n        }\n        else if (file_name.matches(\"\
    [a-zA-Z]{1}[a-zA-Z0-9]{1,}\\\\.exe\")) {\n            return \"Yes\";\n      \
    \  }\n        else if (file_name.matches(\"[a-zA-Z]{1}[a-zA-Z0-9]{1,}\\\\.dll\"\
    )) {\n            return \"Yes\";\n        }\n        else return \"No\";\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ppnrjns.java:40)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ your code here\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n \
    \   assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9vx3fku1.java:28)\n"
  stdout: ''
  timestamp: 1660011791
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        \n\
    \        int dotIndex = file_name.indexOf('.');\n        String firstPart = file_name.substring(0,\
    \ dotIndex);\n        String secondPart = file_name.substring(dotIndex+1);\n \
    \       if(secondPart.equals(\"txt\") || secondPart.equals(\"exe\") || secondPart.equals(\"\
    dll\")) {\n            if(firstPart.length() > 0) {\n                int count\
    \ = 0;\n                for(int i = 0; i < firstPart.length(); i++) {\n      \
    \              if(Character.isDigit(firstPart.charAt(i))) {\n                \
    \        count++;\n                    }\n                }\n                if(count\
    \ > 3) {\n                    return \"No\";\n                }\n            \
    \    else if(Character.isLetter(firstPart.charAt(0))) {\n                    return\
    \ \"Yes\";\n                }\n                else {\n                    return\
    \ \"No\";\n                }\n            }\n            else {\n            \
    \    return \"No\";\n            }\n        }\n        else {\n            return\
    \ \"No\";\n        }\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 8\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.fileNameCheck(tmplinn5qlb.java:26)\n\
    \tat Problem.main(tmplinn5qlb.java:77)\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        Pattern\
    \ pattern = Pattern.compile(\"^([a-zA-Z]{1}[0-9]{0,3})?\\\\.{1}(txt|exe|dll)$\"\
    );\n        Matcher matcher = pattern.matcher(file_name);\n        return matcher.matches()\
    \ ? \"Yes\" : \"No\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabk0unfg.java:24: error: cannot find symbol\n        Pattern pattern\
    \ = Pattern.compile(\"^([a-zA-Z]{1}[0-9]{0,3})?\\\\.{1}(txt|exe|dll)$\");\n  \
    \      ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmpabk0unfg.java:24:\
    \ error: cannot find symbol\n        Pattern pattern = Pattern.compile(\"^([a-zA-Z]{1}[0-9]{0,3})?\\\
    \\.{1}(txt|exe|dll)$\");\n                          ^\n  symbol:   variable Pattern\n\
    \  location: class Problem\n/tmp/tmpabk0unfg.java:25: error: cannot find symbol\n\
    \        Matcher matcher = pattern.matcher(file_name);\n        ^\n  symbol: \
    \  class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011800
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"\
    ))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"\
    No\")\n    public static String fileNameCheck(String file_name) {\n        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        int countDigits = 0;\n        int dotCount = 0;\n      \
    \  boolean extension = false;\n        String output = \"No\";\n        char currentChar;\n\
    \        for (int i = 0; i < file_name.length(); i++) {\n            currentChar\
    \ = file_name.charAt(i);\n            if (currentChar >= '0' && currentChar <=\
    \ '9') {\n                countDigits++;\n            }\n            if (currentChar\
    \ == '.') {\n                dotCount++;\n            }\n            if (dotCount\
    \ == 1 && (i == file_name.length() - 1)) {\n                extension = true;\n\
    \            }\n            if (dotCount == 1 && (file_name.charAt(i + 1) == 't'))\
    \ {\n                extension = true;\n            }\n            if (dotCount\
    \ == 1 && (file_name.charAt(i + 1) == 'e')) {\n                extension = true;\n\
    \            }\n            if (dotCount == 1 && (file_name.charAt(i + 1) == 'd'))\
    \ {\n                extension = true;\n            }\n        }\n        if (countDigits\
    \ > 3) {\n            output = \"No\";\n        }\n        if (dotCount > 1) {\n\
    \            output = \"No\";\n        }\n        if (file_name.charAt(0) < 'A'\
    \ || file_name.charAt(0) > 'z') {\n            output = \"No\";\n        }\n \
    \       if (file_name.charAt(0) >= 'a' && file_name.charAt(0) <= 'z') {\n    \
    \        output = \"Yes\";\n        }\n        if (file_name.charAt(0) >= 'A'\
    \ && file_name.charAt(0) <= 'Z') {\n            output = \"Yes\";\n        }\n\
    \        if (extension == false) {\n            output = \"No\";\n        }\n\
    \        return output;\n    }\n    public static void main(String[] args) {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 11\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.fileNameCheck(tmplm6ghxk_.java:43)\n\
    \tat Problem.main(tmplm6ghxk_.java:74)\n"
  stdout: ''
  timestamp: 1660011800
