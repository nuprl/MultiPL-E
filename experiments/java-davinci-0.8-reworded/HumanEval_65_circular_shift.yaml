name: HumanEval_65_circular_shift
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Circular shift the digits of the integer x, shift the digits\
  \ right by shift\n    // and return the result as a string.\n    // If shift > number\
  \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n  \
  \  // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    public\
  \ static String circularShift(long x, long shift) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        String s = Long.toString(x);\n        if (shift >= s.length())\n\
    \            return new StringBuilder(s).reverse().toString();\n        else\n\
    \            return s.substring((int) shift) + s.substring(0, (int) shift);",
  "        String s = Long.toString(x);\n        if (shift == 0) {\n            return\
    \ s;\n        }\n        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring(s.length() - (int)shift) + s.substring(0,\
    \ s.length() - (int)shift);", "        String s = Long.toString(x);\n        if\
    \ (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        int shiftInt = ((int)shift) % s.length();\n        String\
    \ s1 = s.substring(shiftInt);\n        String s2 = s.substring(0, shiftInt);\n\
    \        return s1 + s2;", "        StringBuffer out = new StringBuffer();\n \
    \       if (shift > 0) {\n            String s = \"\" + x;\n            while\
    \ (shift > s.length()) {\n                shift -= s.length();\n            }\n\
    \            if (shift == s.length()) {\n                out.append(s);\n    \
    \        } else {\n                for (int i = (int)shift; i < s.length(); i++)\
    \ {\n                    out.append(s.charAt(i));\n                }\n       \
    \         for (int i = 0; i < shift; i++) {\n                    out.append(s.charAt(i));\n\
    \                }\n            }\n        } else {\n            out.append(x);\n\
    \        }\n        return out.toString();", "        long[] digits = new long[10];\n\
    \        int digitsCount = 0;\n        for (int i = 0; i < 10; i++) {\n      \
    \      digits[i] = 0;\n        }\n        for (int i = 0; i < 10; i++) {\n   \
    \         if (x % 10 != 0) {\n                digits[digitsCount] = x % 10;\n\
    \                digitsCount++;\n            }\n            x /= 10;\n       \
    \ }\n        if (shift > digitsCount) {\n            shift = digitsCount;\n  \
    \      }\n        long[] newDigits = new long[10];\n        for (int i = 0; i\
    \ < 10; i++) {\n            newDigits[i] = 0;\n        }\n        for (int i =\
    \ 0; i < digitsCount; i++) {\n            newDigits[i] = digits[((int) (i + digitsCount\
    \ - shift)) % digitsCount];\n        }\n        String result = \"\";\n      \
    \  for (int i = 0; i < digitsCount; i++) {\n            result = String.valueOf(newDigits[i])\
    \ + result;\n        }\n        return result;", "        String s = Long.toString(x);\n\
    \        StringBuilder y = new StringBuilder();\n        for (int i = 0; i < shift;\
    \ i++) {\n            y.append(s.charAt(s.length() - 1));\n            s = s.substring(0,\
    \ s.length() - 1);\n        }\n        return y.append(s).toString();", "    \
    \    long a = x / 10;\n        long b = x % 10;\n        while (shift > 0) {\n\
    \            long c = a % 10;\n            a = a / 10;\n            b = 10 * b\
    \ + c;\n            shift = shift - 1;\n        }\n        return String.valueOf(b);",
  "        String digits = String.valueOf(x);\n        if (shift > digits.length())\
    \ {\n            return new StringBuilder(digits).reverse().toString();\n    \
    \    }\n        return (digits.substring(digits.length() - (int)shift, digits.length())\
    \ + digits.substring(0, digits.length() - (int)shift));", "        if (shift >\
    \ (log10(x) + 1)) {\n            return new StringBuilder().append(x).reverse().toString();\n\
    \        } else {\n            long left = (long) (x / pow(10, shift));\n    \
    \        long right = (long) (x % pow(10, shift));\n            return new StringBuilder().append(right).append(left).toString();\n\
    \        }", "        long shift_mod = shift % (1 + (long) (Math.log10(x)));\n\
    \        long x_base = (long) Math.pow(10, shift_mod);\n        long x_mod = x\
    \ % x_base;\n        return (Long.toString(x_mod) + Long.toString(x / x_base));",
  "        // BEGIN SOLUTION\n        long shifted = x;\n        for (int i = 0; i\
    \ < shift; i++) {\n            long last = shifted % 10;\n            shifted\
    \ /= 10;\n            shifted += last * Math.pow(10, Long.toString(shifted).length());\n\
    \        }\n        return Long.toString(shifted);\n        // END SOLUTION",
  "        String s = String.valueOf(x);\n        String r = String.valueOf(x);\n\
    \        if (shift > s.length()) {\n            r = new StringBuilder(s).reverse().toString();\n\
    \        } else {\n            r = s.substring(shift, s.length()) + s.substring(0,\
    \ shift);\n        }\n        return r;", "        String s = Long.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        if (shift == 0) {\n            return Long.toString(x);\n        }\n  \
    \      char[] digits = Long.toString(x).toCharArray();\n        if (shift >= digits.length)\
    \ {\n            reverseArray(digits);\n            return new String(digits);\n\
    \        }\n        shiftArray(digits, shift);\n        return new String(digits);",
  "        String xs = String.valueOf(x);\n        String end = xs.substring(0, Math.toIntExact(shift\
    \ % xs.length()));\n        String start = xs.substring(Math.toIntExact(shift\
    \ % xs.length()));\n        return start + end;", "        StringBuilder sb =\
    \ new StringBuilder();\n        String str = String.valueOf(x);\n        int length\
    \ = str.length();\n        if (shift > length) {\n            sb.append(str);\n\
    \            sb.reverse();\n            return sb.toString();\n        }\n   \
    \     sb.append(str.substring(shift));\n        sb.append(str.substring(0, shift));\n\
    \        return sb.toString();", "        if (shift == 0) {\n            return\
    \ Long.toString(x);\n        }\n        if (shift == 1) {\n            return\
    \ Integer.toString((int) (x % 10)) + Integer.toString((int) (x / 10));\n     \
    \   }\n        if (shift == 2) {\n            return Integer.toString((int) (x\
    \ / 10)) + Integer.toString((int) (x % 10));\n        }\n        return new StringBuilder(Long.toString(x)).reverse().toString();",
  "        // this will work even if you shift left, by modding shift by the number\
    \ of digits.\n        int digits = (int)Math.floor(Math.log10(x)) + 1;\n     \
    \   int shift_by = (int)(shift % digits);\n        String result = String.valueOf(x);\n\
    \        if (shift_by == 0) {\n            return result;\n        }\n       \
    \ String first_half = result.substring(shift_by);\n        String second_half\
    \ = result.substring(0, shift_by);\n        return first_half + second_half;",
  '        return Long.toString(x).chars().mapToObj(i -> Integer.toString((char) i)).reduce((a,
    b) -> a + b).get();', "        String s = String.valueOf(x);\n        StringBuilder\
    \ sb = new StringBuilder();\n        int len = s.length();\n        if (shift\
    \ > len) {\n            for (int i = 0; i < len; i++) {\n                sb.append(s.charAt(len\
    \ - i - 1));\n            }\n        } else {\n            sb.append(s.substring(len\
    \ - (int) shift));\n            sb.append(s.substring(0, len - (int) shift));\n\
    \        }\n        return sb.toString();", "        String strX = Long.toString(x);\n\
    \        int len = strX.length();\n        if (shift > len)\n            shift\
    \ = len;\n        String head = strX.substring(0, len - (int)shift);\n       \
    \ String tail = strX.substring(len - (int)shift);\n        return tail + head;",
  "        if (shift == 0) {\n            return Long.toString(x);\n        }\n  \
    \      String s = Long.toString(x);\n        int len = s.length();\n        int\
    \ shiftLen = (int) shift;\n        if (shiftLen >= len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        String s1 = s.substring(len\
    \ - shiftLen);\n        String s2 = s.substring(0, len - shiftLen);\n        return\
    \ s1 + s2;", "        String xStr = Long.toString(x);\n        if (shift >= xStr.length())\
    \ {\n            return (new StringBuilder(xStr)).reverse().toString();\n    \
    \    }\n        String shiftedStr = xStr.substring((int) shift);\n        String\
    \ subStr = xStr.substring(0, (int) shift);\n        return shiftedStr + subStr;",
  "        if (shift == 0) {\n            return new String(Long.toString(x));\n \
    \       }\n        String original = new String(Long.toString(x));\n        String\
    \ shifted = new String(Long.toString(x));\n        if (shift > original.length())\
    \ {\n            char[] orig = original.toCharArray();\n            char[] rev\
    \ = new char[orig.length];\n            for (int i = 0; i < orig.length; i++)\
    \ {\n                rev[i] = orig[orig.length - 1 - i];\n            }\n    \
    \        return new String(rev);\n        }\n        else {\n            char[]\
    \ orig = original.toCharArray();\n            char[] shiftarr = new char[orig.length];\n\
    \            for (int i = 0; i < orig.length; i++) {\n                shiftarr[(i\
    \ + (int) shift) % orig.length] = orig[i];\n            }\n            return\
    \ new String(shiftarr);\n        }", "        String s = Long.toString(x);\n \
    \       if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String x_string = Long.toString(x);\n        String result = x_string.substring(x_string.length()\
    \ - (int) shift) + x_string.substring(0, x_string.length() - (int) shift);\n \
    \       return result;", "        // >>> circularShift((12l), (1l))\n        //\
    \ (\"21\")\n        // >>> circularShift((12l), (2l))\n        // (\"12\")\n \
    \       String s = Long.toString(x);\n        if (shift >= s.length()) {\n   \
    \         return new StringBuilder(s).reverse().toString();\n        }\n     \
    \   return s.substring((int)shift) + s.substring(0, (int)shift);", "        List<String>\
    \ digits = new ArrayList<String>();\n        for (long i = x; i > 0; i /= 10)\
    \ {\n            digits.add(Long.toString(i % 10));\n        }\n        Collections.reverse(digits);\n\
    \        shift = shift % digits.size();\n        String result = \"\";\n     \
    \   for (int i = (int) shift; i < digits.size(); i++) {\n            result +=\
    \ digits.get(i);\n        }\n        for (int i = 0; i < shift; i++) {\n     \
    \       result += digits.get(i);\n        }\n        return result;", "      \
    \  String result = Long.toString(x);\n        if (shift > result.length()) {\n\
    \            String reversed = new StringBuilder(result).reverse().toString();\n\
    \            return reversed;\n        }\n        String first = result.substring(0,\
    \ (int)shift);\n        String second = result.substring((int)shift);\n      \
    \  return second + first;", "        long pow10 = 1;\n        while (pow10 <=\
    \ x) {\n            pow10 *= 10;\n        }\n        if (shift >= pow10) {\n \
    \           return Long.toString(x);\n        }\n        long y = x / 10 + (x\
    \ % 10) * (pow10 / 10);\n        return Long.toString(y);", "        long xf =\
    \ x;\n        long v = x;\n        while (v > 0) {\n            long digit = v\
    \ % 10;\n            if (xf > 0) {\n                xf = xf * 10;\n          \
    \  }\n            else {\n                xf = digit;\n            }\n       \
    \     v = v / 10;\n        }\n        long s = shift;\n        if (shift > 8)\
    \ {\n            s = shift % 8;\n        }\n        for (long i = 0; i < s; i++)\
    \ {\n            long d = xf % 10;\n            xf = xf / 10;\n            xf\
    \ = d * Math.round(Math.pow(10, Long.toString(xf).length())) + xf;\n        }\n\
    \        return Long.toString(xf);", "        String s = Long.toString(x);\n \
    \       if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String f = s.substring(0, (int)shift);\n        String b =\
    \ s.substring((int)shift);\n        return b + f;", "        String s = Long.toString(x);\n\
    \        int n = s.length();\n        if (shift >= n)\n            return new\
    \ StringBuilder(s).reverse().toString();\n        String k = s.substring(n - (int)\
    \ shift, n);\n        String m = s.substring(0, n - (int) shift);\n        return\
    \ k + m;", "        String xs = Long.toString(x);\n        StringBuilder sb =\
    \ new StringBuilder();\n        int digits = xs.length();\n        int i = (int)shift;\n\
    \        while (i < digits) {\n            sb.append(xs.charAt(i));\n        \
    \    i++;\n        }\n        i = 0;\n        while (i < shift) {\n          \
    \  sb.append(xs.charAt(i));\n            i++;\n        }\n        return sb.toString();",
  "        // BEGIN SOLUTION\n        String result = \"\";\n        while (shift\
    \ > 0) {\n            String t = String.valueOf(x);\n            String f = String.valueOf(x);\n\
    \            if (t.length() <= 1) {\n                x = Long.parseLong(t);\n\
    \                break;\n            }\n            String temp = t.substring(t.length()\
    \ - 1, t.length());\n            t = t.substring(0, t.length() - 1);\n       \
    \     t = temp + t;\n            x = Long.parseLong(t);\n            shift--;\n\
    \        }\n        if (shift == 0) {\n            result = String.valueOf(x);\n\
    \        } else {\n            result = new StringBuilder(String.valueOf(x)).reverse().toString();\n\
    \        }\n        return result;\n        // END SOLUTION", "        shift =\
    \ shift % x.toString().length();\n        if (shift == 0) return x.toString();\n\
    \        if (shift == x.toString().length()) return new StringBuilder(x.toString()).reverse().toString();\n\
    \        if (shift > x.toString().length()) return new StringBuilder(x.toString()).reverse().toString();\n\
    \        return x.toString().substring(x.toString().length() - shift) + x.toString().substring(0,\
    \ x.toString().length() - shift);", "        String str = Long.toString(x);\n\
    \        if (shift >= str.length()) {\n            StringBuilder sb = new StringBuilder(str);\n\
    \            return sb.reverse().toString();\n        }\n        String firstPart\
    \ = str.substring(0, (int)shift);\n        String secondPart = str.substring((int)shift);\n\
    \        return secondPart + firstPart;", "        String str = String.valueOf(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        shift = shift % str.length();\n\
    \        for (int i = str.length() - shift; i < str.length(); i++)\n         \
    \   sb.append(str.charAt(i));\n        for (int i = 0; i < str.length() - shift;\
    \ i++)\n            sb.append(str.charAt(i));\n        return sb.toString();",
  "        String s = String.valueOf(x);\n        return s.substring(s.length() -\
    \ (int) shift, s.length()) + s.substring(0, s.length() - (int) shift);", "   \
    \     // <<< (x).toString()\n        // <<< .split(\"\")\n        // <<< .map((y))\
    \ -> y.chars()\n        // <<< .collect(Collectors.toList())\n        List<Integer>\
    \ digits = (x).toString().split(\"\").map((y) -> y.chars()).collect(Collectors.toList());\n\
    \        // <<< shift\n        // <<< digits.size()\n        int shift_mod = (int)\
    \ ((shift) % (digits.size()));\n        // <<< reverse(digits.subList(shift_mod,\
    \ digits.size()))\n        // <<< digits.subList(0, shift_mod)\n        List<Integer>\
    \ new_digits = Stream.concat(reverse(digits.subList(shift_mod, digits.size())).stream(),\
    \ digits.subList(0, shift_mod).stream()).collect(Collectors.toList());\n     \
    \   // <<< new_digits.stream()\n        // <<< .map((z)) -> Character.toString((char)\
    \ z.intValue())\n        // <<< .collect(Collectors.joining())\n        return\
    \ new_digits.stream().map((z) -> Character.toString((char) z.intValue())).collect(Collectors.joining());",
  "        if (shift == 0) return Long.toString(x);\n        return new StringBuilder(Long.toString(x)).reverse().toString();",
  "        return Long.toString(x)\n            .chars()\n            .mapToObj(i\
    \ -> (char) i)\n            .collect(Collectors.toList())\n            .stream()\n\
    \            .collect(Collectors.collectingAndThen(\n                Collectors.toCollection(()\
    \ -> new ArrayDeque<Character>()),\n                deque -> {\n             \
    \       for (int i = 0; i < shift; i++) {\n                        Character c\
    \ = deque.removeLast();\n                        deque.addFirst(c);\n        \
    \            }\n                    return deque;\n                }\n       \
    \     ))\n            .stream()\n            .map(Object::toString)\n        \
    \    .collect(Collectors.joining());", "        int n = (int)log10(x);\n     \
    \   if (shift > n)\n            return new StringBuilder().append(x).reverse().toString();\n\
    \        int i = 0;\n        while (i < shift) {\n            int lastDigit =\
    \ (int)(x % 10);\n            x /= 10;\n            x += lastDigit * (long)pow(10,\
    \ n);\n            i++;\n        }\n        return Long.toString(x);", "     \
    \   StringBuilder sb = new StringBuilder(Long.toString(x));\n        String first\
    \ = sb.substring(0, (int) shift);\n        String second = sb.substring((int)\
    \ shift);\n        sb = new StringBuilder(second + first);\n        return sb.toString();",
  "        int num_digits = numDigits(x);\n        if (shift == 0) {\n           \
    \ return String.valueOf(x);\n        } else if (shift >= num_digits) {\n     \
    \       // Shift is greater than number of digits, return number reversed.\n \
    \           return (new StringBuilder(String.valueOf(x))).reverse().toString();\n\
    \        } else {\n            // Create array of digits in the number x.\n  \
    \          int[] digits = digits(x);\n            // Shift the first half of the\
    \ digits to the end of the array.\n            int num_shift = num_digits - (int)\
    \ shift;\n            int[] shifted_digits = new int[num_digits];\n          \
    \  for (int i = 0; i < num_shift; i++) {\n                shifted_digits[i + (int)\
    \ shift] = digits[i];\n            }\n            // Shift the rest of the digits\
    \ to the front of the array.\n            for (int i = num_shift; i < num_digits;\
    \ i++) {\n                shifted_digits[i - num_shift] = digits[i];\n       \
    \     }\n            // Make shifted digits into string.\n            StringBuilder\
    \ sb = new StringBuilder();\n            for (int i = 0; i < num_digits; i++)\
    \ {\n                sb.append(shifted_digits[i]);\n            }\n          \
    \  return sb.toString();\n        }", "        String s = String.valueOf(x);\n\
    \        shift = shift % s.length();\n        return s.substring((int)shift) +\
    \ s.substring(0, (int)shift);", "        String s = Long.toString(x);\n      \
    \  String s2 = s;\n        for (int i = 0; i < shift; i++) {\n            s2 =\
    \ s2.substring(1) + s2.charAt(0);\n        }\n        return s2;", "        String\
    \ num = Long.toString(x);\n        String beg = num.substring(0, num.length()\
    \ - shift);\n        String end = num.substring(num.length() - shift);\n     \
    \   String result = end + beg;\n        if (shift > num.length()) {\n        \
    \    return new StringBuilder(result).reverse().toString();\n        }\n     \
    \   return result;", "        String s = Long.toString(x);\n        if (shift\
    \ > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        int n = s.length();\n        String res = s.substring(n -\
    \ (int)shift, n) + s.substring(0, n - (int)shift);\n        return res;", "  \
    \      String s = Long.toString(x);\n        if (shift >= s.length()) {\n    \
    \        return new StringBuilder(s).reverse().toString();\n        }\n      \
    \  return s.substring((int)shift) + s.substring(0, (int)shift);", "        long\
    \ numDigits = ((long)Math.log10(x)) + 1;\n        if (shift >= numDigits) {\n\
    \            x = new BigInteger(Long.toString(x)).reverse().longValue();\n   \
    \     } else {\n            long first = x % ((long)Math.pow(10, shift));\n  \
    \          x = x / ((long)Math.pow(10, shift));\n            x = first * ((long)Math.pow(10,\
    \ numDigits - shift)) + x;\n        }\n        return Long.toString(x);", "  \
    \      if (shift == 0) {\n            return Long.toString(x);\n        }\n  \
    \      String s = Long.toString(x);\n        if (shift >= s.length()) {\n    \
    \        return new StringBuilder(s).reverse().toString();\n        }\n      \
    \  return s.substring((int) shift) + s.substring(0, (int) shift);", "        String\
    \ x_str = Long.toString(x);\n        String x_reversed = new StringBuilder(x_str).reverse().toString();\n\
    \        int num_digits = x_str.length();\n        int mod_shift = (int)(shift\
    \ % num_digits);\n        if (mod_shift == 0) {\n            return x_str;\n \
    \       }\n        return x_reversed.substring(mod_shift) + x_reversed.substring(0,\
    \ mod_shift);", "        int numDigits = (int) Math.floor(Math.log10(x)) + 1;\n\
    \        if (shift >= numDigits) {\n            return new StringBuilder(Long.toString(x)).reverse().toString();\n\
    \        }\n        StringBuilder xAsString = new StringBuilder(Long.toString(x));\n\
    \        // insert last digit at beginning\n        xAsString.insert(0, xAsString.charAt(numDigits\
    \ - 1));\n        // remove last digit\n        xAsString.deleteCharAt(numDigits);\n\
    \        return xAsString.toString();", "        String s = String.valueOf(x);\n\
    \        String t = s.substring(s.length() - (int) shift) + s.substring(0, s.length()\
    \ - (int) shift);\n        return t;", "        String s = x + \"\";\n       \
    \ StringBuilder sb = new StringBuilder();\n        if (shift >= s.length()) {\n\
    \            for (int i = s.length() - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n\
    \            }\n            return sb.toString();\n        }\n        for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n  \
    \      }\n        sb.append(sb.toString());\n        return sb.toString().substring((int)\
    \ shift, (int) (shift + s.length()));", "        List<Long> digits = new ArrayList<Long>();\n\
    \        while (x > 0) {\n            digits.add(x % 10);\n            x /= 10;\n\
    \        }\n        if (shift > digits.size()) {\n            Collections.reverse(digits);\n\
    \            return digits.stream().map(Object::toString).collect(Collectors.joining());\n\
    \        }\n        for (int i = 0; i < shift; i++) {\n            digits.add(digits.remove(0));\n\
    \        }\n        return digits.stream().map(Object::toString).collect(Collectors.joining());",
  "        if (shift == 0) {\n            return Long.toString(x);\n        }\n  \
    \      String s = Long.toString(x);\n        int len = s.length();\n        if\
    \ (shift >= len) {\n            StringBuilder builder = new StringBuilder(s);\n\
    \            return builder.reverse().toString();\n        }\n        shift =\
    \ shift % len;\n        return s.substring((int) shift) + s.substring(0, (int)\
    \ shift);", "        String s = Long.toString(x);\n        if (shift > s.length())\
    \ {\n            return new StringBuilder(s).reverse().toString();\n        }\n\
    \        int len = s.length();\n        return new StringBuilder(s.substring(len\
    \ - (int)shift, len)).append(s.substring(0, len - (int)shift)).toString();", " \
    \       int digits = numberOfDigits(x);\n        if (shift > digits) {\n     \
    \       return reverseDigits(x);\n        }\n        long multiplier = Math.round(Math.pow(10,\
    \ shift));\n        long a = x / multiplier;\n        long b = x % multiplier;\n\
    \        return Long.toString(b) + Long.toString(a);", "        String s = Long.toString(x);\n\
    \        long n = s.length();\n        shift = shift % n;\n        if (shift ==\
    \ 0) {\n            return s;\n        }\n        return s.substring((int)shift)\
    \ + s.substring(0, (int)shift);", "        String xString = Long.toString(x);\n\
    \        int length = xString.length();\n        if (shift > length) {\n     \
    \       StringBuffer buffer = new StringBuffer(xString);\n            return buffer.reverse().toString();\n\
    \        }\n        return xString.substring((int) shift) + xString.substring(0,\
    \ (int) shift);", "        StringBuilder sb = new StringBuilder();\n        long\
    \ xc = x;\n        long digit = x % 10;\n        long reverse = 0;\n        long[]\
    \ ds = new long[20];\n        long ndigits = 0;\n        do {\n            reverse\
    \ = reverse * 10 + digit;\n            ds[(int)ndigits] = digit;\n           \
    \ ndigits++;\n            xc /= 10;\n            digit = xc % 10;\n        } while\
    \ (xc > 0);\n        if (shift > ndigits) {\n            return sb.append(reverse).toString();\n\
    \        }\n        long shiftAmount = shift % ndigits;\n        for (long i =\
    \ ndigits - shiftAmount; i < ndigits; i++) {\n            sb.append(ds[(int)i]);\n\
    \        }\n        for (long i = 0; i < ndigits - shiftAmount; i++) {\n     \
    \       sb.append(ds[(int)i]);\n        }\n        return sb.toString();", " \
    \       List<Integer> digits = new ArrayList<>();\n        int numDigits = 0;\n\
    \        long rx = x;\n        do {\n            numDigits++;\n            digits.add((int)(rx\
    \ % 10));\n            rx /= 10;\n        } while (rx > 0);\n        if (shift\
    \ >= numDigits) {\n            StringBuilder reversed = new StringBuilder();\n\
    \            for (int i = numDigits - 1; i >= 0; i--) {\n                reversed.append(digits.get(i));\n\
    \            }\n            return reversed.toString();\n        }\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = numDigits - (int)shift;\
    \ i < numDigits; i++) {\n            result.append(digits.get(i));\n        }\n\
    \        for (int i = 0; i < numDigits - (int)shift; i++) {\n            result.append(digits.get(i));\n\
    \        }\n        return result.toString();", "        if (shift == 0) return\
    \ String.valueOf(x);\n        String xStr = String.valueOf(x);\n        String\
    \ beginning = xStr.substring(0, (int)shift);\n        String end = xStr.substring((int)shift);\n\
    \        if (end.equals(\"\")) return (new StringBuilder(beginning)).reverse().toString();\n\
    \        return end + beginning;", "        String result = Long.toString(x);\n\
    \        if (shift >= result.length()) {\n            StringBuilder sb = new StringBuilder(result);\n\
    \            return sb.reverse().toString();\n        }\n        else {\n    \
    \        return result.substring((int)shift) + result.substring(0, (int)shift);\n\
    \        }", "        String s = \"\" + x;\n        StringBuilder sb = new StringBuilder();\n\
    \        if (shift > s.length()) {\n            return sb.append(s).reverse().toString();\n\
    \        }\n        return sb.append(s, (int) shift, s.length()).append(s, 0,\
    \ (int) shift).toString();", '        return new StringBuilder(String.valueOf(x)).reverse().substring((int)
    shift, (int) (String.valueOf(x).length())) + new StringBuilder(String.valueOf(x)).reverse().substring(0,
    (int) shift);', "        if (shift == 0) return Long.toString(x);\n        String\
    \ s = Long.toString(x);\n        if (shift > s.length()) return new StringBuilder(s).reverse().toString();\n\
    \        String res = s.substring(s.length() - (int)shift) + s.substring(0, s.length()\
    \ - (int)shift);\n        return res;", "        if (shift == 0) {\n         \
    \   return \"\" + x;\n        }\n        else {\n            String s = \"\" +\
    \ x;\n            int nDigits = s.length();\n            int shiftRem = (int)(shift\
    \ % nDigits);\n            String s2 = s.substring(nDigits - shiftRem) + s.substring(0,\
    \ nDigits - shiftRem);\n            return s2;\n        }", "        String s\
    \ = Long.toString(x);\n        if (shift == 0l) {\n            return s;\n   \
    \     }\n        if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String l = s.substring(0, (int) shift);\n        String r\
    \ = s.substring((int) shift);\n        return r + l;", "        String s = Long.toString(x);\n\
    \        int len = s.length();\n        if (shift >= len) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        int right = len\
    \ - (int) shift;\n        return s.substring(right) + s.substring(0, right);",
  "        if (shift <= 0) {\n            return Long.toString(x);\n        }\n  \
    \      long digits = numDigits(x);\n        shift = shift % digits;\n        if\
    \ (shift == 0) {\n            return Long.toString(x);\n        }\n        //\
    \ Reverse x to make the shift a left shift.\n        StringBuilder sb = new StringBuilder(Long.toString(x));\n\
    \        sb.reverse();\n        String xreversed = sb.toString();\n        xreversed\
    \ = xreversed.substring(shift);\n        String shiftreversed = circularShift(Long.parseLong(xreversed),\
    \ 0);\n        sb = new StringBuilder(shiftreversed);\n        sb.reverse();\n\
    \        return sb.toString();", "        if (shift > Math.log10(x)) {\n     \
    \       return new StringBuilder(Long.toString(x)).reverse().toString();\n   \
    \     }\n        String str = Long.toString(x);\n        String shifted = str.substring((int)shift,\
    \ str.length()) + str.substring(0, (int)shift);\n        return shifted;", " \
    \       int n = 0;\n        long tmp = x;\n        while (tmp > 0) {\n       \
    \     tmp /= 10;\n            n++;\n        }\n        shift %= n;\n        if\
    \ (shift == 0) {\n            return Long.toString(x);\n        }\n        int[]\
    \ a = new int[n];\n        tmp = x;\n        for (int i = 0; i < n; i++) {\n \
    \           a[i] = (int) (tmp % 10);\n            tmp /= 10;\n        }\n    \
    \    int[] b = new int[n];\n        for (int i = 0; i < n; i++) {\n          \
    \  b[(i + n - (int) shift) % n] = a[i];\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(b[i]);\n\
    \        }\n        return sb.toString();", "        // >>> circularShift((12l),\
    \ (1l))\n        // (\"21\")\n        // >>> circularShift((12l), (2l))\n    \
    \    // (\"12\")\n        // >>> circularShift((12l), (0l))\n        // (\"12\"\
    )\n        // >>> circularShift((12l), (3l))\n        // (\"21\")\n        //\
    \ >>> circularShift((12l), (4l))\n        // (\"12\")\n        // >>> circularShift((12l),\
    \ (5l))\n        // (\"21\")\n        if ((shift == 0)) {\n            return\
    \ Long.toString(x);\n        }\n        else {\n            // >>> a, b = (12l),\
    \ (1l)\n            // >>> str(a)\n            // '12'\n            // >>> len(str(a))\n\
    \            // 2\n            // >>> len(str(a)) - 1\n            // 1\n    \
    \        // >>> str(a)[(len(str(a)) - 1):]\n            // '2'\n            //\
    \ >>> str(a)[:(len(str(a)) - 1)]\n            // '1'\n            // >>> str(a)[(len(str(a))\
    \ - 1):] + str(a)[:(len(str(a)) - 1)]\n            // '21'\n            // >>>\
    \ b -= 1\n            // >>> b\n            // 0\n            // >>> str(a)[(len(str(a))\
    \ - 1):] + str(a)[:(len(str(a)) - 1)]\n            // '21'\n            // >>>\
    \ str(a)[(len(str(a)) - 1):] + str(a)[:(len(str(a)) - 1)]\n            // '21'\n\
    \            // >>> str(a)[(len(str(a)) - 1):] + str(a)[:(len(str(a)) - 1)]\n\
    \            // '21'\n            // >>> str(a)[(len(str(a)) - 1):] + str(a)[:(len(str(a))\
    \ - 1)]\n            // '21'\n            // >>> str(a)[(len(str(a)) - 1):] +\
    \ str(a)[:(len(str(a)) - 1)]\n            // '21'\n", "        String s = Long.toString(x);\n\
    \        String s2 = s;\n        StringBuilder sb = new StringBuilder();\n   \
    \     if (shift > s.length()) {\n            for (int i = s.length() - 1; i >=\
    \ 0; i--) {\n                sb.append(s.charAt(i));\n            }\n        \
    \    s2 = sb.toString();\n        } else {\n            for (int i = (int) shift;\
    \ i < s.length(); i++) {\n                sb.append(s.charAt(i));\n          \
    \  }\n            for (int i = 0; i < shift; i++) {\n                sb.append(s.charAt(i));\n\
    \            }\n            s2 = sb.toString();\n        }\n        return s2;",
  "        String s = Long.toString(x);\n        int len = s.length();\n        if\
    \ (shift >= len) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        else {\n            int newShift = (int) (shift % len);\n\
    \            return s.substring(newShift) + s.substring(0, newShift);\n      \
    \  }", "        String s = x + \"\";\n        int l = s.length();\n        if\
    \ (shift > l) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String t = s.substring(l - (int) shift);\n        String u\
    \ = s.substring(0, l - (int) shift);\n        return t + u;", "        String\
    \ x_string = Long.toString(x);\n        return shift > x_string.length() ?\n \
    \           new StringBuilder(x_string).reverse().toString() :\n            x_string.substring((int)\
    \ shift) + x_string.substring(0, (int) shift);", "        String s = Long.toString(x);\n\
    \        if (shift > s.length()) {\n            s = new StringBuilder(s).reverse().toString();\n\
    \        } else {\n            s = s.substring(s.length() - (int)shift) + s.substring(0,\
    \ s.length() - (int)shift);\n        }\n        return s;", "        int l = Long.toString(x).length();\n\
    \        return x + \"\";", "        StringBuffer buffer = new StringBuffer(Long.toString(x));\n\
    \        int shift_length = buffer.length();\n        int shift_amount = (int)shift;\n\
    \        if (shift_amount >= shift_length) {\n            buffer.reverse();\n\
    \        } else {\n            String temp = buffer.substring(0, shift_amount);\n\
    \            buffer.delete(0, shift_amount);\n            buffer.append(temp);\n\
    \        }\n        return buffer.toString();", "        long length = 0;\n  \
    \      long power = 1;\n        while (power <= x) {\n            power *= 10;\n\
    \            length += 1;\n        }\n        power /= 10;\n        if (shift\
    \ >= length) {\n            return reverse(x);\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        long y = x;\n        for (long i = 0; i <\
    \ length; i++) {\n            sb.append(y / power);\n            y %= power;\n\
    \            power /= 10;\n        }\n        sb.append(sb.substring(0, Math.toIntExact(shift)));\n\
    \        sb.delete(0, Math.toIntExact(shift));\n        return sb.toString();",
  "        String digits = \"\" + x;\n        String res = \"\";\n        long n =\
    \ digits.length();\n        if (shift >= n) {\n            for (int i = 0; i <\
    \ n; i++) {\n                res = digits.charAt(i) + res;\n            }\n  \
    \      } else {\n            res = digits.substring(0, n - shift);\n         \
    \   res = digits.substring(n - shift) + res;\n        }\n        return res;",
  "        if (shift <= 0l) {\n            return (Long.toString(x));\n        } else\
    \ {\n            int numDigits = Long.toString(x).length();\n            int shiftDigits\
    \ = Long.toString(shift).length();\n            long shiftAmount = shift % numDigits;\n\
    \            long newShift = Math.abs(shiftDigits - shiftAmount);\n          \
    \  char[] chars = (Long.toString(x)).toCharArray();\n            Collections.rotate(Arrays.asList(chars),\
    \ (int)newShift);\n            return (new String(chars));\n        }", "    \
    \    if (shift == 0) return Long.toString(x);\n        if (shift > numberOfDigits(x))\
    \ {\n            return new StringBuilder(Long.toString(x)).reverse().toString();\n\
    \        }\n        String s = Long.toString(x);\n        String shiftedString\
    \ = s.substring((int)shift) + s.substring(0, (int)shift);\n        return shiftedString;",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        sb.append(x % 10);\n            x /= 10;\n        }\n        String s\
    \ = sb.toString();\n        if (shift > s.length()) {\n            return new\
    \ StringBuilder(s).reverse().toString();\n        }\n        return s.substring(s.length()\
    \ - (int) shift) + s.substring(0, s.length() - (int) shift);", "        String\
    \ s = String.valueOf(x);\n        int n = s.length();\n        // If shift > number\
    \ of digits, just return digits reversed.\n        if (shift >= n) {\n       \
    \     return new StringBuilder(s).reverse().toString();\n        }\n        int\
    \ shift2 = (int)shift;\n        // Circular shift to the right by shift digits.\n\
    \        return s.substring(n - shift2) + s.substring(0, n - shift2);", "    \
    \    String ret = Long.toString(x);\n        int len = ret.length();\n       \
    \ if (shift >= len)\n            return new StringBuilder(ret).reverse().toString();\n\
    \        else {\n            shift = shift % len;\n            String left = ret.substring(0,\
    \ (int)shift);\n            String right = ret.substring((int)shift);\n      \
    \      return right + left;\n        }", "        long numDigits = (long)Math.floor(Math.log10(x)\
    \ + 1);\n        shift = shift % numDigits;\n        if (shift == 0) return Long.toString(x);\n\
    \        long right = x % (long)Math.pow(10, shift);\n        long left = x /\
    \ (long)Math.pow(10, shift);\n        if (right == 0) return new StringBuilder(Long.toString(left)).reverse().toString();\n\
    \        return Long.toString(right) + Long.toString(left);", "        List<String>\
    \ digits = new ArrayList<String>();\n        while (x > 0) {\n            digits.add(String.valueOf(x\
    \ % 10));\n            x /= 10;\n        }\n        for (int i = 0; i < shift;\
    \ i++) {\n            digits.add(digits.remove(0));\n        }\n        String\
    \ result = \"\";\n        for (String digit : digits) {\n            result +=\
    \ digit;\n        }\n        return result;", "        String s = String.valueOf(x);\n\
    \        char[] a = s.toCharArray();\n        int l = a.length;\n        if (shift\
    \ == l) {\n            String r = new StringBuilder(s).reverse().toString();\n\
    \            return r;\n        }\n        char[] b = new char[l];\n        for\
    \ (int i = 0; i < l; i++) {\n            int index = (i + (int) shift) % l;\n\
    \            b[index] = a[i];\n        }\n        String result = new String(b);\n\
    \        return result;", "        String s = Long.toString(x);\n        String\
    \ result = \"\";\n        if (shift > s.length()) {\n            for (int i =\
    \ 0; i < s.length(); i++) {\n                result = s.charAt(i) + result;\n\
    \            }\n        } else {\n            for (int i = 0; i < s.length();\
    \ i++) {\n                result += s.charAt((int) (i + shift) % s.length());\n\
    \            }\n        }\n        return result;", "        long numDigits =\
    \ (long)Math.log10(x) + 1;\n        long shiftRight = shift % numDigits;\n   \
    \     long shiftLeft = numDigits - shiftRight;\n        long y = x;\n        long\
    \ power = (long)Math.pow(10, shiftLeft);\n        while (y >= power) {\n     \
    \       y = y / 10;\n        }\n        y = (y * (long)Math.pow(10, shiftRight))\
    \ + (x % (long)Math.pow(10, shiftRight));\n        return Long.toString(y);",
  "        ArrayList<Long> x_digits = new ArrayList<Long>();\n        for (; x !=\
    \ 0; x /= 10) {\n            x_digits.add(x % 10);\n        }\n        Collections.reverse(x_digits);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = (int) (shift\
    \ % x_digits.size()); i < x_digits.size(); i++) {\n            sb.append(x_digits.get(i));\n\
    \        }\n        for (int i = 0; i < shift % x_digits.size(); i++) {\n    \
    \        sb.append(x_digits.get(i));\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(Long.toString(x));\n        if (shift\
    \ < sb.length()) {\n            sb.append(sb.substring(0, (int)shift));\n    \
    \        sb.delete(0, (int)shift);\n        } else {\n            sb.reverse();\n\
    \        }\n        return sb.toString();", "        long i = shift;\n       \
    \ String s = String.valueOf(x);\n        String t = String.valueOf(x);\n     \
    \   if (s.length() <= shift) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return t.substring((int)i) + t.substring(0, (int)i);", " \
    \       if (shift == 0) {\n            return Long.toString(x);\n        }\n \
    \       String s = Long.toString(x);\n        int len = s.length();\n        if\
    \ (shift >= len) {\n            StringBuilder result = new StringBuilder();\n\
    \            for (int i = len - 1; i >= 0; i--) {\n                result.append(s.charAt(i));\n\
    \            }\n            return result.toString();\n        }\n        String\
    \ result = s.substring(len - (int)shift) + s.substring(0, len - (int)shift);\n\
    \        return result;", "        String s = Long.toString(x);\n        String\
    \ first = s.substring(0, s.length() - shift.intValue());\n        String second\
    \ = s.substring(s.length() - shift.intValue());\n        return second + first;",
  "        if (shift == 0) {\n            return Long.toString(x);\n        }\n  \
    \      else {\n            long n = x;\n            int digits = 0;\n        \
    \    while (n > 0) {\n                n /= 10;\n                digits++;\n  \
    \          }\n            // shift digits as if shift > digits\n            shift\
    \ %= digits;\n            long front = x / ((long)Math.pow(10, digits - shift));\n\
    \            long back = x % ((long)Math.pow(10, digits - shift));\n         \
    \   return Long.toString(back) + Long.toString(front);\n        }", "        long\
    \ power = (long) Math.pow(10, shift);\n        return x % power + \"\" + x / power;",
  "        String s = new StringBuffer(Long.toString(x)).reverse().toString();\n \
    \       for (int i = 0; i < shift; i++) {\n            char first = s.charAt(0);\n\
    \            s = s.substring(1) + first;\n        }\n        return s;", "   \
    \     String str = Long.toString(x);\n        if (shift >= str.length()) {\n \
    \           return new StringBuilder(str).reverse().toString();\n        }\n \
    \       String str_shift = str.substring(0, str.length() - (int)shift);\n    \
    \    String str_end = str.substring(str.length() - (int)shift);\n        return\
    \ str_end + str_shift;", "        int len = (int) (Math.log10(x) + 1);\n     \
    \   int s = (int) (shift % len);\n        if (s > 0) {\n            return reverse((reverse(x)\
    \ >>> s));\n        } else {\n            return Long.toString(x);\n        }",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        sb.append(x % 10);\n            x /= 10;\n        }\n        String result\
    \ = sb.toString();\n        if (shift > result.length())\n            return new\
    \ StringBuilder(result).reverse().toString();\n        else\n            return\
    \ result.substring(result.length() - (int) shift) + result.substring(0, result.length()\
    \ - (int) shift);", "        // BEGIN_SOLUTION\n        int digits = (int) Math.floor(Math.log10(x))\
    \ + 1;\n        if (shift >= digits) {\n            return reverse(Long.toString(x));\n\
    \        }\n        String s = Long.toString(x);\n        String l = s.substring(0,\
    \ (int)shift);\n        String r = s.substring((int)shift);\n        return r\
    \ + l;\n        // END_SOLUTION", "        String rv = Long.toString(x);\n   \
    \     StringBuffer rvBuffer = new StringBuffer(rv);\n        StringBuffer shiftBuffer\
    \ = new StringBuffer(Long.toString(shift));\n        int index = rvBuffer.length()\
    \ - shiftBuffer.length();\n        rvBuffer.insert(index, ' ');\n        return\
    \ rvBuffer.toString();", '        return x == 0 ? "0" : new StringBuilder(String.valueOf(x)).reverse().toString();',
  "        int numDigits = (int) Math.log10(x) + 1;\n        if (shift > numDigits)\
    \ {\n            return new StringBuilder(Long.toString(x)).reverse().toString();\n\
    \        }\n        String xStr = Long.toString(x);\n        xStr = xStr.substring((int)\
    \ shift) + xStr.substring(0, (int) shift);\n        return xStr;", "        char[]\
    \ digits = (Long.toString(x)).toCharArray();\n        char[] shiftedDigits = new\
    \ char[digits.length];\n        long numDigits = digits.length;\n        shift\
    \ = shift % numDigits;\n        if (shift == 0) {\n            return Long.toString(x);\n\
    \        }\n        for (long i = 0; i < numDigits; i++) {\n            long s\
    \ = i - shift;\n            if (s < 0) {\n                s = numDigits + s;\n\
    \            }\n            shiftedDigits[((int) s)] = digits[((int) i)];\n  \
    \      }\n        return new String(shiftedDigits);", "        String result =\
    \ \"\";\n        if (shift == 0) {\n            result = Long.toString(x);\n \
    \       } else {\n            result = Long.toString(x);\n            while (shift\
    \ > 0) {\n                char first = result.charAt(0);\n                result\
    \ = result.substring(1);\n                result = result + first;\n         \
    \       shift--;\n            }\n        }\n        return result;", "       \
    \ long numDigits = log10(x);\n        long divisor = shift - numDigits;\n    \
    \    if (divisor > 0) {\n            return (new StringBuilder(String.valueOf(x))).reverse().toString();\n\
    \        }\n        String xStr = String.valueOf(x);\n        String xStrShifted\
    \ = xStr.substring((int) shift, xStr.length());\n        xStrShifted += xStr.substring(0,\
    \ (int) shift);\n        return xStrShifted;", "        String s = \"\" + x;\n\
    \        shift = shift % s.length();\n        if (shift == 0) {\n            return\
    \ s;\n        }\n        char[] array = s.toCharArray();\n        for (int i =\
    \ 0; i < shift; i++) {\n            char temp = array[array.length - 1];\n   \
    \         for (int j = array.length - 1; j > 0; j--) {\n                array[j]\
    \ = array[j - 1];\n            }\n            array[0] = temp;\n        }\n  \
    \      return new String(array);", "        String s = String.valueOf(x);\n  \
    \      if (shift >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        return Long.toString(x).substring(shift.intValue())\n            + Long.toString(x).substring(0,\
    \ shift.intValue());", "        long shiftMod = shift % Integer.toString(x).length();\n\
    \        StringBuilder sb = new StringBuilder(Long.toString(x));\n        for\
    \ (int i = 0; i < shiftMod; i++) {\n            sb.insert(0, sb.charAt(sb.length()\
    \ - 1));\n            sb.deleteCharAt(sb.length() - 1);\n        }\n        return\
    \ sb.toString();", "        String xStr = Long.toString(x);\n        String xStrReversed\
    \ = new StringBuilder(xStr).reverse().toString();\n        long xStrLength = xStr.length();\n\
    \        long xReversedStrLength = xStrReversed.length();\n        long shiftMod\
    \ = shift % xStrLength;\n        long shiftModReversed = shift % xReversedStrLength;\n\
    \        if (shiftMod == 0) {\n            return xStr;\n        } else if (shiftMod\
    \ == xStrLength) {\n            return xStrReversed;\n        } else {\n     \
    \       String xStrPrefix = xStr.substring(0, Long.valueOf(xStrLength - shiftMod).intValue());\n\
    \            String xStrSuffix = xStr.substring(Long.valueOf(xStrLength - shiftMod).intValue(),\
    \ Long.valueOf(xStrLength).intValue());\n            return xStrSuffix + xStrPrefix;\n\
    \        }", "        if (shift == 0) {\n            return String.valueOf(x);\n\
    \        }\n        String s = String.valueOf(x);\n        if (shift >= s.length())\
    \ {\n            StringBuilder sb = new StringBuilder(s);\n            return\
    \ sb.reverse().toString();\n        }\n        String head = s.substring(0, (int)shift);\n\
    \        String tail = s.substring((int)shift);\n        return tail + head;",
  "        String s = Long.toString(x);\n        if (shift >= s.length()) {\n    \
    \        return new StringBuilder(s).reverse().toString();\n        }\n      \
    \  return s.substring((int)shift) + s.substring(0, (int)shift);", "        StringBuilder\
    \ sb = new StringBuilder(Long.toString(x));\n        int n = sb.length();\n  \
    \      int s = (int) (shift % n);\n        if (s == 0) return sb.toString();\n\
    \        return sb.substring(n - s) + sb.substring(0, n - s);", "        int numDigits\
    \ = (int) Math.floor(Math.log10(x)) + 1;\n        if (shift >= numDigits) {\n\
    \            return new StringBuilder(Long.toString(x)).reverse().toString();\n\
    \        }\n        long[] xdigits = new long[numDigits];\n        for (int i\
    \ = 0; i < numDigits; i++) {\n            xdigits[i] = x % 10;\n            x\
    \ /= 10;\n        }\n        long[] ydigits = new long[numDigits];\n        for\
    \ (int i = 0; i < numDigits; i++) {\n            ydigits[(i + (int) shift) % numDigits]\
    \ = xdigits[i];\n        }\n        StringBuilder y = new StringBuilder();\n \
    \       for (int i = 0; i < numDigits; i++) {\n            y.append(Long.toString(ydigits[i]));\n\
    \        }\n        return y.toString();", "        String digits = Long.toString(x);\n\
    \        if (shift > digits.length()) {\n            return new StringBuilder(digits).reverse().toString();\n\
    \        }\n        return digits.substring((int)shift) + digits.substring(0,\
    \ (int)shift);", "        String number = String.valueOf(x);\n        String part2\
    \ = number.substring(0, (int) shift);\n        String part1 = number.substring((int)\
    \ shift);\n        String reversed = new StringBuilder(part1).reverse().toString();\n\
    \        String result = part1 + part2;\n        if (shift > number.length())\
    \ {\n            return reversed;\n        }\n        return result;", "     \
    \   String digits = Long.toString(x);\n        String result = digits;\n     \
    \   if (shift > digits.length()) {\n            StringBuilder sb = new StringBuilder(digits);\n\
    \            result = sb.reverse().toString();\n        } else {\n           \
    \ for (int i = 0; i < shift; i++) {\n                result = result.substring(1)\
    \ + result.charAt(0);\n            }\n        }\n        return result;", "  \
    \      String s = Long.toString(x);\n        int n = s.length();\n        shift\
    \ = shift % n;\n        if (shift == 0) {\n            return s;\n        }\n\
    \        if (shift < 0) {\n            shift = shift + n;\n        }\n       \
    \ char[] chs = s.toCharArray();\n        reverse(chs, 0, n - shift - 1);\n   \
    \     reverse(chs, n - shift, n - 1);\n        reverse(chs, 0, n - 1);\n     \
    \   return new String(chs);", "        String str = Long.toString(x);\n      \
    \  if (shift < str.length()) {\n            String shifted = str.substring((int)shift)\
    \ + str.substring(0, (int)shift);\n            return shifted;\n        } else\
    \ {\n            String shifted = new StringBuilder(str).reverse().toString();\n\
    \            return shifted;\n        }", "        String s = Long.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int) shift) + s.substring(0, (int) shift);",
  "        StringBuilder result = new StringBuilder();\n        String xs = Long.toString(x);\n\
    \        if (shift > xs.length()) {\n            for (int i = xs.length() - 1;\
    \ i >= 0; i--) {\n                result.append(xs.charAt(i));\n            }\n\
    \        } else {\n            result.append(xs.substring(xs.length() - (int)\
    \ shift));\n            result.append(xs.substring(0, xs.length() - (int) shift));\n\
    \        }\n        return result.toString();", "        String digits = String.valueOf(x);\n\
    \        int n = digits.length();\n        shift = shift % n;\n        if (shift\
    \ == 0) {\n            return digits;\n        }\n        String result = digits.substring(n\
    \ - shift) + digits.substring(0, n - shift);\n        return result;", "     \
    \   String X = Long.toString(x);\n        String shifted = X.substring((int)shift)\
    \ + X.substring(0, (int)shift);\n        if (shift > X.length()) {\n         \
    \   return new StringBuilder(shifted).reverse().toString();\n        }\n     \
    \   return shifted;", "        String s = Long.toString(x);\n        if (shift\
    \ >= s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        StringBuilder sb = new StringBuilder();\n        String xs = Long.toString(x);\n\
    \        while (shift >= 0) {\n            shift--;\n            if (shift >=\
    \ xs.length()) {\n                // Reverse the string\n                for (int\
    \ i = xs.length() - 1; i >= 0; i--) {\n                    sb.append(xs.charAt(i));\n\
    \                }\n                return sb.toString();\n            }\n   \
    \         sb.append(xs.charAt((int)shift));\n        }\n        return sb.toString();",
  "        String digits = String.valueOf(x);\n        StringBuilder sb = new StringBuilder();\n\
    \        int numDigits = digits.length();\n        if (shift > numDigits) {\n\
    \            return (digits.chars().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n\
    \        }\n        for (int i = (int) ((shift) % numDigits); i < numDigits; i++)\
    \ {\n            sb.append(digits.charAt(i));\n        }\n        for (int i =\
    \ 0; i < (int) ((shift) % numDigits); i++) {\n            sb.append(digits.charAt(i));\n\
    \        }\n        return sb.toString();", "        String digits = String.valueOf(x);\n\
    \        String result = \"\";\n        if (shift > digits.length()) {\n     \
    \       result = new StringBuilder(digits).reverse().toString();\n        } else\
    \ {\n            String first = digits.substring(0, (int) shift);\n          \
    \  String last = digits.substring((int) shift);\n            result = last + first;\n\
    \        }\n        return result;", "        // >>> circularShift((12l), (1l))\n\
    \        // (\"21\")\n        // >>> circularShift((12l), (2l))\n        // (\"\
    12\")\n        String string = \"\" + x;\n        StringBuilder sb = new StringBuilder(string);\n\
    \        if (shift == string.length()) {\n            return sb.reverse().toString();\n\
    \        }\n        for (int i = 0; i < shift; i++) {\n            char c = sb.charAt(0);\n\
    \            sb.deleteCharAt(0);\n            sb.append(c);\n        }\n     \
    \   return sb.toString();", '        return Long.toString(x).substring(Long.toString(x).length()
    - (int)shift, Long.toString(x).length()) + Long.toString(x).substring(0, Long.toString(x).length()
    - (int)shift);', "        String digits = Long.toString(x);\n        if (shift\
    \ > digits.length()) {\n            return new StringBuilder(digits).reverse().toString();\n\
    \        }\n        return digits.substring((int) shift) + digits.substring(0,\
    \ (int) shift);", "        String s = String.valueOf(x);\n        String t = String.valueOf(x);\n\
    \        if (s.length() < shift) {\n            char[] array = s.toCharArray();\n\
    \            int i = 0;\n            while (i < array.length / 2) {\n        \
    \        char temp = array[i];\n                array[i] = array[array.length\
    \ - i - 1];\n                array[array.length - i - 1] = temp;\n           \
    \     i += 1;\n            }\n            return String.valueOf(array);\n    \
    \    }\n        while (shift > 0) {\n            t = s.substring(1) + s.charAt(0);\n\
    \            s = t;\n            shift -= 1;\n        }\n        return t;", " \
    \       String value = Long.toString(x);\n        if (shift >= value.length())\
    \ {\n            StringBuilder sb = new StringBuilder(value);\n            return\
    \ sb.reverse().toString();\n        }\n        return value.substring((int)shift)\
    \ + value.substring(0, (int)shift);", "        String digits = String.valueOf(x);\n\
    \        String reversed = new StringBuilder(digits).reverse().toString();\n \
    \       String shifted = reversed.substring((int)shift) + reversed.substring(0,\
    \ (int)shift);\n        return new StringBuilder(shifted).reverse().toString();",
  "        String s = Long.toString(x);\n        if (shift == 0) {\n            return\
    \ s;\n        }\n        StringBuilder sb = new StringBuilder();\n        while\
    \ (shift >= s.length()) {\n            shift -= s.length();\n        }\n     \
    \   int i = s.length() - (int)shift;\n        while (i < s.length()) {\n     \
    \       sb.append(s.charAt(i));\n            i++;\n        }\n        i = 0;\n\
    \        while (i < s.length() - (int)shift) {\n            sb.append(s.charAt(i));\n\
    \            i++;\n        }\n        return sb.toString();", "        String\
    \ s = Long.toString(x);\n        String[] pieces = new String[2];\n        int\
    \ l = s.length();\n        if (shift < l) {\n            pieces[0] = s.substring(0,\
    \ (int)shift);\n            pieces[1] = s.substring((int)shift, l);\n        }\
    \ else {\n            pieces[0] = \"\";\n            pieces[1] = new StringBuilder(s).reverse().toString();\n\
    \        }\n        return pieces[1] + pieces[0];", "        String s = Long.toString(x);\n\
    \        String shiftedString = s.substring((int)shift, s.length()) + s.substring(0,\
    \ (int)shift);\n        String reversedString = new StringBuilder(shiftedString).reverse().toString();\n\
    \        return reversedString;", "        String digits = Long.toString(x);\n\
    \        // We have zero-padded, so no leading zeros.\n        int n = digits.length();\n\
    \        String first_part = \"\";\n        if (shift >= n) {\n            first_part\
    \ = new StringBuilder(digits).reverse().toString();\n        } else {\n      \
    \      first_part = digits.substring(n - (int)shift);\n        }\n        String\
    \ second_part = digits.substring(0, n - (int)shift);\n        return first_part\
    \ + second_part;", "        if (shift == 0) {\n            return \"\" + x;\n\
    \        }\n        String s = \"\" + x;\n        int len = s.length();\n    \
    \    if (shift > len) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        String head = s.substring(0, (int) (len - shift));\n     \
    \   String tail = s.substring((int) (len - shift));\n        return tail + head;",
  "        String xStr = String.valueOf(x);\n        int len = xStr.length();\n  \
    \      shift = shift % len;\n        String newXStr = xStr.substring(len - (int)shift)\
    \ + xStr.substring(0, len - (int)shift);\n        return newXStr;", "        String\
    \ digits = Long.toString(x);\n        int digitsCount = digits.length();\n   \
    \     if (shift > digitsCount) {\n            String reversed = new StringBuilder(digits).reverse().toString();\n\
    \            return reversed;\n        }\n        return digits.substring((int)\
    \ shift) + digits.substring(0, (int) shift);", "        String s = String.valueOf(x);\n\
    \        String temp = s.substring(0, (int)shift);\n        String end = s.substring((int)shift);\n\
    \        String res = end + temp;\n        if (res.length() != s.length()) {\n\
    \            return new StringBuilder(s).reverse().toString();\n        }\n  \
    \      return res;", "        if (shift == 0) {\n            return Long.toString(x);\n\
    \        }\n        String digits = Long.toString(x);\n        shift = shift %\
    \ digits.length();\n        if (shift == 0) {\n            return digits;\n  \
    \      }\n        String first = digits.substring(digits.length() - shift);\n\
    \        String second = digits.substring(0, digits.length() - shift);\n     \
    \   return first + second;", "        // BEGIN SOLUTION\n        long[] digits\
    \ = longToArray(x);\n        long[] res = new long[digits.length];\n        for\
    \ (int i = 0; i < digits.length; i++) {\n            res[(int) (i + shift) % digits.length]\
    \ = digits[i];\n        }\n        return longArrayToString(res);\n        //\
    \ END SOLUTION", "        if (shift == 0) return Long.toString(x);\n        if\
    \ (shift > Long.toString(x).length()) return new StringBuilder(Long.toString(x)).reverse().toString();\n\
    \        return (Long.toString(x).substring(Long.toString(x).length() - (int)shift,\
    \ Long.toString(x).length()) + Long.toString(x).substring(0, Long.toString(x).length()\
    \ - (int)shift));", "        long n = x;\n        if (shift > nDigits(x)) {\n\
    \            return new StringBuilder(Long.toString(x)).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        while (shift--\
    \ > 0) {\n            sb.append(Long.toString(n % 10));\n            n /= 10;\n\
    \        }\n        sb.append(Long.toString(n));\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        String s = String.valueOf(x);\n\
    \        for (int i = 0; i < s.length(); i++) {\n            sb.append(s.charAt((int)\
    \ ((i + shift) % s.length())));\n        }\n        return sb.toString();", " \
    \       if (shift == 0) {\n            return x + \"\";\n        }\n        String\
    \ st = x + \"\";\n        String newStr = st.substring((int) shift, st.length())\
    \ + st.substring(0, (int) shift);\n        return newStr;", "        int numDigits\
    \ = digitCount(x);\n        // e.g., numDigits = 3; shift = 5;\n        shift\
    \ = shift % numDigits;\n        // shift = 2;\n        String xstr = String.valueOf(x);\n\
    \        String front = xstr.substring(0, (int) shift);\n        String back =\
    \ xstr.substring((int) shift);\n        String newBack = back + front;\n     \
    \   return newBack;", "        String strX = Long.toString(x);\n        if (shift\
    \ >= strX.length())\n            return new StringBuilder(strX).reverse().toString();\n\
    \        long r = x;\n        for (int i = 0; i < shift; i++) {\n            int\
    \ lastDigit = (int) r % 10;\n            r /= 10;\n            r += lastDigit\
    \ * (long) Math.pow(10, strX.length() - 1);\n        }\n        return Long.toString(r);",
  "        String str = x + \"\";\n        if (shift >= str.length()) {\n        \
    \    return new StringBuilder(str).reverse().toString();\n        }\n        int\
    \ n = str.length();\n        // If shift is negative then add length of the number\
    \ to make it positive.\n        shift = (shift + n) % n;\n        String tmp =\
    \ str.substring(0, (int) shift);\n        String result = str.substring((int)\
    \ shift) + tmp;\n        return result;", "        String s = Long.toString(x);\n\
    \        char[] ar = s.toCharArray();\n        for (int i = 0; i < shift; i++)\
    \ {\n            char t = ar[ar.length - 1];\n            for (int j = ar.length\
    \ - 1; j > 0; j--) {\n                ar[j] = ar[j - 1];\n            }\n    \
    \        ar[0] = t;\n        }\n        return new String(ar);", "        List<Long>\
    \ digits = new ArrayList<Long>();\n        long x2 = x;\n        while (x2 > 0)\
    \ {\n            digits.add(x2 % 10);\n            x2 /= 10;\n        }\n    \
    \    Collections.reverse(digits);\n        StringBuilder sb = new StringBuilder();\n\
    \        long index = shift % digits.size();\n        while (index < digits.size())\
    \ {\n            sb.append(digits.get((int) index));\n            index++;\n \
    \       }\n        index = 0;\n        while (index < shift % digits.size()) {\n\
    \            sb.append(digits.get((int) index));\n            index++;\n     \
    \   }\n        return sb.toString();", "        String s = Long.toString(x);\n\
    \        String result = \"\";\n        if (shift > s.length()) {\n          \
    \  for (int i = s.length() - 1; i >= 0; i--) {\n                result += s.charAt(i);\n\
    \            }\n        } else {\n            result = s.substring(s.length()\
    \ - shift) + s.substring(0, s.length() - shift);\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        String xstr = Long.toString(x);\n\
    \        if (shift >= xstr.length())\n            sb.append(new StringBuilder(xstr).reverse().toString());\n\
    \        else {\n            sb.append(xstr.substring(xstr.length() - (int)shift));\n\
    \            sb.append(xstr.substring(0, xstr.length() - (int)shift));\n     \
    \   }\n        return sb.toString();", "        if (shift == 0) {\n          \
    \  return Long.toString(x);\n        }\n        String s = Long.toString(x);\n\
    \        shift = shift % s.length();\n        if (shift == 0) {\n            return\
    \ s;\n        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        int len = s.length();\n        if\
    \ (shift > len) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String s = Long.toString(x);\n        while (shift >= s.length()) shift\
    \ -= s.length();\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        int length = (int) Math.floor(Math.log10(x) + 1);\n        shift = shift\
    \ % length;\n        if (shift == 0)\n            return Long.toString(x);\n \
    \       else if (shift < 0)\n            shift = length + shift;\n        BigInteger\
    \ bi = BigInteger.valueOf(x);\n        BigInteger new_bi = bi.divide(BigInteger.TEN.pow(length\
    \ - shift)).add(bi.mod(BigInteger.TEN.pow(length - shift)).multiply(BigInteger.TEN.pow(shift)));\n\
    \        return new_bi.toString();", "        String digits = String.valueOf(x);\n\
    \        long shiftMod = shift % digits.length();\n        if (shiftMod == 0)\
    \ {\n            return digits;\n        }\n        int index = digits.length()\
    \ - (int)shiftMod;\n        return digits.substring(index) + digits.substring(0,\
    \ index);", '        return Util.circularShift(x, shift).toString();', "     \
    \   String digits = String.valueOf(x);\n        if (shift > digits.length()) {\n\
    \            return new StringBuilder(digits).reverse().toString();\n        }\n\
    \        String left = digits.substring(0, (int)shift);\n        String right\
    \ = digits.substring((int)shift);\n        return right + left;", "        //\
    \ >>> circularShift((12l), (1l))\n        // (\"21\")\n        // >>> circularShift((12l),\
    \ (2l))\n        // (\"12\")\n        String y = Long.toString(x);\n        char[]\
    \ a = y.toCharArray();\n        String z = \"\";\n        for (int i = a.length\
    \ - shift; i < a.length; i++) {\n            z += a[i];\n        }\n        for\
    \ (int i = 0; i < a.length - shift; i++) {\n            z += a[i];\n        }\n\
    \        return z;", "        String shiftString = String.valueOf(shift);\n  \
    \      String reversedX = String.valueOf(new StringBuilder(String.valueOf(x)).reverse());\n\
    \        if (shift > reversedX.length()) {\n            return reversedX;\n  \
    \      }\n        return reversedX.substring(0, shiftString.length()) + reversedX.substring(shiftString.length());",
  "        String digitStr = String.valueOf(x);\n        char[] digits = digitStr.toCharArray();\n\
    \        int len = digits.length;\n        int shiftLen = (int) (shift % len);\n\
    \        if (shiftLen == 0) {\n            return digitStr;\n        }\n     \
    \   char[] newDigits = new char[len];\n        for (int i = 0; i < len; i++) {\n\
    \            newDigits[i] = digits[(i + shiftLen) % len];\n        }\n       \
    \ return new String(newDigits);", "        List<String> digits = Arrays.asList(Long.toString(x).split(\"\
    \"));\n        Collections.rotate(digits, digits.size() - (int)shift);\n     \
    \   return digits.stream().collect(Collectors.joining());", "        if (shift\
    \ == 0) {\n            return Long.toString(x);\n        }\n        String str\
    \ = Long.toString(x);\n        String reversed = new StringBuilder(str).reverse().toString();\n\
    \        String prefix = reversed.substring(0, (int)shift);\n        String suffix\
    \ = reversed.substring((int)shift);\n        String shifted = new StringBuilder(suffix).append(prefix).toString();\n\
    \        return new StringBuilder(shifted).reverse().toString();", "        String\
    \ str = String.valueOf(x);\n        String a = str.substring(0,(int)(str.length()\
    \ - shift));\n        String b = str.substring((int)(str.length() - shift));\n\
    \        return b + a;", "        String str = Long.toString(x);\n        if (shift\
    \ > str.length()) {\n            return new StringBuilder(str).reverse().toString();\n\
    \        }\n        return str.substring((int) shift) + str.substring(0, (int)\
    \ shift);", "        if (shift == 0) return Long.toString(x);\n        if (shift\
    \ == 1) return Long.toString(x / 10) + Long.toString(x % 10);\n        if (shift\
    \ == 2) return Long.toString(x / 100) + Long.toString(x % 100);\n        if (shift\
    \ == 3) return Long.toString(x / 1000) + Long.toString(x % 1000);\n        return\
    \ \"\";", "        String s = \"\" + x;\n        if (shift > s.length())\n   \
    \         s = new StringBuilder(s).reverse().toString();\n        else {\n   \
    \         s = s.substring(s.length() - (int) shift) + s.substring(0, s.length()\
    \ - (int) shift);\n        }\n        return s;", '        return Problem.reverse(String.valueOf(x)).substring(0,
    (int) shift).concat(Problem.reverse(String.valueOf(x)).substring((int) shift)).concat(Problem.reverse(String.valueOf(x)));',
  "        if (shift <= 0) {\n            return Long.toString(x);\n        }\n  \
    \      int n = Long.toString(x).length();\n        shift = shift % n;\n      \
    \  return Long.toString(x / (long)Math.pow(10, shift)\n                      \
    \      + x % (long)Math.pow(10, shift) * (long)Math.pow(10, n - shift));", " \
    \       String s = x + \"\";\n        int len = s.length();\n        if (shift\
    \ >= len) {\n            return new StringBuilder(s).reverse().toString();\n \
    \       }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        String r = Long.toString(x);\n        String r2 = r.substring(r.length()\
    \ - 1, r.length()) + r.substring(0, r.length() - 1);\n        if (shift > r.length())\
    \ {\n            return new StringBuilder(r).reverse().toString();\n        }\n\
    \        return r2;", "        String s = Long.toString(x);\n        String copy\
    \ = s;\n        String result = \"\";\n        while (shift > s.length()) {\n\
    \            shift -= s.length();\n        }\n        if (shift == 0) {\n    \
    \        return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n\
    \            result += s.charAt(((int) shift + i) % s.length());\n        }\n\
    \        return result;", "        String s = String.valueOf(x);\n        String\
    \ ret = \"\";\n        if (shift >= s.length()) {\n            for (int i = s.length()\
    \ - 1; i >= 0; i--) {\n                ret += s.charAt(i);\n            }\n  \
    \      } else {\n            for (int i = (int) shift; i < s.length(); i++) {\n\
    \                ret += s.charAt(i);\n            }\n            for (int i =\
    \ 0; i < shift; i++) {\n                ret += s.charAt(i);\n            }\n \
    \       }\n        return ret;", "        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(x);\n        if (shift >= sb.length()) {\n            return\
    \ sb.reverse().toString();\n        }\n        return sb.substring(sb.length()\
    \ - (int)shift) + sb.substring(0, sb.length() - (int)shift);", "        String\
    \ r = Long.toString(x);\n        String p = r.substring(r.length() - Long.valueOf(shift).intValue(),\
    \ r.length());\n        String s = r.substring(0, r.length() - Long.valueOf(shift).intValue());\n\
    \        return p + s;", "        if (shift == 0) {\n            return Long.toString(x);\n\
    \        }\n        String string = Long.toString(x);\n        int length = string.length();\n\
    \        shift = shift % length;\n        if (shift == 0) {\n            return\
    \ string;\n        }\n        String reversed = string.substring(length - shift)\
    \ + string.substring(0, length - shift);\n        return reversed;", "       \
    \ BigInteger bx = BigInteger.valueOf(x);\n        long power = bx.bitLength()\
    \ - 1;\n        shift = shift % (power + 1);\n        BigInteger mask = BigInteger.valueOf(1).shiftLeft((int)\
    \ power + 1).subtract(BigInteger.ONE);\n        BigInteger shifted = (bx.shiftRight((int)\
    \ shift).or(bx.shiftLeft((int) (power + 1 - shift))));\n        return shifted.and(mask).toString();",
  "        String s = String.valueOf(x);\n        if (shift < s.length()) {\n    \
    \        return s.substring((int)shift) + s.substring(0, (int)shift);\n      \
    \  } else {\n            return new StringBuilder(s).reverse().toString();\n \
    \       }", "        if (shift == 0) {\n            return Long.toString(x);\n\
    \        }\n        if (shift > Long.toString(x).length()) {\n            return\
    \ new StringBuilder(Long.toString(x)).reverse().toString();\n        }\n     \
    \   char[] digits = Long.toString(x).toCharArray();\n        for (int i = 0; i\
    \ < shift; i++) {\n            char last = digits[digits.length - 1];\n      \
    \      System.arraycopy(digits, 0, digits, 1, digits.length - 1);\n          \
    \  digits[0] = last;\n        }\n        return new String(digits);", "      \
    \  long digits = Long.toString(x).length();\n        if (shift > digits)\n   \
    \         return new StringBuilder(Long.toString(x)).reverse().toString();\n \
    \       else\n            return Long.toString(x).substring((int) shift) + Long.toString(x).substring(0,\
    \ (int) shift);", "        String s = String.valueOf(x);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            int index = (i + (int) shift) % s.length();\n            sb.append(s.charAt(index));\n\
    \        }\n        return sb.toString();", "        String s = Long.toString(x);\n\
    \        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        return s.substring((int)shift) + s.substring(0, (int)shift);",
  "        // >>> circularShift((12l), (1l))\n        // (\"21\")\n        if (shift\
    \ == 1) {\n            return \"\" + (x % 10) + (x / 10);\n        }\n       \
    \ // >>> circularShift((12l), (2l))\n        // (\"12\")\n        if (shift ==\
    \ 2) {\n            return \"\" + x;\n        }\n        return \"\" + x;", " \
    \       String s = String.valueOf(x);\n        if (shift >= s.length())\n    \
    \        return new StringBuilder(s).reverse().toString();\n        return s.substring((int)shift)\
    \ + s.substring(0, (int)shift);", "        if (shift > countDigits(x))\n     \
    \       return reverseDigits(x);\n        long n = x;\n        for (long i = 0;\
    \ i < shift; i++) {\n            long dig = n % 10;\n            n = n / 10;\n\
    \            n = 10 * dig + n;\n        }\n        return Long.toString(n);",
  "        String s = String.valueOf(x);\n        StringBuilder result = new StringBuilder();\n\
    \        int length = s.length();\n        if (shift > length) {\n           \
    \ for (int i = length - 1; i >= 0; i--) {\n                result.append(s.charAt(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < length; i++)\
    \ {\n                result.append(s.charAt((int) ((i + shift) % length)));\n\
    \            }\n        }\n        return result.toString();", "        String\
    \ s = String.valueOf(x);\n        if (shift >= s.length()) {\n            String\
    \ rev = new StringBuilder(s).reverse().toString();\n            return rev;\n\
    \        }\n        String res = s.substring(s.length() - (int)shift) + s.substring(0,\
    \ s.length() - (int)shift);\n        return res;", '        return Long.toString(Long.parseLong(Long.toString(x).substring(Long.toString(x).length()
    - Long.toString(shift).length())) + (Long.parseLong(Long.toString(x).substring(0,
    Long.toString(x).length() - Long.toString(shift).length())) * Math.pow(10, Long.toString(shift).length())));',
  "        String s = String.valueOf(x);\n        int len = s.length();\n        int\
    \ shiftMod = (int)(shift % len);\n        if (shiftMod == 0) {\n            return\
    \ s;\n        }\n        char[] a = s.toCharArray();\n        for (int i = 0;\
    \ i < shiftMod; i++) {\n            char t = a[len - 1];\n            for (int\
    \ j = len - 1; j > 0; j--) {\n                a[j] = a[j - 1];\n            }\n\
    \            a[0] = t;\n        }\n        return new String(a);"]
stop_tokens:
- "\n    }\n"
