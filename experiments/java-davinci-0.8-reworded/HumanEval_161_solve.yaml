name: HumanEval_161_solve
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
  ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    public static String solve(String s) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(solve((\"\
  AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
  \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
  #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ['        throw new UnsupportedOperationException("Not Implemented");',
  "        int len = s.length();\n        StringBuilder str = new StringBuilder();\n\
    \        for (int i = 0; i < len; i++) {\n            int ch = s.charAt(i);\n\
    \            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch))\
    \ {\n                    str.append(Character.toLowerCase(ch));\n            \
    \    } else {\n                    str.append(Character.toUpperCase(ch));\n  \
    \              }\n            } else {\n                str.append(s.charAt(i));\n\
    \            }\n        }\n        return (str.length() == 0) ? new StringBuilder(s).reverse().toString()\
    \ : str.toString();", "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        if (s.matches(\"[A-Za-z]+\"))\
    \ {\n            StringBuilder sb = new StringBuilder();\n            s.chars().forEach(c\
    \ -> {\n                char x = (char) c;\n                if (Character.isLowerCase(x))\
    \ {\n                    sb.append(Character.toUpperCase(x));\n              \
    \  } else {\n                    sb.append(Character.toLowerCase(x));\n      \
    \          }\n            });\n            return sb.toString();\n        } else\
    \ {\n            StringBuilder sb = new StringBuilder();\n            s.chars().forEach(c\
    \ -> {\n                char x = (char) c;\n                sb.append(x);\n  \
    \          });\n            return sb.reverse().toString();\n        }", "   \
    \     if (s.chars().allMatch(c -> Character.isDigit(c))) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        else {\n    \
    \        return s.chars().mapToObj(c -> \n                Character.isDigit(c)\
    \ ? \n                    String.valueOf((char) c) : \n                    String.valueOf((char)\
    \ (Character.isUpperCase(c) ? \n                        Character.toLowerCase(c)\
    \ : \n                        Character.toUpperCase(c)))\n            ).collect(Collectors.joining());\n\
    \        }", "        boolean letterNotFound = true;\n        StringBuilder sb\
    \ = new StringBuilder();\n        if (s.length() == 0) return s;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                letterNotFound = false;\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n    \
    \            } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
    \                }\n            } else {\n                sb.append(s.charAt(i));\n\
    \            }\n        }\n        if (letterNotFound) {\n            return sb.reverse().toString();\n\
    \        }\n        return sb.toString();", "        StringBuilder ans = new StringBuilder();\n\
    \        boolean hasLetters = false;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char ch = s.charAt(i);\n            if (Character.isAlphabetic(ch))\
    \ {\n                hasLetters = true;\n                ch = Character.isUpperCase(ch)\
    \ ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n            }\n  \
    \          ans.append(ch);\n        }\n        if (!hasLetters) {\n          \
    \  ans.reverse();\n        }\n        return ans.toString();", "        char[]\
    \ chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            if (Character.isLetter(chars[i])) {\n                chars[i] = Character.isUpperCase(chars[i])\
    \ ? \n                Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n\
    \            }\n        }\n        return new String(chars);", '        throw
    new RuntimeException("Not implemented");', "        boolean has_letters = s.chars().anyMatch(Character::isLetter);\n\
    \        return has_letters ? s.chars().mapToObj(c -> {\n            if (Character.isLetter(c))\
    \ {\n                return Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c);\n            } else {\n                return (char)\
    \ c;\n            }\n        }).collect(Collectors.joining()) : new StringBuilder(s).reverse().toString();",
  '        return "";', "        if(!s.chars().anyMatch(Character::isLetter))\n  \
    \          return new StringBuilder(s).reverse().toString();\n        StringBuilder\
    \ result = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if(Character.isUpperCase(c))\n\
    \                result.append(Character.toLowerCase(c));\n            else if(Character.isLowerCase(c))\n\
    \                result.append(Character.toUpperCase(c));\n            else\n\
    \                result.append(c);\n        }\n        return result.toString();",
  "        // >>> your code goes here <<<\n        // only letters are allowed\n \
    \       if (!s.matches(\"[a-zA-Z]*\")) {\n            System.out.println(\"ERROR:\"\
    \ + s + \" must be only letters!\");\n            return \"\";\n        }\n  \
    \      // convert to char array\n        char[] str = s.toCharArray();\n     \
    \   // reverse the string\n        for (int i = 0; i < str.length / 2; i++) {\n\
    \            char temp = str[i];\n            str[i] = str[str.length - i - 1];\n\
    \            str[str.length - i - 1] = temp;\n        }\n        // reverse the\
    \ letters from lower to upper\n        for (int i = 0; i < str.length; i++) {\n\
    \            str[i] = Character.isLowerCase(str[i]) ? Character.toUpperCase(str[i])\
    \ : Character.toLowerCase(str[i]);\n        }\n        // convert char array to\
    \ string\n        return new String(str);", "        \n        StringBuilder res\
    \ = new StringBuilder();\n        if (s.matches(\"^.*[a-zA-Z]+.*$\")) {\n    \
    \        for (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\n\
    \                    res.append(Character.toLowerCase(s.charAt(i)));\n       \
    \         else if (Character.isLowerCase(s.charAt(i)))\n                    res.append(Character.toUpperCase(s.charAt(i)));\n\
    \                else\n                    res.append(s.charAt(i));\n        \
    \    }\n        } else {\n            for (int i = s.length() - 1; i >= 0; i--)\n\
    \                res.append(s.charAt(i));\n        }\n        return res.toString();",
  '        return null;', "        boolean flag = true;\n        int cnt = 0;\n  \
    \      for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if ('a' <= c && c <= 'z') {\n                flag = false;\n    \
    \            cnt++;\n            } else if ('A' <= c && c <= 'Z') {\n        \
    \        flag = false;\n                cnt++;\n            }\n        }\n   \
    \     StringBuilder sb = new StringBuilder();\n        if (flag) {\n         \
    \   for (int i = s.length() - 1; i >= 0; i--)\n                sb.append(s.charAt(i));\n\
    \        } else {\n            for (int i = 0; i < s.length(); i++) {\n      \
    \          char c = s.charAt(i);\n                if ('a' <= c && c <= 'z')\n\
    \                    sb.append((char)(c - 'a' + 'A'));\n                else if\
    \ ('A' <= c && c <= 'Z')\n                    sb.append((char)(c - 'A' + 'a'));\n\
    \                else \n                    sb.append(c);\n            }\n   \
    \     }\n        return sb.toString();", "        if (s.length() == 0) {\n   \
    \         return \"\";\n        }\n        boolean isLetters = false;\n      \
    \  for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                isLetters = true;\n                break;\n            }\n\
    \        }\n        StringBuilder res = new StringBuilder();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                if (Character.isUpperCase(s.charAt(i))) {\n             \
    \       res.append(Character.toLowerCase(s.charAt(i)));\n                } else\
    \ {\n                    res.append(Character.toUpperCase(s.charAt(i)));\n   \
    \             }\n            } else {\n                res.append(s.charAt(i));\n\
    \            }\n        }\n        if (isLetters) {\n            return res.toString();\n\
    \        } else {\n            return res.reverse().toString();\n        }", " \
    \       if(s.matches(\"[a-zA-Z]+\"))\n            return new StringBuilder(s).reverse().toString();\n\
    \        else if(s.matches(\"[0-9]+\"))\n            return new StringBuilder(s).reverse().toString();\n\
    \        else\n            return s;", "        return s.chars().mapToObj(x ->\
    \ (char)x).map(\n            x -> (x >= 'a' && x <= 'z') || (x >= 'A' && x <=\
    \ 'Z') ? \n            Character.toUpperCase(x) == x ? \n            Character.toLowerCase(x)\
    \ : \n            Character.toUpperCase(x) : \n            x\n        ).map(x\
    \ -> x.toString()).collect(Collectors.joining(\"\"));", "        // #1\n     \
    \   // if(s.matches(\"[a-zA-Z]+\")){\n        //     s = s.toUpperCase();\n  \
    \      // }\n        // else {\n        //     StringBuilder sb = new StringBuilder(s);\n\
    \        //     sb.reverse();\n        //     s = sb.toString();\n        // }\n\
    \        // return s;\n        // #2\n        boolean isWord = false;\n      \
    \  char [] a = s.toCharArray();\n        for(int i = 0; i < a.length; i++){\n\
    \            if(Character.isLetter(a[i])){\n                isWord = true;\n \
    \               if(Character.isUpperCase(a[i])){\n                    a[i] = Character.toLowerCase(a[i]);\n\
    \                }\n                else {\n                    a[i] = Character.toUpperCase(a[i]);\n\
    \                }\n            }\n        }\n        return isWord ? new String(a)\
    \ : new StringBuilder(s).reverse().toString();", "        // Write your code here.\n\
    \        return s;", "        // Write your code here.\n        return \"\";",
  "        // Your code here\n        return \"\";", "        boolean hasLetter =\
    \ false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                hasLetter = true;\n                break;\n            }\n\
    \        }\n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n\
    \            return sb.reverse().toString();\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            if (Character.isLetter(s.charAt(i))) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n    \
    \            } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
    \                }\n            } else {\n                sb.append(s.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        boolean has_alphabet\
    \ = false;\n        char[] arr = s.toCharArray();\n        for (int i = 0; i <\
    \ arr.length; i++) {\n            if (Character.isAlphabetic(arr[i])) {\n    \
    \            has_alphabet = true;\n                arr[i] = Character.isUpperCase(arr[i])\
    \ ? Character.toLowerCase(arr[i]) : Character.toUpperCase(arr[i]);\n         \
    \   }\n        }\n        return has_alphabet ? new String(arr) : new StringBuilder(s).reverse().toString();",
  "        StringBuilder sb = new StringBuilder();\n        StringBuilder sb_reversed\
    \ = new StringBuilder();\n        StringBuilder sb_without_letters = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            sb.append(c);\n            if (Character.isLetter(c)) {\n       \
    \         char new_c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
    \                sb_reversed.append(new_c);\n            } else {\n          \
    \      sb_without_letters.append(c);\n            }\n        }\n        if (sb_reversed.length()\
    \ == 0) {\n            return sb_without_letters.reverse().toString();\n     \
    \   }\n        return sb_reversed.toString();", "        // The function may throw\
    \ an exception. It is up to you how to handle it.\n        // >>> YOUR CODE HERE\
    \ <<<\n        char[] arr = s.toCharArray();\n        boolean noLetters = true;\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                arr[i] = Character.isUpperCase(arr[i]) ? Character.toLowerCase(arr[i])\
    \ : Character.toUpperCase(arr[i]);\n                noLetters = false;\n     \
    \       }\n        }\n        if (noLetters) {\n            for (int i = 0; i\
    \ < arr.length / 2; i++) {\n                char tmp = arr[i];\n             \
    \   arr[i] = arr[arr.length - i - 1];\n                arr[arr.length - i - 1]\
    \ = tmp;\n            }\n        }\n        return new String(arr);", "      \
    \  int idx = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if\
    \ (Character.isLetter(s.charAt(i))) {\n                idx = i;\n            \
    \    break;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        if (idx == 0)\n            sb.append(s);\n        else {\n          \
    \  sb.append(s.substring(idx));\n            sb.append(s.substring(0, idx));\n\
    \        }\n        for (int i = 0; i < sb.length(); i++) {\n            if (Character.isLowerCase(sb.charAt(i)))\n\
    \                sb.setCharAt(i, Character.toUpperCase(sb.charAt(i)));\n     \
    \       else if (Character.isUpperCase(sb.charAt(i)))\n                sb.setCharAt(i,\
    \ Character.toLowerCase(sb.charAt(i)));\n        }\n        return sb.toString();",
  "        int len = s.length();\n        if (len == 0) return \"\";\n        boolean\
    \ allDigits = s.chars().allMatch(x -> Character.isDigit(x));\n        if (allDigits)\
    \ return new StringBuilder(s).reverse().toString();\n        StringBuilder res\
    \ = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n       \
    \     char c = s.charAt(i);\n            if (Character.isLetter(c)) res.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            else res.append(c);\n\
    \        }\n        return res.toString();", "        if (s.matches(\"[A-Za-z]*\"\
    )) {\n            return new StringBuilder(s).reverse().toString();\n        }\n\
    \        // [^A-Za-z] is the pattern for any string that does not contain letters\n\
    \        return s.replaceAll(\"([^A-Za-z])\", \"\")\n            .chars()\n  \
    \          .map(i -> Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString();", "        if(s.isEmpty()) return s;\n        return\
    \ Arrays.stream(s.split(\"\"))\n            .map(chr -> {\n                if(Character.isLetter(chr.charAt(0)))\n\
    \                    return chr.toUpperCase().equals(chr) ? chr.toLowerCase()\
    \ : chr.toUpperCase();\n                return chr;\n            })\n        \
    \    .collect(Collectors.joining(\"\"));", '        return null;', '        return
    "";', "        return s.chars().mapToObj(c -> {\n            if (Character.isLetter(c))\
    \ {\n                return String.valueOf((char) (Character.isUpperCase(c) ?\
    \ c + 32 : c - 32));\n            } else {\n                return String.valueOf((char)\
    \ c);\n            }\n        }).collect(Collectors.joining());", "        if\
    \ (s.matches(\"[a-zA-Z]+\")) {\n            return s.toUpperCase();\n        }\
    \ else if (s.matches(\"[^a-zA-Z]+\")) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        } else {\n            return \"\";\n        }", "        boolean hasLetters\
    \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                hasLetters = true;\n                break;\n            }\n\
    \        }\n        if (!hasLetters) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n         \
    \   if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", "        // Your code here\n        if (s.length()\
    \ == 0) return \"\";\n        boolean hasLetter = false;\n        char[] array\
    \ = s.toCharArray();\n        for (int i = 0; i < array.length; i++) {\n     \
    \       if (Character.isLetter(array[i])) {\n                hasLetter = true;\n\
    \                array[i] = (char) (array[i] ^ 32);\n            }\n        }\n\
    \        if (!hasLetter) {\n            for (int i = 0; i < array.length / 2;\
    \ i++) {\n                char temp = array[i];\n                array[i] = array[array.length\
    \ - 1 - i];\n                array[array.length - 1 - i] = temp;\n           \
    \ }\n        }\n        return new String(array);", '        return "";', "  \
    \      if (s.length() == 0) {\n            return s;\n        }\n        // toCharArray\
    \ converts the string to an array of char\n        char[] chars = s.toCharArray();\n\
    \        boolean reversed = false;\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (Character.isLetter(chars[i])) {\n                reversed\
    \ = true;\n                // swap case of the char\n                chars[i]\
    \ = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n\
    \            }\n        }\n        if (!reversed) {\n            for (int i =\
    \ 0; i < chars.length / 2; i++) {\n                char temp = chars[i];\n   \
    \             chars[i] = chars[chars.length - i - 1];\n                chars[chars.length\
    \ - i - 1] = temp;\n            }\n        }\n        return new String(chars);",
  "        if (s.length() == 0) return s;\n        boolean isLetter = false;\n   \
    \     for (int i = 0; i < s.length(); i++)\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                isLetter = true;\n                break;\n            }\n\
    \        if (!isLetter) return new StringBuilder(s).reverse().toString();\n  \
    \      StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\n   \
    \             result.append(Character.isUpperCase(s.charAt(i)) ? Character.toLowerCase(s.charAt(i))\
    \ : Character.toUpperCase(s.charAt(i)));\n            else\n                result.append(s.charAt(i));\n\
    \        }\n        return result.toString();", "        StringBuilder result\
    \ = new StringBuilder();\n        char[] s_arr = s.toCharArray();\n        StringBuilder\
    \ letters = new StringBuilder();\n        StringBuilder notLetters = new StringBuilder();\n\
    \        for (char c : s_arr) {\n            if (Character.isLetter(c)) {\n  \
    \              letters.append(c);\n            } else {\n                notLetters.append(c);\n\
    \            }\n        }\n        if (letters.length() == 0) {\n            return\
    \ result.append(notLetters).reverse().toString();\n        }\n        result.append(notLetters);\n\
    \        for (char c : letters.toString().toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                result.append(Character.toLowerCase(c));\n            } else\
    \ {\n                result.append(Character.toUpperCase(c));\n            }\n\
    \        }\n        return result.toString();", "        if (s.isEmpty()) {\n\
    \            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean hasLetters = false;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n               \
    \ hasLetters = true;\n                sb.append(s.charAt(i) == Character.toLowerCase(s.charAt(i))\
    \ ? \n                        Character.toUpperCase(s.charAt(i)) : \n        \
    \                Character.toLowerCase(s.charAt(i)));\n            } else {\n\
    \                sb.append(s.charAt(i));\n            }\n        }\n        return\
    \ hasLetters ? sb.toString() : sb.reverse().toString();", "        // Write your\
    \ code here\n        if (s.isEmpty()) {\n            return s;\n        }\n  \
    \      // does it contain letters?\n        if (s.chars().anyMatch(Character::isLetter))\
    \ {\n            char[] chars = s.toCharArray();\n            for (int i = 0;\
    \ i < chars.length; i++) {\n                if (Character.isLetter(chars[i]))\
    \ {\n                    chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i])\
    \ : Character.toUpperCase(chars[i]);\n                }\n            }\n     \
    \       return new String(chars);\n        } else {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }", '        return null;', "        // Write your code below this line.\n\
    \        StringBuilder res = new StringBuilder();\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                res.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n            } else {\n                res.append(c);\n\
    \            }\n        }\n        if (res.length() == 0) {\n            res.append(s);\n\
    \        }\n        return res.toString();\n        // Write your code above this\
    \ line.", "        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n           \
    \ if (Character.isAlphabetic(c)) {\n                sb.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        boolean allNum = true;\n        char[] res = s.toCharArray();\n       \
    \ for (int i = 0; i < res.length; i++) {\n            if (Character.isLetter(res[i]))\
    \ {\n                allNum = false;\n                res[i] = Character.isUpperCase(res[i])\
    \ ? Character.toLowerCase(res[i]) : Character.toUpperCase(res[i]);\n         \
    \   }\n        }\n        if (allNum) {\n            for (int i = 0; i < res.length\
    \ / 2; i++) {\n                char temp = res[i];\n                res[i] = res[res.length\
    \ - i - 1];\n                res[res.length - i - 1] = temp;\n            }\n\
    \        }\n        return new String(res);", "        \n        return s;", '        //
    Write your code here.', "        boolean hasLetter = false;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n         \
    \   if (Character.isLetter(c)) {\n                hasLetter = true;\n        \
    \        break;\n            }\n        }\n        if (!hasLetter) {\n       \
    \     return new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder\
    \ newString = new StringBuilder();\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                newString.append(Character.toUpperCase(c));\n           \
    \ } else if (Character.isUpperCase(c)) {\n                newString.append(Character.toLowerCase(c));\n\
    \            } else {\n                newString.append(c);\n            }\n \
    \       }\n        return newString.toString();", "        // TODO: Write solution\
    \ here\n        return null;", "        char[] chars = s.toCharArray();\n    \
    \    boolean containsLetters = false;\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (Character.isLetter(chars[i])) {\n                containsLetters\
    \ = true;\n                chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i])\
    \ : Character.toUpperCase(chars[i]);\n            }\n        }\n        if (!containsLetters)\
    \ {\n            for (int i = 0; i < chars.length / 2; i++) {\n              \
    \  char temp = chars[i];\n                chars[i] = chars[chars.length - i -\
    \ 1];\n                chars[chars.length - i - 1] = temp;\n            }\n  \
    \      }\n        return new String(chars);", "        // Implementation here.\n\
    \        return s;", '        return null;', "      int n = s.length();\n    \
    \  int l = -1;\n      for (int i = 0; i < n; i++) {\n        if (Character.isLetter(s.charAt(i)))\
    \ {\n          l = i;\n          break;\n        }\n      }\n      if (l == -1)\
    \ return new StringBuilder(s).reverse().toString();\n      StringBuilder res =\
    \ new StringBuilder(s);\n      for (int i = 0; i < n; i++) {\n        if (Character.isLetter(s.charAt(i)))\
    \ {\n          if (Character.isUpperCase(s.charAt(i))) {\n            res.setCharAt(i,\
    \ Character.toLowerCase(s.charAt(i)));\n          } else {\n            res.setCharAt(i,\
    \ Character.toUpperCase(s.charAt(i)));\n          }\n        }\n      }\n    \
    \  return res.toString();", '        // write your code here.', "        if (s.isEmpty())\
    \ {\n            return s;\n        }\n        String output = \"\";\n       \
    \ for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    output += Character.toLowerCase(c);\n               \
    \ } else {\n                    output += Character.toUpperCase(c);\n        \
    \        }\n            } else {\n                output += c;\n            }\n\
    \        }\n        if (output.length() == s.length()) {\n            return new\
    \ StringBuilder(output).reverse().toString();\n        }\n        return output;",
  "        char[] c = s.toCharArray();\n        boolean has_letters = false;\n   \
    \     for (int i = 0; i < c.length; i++) {\n            if (Character.isLetter(c[i]))\
    \ {\n                has_letters = true;\n                c[i] = Character.isUpperCase(c[i])\
    \ ? Character.toLowerCase(c[i]) : Character.toUpperCase(c[i]);\n            }\n\
    \        }\n        return has_letters ? new String(c) : new StringBuilder(s).reverse().toString();",
  "        boolean onlyDigits = true;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (!Character.isDigit(s.charAt(i))) {\n                onlyDigits\
    \ = false;\n                break;\n            }\n        }\n        if (onlyDigits)\
    \ return new StringBuilder(s).reverse().toString();\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n   \
    \         char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n  \
    \              sb.append(Character.isUpperCase(c) ? \n                       \
    \ Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n\
    \                sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        int i;\n        boolean is_empty = true;\n        String ans = \"\";\n\
    \        for (i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
    \            if (Character.isLetter(ch)) {\n                is_empty = false;\n\
    \                ch = Character.isUpperCase(ch) ? Character.toLowerCase(ch) :\
    \ Character.toUpperCase(ch);\n            }\n            ans += ch;\n        }\n\
    \        if (is_empty)\n            ans = new StringBuilder(ans).reverse().toString();\n\
    \        return ans;", "        int check = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n               \
    \ check = 1;\n                break;\n            }\n        }\n        if (check\
    \ == 0) {\n            return new StringBuilder(s).reverse().toString();\n   \
    \     }\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                sb.append(Character.toLowerCase(s.charAt(i)));\n        \
    \    } else {\n                sb.append(s.charAt(i));\n            }\n      \
    \  }\n        StringBuilder res = new StringBuilder();\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n\
    \                res.append(Character.toUpperCase(sb.charAt(i)));\n          \
    \  } else {\n                res.append(sb.charAt(i));\n            }\n      \
    \  }\n        return res.toString();", "        // TODO: Implement your code here.\n\
    \        return \"\";", "        String result = \"\";\n        if (s.length()\
    \ == 0) return s;\n        for (int i = 0; i < s.length(); i++) {\n          \
    \  if (Character.isAlphabetic(s.charAt(i))) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    result += Character.toLowerCase(s.charAt(i));\n     \
    \           } else {\n                    result += Character.toUpperCase(s.charAt(i));\n\
    \                }\n            } else {\n                result += s.charAt(i);\n\
    \            }\n        }\n        return result;", "        if (s.isEmpty())\
    \ return s;\n        char[] chars = s.toCharArray();\n        if (Character.isLetter(chars[0]))\
    \ {\n            chars[0] = Character.isUpperCase(chars[0]) ? Character.toLowerCase(chars[0])\
    \ : Character.toUpperCase(chars[0]);\n        }\n        return new String(chars);",
  "        if (Stream.of(s.split(\"\")).filter(e -> e.matches(\"[a-zA-Z]\")).count()\
    \ == 0) {\n            return new StringBuilder(s).reverse().toString();\n   \
    \     }\n        String[] ch = s.split(\"\");\n        String[] res = new String[ch.length];\n\
    \        for (int i = 0; i < ch.length; i++) {\n            String val = ch[i];\n\
    \            res[i] = val.matches(\"[a-zA-Z]\") ? val.matches(\"[a-z]\") ? val.toUpperCase()\
    \ : val.toLowerCase() : val;\n        }\n        return String.join(\"\", res);",
  "        // >>> YOUR CODE HERE <<<\n        char[] chars = s.toCharArray();\n  \
    \      for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a'\
    \ && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 'a' + 'A');\n\
    \            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n              \
    \  chars[i] = (char) (chars[i] - 'A' + 'a');\n            }\n        }\n     \
    \   String result = new String(chars);\n        boolean isLetter = result.matches(\"\
    .*[a-zA-Z]+.*\");\n        if (!isLetter) {\n            result = new StringBuffer(result).reverse().toString();\n\
    \        }\n        return result;", '        return null;', "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n\
    \                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
    \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        if (sb.length() == 0) {\n            return s;\n\
    \        }\n        return sb.toString();", "        // Your code goes here.\n\
    \        // You may need more than one line, variables, etc.\n        // Good\
    \ luck.\n        return null;", '        throw new RuntimeException("Not implemented");',
  "        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n \
    \               builder.append(Character.toUpperCase(s.charAt(i)));\n        \
    \    } else {\n                builder.append(s.charAt(i));\n            }\n \
    \       }\n        if (builder.length() == 0) {\n            builder.append(s);\n\
    \        }\n        return builder.reverse().toString();", "        // Your code\
    \ here\n        return \"\";", "        StringBuilder sb = new StringBuilder();\n\
    \        String newS = \"\";\n        int c = 0;\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n   \
    \             if (Character.isUpperCase(s.charAt(i))) {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n\
    \                } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
    \                }\n                c++;\n            } else {\n             \
    \   sb.append(s.charAt(i));\n            }\n        }\n        newS = sb.toString();\n\
    \        if (c == 0) {\n            return new StringBuilder(newS).reverse().toString();\n\
    \        }\n        return newS;", "        StringBuilder sb = new StringBuilder();\n\
    \        boolean isAlph = false;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (Character.isAlphabetic(c))\
    \ {\n                isAlph = true;\n                c = Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            }\n    \
    \        sb.append(c);\n        }\n        return isAlph ? sb.toString() : sb.reverse().toString();",
  "        // Your code goes here.\n        return \"\";", "        // >>> your code\
    \ here <<<\n        int len = s.length();\n        if (len == 0) return s;\n \
    \       boolean found = false;\n        for (int i = 0; i < len; i++) {\n    \
    \        if (Character.isLetter(s.charAt(i))) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         StringBuilder str = new StringBuilder();\n            for (int i = len\
    \ - 1; i >= 0; i--) str.append(s.charAt(i));\n            return str.toString();\n\
    \        }\n        StringBuilder str = new StringBuilder();\n        for (int\
    \ i = 0; i < len; i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                if (Character.isUpperCase(c)) str.append(Character.toLowerCase(c));\n\
    \                else str.append(Character.toUpperCase(c));\n            } else\
    \ str.append(c);\n        }\n        return str.toString();", "        String\
    \ result = \"\";\n        boolean isLetter = false;\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                isLetter = true;\n                result += Character.toLowerCase(c)\
    \ == c ? Character.toUpperCase(c) : Character.toLowerCase(c);\n            } else\
    \ {\n                result += c;\n            }\n        }\n        return isLetter\
    \ ? result : new StringBuilder(result).reverse().toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char ch = s.charAt(i);\n            if (Character.isLowerCase(ch))\
    \ {\n                sb.append(Character.toUpperCase(ch));\n            } else\
    \ if (Character.isUpperCase(ch)) {\n                sb.append(Character.toLowerCase(ch));\n\
    \            } else {\n                sb.append(ch);\n            }\n       \
    \ }\n        return sb.toString();", "        s = s.chars().mapToObj(c -> (char)\
    \ c).filter(c -> Character.isLetter(c)).map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)).collect(Collectors.joining());\n        if (s.length()\
    \ == 0) {\n            s = new StringBuilder(s).reverse().toString();\n      \
    \  }\n        return s;", "        String str = \"\";\n        // Write your code\
    \ here\n        StringBuffer sb = new StringBuffer(s);\n        String srev =\
    \ sb.reverse().toString();\n        String[] arr = srev.split(\"\");\n       \
    \ if (s.matches(\".*[a-zA-Z]+.*\")) {\n            for (int i = 0; i < arr.length;\
    \ i++) {\n                if (arr[i].matches(\"[a-z]\")) {\n                 \
    \   arr[i] = arr[i].toUpperCase();\n                } else if (arr[i].matches(\"\
    [A-Z]\")) {\n                    arr[i] = arr[i].toLowerCase();\n            \
    \    }\n            }\n            for (int i = 0; i < arr.length; i++) {\n  \
    \              str += arr[i];\n            }\n        } else {\n            for\
    \ (int i = 0; i < arr.length; i++) {\n                str += arr[i];\n       \
    \     }\n        }\n        return str;", "        // >>> your code here <<<\n\
    \        return null;", "        // your code here\n        return null;", " \
    \       StringBuilder result = new StringBuilder();\n        boolean noLetters\
    \ = true;\n        for (int i = 0; i < s.length(); i++) {\n            char c\
    \ = s.charAt(i);\n            if (Character.isLetter(c)) {\n                noLetters\
    \ = false;\n                result.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n            } else {\n                result.append(c);\n\
    \            }\n        }\n        return noLetters ? result.reverse().toString()\
    \ : result.toString();", "        if (s.length() == 0) {\n            return \"\
    \";\n        }\n        boolean hasLetters = s.matches(\".*[a-zA-Z].*\");\n  \
    \      boolean isUpper = s.matches(\"[A-Z]\");\n        boolean isLower = s.matches(\"\
    [a-z]\");\n        if (isUpper && hasLetters) {\n            return s.toLowerCase();\n\
    \        } else if (isLower && hasLetters) {\n            return s.toUpperCase();\n\
    \        } else {\n            char[] reversed = new char[s.length()];\n     \
    \       int j = 0;\n            for (int i = s.length() - 1; i >= 0; i--) {\n\
    \                reversed[j] = s.charAt(i);\n                j++;\n          \
    \  }\n            return new String(reversed);\n        }", '        return null;',
  "        int a = s.length();\n        String x = \"\";\n        for (int i = 0;\
    \ i < a; i++) {\n            String y = s.substring(i, i + 1);\n            if\
    \ (y.equals(y.toUpperCase())) {\n                x += y.toLowerCase();\n     \
    \       } else if (y.equals(y.toLowerCase())) {\n                x += y.toUpperCase();\n\
    \            } else {\n                x += y;\n            }\n        }\n   \
    \     return x;", "        boolean isPossible = false;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n\
    \                isPossible = true;\n                break;\n            }\n \
    \       }\n        if (!isPossible) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                if (Character.isUpperCase(s.charAt(i))) {\n             \
    \       sb.append(Character.toLowerCase(s.charAt(i)));\n                } else\
    \ {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n    \
    \            }\n            } else {\n                sb.append(s.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        char[] letters\
    \ = s.toCharArray();\n        char[] result = new char[letters.length];\n    \
    \    boolean hasLetter = false;\n        for (int i = 0; i < letters.length; i++)\
    \ {\n            char letter = letters[i];\n            if (letter >= 'a' && letter\
    \ <= 'z') {\n                letter -= 32;\n                hasLetter = true;\n\
    \            } else if (letter >= 'A' && letter <= 'Z') {\n                letter\
    \ += 32;\n                hasLetter = true;\n            }\n            result[i]\
    \ = letter;\n        }\n        if (!hasLetter) {\n            for (int i = 0;\
    \ i < result.length / 2; i++) {\n                char temp = result[i];\n    \
    \            result[i] = result[result.length - i - 1];\n                result[result.length\
    \ - i - 1] = temp;\n            }\n        }\n        return new String(result);",
  "        //#############################\n        //Your code goes here\n      \
    \  //#############################\n        return s;", "        boolean hasLetter\
    \ = false;\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                hasLetter = true;\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n    \
    \            } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
    \                }\n            } else {\n                sb.append(s.charAt(i));\n\
    \            }\n        }\n        if (hasLetter) return sb.toString();\n    \
    \    return sb.reverse().toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        boolean hasLetter = false;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (Character.isLetter(s.charAt(i))) {\n                hasLetter\
    \ = true;\n                sb.append(Character.toUpperCase(s.charAt(i)));\n  \
    \          } else {\n                sb.append(s.charAt(i));\n            }\n\
    \        }\n        return hasLetter ? sb.toString() : new StringBuilder(s).reverse().toString();",
  "        // Write your code here\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                sb.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.length()\
    \ == 0 ? s : sb.toString();", "        // Replace the code below\n        char[]\
    \ ans = s.toCharArray();\n        int flag = 1;\n        if (s.chars().allMatch(Character::isLetter))\
    \ {\n            flag = 0;\n        }\n        for (int i = 0; i < ans.length;\
    \ i++) {\n            if (Character.isLetter(ans[i])) {\n                ans[i]\
    \ = flag == 0 ? Character.toUpperCase(ans[i]) : Character.toLowerCase(ans[i]);\n\
    \            }\n        }\n        return new String(ans);", "        StringBuilder\
    \ builder = new StringBuilder();\n        String finalString = \"\";\n       \
    \ String character = \"\";\n        String tester = \"\";\n        String lowerAlphabets\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n        String upperAlphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        // check if the string is just numbers.\n        try {\n          \
    \  Long.parseLong(s);\n            return reverse(s);\n        } catch (NumberFormatException\
    \ e) {\n            for (int i = 0; i < s.length(); i++) {\n                character\
    \ = String.valueOf(s.charAt(i));\n                tester = String.valueOf(s.charAt(i)).toLowerCase();\n\
    \                if (character.equals(tester)) {\n                    if (lowerAlphabets.contains(character))\
    \ {\n                        character = character.toUpperCase();\n          \
    \          } else if (upperAlphabets.contains(character)) {\n                \
    \        character = character.toLowerCase();\n                    }\n       \
    \         }\n                builder.append(character);\n            }\n     \
    \       finalString = builder.toString();\n            return finalString;\n \
    \       }", "        // Let's decompose the problem.\n        // s[i] is a letter\
    \ -> reverse its case from lower to upper or vise versa.\n        // s[i] is not\
    \ a letter -> keep it as it is.\n        // If the string contains no letters,\
    \ reverse the string.\n        // Ok, we have to check if the string contains\
    \ no letters\n        // by iterating through the characters of the string.\n\
    \        // We can use the function isLetter to check if the character is a letter.\n\
    \        boolean hasLetters = false;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n               \
    \ hasLetters = true;\n                break;\n            }\n        }\n     \
    \   // Now we have to build the result string.\n        // We should use StringBuilder,\
    \ because String is immutable.\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    c = Character.toLowerCase(c);\n                } else\
    \ {\n                    c = Character.toUpperCase(c);\n                }\n  \
    \          }\n            sb.append(c);\n        }\n        // Now we have to\
    \ reverse the string if it doesn't contain any letters.\n        if (!hasLetters)\
    \ {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
  "        // Your code\n        return \"\";", '        throw new NotImplementedException();',
  "        if (s.length() == 0) return \"\";\n        int onlyNumbers = 1;\n     \
    \   char[] t = s.toCharArray();\n        for (int i = 0; i < t.length; i++)\n\
    \            if (t[i] >= 'a' && t[i] <= 'z' || t[i] >= 'A' && t[i] <= 'Z') {\n\
    \                onlyNumbers = 0;\n                break;\n            }\n   \
    \     for (int i = 0; i < t.length; i++)\n            if (t[i] >= 'a' && t[i]\
    \ <= 'z')\n                t[i] = (char)(t[i] - 'a' + 'A');\n            else\
    \ if (t[i] >= 'A' && t[i] <= 'Z')\n                t[i] = (char)(t[i] - 'A' +\
    \ 'a');\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ t.length - 1; i >= 0; i--) sb.append(t[i]);\n        return onlyNumbers ? sb.toString()\
    \ : new String(t);", "        // Your code here\n        return null;", "    \
    \    String ans = \"\";\n        int n = s.length();\n        for (int i = 0;\
    \ i < n; i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' &&\
    \ c <= 'z') ans += (char)(c + 'A' - 'a');\n            else if (c >= 'A' && c\
    \ <= 'Z') ans += (char)(c + 'a' - 'A');\n            else ans += c;\n        }\n\
    \        return ans;", "        // get the list of non-letter characters\n   \
    \     List<Integer> non_letter_indices = new ArrayList<>();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (!Character.isLetter(s.charAt(i)))\
    \ {\n                non_letter_indices.add(i);\n            }\n        }\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (non_letter_indices.contains(i)) {\n                sb.append(s.charAt(i));\n\
    \            } else {\n                // reverse the case\n                char\
    \ ch = s.charAt(i);\n                if (Character.isUpperCase(ch)) {\n      \
    \              sb.append(Character.toLowerCase(ch));\n                } else {\n\
    \                    sb.append(Character.toUpperCase(ch));\n                }\n\
    \            }\n        }\n        if (sb.length() == 0) {\n            return\
    \ reverse(s);\n        }\n        return sb.toString();", "        StringBuilder\
    \ builder = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n\
    \            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch))\
    \ {\n                    builder.append(Character.toLowerCase(ch));\n        \
    \        } else {\n                    builder.append(Character.toUpperCase(ch));\n\
    \                }\n            } else {\n                builder.append(ch);\n\
    \            }\n        }\n        return builder.reverse().toString();", "  \
    \      int upperCaseLetters = 0;\n        int lowerCaseLetters = 0;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                upperCaseLetters++;\n            } else if (Character.isLowerCase(s.charAt(i)))\
    \ {\n                lowerCaseLetters++;\n            }\n        }\n        if\
    \ (upperCaseLetters == 0 && lowerCaseLetters == 0) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                sb.append(Character.toLowerCase(s.charAt(i)));\n        \
    \    } else if (Character.isLowerCase(s.charAt(i))) {\n                sb.append(Character.toUpperCase(s.charAt(i)));\n\
    \            } else {\n                sb.append(s.charAt(i));\n            }\n\
    \        }\n        return sb.toString();", "        int n = s.length();\n   \
    \     char c;\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < n; i++) {\n            c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();", '        return "";',
  '        return "";', "        String ans = \"\";\n        String rev = \"\";\n\
    \        String rev1 = \"\";\n        String rev2 = \"\";\n        boolean flag\
    \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                flag = true;\n                if (Character.isUpperCase(s.charAt(i)))\n\
    \                    rev1 += Character.toLowerCase(s.charAt(i));\n           \
    \     else\n                    rev1 += Character.toUpperCase(s.charAt(i));\n\
    \            } else\n                rev2 += s.charAt(i);\n        }\n       \
    \ if (flag)\n            ans = rev1;\n        else\n            ans = new StringBuilder(s).reverse().toString();\n\
    \        return ans;", "        return IntStream.range(0, s.length())\n      \
    \          .mapToObj(i -> Character.isLetter(s.charAt(i)) ? \n               \
    \         Character.isUpperCase(s.charAt(i)) ?\n                            Character.toLowerCase(s.charAt(i))\
    \ :\n                            Character.toUpperCase(s.charAt(i)) :\n      \
    \                  s.charAt(i)\n                )\n                .map(c -> c.toString())\n\
    \                .collect(Collectors.joining());", "        // Write your code\
    \ here.\n        return null;", "        String r = \"\";\n        Boolean isAnyLetter\
    \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c\
    \ = s.charAt(i);\n            if (Character.isLetter(c)) {\n                isAnyLetter\
    \ = true;\n                if (Character.isUpperCase(c)) {\n                 \
    \   r += Character.toLowerCase(c);\n                } else {\n               \
    \     r += Character.toUpperCase(c);\n                }\n            } else {\n\
    \                r += c;\n            }\n        }\n        if (!isAnyLetter)\
    \ {\n            r = new StringBuilder(r).reverse().toString();\n        }\n \
    \       return r;", "        // Your code\n        // Remember that you can't\
    \ return null \n        // instead return an empty string \"\"\n        return\
    \ \"\";", "        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n           \
    \ if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    sb.append(Character.toLowerCase(c));\n              \
    \  } else {\n                    sb.append(Character.toUpperCase(c));\n      \
    \          }\n            } else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();", "        char[] chars = s.toCharArray();\n\
    \        // if the string contains no letters, reverse the string\n        if\
    \ (s.chars().filter(c -> Character.isLetter(c)).count() == 0) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        for (int i =\
    \ 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n\
    \                if (Character.isUpperCase(chars[i])) {\n                    chars[i]\
    \ = Character.toLowerCase(chars[i]);\n                } else {\n             \
    \       chars[i] = Character.toUpperCase(chars[i]);\n                }\n     \
    \       }\n        }\n        return new String(chars);", "        // your code\n\
    \        int i;\n        char c;\n        int j = s.length() - 1;\n        char[]\
    \ arr = s.toCharArray();\n        if (s.replaceAll(\"[^a-zA-Z]\", \"\").equals(\"\
    \")) {\n            return new StringBuilder(s).reverse().toString();\n      \
    \  }\n        for (i = 0; i < s.length() / 2; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                c = arr[i];\n                arr[i] = arr[j];\n         \
    \       arr[j] = c;\n            }\n            if (Character.isLetter(arr[j]))\
    \ {\n                c = arr[i];\n                arr[i] = arr[j];\n         \
    \       arr[j] = c;\n            }\n            j--;\n        }\n        return\
    \ new String(arr);", '        return "";', "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                sb.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.length()\
    \ == 0 ? new StringBuilder(s).reverse().toString() : sb.toString();", "      \
    \  StringBuilder result = new StringBuilder();\n        boolean containsLetters\
    \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            char curr\
    \ = s.charAt(i);\n            if (Character.isLetter(curr)) {\n              \
    \  containsLetters = true;\n                result.append(Character.isUpperCase(curr)\
    \ ? Character.toLowerCase(curr) : Character.toUpperCase(curr));\n            }\
    \ else {\n                result.append(curr);\n            }\n        }\n   \
    \     return containsLetters ? result.toString() : result.reverse().toString();",
  "        // if s[i] is a letter, reverse its case from lower to upper or vise versa\n\
    \        // otherwise keep it as it is.\n        return null;", "        if (s.matches(\"\
    ^[a-zA-Z]+$\")) {\n            char[] chars = s.toCharArray();\n            for\
    \ (int i = 0; i < chars.length; i++) {\n                chars[i] = Character.isLowerCase(chars[i])\
    \ ? Character.toUpperCase(chars[i]) : Character.toLowerCase(chars[i]);\n     \
    \       }\n            return new String(chars);\n        } else {\n         \
    \   return new StringBuilder(s).reverse().toString();\n        }", "        String\
    \ letters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        StringBuilder\
    \ result=new StringBuilder();\n        for(int i=0;i<s.length();i++){\n      \
    \      char c=s.charAt(i);\n            if(letters.indexOf(c)>=0){\n         \
    \       result.append(Character.toLowerCase(c)==c?Character.toUpperCase(c):Character.toLowerCase(c));\n\
    \            }else{\n                result.append(c);\n            }\n      \
    \  }\n        return result.length()>0?result.toString():new StringBuilder(s).reverse().toString();",
  "        if (s.isEmpty()) {\n            return s;\n        }\n        boolean isLetter\
    \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c\
    \ = s.charAt(i);\n            if (Character.isLetter(c)) {\n                isLetter\
    \ = true;\n                break;\n            }\n        }\n        if (!isLetter)\
    \ {\n            return new StringBuilder(s).reverse().toString();\n        }\n\
    \        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                ans.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n            } else {\n                ans.append(c);\n\
    \            }\n        }\n        return ans.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        int i = 0;\n        for (; i < s.length();\
    \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n               \
    \ break;\n            }\n        }\n        if (i == s.length()) {\n         \
    \   return sb.append(s).reverse().toString();\n        }\n        int left = 0;\n\
    \        int right = s.length() - 1;\n        while (left < right) {\n       \
    \     while (left < right && !Character.isLetter(s.charAt(left))) {\n        \
    \        sb.append(s.charAt(left));\n                left++;\n            }\n\
    \            while (left < right && !Character.isLetter(s.charAt(right))) {\n\
    \                right--;\n            }\n            if (left < right) {\n  \
    \              char ch = s.charAt(left);\n                sb.append(Character.isUpperCase(ch)\
    \ ? Character.toLowerCase(ch) : Character.toUpperCase(ch));\n                ch\
    \ = s.charAt(right);\n                sb.append(Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
    \ : Character.toUpperCase(ch));\n                left++;\n                right--;\n\
    \            }\n        }\n        if (left == right) {\n            sb.append(s.charAt(left));\n\
    \        }\n        return sb.toString();", "        String result = \"\";\n \
    \       boolean changed = false;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (Character.isLetter(s.charAt(i))) {\n                changed\
    \ = true;\n                result += Character.toUpperCase(s.charAt(i)) == s.charAt(i)\
    \ ? Character.toLowerCase(s.charAt(i)) : Character.toUpperCase(s.charAt(i));\n\
    \            } else {\n                result += s.charAt(i);\n            }\n\
    \        }\n        return changed ? result : new StringBuilder(result).reverse().toString();",
  "        String[] ss = s.split(\"\");\n        for (int i = 0; i < ss.length; i++)\
    \ {\n            if (ss[i].matches(\"[a-zA-Z]\")) {\n                ss[i] = Character.toString(ss[i].toUpperCase().charAt(0));\n\
    \            }\n        }\n        if (ss.length == 0) return s;\n        return\
    \ String.join(\"\", ss);", "        return Arrays.stream(s.split(\"\"))\n    \
    \        .map(x -> x.equals(x.toUpperCase()) ? x.toLowerCase() : x.toUpperCase())\n\
    \            .collect(Collectors.joining());", '        return null;', "     \
    \   char[] chars = s.toCharArray();\n        int n = chars.length;\n        StringBuilder\
    \ sb = new StringBuilder();\n        if (n == 0) {\n            return sb.toString();\n\
    \        }\n        boolean hasLetters = false;\n        for (int i = 0; i < n;\
    \ i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                hasLetters = true;\n                if (Character.isUpperCase(c))\
    \ {\n                    sb.append(Character.toLowerCase(c));\n              \
    \  } else {\n                    sb.append(Character.toUpperCase(c));\n      \
    \          }\n            } else {\n                sb.append(c);\n          \
    \  }\n        }\n        if (!hasLetters) {\n            return sb.reverse().toString();\n\
    \        }\n        return sb.toString();", "        boolean noLetters = true;\n\
    \        // check if the input string contains any letters\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                noLetters = false;\n                break;\n            }\n\
    \        }\n        // if there's no letters\n        if (noLetters) {\n     \
    \       StringBuilder stringBuilder = new StringBuilder(s);\n            stringBuilder.reverse();\n\
    \            return stringBuilder.toString();\n        }\n        // if there's\
    \ at least one letter, reverse the string\n        // and change cases of letters\n\
    \        StringBuilder stringBuilder = new StringBuilder(s);\n        stringBuilder.reverse();\n\
    \        char c;\n        for (int i = 0; i < stringBuilder.length(); i++) {\n\
    \            c = stringBuilder.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                stringBuilder.setCharAt(i, Character.toLowerCase(c));\n \
    \           } else if (Character.isLowerCase(c)) {\n                stringBuilder.setCharAt(i,\
    \ Character.toUpperCase(c));\n            }\n        }\n        return stringBuilder.toString();",
  "        if (s.isEmpty()) {\n            return s;\n        }\n        char[] sc\
    \ = s.toCharArray();\n        boolean cased = false;\n        for (int i = 0;\
    \ i < sc.length; i++) {\n            if (Character.isLetter(sc[i])) {\n      \
    \          cased = true;\n                break;\n            }\n        }\n \
    \       if (!cased) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        for (int i = 0; i < sc.length; i++) {\n            if (Character.isLetter(sc[i]))\
    \ {\n                sc[i] = Character.isUpperCase(sc[i]) ? Character.toLowerCase(sc[i])\
    \ : Character.toUpperCase(sc[i]);\n            }\n        }\n        return new\
    \ String(sc);", "        String res = \"\";\n        int n = s.length();\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z') {\n                res += Character.toUpperCase(s.charAt(i));\n    \
    \        } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            \
    \    res += Character.toLowerCase(s.charAt(i));\n            } else {\n      \
    \          res += s.charAt(i);\n            }\n        }\n        return res;",
  "        if(s.isEmpty()) return s;\n        int start = 0;\n        int end = s.length()\
    \ - 1;\n        char[] result = s.toCharArray();\n        while(start < end) {\n\
    \            while(start < end && !Character.isLetter(result[start])) start++;\n\
    \            while(start < end && !Character.isLetter(result[end])) end--;\n \
    \           if(start < end) {\n                char tmp = result[start];\n   \
    \             result[start] = result[end];\n                result[end] = tmp;\n\
    \                start++;\n                end--;\n            }\n        }\n\
    \        for(int i = 0; i < result.length; i++) {\n            if(Character.isLetter(result[i]))\
    \ {\n                result[i] = Character.isUpperCase(result[i]) ? \n       \
    \                         Character.toLowerCase(result[i]) : \n              \
    \                  Character.toUpperCase(result[i]);\n            }\n        }\n\
    \        return new String(result);", "        StringBuilder sb = new StringBuilder();\n\
    \        boolean up = false;\n        for (int i = 0; i < s.length(); i++) {\n\
    \            if (Character.isLetter(s.charAt(i))) {\n                if (up) {\n\
    \                    sb.append(Character.toUpperCase(s.charAt(i)));\n        \
    \        } else {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n\
    \                }\n                up = !up;\n            } else {\n        \
    \        sb.append(s.charAt(i));\n            }\n        }\n        if (sb.length()\
    \ > 0) {\n            return sb.toString();\n        } else {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }", "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean hasLetters = false;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n    \
    \        if (Character.isLetter(c)) {\n                hasLetters = true;\n  \
    \              sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) :\
    \ Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return hasLetters ? sb.toString() : sb.reverse().toString();",
  "        StringBuilder r = new StringBuilder();\n        StringBuilder rn = new\
    \ StringBuilder();\n        boolean hasLetter = false;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n\
    \                hasLetter = true;\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    r.append(Character.toLowerCase(s.charAt(i)));\n     \
    \           } else {\n                    r.append(Character.toUpperCase(s.charAt(i)));\n\
    \                }\n            } else {\n                r.append(s.charAt(i));\n\
    \            }\n        }\n        if (hasLetter) {\n            return r.toString();\n\
    \        } else {\n            for (int i = s.length() - 1; i >= 0; i--) {\n \
    \               rn.append(s.charAt(i));\n            }\n            return rn.toString();\n\
    \        }", "        String ret = \"\";\n        if (s.matches(\"[a-zA-Z]+\"\
    )) {\n            for (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    ret += Character.toLowerCase(s.charAt(i));\n        \
    \        } else {\n                    ret += Character.toUpperCase(s.charAt(i));\n\
    \                }\n            }\n        } else {\n            for (int i =\
    \ s.length() - 1; i >= 0; i--) {\n                ret += s.charAt(i);\n      \
    \      }\n        }\n        return ret;", '        return "";', '        return
    null;', "        // your code goes here\n        return \"\";", "        if (s.length()\
    \ == 0) {\n            return \"\";\n        }\n        StringBuilder builder\
    \ = new StringBuilder();\n        String lower = s.toLowerCase();\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n    \
    \        if (lower.charAt(i) != c) {\n                builder.append(lower.charAt(i));\n\
    \            } else {\n                builder.append(c);\n            }\n   \
    \     }\n        return builder.reverse().toString();", "        boolean flag\
    \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                flag = true;\n                break;\n            }\n   \
    \     }\n        if (flag) {\n            StringBuilder result = new StringBuilder();\n\
    \            for (int i = 0; i < s.length(); i++) {\n                if (Character.isLowerCase(s.charAt(i)))\
    \ {\n                    result.append(Character.toUpperCase(s.charAt(i)));\n\
    \                } else if (Character.isUpperCase(s.charAt(i))) {\n          \
    \          result.append(Character.toLowerCase(s.charAt(i)));\n              \
    \  } else {\n                    result.append(s.charAt(i));\n               \
    \ }\n            }\n            return result.toString();\n        } else {\n\
    \            return new StringBuilder(s).reverse().toString();\n        }", " \
    \       // Input: s\n        // Output: str\n        // Time complexity: O(n)\
    \ where n is the length of the string\n        // Space complexity: O(n) where\
    \ n is the length of the string\n        // Check if there is any letter in the\
    \ string\n        boolean isLetter = false;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n               \
    \ isLetter = true;\n                break;\n            }\n        }\n       \
    \ // If there is no letter in the string, reverse the string\n        if (!isLetter)\
    \ {\n            StringBuffer strBuf = new StringBuffer(s);\n            strBuf.reverse();\n\
    \            return strBuf.toString();\n        }\n        // If there is a letter\
    \ in the string, reverse the case of the letters\n        String str = \"\";\n\
    \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                if (Character.isUpperCase(s.charAt(i))) {\n             \
    \       str += Character.toLowerCase(s.charAt(i));\n                } else {\n\
    \                    str += Character.toUpperCase(s.charAt(i));\n            \
    \    }\n            } else {\n                str += s.charAt(i);\n          \
    \  }\n        }\n        return str;", "        StringBuilder sb = new StringBuilder();\n\
    \        boolean allDigits = true;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                allDigits = false;\n                sb.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        if (allDigits)\
    \ {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        if(!s.matches(\".*[a-zA-Z].*\"\
    )) {\n            return sb.append(s).reverse().toString();\n        }\n     \
    \   for(char c : s.toCharArray()) {\n            if(c >= 'a' && c <= 'z') {\n\
    \                sb.append(Character.toUpperCase(c));\n            }\n       \
    \     else if(c >= 'A' && c <= 'Z') {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();", "        if (s.chars().allMatch(x\
    \ -> !Character.isLetter(x))) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        else {\n            return s.chars().mapToObj(c -> Character.isLetter(c)\
    \ ? (char) ((c > 64 && c < 91) ? c + 32 : c - 32) : (char) c).map(String::valueOf).collect(Collectors.joining());\n\
    \        }", "        if (s.isEmpty()) {\n            return s;\n        }\n \
    \       if (s.toLowerCase().equals(s) || s.toUpperCase().equals(s)) {\n      \
    \      return new StringBuilder(s).reverse().toString();\n        }\n        char[]\
    \ stringArray = s.toCharArray();\n        for (int i = 0; i < stringArray.length;\
    \ i++) {\n            if (Character.isAlphabetic(stringArray[i])) {\n        \
    \        stringArray[i] = Character.isUpperCase(stringArray[i]) ?\n          \
    \          Character.toLowerCase(stringArray[i]) :\n                    Character.toUpperCase(stringArray[i]);\n\
    \            }\n        }\n        return new String(stringArray);", "      if(s.matches(\"\
    (?i)\\\\w*\")==false)\n      {\n      return new StringBuilder(s).reverse().toString();\n\
    \      }\n      \n      return new String(s.chars().map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).toArray(), 0, s.length());",
  "        StringBuilder sb = new StringBuilder();\n        boolean allLetters = true;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                allLetters = false;\n                char x = Character.isUpperCase(s.charAt(i))\
    \ ? \n                    Character.toLowerCase(s.charAt(i)) : \n            \
    \        Character.toUpperCase(s.charAt(i));\n                sb.append(x);\n\
    \            } else {\n                sb.append(s.charAt(i));\n            }\n\
    \        }\n        if (allLetters) {\n            sb.reverse();\n        }\n\
    \        return sb.toString();", "        if ( s.chars().anyMatch(Character::isLetter)\
    \ ) {\n            return s.chars().mapToObj(c -> (char)c).map(c -> Character.isLetter(c)\
    \ ? (Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\
    \ : c).map(Object::toString).collect(Collectors.joining());\n        } else {\n\
    \            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n\
    \        }", '        return "";', "        StringBuilder sb = new StringBuilder();\n\
    \        boolean isAllNonLetters = true;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n                isAllNonLetters = false;\n   \
    \         } else {\n                sb.append(c);\n            }\n        }\n\
    \        if (isAllNonLetters) {\n            return sb.reverse().toString();\n\
    \        }\n        return sb.toString();", "        if (s.chars().allMatch(Character::isLetter))\n\
    \            return new StringBuilder(s).reverse().toString();\n        else {\n\
    \            StringBuilder builder = new StringBuilder();\n            for (char\
    \ c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n     \
    \               if (Character.isUpperCase(c))\n                        builder.append(Character.toLowerCase(c));\n\
    \                    else\n                        builder.append(Character.toUpperCase(c));\n\
    \                } else\n                    builder.append(c);\n            }\n\
    \            return builder.toString();\n        }", "        StringBuilder result\
    \ = new StringBuilder();\n        if (s.matches(\"[A-Za-z]+\")) {\n          \
    \  result.append(s.toUpperCase());\n        } else if (s.matches(\"[^A-Za-z]+\"\
    )) {\n            for (int i = s.length() - 1; i >= 0; i--) {\n              \
    \  result.append(s.charAt(i));\n            }\n        } else {\n            for\
    \ (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n\
    \                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n\
    \                } else {\n                    result.append(Character.toUpperCase(c));\n\
    \                }\n            }\n        }\n        return result.toString();",
  "        // Write your code here\n        return \"42\";", "        // TODO: write\
    \ your code here.\n        return null;", "        StringBuilder sb = new StringBuilder();\n\
    \        boolean hasLetter = false;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
    \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n                hasLetter = true;\n            } else {\n\
    \                sb.append(c);\n            }\n        }\n        if (!hasLetter)\
    \ {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
  "        // >>> YOUR CODE HERE <<<\n        return null;", "        return s.codePoints().map(i\
    \ -> {\n            if (Character.isAlphabetic(i)) {\n                return Character.isLowerCase(i)\
    \ ? Character.toUpperCase(i) : Character.toLowerCase(i);\n            }\n    \
    \        return i;\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append).reverse().toString();", "        int isLower = 0;\n \
    \       int isUpper = 0;\n        int isNumber = 0;\n        int isSpecial = 0;\n\
    \        char[] chars = s.toCharArray();\n        int i = 0;\n        while (i\
    \ < chars.length) {\n            if (Character.isLowerCase(chars[i])) {\n    \
    \            isLower++;\n            } else if (Character.isUpperCase(chars[i]))\
    \ {\n                isUpper++;\n            } else if (Character.isDigit(chars[i]))\
    \ {\n                isNumber++;\n            } else {\n                isSpecial++;\n\
    \            }\n            i++;\n        }\n        if (isLower == 0 && isUpper\
    \ == 0) {\n            StringBuilder x = new StringBuilder();\n            for\
    \ (int j = chars.length - 1; j >= 0; j--) {\n                x.append(chars[j]);\n\
    \            }\n            return x.toString();\n        }\n        for (int\
    \ j = 0; j < chars.length; j++) {\n            if (Character.isLowerCase(chars[j]))\
    \ {\n                chars[j] = Character.toUpperCase(chars[j]);\n           \
    \ } else if (Character.isUpperCase(chars[j])) {\n                chars[j] = Character.toLowerCase(chars[j]);\n\
    \            }\n        }\n        return new String(chars);", '        return
    null;', "        if (s.isEmpty()) {\n            return s;\n        }\n      \
    \  boolean hasChar = false;\n        for (int i = 0; i < s.length(); i++) {\n\
    \            if (Character.isLetter(s.charAt(i))) {\n                hasChar =\
    \ true;\n                break;\n            }\n        }\n        if (!hasChar)\
    \ {\n            return new StringBuilder(s).reverse().toString();\n        }\n\
    \        StringBuilder res = new StringBuilder();\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n   \
    \             if (Character.isUpperCase(s.charAt(i))) {\n                    res.append(Character.toLowerCase(s.charAt(i)));\n\
    \                } else {\n                    res.append(Character.toUpperCase(s.charAt(i)));\n\
    \                }\n            } else {\n                res.append(s.charAt(i));\n\
    \            }\n        }\n        return res.toString();", "        if(!s.matches(\"\
    .*[a-zA-Z].*\")) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for(char\
    \ ch : s.toCharArray()) {\n            if(Character.isUpperCase(ch)) {\n     \
    \           sb.append(Character.toLowerCase(ch));\n            } else if(Character.isLowerCase(ch))\
    \ {\n                sb.append(Character.toUpperCase(ch));\n            } else\
    \ {\n                sb.append(ch);\n            }\n        }\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        String\
    \ regex = \"^[a-zA-Z]*$\";\n        if(s.matches(regex)) {\n            for(int\
    \ i = 0; i < s.length(); i++) {\n                char temp = s.charAt(i);\n  \
    \              if(Character.isUpperCase(temp))\n                    sb.append(Character.toLowerCase(temp));\n\
    \                else if(Character.isLowerCase(temp))\n                    sb.append(Character.toUpperCase(temp));\n\
    \            }\n        } else {\n            sb.append(s);\n            sb.reverse();\n\
    \        }\n        return sb.toString();", '        return null;', "        StringBuilder\
    \ sb = new StringBuilder();\n        String result = \"\";\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n          \
    \  if (Character.isLetter(ch)) {\n                ch = Character.isUpperCase(ch)\
    \ ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n            }\n  \
    \          sb.append(ch);\n        }\n        result = sb.toString();\n      \
    \  if (result.equals(s)) {\n            result = new StringBuilder(result).reverse().toString();\n\
    \        }\n        return result;", "        return s.chars().mapToObj(x -> {\n\
    \            if(!Character.isLetter(x))\n                return (char)x;\n   \
    \         if(Character.isUpperCase(x))\n                return Character.toLowerCase(x);\n\
    \            return Character.toUpperCase(x);\n        }).collect(StringBuilder::new,\
    \ (sb, x) -> sb.append(x), StringBuilder::append).reverse().toString();", "  \
    \      // Write your code here.\n        return \"\";", "        int count = 0;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                count++;\n            }\n        }\n        StringBuilder\
    \ result = new StringBuilder();\n        if (count == 0) {\n            for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n                result.append(s.charAt(i));\n\
    \            }\n        } else {\n            for (int i = 0; i < s.length();\
    \ i++) {\n                if (Character.isLowerCase(s.charAt(i))) {\n        \
    \            result.append(Character.toUpperCase(s.charAt(i)));\n            \
    \    } else if (Character.isUpperCase(s.charAt(i))) {\n                    result.append(Character.toLowerCase(s.charAt(i)));\n\
    \                } else {\n                    result.append(s.charAt(i));\n \
    \               }\n            }\n        }\n        return result.toString();",
  "        if (Character.isLetter(s.charAt(0))) {\n            return s.toUpperCase();\n\
    \        } else {\n            return s.toLowerCase();\n        }", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n\
    \                sb.append(Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
    \ : Character.toUpperCase(ch));\n            } else {\n                sb.append(ch);\n\
    \            }\n        }\n        if (sb.toString().matches(\"[^a-zA-Z]+\"))\
    \ {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
  "        if (s.chars().allMatch(Character::isDigit)) {\n            return reverse(s);\n\
    \        }\n        StringBuilder builder = new StringBuilder();\n        for\
    \ (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n   \
    \             if (Character.isUpperCase(c)) {\n                    builder.append(Character.toLowerCase(c));\n\
    \                } else {\n                    builder.append(Character.toUpperCase(c));\n\
    \                }\n            } else {\n                builder.append(c);\n\
    \            }\n        }\n        return builder.toString();", '        return
    null;', "        if(s.matches(\".*[a-zA-Z]+.*\")){\n            StringBuilder\
    \ sb = new StringBuilder();\n            for(char c : s.toCharArray()){\n    \
    \            if(Character.isAlphabetic(c)){\n                    sb.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                }else{\n\
    \                    sb.append(c);\n                }\n            }\n       \
    \     return sb.toString();\n        }else{\n            return new StringBuilder(s).reverse().toString();\n\
    \        }", "        StringBuilder res = new StringBuilder();\n        boolean\
    \ flag = true;\n        for (int i = 0; i < s.length(); i++) {\n            if\
    \ (Character.isLetter(s.charAt(i))) {\n                flag = false;\n       \
    \         if (Character.isUpperCase(s.charAt(i))) {\n                    res.append(Character.toLowerCase(s.charAt(i)));\n\
    \                } else {\n                    res.append(Character.toUpperCase(s.charAt(i)));\n\
    \                }\n            } else {\n                res.append(s.charAt(i));\n\
    \            }\n        }\n        if (flag) {\n            return res.reverse().toString();\n\
    \        }\n        return res.toString();", "        StringBuilder builder =\
    \ new StringBuilder();\n        for (char c : s.toCharArray()) {\n           \
    \ if (Character.isLetter(c)) {\n                builder.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else\
    \ {\n                builder.append(c);\n            }\n        }\n        return\
    \ builder.toString();", "        boolean containsLetter = false;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                containsLetter = true;\n                break;\n        \
    \    }\n        }\n        if (!containsLetter) {\n            return new StringBuilder(s).reverse().toString();\n\
    \        }\n        StringBuilder str = new StringBuilder();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n        \
    \    if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch))\
    \ {\n                    str.append(Character.toLowerCase(ch));\n            \
    \    } else {\n                    str.append(Character.toUpperCase(ch));\n  \
    \              }\n            } else {\n                str.append(ch);\n    \
    \        }\n        }\n        return str.toString();", "        // Write your\
    \ code here\n        return \"\";", "        // Write your code here\n       \
    \ return \"\";", "        if(s.matches(\".*[a-zA-Z]+.*\")) {\n            return\
    \ s.chars()\n                .mapToObj(ch -> (char)ch)\n                .map(c\
    \ -> Character.isLetter(c) ? Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c) : c)\n                .map(c -> c.toString())\n \
    \               .collect(Collectors.joining());\n        }\n        else {\n \
    \           return new StringBuilder(s).reverse().toString();\n        }", " \
    \       StringBuilder sb = new StringBuilder();\n        boolean isLetter = false;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
    \            if (Character.isLetter(ch)) {\n                sb.append(Character.toUpperCase(ch));\n\
    \                isLetter = true;\n            } else {\n                sb.append(ch);\n\
    \            }\n        }\n        if (!isLetter) {\n            return sb.reverse().toString();\n\
    \        }\n        return sb.toString();", "        if (s.matches(\"\\\\d+\"\
    )) {\n            // The string contains only digits, reverse it.\n          \
    \  return new StringBuilder(s).reverse().toString();\n        } else {\n     \
    \       StringBuilder sb = new StringBuilder();\n            for (int i = 0; i\
    \ < s.length(); i++) {\n                char ch = s.charAt(i);\n             \
    \   if (Character.isUpperCase(ch)) {\n                    sb.append(Character.toLowerCase(ch));\n\
    \                } else if (Character.isLowerCase(ch)) {\n                   \
    \ sb.append(Character.toUpperCase(ch));\n                } else {\n          \
    \          sb.append(ch);\n                }\n            }\n            return\
    \ sb.toString();\n        }", "        char[] chs = s.toCharArray();\n       \
    \ boolean hasLetters = false;\n        for (int i = 0; i < chs.length; i++) {\n\
    \            if (Character.isLetter(chs[i])) {\n                hasLetters = true;\n\
    \                if (Character.isUpperCase(chs[i]))\n                    chs[i]\
    \ = Character.toLowerCase(chs[i]);\n                else\n                   \
    \ chs[i] = Character.toUpperCase(chs[i]);\n            }\n        }\n        if\
    \ (!hasLetters) {\n            for (int i = 0; i < chs.length / 2; i++) {\n  \
    \              char temp = chs[i];\n                chs[i] = chs[chs.length -\
    \ i - 1];\n                chs[chs.length - i - 1] = temp;\n            }\n  \
    \      }\n        return new String(chs);", "        StringBuilder sb = new StringBuilder();\n\
    \        boolean allNonAlpha = true;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (Character.isAlphabetic(c))\
    \ {\n                allNonAlpha = false;\n                if (Character.isUpperCase(c))\
    \ {\n                    sb.append(Character.toLowerCase(c));\n              \
    \  } else {\n                    sb.append(Character.toUpperCase(c));\n      \
    \          }\n            } else {\n                sb.append(c);\n          \
    \  }\n        }\n        return allNonAlpha ? sb.reverse().toString() : sb.toString();",
  "        char[] res = s.toCharArray();\n        boolean isLower = false;\n     \
    \   boolean isUpper = false;\n        for (int i = 0; i < res.length; i++) {\n\
    \            if (Character.isLowerCase(res[i])) {\n                isLower = true;\n\
    \            }\n            if (Character.isUpperCase(res[i])) {\n           \
    \     isUpper = true;\n            }\n        }\n        if (isLower == false\
    \ && isUpper == false) {\n            for (int i = 0; i < res.length/2; i++) {\n\
    \                char temp = res[i];\n                res[i] = res[res.length\
    \ - i - 1];\n                res[res.length - i - 1] = temp;\n            }\n\
    \        } else {\n            for (int i = 0; i < res.length; i++) {\n      \
    \          if (Character.isLowerCase(res[i])) {\n                    res[i] =\
    \ Character.toUpperCase(res[i]);\n                } else if (Character.isUpperCase(res[i]))\
    \ {\n                    res[i] = Character.toLowerCase(res[i]);\n           \
    \     }\n            }\n        }\n        return new String(res);", "       \
    \ if (s.replaceAll(\"[a-zA-Z]\", \"\").length() == s.length()) {\n           \
    \ return reverse(s);\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isAlphabetic(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    sb.append(Character.toLowerCase(c));\n              \
    \  } else {\n                    sb.append(Character.toUpperCase(c));\n      \
    \          }\n            } else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();", "        return Stream.of(s.split(\"\
    \"))\n        .map(c -> {\n            if (c.matches(\"[a-z]\"))\n           \
    \     return c.toUpperCase();\n            else if (c.matches(\"[A-Z]\"))\n  \
    \              return c.toLowerCase();\n            else\n                return\
    \ c;\n        })\n        .collect(Collectors.joining(\"\"));", "        // #\n\
    \        return s;", '        return null;', "        if (s.chars().noneMatch(Character::isLetter))\
    \ {\n            return new StringBuilder(s).reverse().toString();\n        }\n\
    \        var sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n\
    \                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
    \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        if (sb.toString().equals(s)) {\n            return\
    \ new StringBuilder(s).reverse().toString();\n        }\n        return sb.toString();",
  "        // TODO: Write your code here\n        return \"\";", "        // write\
    \ your code here\n        // --------------\n        // code goes here\n     \
    \   // --------------\n        return \"\";", "        StringBuilder builder =\
    \ new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n     \
    \       char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n    \
    \            if (Character.isUpperCase(c)) {\n                    builder.append(Character.toLowerCase(c));\n\
    \                } else {\n                    builder.append(Character.toUpperCase(c));\n\
    \                }\n            } else {\n                builder.append(c);\n\
    \            }\n        }\n        if (builder.toString().equals(s)) {\n     \
    \       return reverse(s);\n        }\n        return builder.toString();", " \
    \       return s.codePoints().map(cp -> {\n            if (Character.isAlphabetic(cp))\
    \ {\n                return cp ^ 0x20;\n            }\n            return cp;\n\
    \        }).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).reverse().toString();",
  "        StringBuilder sb = new StringBuilder();\n        boolean flag = true;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                flag = false;\n   \
    \             c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
    \            }\n            sb.append(c);\n        }\n        if (flag) {\n  \
    \          sb.reverse();\n        }\n        return sb.toString();", "       \
    \ boolean hasLetters = s.chars().anyMatch(Character::isLetter);\n        if (!hasLetters)\
    \ {\n            return new StringBuilder(s).reverse().toString();\n        }\
    \ else {\n            StringBuilder sb = new StringBuilder();\n            for\
    \ (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n\
    \                    sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n                } else {\n                   \
    \ sb.append(c);\n                }\n            }\n            return sb.toString();\n\
    \        }", '        return "";', "        String res = \"\";\n        boolean\
    \ needReverse = true;\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      if (Character.isLetter(s.charAt(i))) {\n                needReverse = false;\n\
    \                res += Character.toLowerCase(s.charAt(i)) == s.charAt(i) ? Character.toUpperCase(s.charAt(i))\
    \ : Character.toLowerCase(s.charAt(i));\n            } else {\n              \
    \  res += s.charAt(i);\n            }\n        }\n        if (needReverse) {\n\
    \            res = new StringBuilder(res).reverse().toString();\n        }\n \
    \       return res;", "        // write your code here\n        boolean noLetters\
    \ = true;\n        StringBuilder result = new StringBuilder();\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                noLetters = false;\n                result.append(Character.toLowerCase(s.charAt(i))\
    \ == s.charAt(i) ?\n                            Character.toUpperCase(s.charAt(i))\
    \ : Character.toLowerCase(s.charAt(i)));\n            } else {\n             \
    \   result.append(s.charAt(i));\n            }\n        }\n        return noLetters\
    \ ? new StringBuilder(s).reverse().toString() : result.toString();", "       \
    \ int n = s.length();\n        char[] arr = s.toCharArray();\n        boolean\
    \ hasLetter = false;\n        for (int i = 0; i < n; i++) {\n            int idx\
    \ = arr[i];\n            //if ((idx >= 65 && idx <= 90) || (idx >= 97 && idx <=\
    \ 122)) {\n            if (Character.isLetter(arr[i])) {\n                hasLetter\
    \ = true;\n                arr[i] = Character.isUpperCase(arr[i]) ? Character.toLowerCase(arr[i])\
    \ : Character.toUpperCase(arr[i]);\n            }\n        }\n        if (!hasLetter)\
    \ {\n            for (int i = 0; i < n / 2; i++) {\n                int j = n\
    \ - i - 1;\n                char temp = arr[i];\n                arr[i] = arr[j];\n\
    \                arr[j] = temp;\n            }\n        }\n        return new\
    \ String(arr);", "        int l = s.length();\n        int c = 0;\n        int\
    \ i = 0;\n        while (i < l) {\n            int v = s.charAt(i);\n        \
    \    if (((v >= 65) && (v <= 90)) || ((v >= 97) && (v <= 122))) {\n          \
    \      c += 1;\n            }\n            i += 1;\n        }\n        if (c ==\
    \ 0) {\n            StringBuilder sb = new StringBuilder();\n            i = l\
    \ - 1;\n            while (i >= 0) {\n                sb.append(s.charAt(i));\n\
    \                i -= 1;\n            }\n            return sb.toString();\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        i = 0;\n \
    \       while (i < l) {\n            int v = s.charAt(i);\n            if ((v\
    \ >= 65) && (v <= 90)) {\n                sb.append((char)(v + 32));\n       \
    \     } else if ((v >= 97) && (v <= 122)) {\n                sb.append((char)(v\
    \ - 32));\n            } else {\n                sb.append((char)v);\n       \
    \     }\n            i += 1;\n        }\n        return sb.toString();", "   \
    \     StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (!Character.isLetter(c))\n                sb.append(c);\n    \
    \        else {\n                hasLetter = true;\n                sb.append(Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            }\n   \
    \     }\n        return hasLetter ? sb.toString() : sb.reverse().toString();"]
stop_tokens:
- "\n    }\n"
