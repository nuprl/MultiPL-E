language: java
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Fill this in.\n        if (x<0 || base<2 || base>9) {\n          \
    \  throw new IllegalArgumentException(\"bad input\");\n        }\n        if (x==0)\
    \ {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x>0) {\n            sb.append(x%base);\n            x = x/base;\n\
    \        }\n        return sb.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ret = \"\";\n        if (x == 0) {\n            return \"0\";\n\
    \        }\n        while (x > 0) {\n            ret = ((x % base) + ret);\n \
    \           x = x / base;\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ans = \"\";\n        while (x > 0) {\n            long rest =\
    \ x % base;\n            x /= base;\n            ans = String.valueOf(rest) +\
    \ ans;\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          long r = x % base;\n            sb.append(r);\n            x /= base;\n\
    \        }\n        return sb.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        int[] digits\
    \ = new int[100];\n        int cnt = 0;\n        while (x > 0) {\n           \
    \ digits[cnt++] = (int) x % base;\n            x /= base;\n        }\n       \
    \ StringBuilder sb = new StringBuilder();\n        for (int i = cnt - 1; i >=\
    \ 0; i--) {\n            sb.append(digits[i]);\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg40u0si_.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            digits[cnt++] = (int) x % base;\n            \
    \                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        do {\n            sb.append(Long.toString(x\
    \ % base));\n            x /= base;\n        } while (x > 0);\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        boolean\
    \ negative = false;\n        if (x < 0) {\n            negative = true;\n    \
    \        x = -x;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n\
    \        }\n        if (negative) {\n            sb.append(\"-\");\n        }\n\
    \        return sb.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // fill in here\n        return x + \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp788lp3my.java:23)\n"
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n \
    \           sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder answer = new StringBuilder();\n        while (x > 0) {\n\
    \            answer.append(x % base);\n            x /= base;\n        }\n   \
    \     return answer.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ret = \"\";\n        while (x > 0) {\n            long b = x %\
    \ base;\n            x /= base;\n            ret = b + ret;\n        }\n     \
    \   return ret;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            s = (x % base)\
    \ + s;\n            x /= base;\n        }\n        return s;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        boolean\
    \ neg = x < 0;\n        x = Math.abs(x);\n        String res = \"\";\n       \
    \ while (x > 0) {\n            res = Integer.toString((int) (x % base)) + res;\n\
    \            x /= base;\n        }\n        if (neg) {\n            res = \"-\"\
    \ + res;\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder res = new StringBuilder();\n        while (x > 0) {\n \
    \           res.append(x % base);\n            x /= base;\n        }\n       \
    \ return res.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n \
    \           sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \      return null;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.changeBase(long,\
    \ long)\" is null\n\tat Problem.main(tmpzfb4k7yp.java:22)\n"
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder r = new StringBuilder();\n        while (x != 0) {\n  \
    \          r.append(Long.toString(x % base));\n            x /= base;\n      \
    \  }\n        return r.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        int aux = (int) Math.floor(Math.log(x) / Math.log(base));\n        String\
    \ ans = \"\";\n        for (int i = aux; i >= 0; i--) {\n            if (Math.pow(base,\
    \ i) <= x) {\n                x -= Math.pow(base, i);\n                ans +=\
    \ \"1\";\n            } else {\n                ans += \"0\";\n            }\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0n635ja.java:32)\n"
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String result = \"\";\n        while (x != 0) {\n            result =\
    \ Long.toString(x % base) + result;\n            x /= base;\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder r = new StringBuilder();\n        while (x > 0) {\n   \
    \         r.append(x % base);\n            x /= base;\n        }\n        return\
    \ r.reverse().toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Implement this function\n        if (x <= 0) {\n            return\
    \ \"0\";\n        }\n        String result = \"\";\n        while (x > 0) {\n\
    \            long mod = x % base;\n            result = mod + result;\n      \
    \      x = x / base;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x < 0) {\n            return \"-\" + changeBase(-x, base);\n    \
    \    }\n        if (x < base) {\n            return x + \"\";\n        }\n   \
    \     return changeBase(x / base, base) + x % base;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ans = \"\";\n        while (x > 0) {\n            ans = ((x %\
    \ base) + ans);\n            x = (x / base);\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011369
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder builder = new StringBuilder();\n        while (x != 0)\
    \ {\n            builder.append(x % base);\n            x /= base;\n        }\n\
    \        return builder.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011369
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // BEGIN SOLUTION\n        StringBuilder ans = new StringBuilder();\n\
    \        while (x > 0) {\n            long rem = x % base;\n            ans.append(rem);\n\
    \            x /= base;\n        }\n        return ans.reverse().toString();\n\
    \        // END SOLUTION\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Your code here.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpof4gxpfb.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011369
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String result = \"\";\n        long current = x;\n        while (current\
    \ > 0) {\n            long remainder = current % base;\n            result = Long.toString(remainder)\
    \ + result;\n            current = current / base;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            long c = x % base;\n            sb.append(c);\n\
    \            x /= base;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x > 0) {\n            res = res +\
    \ Long.toString(x % base);\n            x = x / base;\n        }\n        return\
    \ new StringBuilder(res).reverse().toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011369
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            s = ((x % base)\
    \ + s);\n            x = (x / base);\n        }\n        return s;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x > 0) {\n            res = (Long.toString((x\
    \ % base))) + res;\n            x /= base;\n        }\n        return res;\n \
    \   }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        long q = x;\n        StringBuilder sb = new StringBuilder();\n      \
    \  while (q > 0) {\n            sb.append(q % base);\n            q /= base;\n\
    \        }\n        return sb.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpship0yt4.java:22)\n"
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String result = \"\";\n        while (x > 0) {\n            long remainder\
    \ = x % base;\n            x = x / base;\n            result = remainder + result;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String y = \"\";\n        while (x != 0) {\n            y = (x % base)\
    \ + y;\n            x = x / base;\n        }\n        return y;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder res = new StringBuilder();\n        while (x > 0) {\n \
    \           res.append(x % base);\n            x /= base;\n        }\n       \
    \ return res.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            long curr = x\
    \ % base;\n            s = curr + s;\n            x /= base;\n        }\n    \
    \    return s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            long n = x % base;\n\
    \            s = n + s;\n            x = x / base;\n        }\n        return\
    \ s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ans = \"\";\n        while (x > 0) {\n            ans = x % base\
    \ + ans;\n            x /= base;\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // fill in code here\n        String result = \"\";\n        while (x\
    \ != 0) {\n            result = (char)((x % base) + 48) + result;\n          \
    \  x /= base;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder res = new StringBuilder();\n        while (x > 0) {\n \
    \           res.append(x % base);\n            x /= base;\n        }\n       \
    \ return res.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // fill in your code here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.changeBase(long,\
    \ long)\" is null\n\tat Problem.main(tmpn220chyi.java:23)\n"
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String newNumber = new String();\n        while (x != 0) {\n        \
    \    newNumber = ((x % base) + newNumber);\n            x = (x / base);\n    \
    \    }\n        return newNumber;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        ArrayList<Long> digits = new ArrayList<Long>();\n        while (x !=\
    \ 0) {\n            digits.add(x % base);\n            x /= base;\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = digits.size()\
    \ - 1; i >= 0; i--) {\n            sb.append(digits.get(i));\n        }\n    \
    \    return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String prefix = \"\";\n        while (x > 0) {\n            long y =\
    \ x % base;\n            prefix = y + prefix;\n            x = x / base;\n   \
    \     }\n        return prefix;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder result = new StringBuilder();\n        while (x != 0) {\n\
    \            result.append(x % base);\n            x /= base;\n        }\n   \
    \     return result.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x,(int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          long remainder = x % base;\n            sb.append(remainder);\n   \
    \         x /= base;\n        }\n        return sb.reverse().toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        String res\
    \ = \"\";\n        while (x > 0) {\n            res = Long.toString(x % base)\
    \ + res;\n            x /= base;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder\
    \ res = new StringBuilder();\n        while (x > 0) {\n            res.append(x\
    \ % base);\n            x /= base;\n        }\n        return res.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x != 0) {\n            res = (x %\
    \ base) + res;\n            x /= base;\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        if (x == 0) {\n            return \"0\";\n\
    \        }\n        while (x > 0) {\n            long r = x % base;\n        \
    \    x = x / base;\n            s = r + s;\n        }\n        return s;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        boolean isNegative = x < 0;\n        x = Math.abs(x);\n        String\
    \ res = \"\";\n        while (x > 0) {\n            res = x % base + res;\n  \
    \          x /= base;\n        }\n        return isNegative ? \"-\" + res : res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            long r = x % base;\n\
    \            s = r + s;\n            x = x / base;\n        }\n        return\
    \ s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x < base) {\n            return Long.toString(x);\n        }\n  \
    \      return changeBase(x / base, base) + Long.toString(x % base);\n    }\n \
    \   public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        for (;;) {\n       \
    \     long r = x % base;\n            x /= base;\n            sb.append(r);\n\
    \            if (x == 0) break;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        for (; x > 0; x /= base)\
    \ {\n            sb.append(x % base);\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        if (x == 0) {\n    \
    \        return \"0\";\n        }\n        while (x > 0) {\n            sb.append(x\
    \ % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        for (int i = 0; i < 60; i++) {\n          \
    \  s = String.valueOf(x % base) + s;\n            x /= base;\n        }\n    \
    \    return s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw13plam1.java:27)\n"
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        if\
    \ (x == 0)\n            return \"0\";\n        else {\n            StringBuilder\
    \ sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(digits.charAt((int)\
    \ (x % base)));\n                x /= base;\n            }\n            return\
    \ sb.reverse().toString();\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Assertions\n        if (base > 10) {\n            throw new RuntimeException(\"\
    base must be less than 10.\");\n        }\n        // end\n        long _temp1;\n\
    \        long _temp0;\n        long _temp2;\n        long _temp3;\n        long\
    \ _temp4;\n        long _temp5;\n        long _temp6;\n        long _temp7;\n\
    \        long _temp8;\n        long _temp9;\n        long _temp10;\n        long\
    \ _temp11;\n        long _temp12;\n        long _temp13;\n        long _temp14;\n\
    \        long _temp15;\n        long _temp16;\n        long _temp17;\n       \
    \ long _temp18;\n        long _temp19;\n        long _temp20;\n        long _temp21;\n\
    \        long _temp22;\n        long _temp23;\n        long _temp24;\n       \
    \ long _temp25;\n        long _temp26;\n        long _temp27;\n        long _temp28;\n\
    \        long _temp29;\n        long _temp30;\n        long _temp31;\n       \
    \ long _temp32;\n        long _temp33;\n        long _temp34;\n        long _temp35;\n\
    \        long _temp36;\n        long _temp37;\n        long _temp38;\n       \
    \ long _temp39;\n        long _temp40;\n        long _temp41;\n        long _temp42;\n\
    \        long _temp43;\n        long _temp44;\n        long _temp45;\n       \
    \ long _temp46;\n        long _temp47;\n        long _temp48;\n        long _temp49;\n\
    \        long _temp50;\n        long _temp51;\n        long _temp52;\n       \
    \ long _temp53;\n        long _temp54;\n        long _temp55;\n        long _temp56;\n\
    \        long _temp57;\n        long _temp58;\n        long _temp59;\n       \
    \ long _temp60;\n        long _temp61;\n        long _temp62;\n        long _temp63;\n\
    \        long _temp64;\n        long _temp65;\n        long _temp66;\n       \
    \ long _temp67\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp786d7jpk.java:91: error: ';' expected\n        long _temp67\n \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String result = \"\";\n        while (x > 0) {\n            long mod\
    \ = x % base;\n            x = x / base;\n            result = String.valueOf(mod)\
    \ + result;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x != 0) {\n            res = String.valueOf(x\
    \ % base) + res;\n            x /= base;\n        }\n        return res;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        StringBuffer\
    \ sb = new StringBuffer();\n        while (x > 0) {\n            sb.append(x %\
    \ base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String r = \"\";\n        while (x > 0) {\n            long m = x % base;\n\
    \            r = String.valueOf(m) + r;\n            x /= base;\n        }\n \
    \       return r;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.changeBase(long,\
    \ long)\" is null\n\tat Problem.main(tmpy2g1yqyu.java:22)\n"
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x < base) {\n            return new String(Long.toString(x));\n \
    \       }\n        return changeBase((x / base), base) + (Long.toString(x % base));\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder result = new StringBuilder();\n        for (;x > 0; x /=\
    \ base) {\n            long r = x % base;\n            result.append(r);\n   \
    \     }\n        return result.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        for (; 0l < x; x /=\
    \ base) {\n            long digit = x % base;\n            sb.append(digit);\n\
    \        }\n        return sb.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuffer sb = new StringBuffer();\n        while (x != 0) {\n   \
    \         long t = x % base;\n            sb.append(t);\n            x /= base;\n\
    \        }\n        sb.reverse();\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // >>>>\n        // >>>>\n        // >>>>\n        return \"\";\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkkmo8gd.java:25)\n"
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x > 0) {\n            res = (x % base)\
    \ + res;\n            x /= base;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        String ans\
    \ = \"\";\n        while (x > 0) {\n            ans = x % base + ans;\n      \
    \      x /= base;\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            long r = x % base;\n\
    \            s = r + s;\n            x = x / base;\n        }\n        return\
    \ s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        for (; x > 0; x /= base)\
    \ {\n            sb.append(x % base);\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String xs = Long.toString(x);\n        String ret = \"\";\n        long\
    \ count = 0;\n        while (true) {\n            long tmp = (long) x / base;\n\
    \            long mod = x % base;\n            ret = Long.toString(mod) + ret;\n\
    \            if (tmp == 0) {\n                break;\n            }\n        \
    \    x = tmp;\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String result = \"\";\n        while (x > 0) {\n            long remain\
    \ = x % base;\n            x = x / base;\n            result = remain + result;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        assert(base < 10);\n        String res = \"\";\n        while (x > 0)\
    \ {\n            res = Long.toString(x % base) + res;\n            x /= base;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x < base) {\n            return \"\" + x;\n        }\n        return\
    \ changeBase(x / base, base) + \"\" + x % base;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Use a string to keep track of the result.\n        String result =\
    \ \"\";\n        // Keep track of the quotient to compare against zero.\n    \
    \    long quotient = x;\n        // Continue to divide the quotient by the base\
    \ until the quotient\n        // is zero.\n        while (quotient != 0) {\n \
    \           // Find the remainder of x / base.\n            long remainder = quotient\
    \ % base;\n            // Divide quotient by base to get the next quotient.\n\
    \            quotient = quotient / base;\n            // Add the remainder to\
    \ the result string.\n            result = Long.toString(remainder) + result;\n\
    \        }\n        // Return the string representation of the number in base.\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String binary = \"\";\n        while (x != 0) {\n            long digit\
    \ = x % base;\n            binary = digit + binary;\n            x = x / base;\n\
    \        }\n        return binary;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder result = new StringBuilder();\n        if (x == 0) {\n\
    \            return \"0\";\n        }\n        while (x > 0) {\n            result.append(x\
    \ % base);\n            x /= base;\n        }\n        return result.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        long m = 0;\n        for (; x > 0; x /= base)\
    \ {\n            m = x % base;\n            s = m + s;\n        }\n        return\
    \ s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ans = \"\";\n        while (x > 0) {\n            ans = x % base\
    \ + ans;\n            x /= base;\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder ans = new StringBuilder();\n        for (; x > 0; x /=\
    \ base) {\n            ans.append(x % base);\n        }\n        return ans.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n\
    \            result.append(x % base);\n            x /= base;\n        }\n   \
    \     return result.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String\
    \ res = \"\";\n        while(x>0) {\n            long r = x%base;\n          \
    \  res = digits.charAt((int)r) + res;\n            x = x/base;\n        }\n  \
    \      return res;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String result = \"\";\n        while (x > 0) {\n            long remainder\
    \ = x % base;\n            result = String.valueOf(remainder) + result;\n    \
    \        x = x / base;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n \
    \           sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        String res\
    \ = \"\";\n        while (x > 0) {\n            long rem = x % base;\n       \
    \     res = rem + res;\n            x /= base;\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        long n = x;\n        long r = 0;\n        long t = 0;\n        String\
    \ ans = \"\";\n        while (n > 0) {\n            r = n % base;\n          \
    \  n = n / base;\n            t = t * 10 + r;\n        }\n        while (t > 0)\
    \ {\n            r = t % 10;\n            t = t / 10;\n            ans = ans +\
    \ r;\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi4e37a3q.java:37)\n"
  stdout: ''
  timestamp: 1660011372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            long r = x % base;\n\
    \            s = s + r;\n            x = x / base;\n        }\n        return\
    \ s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cj_tsk3.java:29)\n"
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder number = new StringBuilder();\n        while (x > 0) {\n\
    \            number.append(x % base);\n            x /= base;\n        }\n   \
    \     return number.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return (String)null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.changeBase(long,\
    \ long)\" is null\n\tat Problem.main(tmpio0og0dk.java:22)\n"
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        long num = 0;\n        long divisor = 1;\n        long count = 0;\n \
    \       while (x != 0) {\n            num += (x % base) * divisor;\n         \
    \   x /= base;\n            divisor *= 10;\n            count++;\n        }\n\
    \        return Long.toString(num);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ans = \"\";\n        while (x > 0) {\n            ans = ((x %\
    \ base) + ans);\n            x = x / base;\n        }\n        return ans;\n \
    \   }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ans = \"\";\n        while (x != 0) {\n            ans = ans +\
    \ (x % base);\n            x = x / base;\n        }\n        return new StringBuilder(ans).reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011372
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.changeBase(long,\
    \ long)\" is null\n\tat Problem.main(tmpy2g1yqyu.java:22)\n"
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuffer sb = new StringBuffer();\n        while (x > 0) {\n    \
    \        long r = x % base;\n            x = x / base;\n            sb.append(r);\n\
    \        }\n        return sb.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011373
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x < base) {\n            return Long.toString(x);\n        }\n  \
    \      return changeBase(x / base, base) + Long.toString(x % base);\n    }\n \
    \   public static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        final long ten = 10l;\n        final long one = 1l;\n        StringBuilder\
    \ ans = new StringBuilder();\n        for (long i = x; i > 0; i /= base) {\n \
    \           long rem = i % base;\n            if (rem >= ten) {\n            \
    \    ans.append((char) (rem - ten + 65));\n            } else {\n            \
    \    ans.append(rem);\n            }\n        }\n        return ans.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011373
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if(x == 0) return \"0\";\n        String res = \"\";\n        while(x\
    \ > 0) {\n            res = (x % base) + res;\n            x /= base;\n      \
    \  }\n        return res;\n    }\n    public static void main(String[] args) {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Your code here!\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.changeBase(long,\
    \ long)\" is null\n\tat Problem.main(tmphol9elt9.java:23)\n"
  stdout: ''
  timestamp: 1660011373
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // >>> changeBase((8l), (3l))\n        // (\"22\")\n        // >>> changeBase((8l),\
    \ (2l))\n        // (\"1000\")\n        // >>> changeBase((7l), (2l))\n      \
    \  // (\"111\")\n        return IntStream.iterate((int) x, (i) -> i >= base, (i)\
    \ -> i / (int) base).map((i) -> i % (int) base).mapToObj((i) -> Integer.toString(i)).collect(Collectors.joining(\"\
    \"));\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi83mevg8.java:28)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder res = new StringBuilder();\n        while (x > 0) {\n \
    \           res.append(x % base);\n            x /= base;\n        }\n       \
    \ return res.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        long quotient = 0l;\n        long remainder = 0l;\n        quotient =\
    \ x / base;\n        remainder = x % base;\n        String retval = Long.toString(remainder);\n\
    \        while (quotient > 0) {\n            quotient = quotient / base;\n   \
    \         remainder = quotient % base;\n            retval = Long.toString(remainder)\
    \ + retval;\n        }\n        return retval;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4c1xy5zo.java:32)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n\
    \            long k = x % base;\n            x = x / base;\n            result.append(k);\n\
    \        }\n        return result.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          long rem = x % base;\n            sb.append(String.valueOf(rem));\n\
    \            x /= base;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x > 0) {\n            res = Long.toString(x\
    \ % base) + res;\n            x /= base;\n        }\n        return res;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // fill here!\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_iuebtr.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.changeBase(long,\
    \ long)\" is null\n\tat Problem.main(tmpy2g1yqyu.java:22)\n"
  stdout: ''
  timestamp: 1660011371
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // fill in code here\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgug23uhv.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // >>> changeBase((8l), (3l))\n        // (\"22\")\n        // >>> changeBase((8l),\
    \ (2l))\n        // (\"1000\")\n        // >>> changeBase((7l), (2l))\n      \
    \  // (\"111\")\n        StringBuilder result = new StringBuilder();\n       \
    \ while (x > 0) {\n            long rem = x % base;\n            x = x / base;\n\
    \            result.append(rem);\n        }\n        return result.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x > 0) {\n            res = x % base\
    \ + res;\n            x /= base;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String binaryStr = \"\";\n        while (x > 0) {\n            long remainder\
    \ = x % base;\n            x = x / base;\n            binaryStr = remainder +\
    \ binaryStr;\n        }\n        return binaryStr;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String str = \"\";\n        while (x != 0) {\n            str = String.valueOf(x\
    \ % base) + str;\n            x /= base;\n        }\n        return str;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x < base)\n            return \"\" + x;\n        else\n         \
    \   return changeBase(x / base, base) + x % base;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String bin = \"\";\n        while (x > 0) {\n            long r = x %\
    \ base;\n            bin = r + bin;\n            x = x / base;\n        }\n  \
    \      return bin;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) return \"0\";\n        StringBuilder ans = new StringBuilder();\n\
    \        while (x > 0) {\n            ans.append(x % base);\n            x /=\
    \ base;\n        }\n        return ans.reverse().toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Just convert to number and back\n        return Long.toString(Long.parseLong(Long.toString(x),\
    \ (int)base), 10);\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"8\" under radix 3\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat Problem.changeBase(tmplvr6cgll.java:20)\n\
    \tat Problem.main(tmplvr6cgll.java:23)\n"
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        ArrayList<Long> digits = new ArrayList<Long>();\n        // generate\
    \ digits in reverse order.\n        while (x > 0) {\n            long digit =\
    \ x % base;\n            digits.add(digit);\n            x = x / base;\n     \
    \   }\n        // generate string representation.\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = digits.size() - 1; i >= 0; i--) {\n\
    \            sb.append(digits.get(i));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        long num = x;\n        String res = \"\";\n        do {\n           \
    \ res = String.valueOf(num % base) + res;\n            num /= base;\n        }\
    \ while (num > 0);\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        long n = x;\n      \
    \  while (n > 0) {\n            long r = n % base;\n            n = n / base;\n\
    \            sb.append(r);\n        }\n        sb.reverse();\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n \
    \           long rem = x % base;\n            sb.append(rem);\n            x /=\
    \ base;\n        }\n        return sb.reverse().toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n\
    \        }\n        return sb.reverse().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\"\
    )));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011374
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        String digits\
    \ = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String result = \"\";\n\
    \        while (x > 0) {\n            long c = x % base;\n            x = x /\
    \ base;\n            result = digits.charAt((int)c) + result;\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x > 0) {\n            s = (x % base)\
    \ + s;\n            x /= base;\n        }\n        return s;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String converted = \"\";\n        while (x > 0) {\n            converted\
    \ = (converted) + (Long.toString((x % base)));\n            x = x / base;\n  \
    \      }\n        return converted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2kabqz7h.java:28)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        do {\n            int\
    \ d = (int)(x % base);\n            sb.append(d);\n            x /= base;\n  \
    \      } while (x > 0);\n        return sb.reverse().toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x > 0) {\n            int remainder\
    \ = (int) (x % base);\n            x /= base;\n            res = remainder + res;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String chars = \"0123456789\";\n        StringBuilder res = new StringBuilder();\n\
    \        while (x > 0) {\n            res.append(chars.charAt((int) (x % base)));\n\
    \            x /= base;\n        }\n        return res.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Your code here\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpls_jebh4.java:23)\n"
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // base case: if number is 0, then return empty string.\n        if (x\
    \ == 0) {\n            return \"\";\n        }\n        // recursive case: find\
    \ the remainder of dividing x by base.\n        long remainder = x % base;\n \
    \       // recursively change the base by cutting off the right most digit\n \
    \       // using integer division, using the following formula\n        // x /\
    \ base + remender * 10\n        String remaining = changeBase(x / base, base);\n\
    \        // append remainder to the remaining string\n        return remaining\
    \ + remainder;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        // x /= base;\n    \
    \    // if (x == 0) {\n        //     sb.append('0');\n        // }\n        while\
    \ (x > 0) {\n            sb.append(x % base);\n            x /= base;\n      \
    \  }\n        return sb.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ans = \"\";\n        while (x != 0) {\n            ans = Long.toString(x\
    \ % base) + ans;\n            x /= base;\n        }\n        return ans;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        assert(base < 10);\n        // assert base < 10\n        return Long.toString(x,\
    \ (int)base);\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % base) + result;\n            x /= base;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Implement your solution here\n        String ans = \"\";\n       \
    \ while (x > 0) {\n            ans = (x % base) + ans;\n            x /= base;\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpship0yt4.java:22)\n"
  stdout: ''
  timestamp: 1660011370
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n \
    \           sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String ret = \"\";\n        while (x > 0) {\n            ret = (x % base)\
    \ + ret;\n            x /= base;\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        List<Integer> ans = new ArrayList<>();\n        do {\n            ans.add((int)(x\
    \ % base));\n            x /= base;\n        } while (x > 0);\n        Collections.reverse(ans);\n\
    \        return ans.stream().map(y -> y.toString()).collect(Collectors.joining());\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String s = \"\";\n        while (x != 0) {\n            long r = x %\
    \ base;\n            s = r + s;\n            x = x / base;\n        }\n      \
    \  return s;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        do {\n            sb.append(x\
    \ % base);\n            x /= base;\n        } while (x > 0);\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        ArrayList<Integer> a = new ArrayList<Integer>();\n        while (x >\
    \ 0) {\n            a.add((int) ((x % base)));\n            x /= base;\n     \
    \   }\n        Collections.reverse(a);\n        return a.stream().map(Object::toString).collect(Collectors.joining());\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        int bit = 0;\n        long rem;\n        char[] digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'};\n        StringBuilder res = new StringBuilder();\n\
    \        while (x > 0) {\n            rem = x % base;\n            x = x / base;\n\
    \            res.append(digits[(int) rem]);\n        }\n        return res.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        if (x == 0) {\n    \
    \        return \"0\";\n        }\n        while (x > 0) {\n            sb.append(x\
    \ % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011371
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder ans = new StringBuilder();\n        while (x > 0) {\n \
    \           ans.append(x % base);\n            x /= base;\n        }\n       \
    \ return ans.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuffer output = new StringBuffer();\n        while (x > 0) {\n\
    \            output.append(x % base);\n            x /= base;\n        }\n   \
    \     return output.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder\
    \ output = new StringBuilder();\n        while (x > 0) {\n            output.append(x\
    \ % base);\n            x /= base;\n        }\n        return output.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, ((int) (base)));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011375
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        ArrayList<Long> digits = new ArrayList<Long>();\n        for (; x > 0;\
    \ x /= base) {\n            digits.add(x % base);\n        }\n        Collections.reverse(digits);\n\
    \        return digits.stream().map(i -> i.toString()).collect(Collectors.joining());\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        String res = \"\";\n        while (x > 0) {\n            res = String.valueOf(x\
    \ % base) + res;\n            x /= base;\n        }\n        return res;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        return Long.toString(x, (int)base);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x\
    \ % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        int X = (int) x;\n        int B = (int) base;\n        return Integer.toString(X,\
    \ B);\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // x = 7\n        // base = 2\n        // 111\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x\
    \ % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        List<Integer> digits = new ArrayList<>();\n        while (x > 0) {\n\
    \            digits.add((int)(x % base));\n            x /= base;\n        }\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = digits.size()\
    \ - 1; i >= 0; i--) {\n            builder.append(String.valueOf(digits.get(i)));\n\
    \        }\n        return builder.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n\
    \    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuffer result = new StringBuffer();\n        while(x > 0) {\n \
    \           result.append(x % base);\n            x /= base;\n        }\n    \
    \    return result.reverse().toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // >>> not base == 10\n        // False\n        if ((base == 10)) {\n\
    \            return Long.toString(x);\n        }\n        // >>> \"\"\n      \
    \  // \"\"\n        String out = \"\";\n        // >>> True\n        // True\n\
    \        while ((x > 0)) {\n            // >>> True\n            // True\n   \
    \         out = (String.valueOf((x % base)) + out);\n            // >>> 10\n \
    \           // 10\n            x = (x / base);\n        }\n        // >>> \"\"\
    \n        // \"\"\n        return out;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n  \
    \          sb.append(x % base);\n            x /= base;\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011368
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>>\
    \ changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n\
    \    // (\"111\")\n    public static String changeBase(long x, long base) {\n\
    \        // Implement your solution here\n        long toAdd = 0;\n        long\
    \ toMultiply = 1;\n        List<Long> result = new ArrayList<>();\n        while\
    \ (x > 0) {\n            toAdd = x % base;\n            toMultiply = toMultiply\
    \ * 10;\n            result.add(toAdd);\n            x = x / base;\n        }\n\
    \        String reversed = result.stream().map(String::valueOf).collect(Collectors.joining());\n\
    \        String ret = new StringBuilder(reversed).reverse().toString();\n    \
    \    return ret;\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011376
