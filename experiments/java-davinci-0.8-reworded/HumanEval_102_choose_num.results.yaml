language: java
name: HumanEval_102_choose_num
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long chosen = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                chosen = i;\n            }\n\
    \        }\n        return chosen;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long biggestEven = -1;\n        if (x < y) {\n       \
    \     for (long i = x; i <= y; i++) {\n                if (i % 2 == 0) {\n   \
    \                 biggestEven = i;\n                }\n            }\n       \
    \ }\n        return biggestEven;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_gyli1ua.java:36)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvw0xfdvx.java:21)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // your code here\n\t\n\tif (x <= 0 || y <= 0) {\n\t\t\
    return -1;\n\t}\n\n\tif (x > y) {\n\t\treturn -1;\n\t}\n\n\tlong diff = y - x;\n\
    \tif (diff % 2 == 0) {\n\t\treturn y;\n\t} else {\n\t\treturn y - 1;\n\t}\n  \
    \  }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqa9pmsg8.java:38)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x>y) return -1;\n        if (x%2==0) return x;\n \
    \       if (y%2==0) return y;\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_6m89un.java:24)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long res = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                res = i;\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x == 0) {\n            return 0;\n        }\n    \
    \    if (x > y) {\n            return -1;\n        }\n        long res = -1;\n\
    \        for (long i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n    \
    \            res = i;\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Type your code here\n        return -1;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uxyakdt.java:22)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplaknk9cg.java:21)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Fill in this stub.\n        return -1;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyf_te4ap.java:22)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0) {\n            return x;\n        } else\
    \ if (x + 1 < y && (x + 1) % 2 == 0) {\n            return x + 1;\n        } else\
    \ {\n            return -1;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4244l4k6.java:27)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Replace this line with your code!\n        if (x >\
    \ y) {\n            return -1;\n        }\n        if (x % 2 == 0) {\n       \
    \     return x;\n        }\n        return chooseNum(x + 1, y);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7v48gdw.java:28)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return x % 2 == 0 && x <= y ? x : x + 1 <= y ? x + 1 :\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgrkt7r31.java:21)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n\t\tfor(long i = y; i >= x; i--) {\n\t\t\tif(i % 2 == 0) {\n\t\
    \t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        } else if\
    \ (x % 2 == 0) {\n            return x;\n        } else {\n            return\
    \ x + 1;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3px6tqrk.java:27)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Your code goes here!\n        // Hint: Start by checking\
    \ whether x and y are even. If they are,\n        // then you don't need to loop\
    \ through the range because you already\n        // know the answer. It's the\
    \ bigger one of x and y.\n        // Otherwise, start looping through the range,\
    \ checking whether the\n        // current number is even. If it is, then you've\
    \ found a bigger even\n        // number than you've seen before. Otherwise, move\
    \ on to the next\n        // number.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfm9c8y6.java:26: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // This is your job.\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiaz0dc9r.java:22)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            long tmp = x;\n            x\
    \ = y;\n            y = tmp;\n        }\n        for (long i = y; i >= x; i--)\
    \ {\n            if (i % 2 == 0)\n                return i;\n        }\n     \
    \   return -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15v1xtbl.java:31)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x == y) {\n            if (x % 2 == 0) {\n       \
    \         return x;\n            } else {\n                return -1;\n      \
    \      }\n        }\n        long i = y;\n        if (y % 2 == 0) {\n        \
    \    i = y - 1;\n        }\n        for (; i >= x; i -= 2) {\n            if (i\
    \ == x) {\n                if (i % 2 == 0) {\n                    return i;\n\
    \                } else {\n                    return -1;\n                }\n\
    \            }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmiob2nly.java:41)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long res = -1;\n        long a = y > x ? x : y;\n    \
    \    long b = y > x ? y : x;\n        while (a <= b) {\n            if (a % 2\
    \ == 0) {\n                res = a;\n            }\n            a++;\n       \
    \ }\n        return res;\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppgmefj53.java:31)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long start = x, end = y;\n        if (start > end) {\n\
    \            long temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (long i = end; i >= start; i -= 2) {\n            if (i\
    \ % 2 == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtyo990z.java:32)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long output = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                output = i;\n            }\n\
    \        }\n        return output;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(x > y) return -1;\n        if(x % 2 == 0) return x;\n\
    \        else return x + 1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphd_4lx5i.java:23)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // STUDENTS: YOUR CODE GOES HERE!\n    \tlong min = x;\n\
    \    \tlong max = y;\n    \tif(x>y) {\n    \t\tmin = y;\n    \t\tmax = x;\n  \
    \  \t}\n    \tif(min%2==0) {\n    \t\treturn min;\n    \t}\n    \tif(max%2==0)\
    \ {\n    \t\treturn max;\n    \t}\n    \tif(min+1==max) {\n    \t\treturn -1;\n\
    \    \t}\n    \treturn min+1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2mylcj8.java:37)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long m = x + (y - x) / 2;\n        return ((x + y) % 2\
    \ == 0) ? m : m + 1;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6tcvxkf.java:23)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long z = (x%2 == 0) ? x : x+1;\n        return (z <= y)\
    \ ? z : -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp96xa7te.java:22)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        throw new RuntimeException(\"Not implemented\");\n   \
    \ }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.chooseNum(tmpnfofg1ov.java:18)\n\tat Problem.main(tmpnfofg1ov.java:21)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return 2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeh_7_7cj.java:21)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(x > y) {\n            return -1;\n        }\n     \
    \   else if(x % 2 == 0) {\n            return x;\n        }\n        else {\n\
    \            return chooseNum(x + 1, y);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3xpdy5_.java:29)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gtyx09f.java:21)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long res = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                res = i;\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long z = x;\n        while (z <= y) {\n            if\
    \ (z % 2 == 0) {\n                return z;\n            }\n            z = z\
    \ + 1;\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9j96t4_.java:28)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return x % 2 == 0 ? x : x + 1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcinjoofo.java:21)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        }\n    \
    \    if (x % 2 == 0) {\n            return x;\n        }\n        if (y % 2 ==\
    \ 0) {\n            return y;\n        }\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_bld4o13.java:30)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long result = -1;\n        for (long z = y; z >= x; z--)\
    \ {\n            if (z % 2 == 0) {\n                result = z;\n            \
    \    break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long a = 0;\n        for (long i = x; i <= y; i++) {\n\
    \            if (i % 2 == 0) {\n                a = i;\n            }\n      \
    \  }\n        if (a == 0) {\n            return -1;\n        }\n        return\
    \ a;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long maxEvenNumber = -1;\n        for (long i = x; i <=\
    \ y; i++) {\n            if (i % 2 == 0) {\n                maxEvenNumber = i;\n\
    \            }\n        }\n        return maxEvenNumber;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // # BEGIN EDIT\n        long ret = -1;\n        for (;\
    \ x <= y; x++) {\n            if (x % 2 == 0) {\n                ret = x;\n  \
    \          }\n        }\n        return ret;\n        // # END EDIT\n    }\n \
    \   public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy41jm66n.java:19: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return y - (y % 2 == 0 ? 0 : 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xhdr93j.java:22)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long max = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0 && i > max) {\n                max = i;\n    \
    \        }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Write your code here.\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpasnv10rd.java:22)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return IntStream.rangeClosed((int)x, (int)y).filter(i\
    \ -> i % 2 == 0).max().orElse(-1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return java.util.stream.LongStream.rangeClosed(x, y).filter(i\
    \ -> i % 2 == 0).max().orElse(-1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x <= y) {\n            if (x % 2 == 0) {\n       \
    \         return x;\n            } else {\n                return chooseNum(x\
    \ + 1, y);\n            }\n        } else {\n            return -1;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0ow07km.java:29)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        }\n    \
    \    long a = 0;\n        long b = 0;\n        if (x % 2 == 0) {\n           \
    \ a = x;\n        } else {\n            a = x + 1;\n        }\n        if (y %\
    \ 2 == 0) {\n            b = y;\n        } else {\n            b = y - 1;\n  \
    \      }\n        return b;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpee38iso8.java:42)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        while (x < y) {\n            if (x % 2 == 0) {\n     \
    \           return x;\n            }\n            x = x + 1;\n        }\n    \
    \    if (x % 2 == 0) {\n            return x;\n        }\n        return -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnhbw__rm.java:30)\n"
  stdout: ''
  timestamp: 1660011009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gtyx09f.java:21)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            long z = x;\n            x =\
    \ y;\n            y = z;\n        }\n        if (x % 2 == 0) {\n            return\
    \ x;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqg9zfi4.java:32)\n"
  stdout: ''
  timestamp: 1660011009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return (x+y)/2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3hh3pjo.java:21)\n"
  stdout: ''
  timestamp: 1660011009
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // REPLACE WITH YOUR CODE\n        long ans = -1;\n  \
    \      for (long i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n      \
    \          ans = i;\n            }\n        }\n        return ans;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011010
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long ret = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                ret = i;\n            }\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011009
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0) {\n            if (x < y) {\n        \
    \        return x;\n            } else {\n                return -1;\n       \
    \     }\n        } else {\n            return chooseNum(x + 1, y);\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf_oyxqlh.java:29)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // insert your code here\n        return 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7t99hftd.java:22)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n      // Your code here\n      long res = -1;\n      long bigNum\
    \ = Math.max(x, y);\n      long smallNum = Math.min(x, y);\n      if (bigNum %\
    \ 2 == 0) {\n        res = bigNum;\n      } else if (bigNum - 1 == smallNum) {\n\
    \        res = -1;\n      } else {\n        res = bigNum - 1;\n      }\n     \
    \ return res;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3f628dme.java:35)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Use ternary operator\n        return (y % 2 != 0) ?\
    \ ((y - 1) % 2 != 0) ? -1 : y - 1 : y;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3wkq_n0.java:23)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // This implementation assumes that you've chosen Java\
    \ as your\n        // language, and it's correct for a default Java implementation.\n\
    \        // If you have a different implementation, you can ignore this\n    \
    \    // function, and just implement the chooseNum function above.\n        final\
    \ int DEFAULT_BITS = 64;\n        final int JAVA_DEFAULT_BITS = 64;\n        final\
    \ int JAVA_DEFAULT_BYTES = 8;\n        final int JAVA_DEFAULT_HEX_DIGITS = 16;\n\
    \        final int JAVA_DEFAULT_BASE = 16;\n        final String ARG_NOT_WORD_SIZE_BYTES\
    \ =\n            \"Argument is not word-size number of bytes.\";\n        final\
    \ String ARG_NOT_WORD_SIZE_HEX_DIGITS =\n            \"Argument is not word-size\
    \ number of hex digits.\";\n        final String ARG_TOO_BIG =\n            \"\
    Argument is too big for word size.\";\n        final String ARG_TOO_SMALL =\n\
    \            \"Argument is too small for word size.\";\n        BigInteger big\
    \ = BigInteger.valueOf(x);\n        // Check that the argument is not too big.\n\
    \        if (big.bitLength() > DEFAULT_BITS) {\n            throw new RuntimeException(ARG_TOO_BIG);\n\
    \        }\n        big = BigInteger.valueOf(y);\n        // Check that the argument\
    \ is not too big.\n        if (big.bitLength() > DEFAULT_BITS) {\n           \
    \ throw new RuntimeException(ARG_TOO_BIG);\n        }\n        byte[] xBytes =\
    \ BigInteger.valueOf(x).toByteArray();\n        byte[] yBytes = BigInteger.valueOf(y).toByteArray();\n\
    \        byte[] xHexDigits = BigInteger.valueOf(x).toString(JAVA_DEFAULT_BASE)\n\
    \            .getBytes();\n        byte[] yHexDigits = BigInteger.valueOf(y).toString(JAVA_DEFAULT_BASE)\n\
    \            .getBytes();\n        if (xBytes.length != JAVA_DEFAULT_BYTES\n \
    \   }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp96t14uj.java:51: error: ')' expected\n        if (xBytes.length\
    \ != JAVA_DEFAULT_BYTES\n                                               ^\n/tmp/tmpp96t14uj.java:52:\
    \ error: illegal start of statement\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x == y && x % 2 == 0) return x;\n        if (x > y)\
    \ return -1;\n        if (x % 2 == 0) return x;\n        return chooseNum(x +\
    \ 1, y);\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbdfkexi_.java:24)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        } else if\
    \ (x % 2 == 0) {\n            return x;\n        } else {\n            return\
    \ x + 1;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3px6tqrk.java:27)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // @SOLUTION@\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvsxlsuq.java:22)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(x%2==0)\n            return x;\n        else if(y%2==0)\n\
    \            return y;\n        else\n            return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00hzofs0.java:26)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x>y) return -1;\n        for (long i=y; i>=x; i--)\
    \ {\n            if (i%2==0) return i;\n        }\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        } else if\
    \ (x % 2 == 0) {\n            return x;\n        } else {\n            return\
    \ x + 1;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3px6tqrk.java:27)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long max = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0 && i > max) {\n                max = i;\n    \
    \        }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        while(x<=y) {\n            if (x%2==0) {\n           \
    \     return x;\n            }\n            x++;\n        }\n        return -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54ltkfjb.java:27)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(y%2==0)\n            return y;\n        else if(x%2==0)\n\
    \            return x;\n        else\n            return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsdargil.java:26)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(x % 2 == 0)\n            return x;\n        if(y %\
    \ 2 == 0)\n            return y;\n        else\n            return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38ww6of6.java:26)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // String [] args =  {\"0\"};\n        // System.out.println(new\
    \ BigInteger(args[0]));\n        for (long i = y; i >= x; i--) {\n           \
    \ if (i % 2 == 0) {\n                return i;\n            }\n        }\n   \
    \     return -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        } else if\
    \ (x % 2 == 0) {\n            return x;\n        } else {\n            return\
    \ chooseNum(x + 1, y);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qhjcfc7.java:27)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gtyx09f.java:21)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        }\n    \
    \    if (x % 2 == 0) {\n            return x;\n        }\n        return chooseNum(x\
    \ + 1, y);\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaasisqoe.java:27)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n    \tif (x % 2 == 0 && y % 2 == 0) {\n    \t\treturn Math.max(x,\
    \ y);\n    \t} else if (x % 2 == 0 && y % 2 != 0) {\n    \t\treturn y - 1;\n \
    \   \t} else if (x % 2 != 0 && y % 2 == 0) {\n    \t\treturn x;\n    \t} else\
    \ {\n    \t\treturn -1;\n    \t}\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvm40m1_3.java:30)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Your solution goes here.\n        long i = 0;\n   \
    \     if(x%2 == 0){\n            i = x;\n        }else{\n            i = x+1;\n\
    \        }\n        if(i > y){\n            return -1;\n        }\n        return\
    \ i;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqqqojrv.java:31)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x == y) {\n            if (x % 2 == 0) {\n       \
    \         return x;\n            } else {\n                return -1;\n      \
    \      }\n        }\n        else if (x > y) {\n            if (x % 2 == 0) {\n\
    \                return x;\n            } else {\n                return chooseNum(x\
    \ - 1, y);\n            }\n        }\n        else {\n            if (y % 2 ==\
    \ 0) {\n                return y;\n            } else {\n                return\
    \ chooseNum(x, y - 1);\n            }\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2s3rhwuh.java:42)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long max = Math.max(x, y);\n        long min = Math.min(x,\
    \ y);\n        if (max % 2 == 0) {\n            return max;\n        } else if\
    \ (max - 1 == min) {\n            return -1;\n        } else {\n            return\
    \ max - 1;\n        }\n    }\n    public static void main(String[] args) {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpenq5zal_.java:32)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        //if(x%2!=0 && y%2!=0)\n        if(x%2==0)\n        {\n\
    \            if(y%2==0)\n            {\n                if(x>y)\n            \
    \    {\n                    return -1;\n                }\n                else\n\
    \                {\n                    return y;\n                }\n       \
    \     }\n            else\n            {\n                return y-1;\n      \
    \      }\n        }\n        else\n        {\n            if(y%2==0)\n       \
    \     {\n                return y;\n            }\n            else\n        \
    \    {\n                if(x>y)\n                {\n                    return\
    \ -1;\n                }\n                else\n                {\n          \
    \          return y-1;\n                }\n            }\n        }\n    }\n \
    \   public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbg4_fw1k.java:58)\n"
  stdout: ''
  timestamp: 1660011011
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gtyx09f.java:21)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Code to solve the problem.\n        for(long i = y;\
    \ i >= x; i--) {\n            if(i % 2 == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n    \t// return x;\n    \t// return y;\n    \t// return x + y;\n\
    \    \t// return x - y;\n    \t// return y - x;\n    \t// return x * y;\n    \t\
    // return x / y;\n    \t// return y / x;\n    \t// return y % x;\n    \t// return\
    \ x % y;\n    \tif(x > y) {\n    \t\tlong a = x;\n    \t\tx = y;\n    \t\ty =\
    \ a;\n    \t}\n    \tfor(long i = y; i >= x; i--) {\n    \t\tif(i % 2 == 0) {\n\
    \    \t\t\treturn i;\n    \t\t}\n    \t}\n    \treturn -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp25901hfq.java:42)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long z = x;\n        if (x % 2 == 0)\n            z =\
    \ x;\n        else\n            z = x + 1;\n        for (; z <= y; z += 2) {\n\
    \            if (z % 2 == 0)\n                return z;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp240yh7mu.java:30)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n\t\treturn (y+1-x)%2==0 ? y-((y+1-x)/2-1) : -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpom96_kpg.java:22)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Fill in your code here.\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbo6oo5x0.java:22)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        //YOUR CODE HERE\n        if (x > y) {\n            return\
    \ -1;\n        }\n        long res = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                res = i;\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011012
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) return i;\n        }\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n      long[] arr = {x, y};\n      Arrays.sort(arr);\n      long\
    \ x1 = arr[0];\n      long y1 = arr[1];\n      if (x1 % 2 == 0) {\n        return\
    \ x1;\n      } else if (x1 + 1 <= y1 && (x1 + 1) % 2 == 0) {\n        return x1\
    \ + 1;\n      } else {\n        return -1;\n      }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4awgrx59.java:31)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // write your solution here\n        return -1l;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49wgaz34.java:22)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return x - x % 2 + (1 + (y - x) % 2) * 2;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp70aulz3r.java:21)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdnn066fr.java:19: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Write your code here.\n        return -1l;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1ckd50u.java:22)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x == y) {\n            if (x % 2 == 0) {\n       \
    \         return x;\n            } else {\n                return -1;\n      \
    \      }\n        } else if (x < y) {\n            for (long i = y; i >= x; i--)\
    \ {\n                if (i % 2 == 0) {\n                    return i;\n      \
    \          }\n            }\n        } else {\n            for (long i = x; i\
    \ >= y; i--) {\n                if (i % 2 == 0) {\n                    return\
    \ i;\n                }\n            }\n        }\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5u4r560.java:41)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // YOUR CODE GOES HERE\n        return 42l;\n    }\n \
    \   public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8u5ykd50.java:22)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // replace the body of this function with a correct implementation\n\
    \        throw new RuntimeException(\"Not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.chooseNum(tmpxyg2n0su.java:19)\n\tat Problem.main(tmpxyg2n0su.java:22)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return y;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1qi371_b.java:21)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long maximum = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (maximum < i && i % 2 == 0) {\n                maximum = i;\n\
    \            }\n        }\n        return maximum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // write your code here...\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpznps0rc4.java:22)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplaknk9cg.java:21)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x%2 != 0 && y%2 != 0) {\n            return -1;\n\
    \        }\n        return Math.max(x, y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjmucr1ov.java:24)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return ((x + y) % 2 == 0) ? (x + y) / 2 : -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe1ua8nll.java:21)\n"
  stdout: ''
  timestamp: 1660011012
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long result = -1;\n        for (long i = y; i >= x; i--)\
    \ {\n            if (i % 2 == 0) {\n                result = i;\n            \
    \    break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        } else if\
    \ (x % 2 == 0) {\n            return x;\n        } else {\n            return\
    \ x + 1;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3px6tqrk.java:27)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            throw new IllegalArgumentException(\"\
    x must be less than or equal to y\");\n        } else if (x % 2 == 0) {\n    \
    \        return x;\n        } else if (y % 2 == 0) {\n            return y;\n\
    \        } else {\n            return -1;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpftafaht7.java:29)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Write your code here\n        return -1;\n    }\n \
    \   public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvuwhiizv.java:22)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0) {\n            return x;\n        } else\
    \ if (x + 1 == y) {\n            return y;\n        } else if (x < y) {\n    \
    \        return chooseNum(x + 1, y);\n        } else {\n            return -1;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04jkhyur.java:29)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return findEven(x, y);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_tyvitno.java:18: error: cannot find symbol\n        return findEven(x,\
    \ y);\n               ^\n  symbol:   method findEven(long,long)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011013
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n\t\tif(x > y) return -1;\n\t\tif(x % 2 == 0) return x;\n\t\tif(y\
    \ % 2 == 0) return y;\n\t\treturn -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjtirgfsv.java:24)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // TODO: fix me\n        return 42;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwa2atw1j.java:22)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Write your code here\n        if(x%2==0) return Math.max(x,y);\n\
    \        else return Math.max(x+1,y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6aymgpxb.java:23)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x <= y) {\n            return (y % 2 == 0) ? y : chooseNum(x,\
    \ y - 1);\n        } else {\n            return -1;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Your code here\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv86fu7qi.java:22)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Replace this code with the correct solution.\n    \
    \    long result = -1;\n        for (long i = x; i <= y; i++) {\n            if\
    \ (i % 2 == 0) {\n                result = i;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011014
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // TODO: Implement the function here\n        long greatestEvenNumber\
    \ = -1;\n        for (long i = x; i <= y; i++) {\n            if (i % 2 == 0)\
    \ {\n                greatestEvenNumber = i;\n            }\n        }\n     \
    \   return greatestEvenNumber;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Replace the following code with your implementation.\n\
    \        if (x == y) {\n            if (x % 2 == 0) {\n                return\
    \ x;\n            } else {\n                return -1;\n            }\n      \
    \  }\n        if (x > y) {\n            return -1;\n        } else {\n       \
    \     long current = x;\n            while (current <= y) {\n                if\
    \ (current % 2 == 0) {\n                    return current;\n                }\n\
    \                current++;\n            }\n            return -1;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjq1e2bt.java:40)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        throw new RuntimeException(\"Please implement me!\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Please implement\
    \ me!\n\tat Problem.chooseNum(tmp73rwb27a.java:18)\n\tat Problem.main(tmp73rwb27a.java:21)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0) {\n            return x;\n        } else\
    \ if (x % 2 == 1 && y % 2 == 0) {\n            return y;\n        } else if (x\
    \ % 2 == 1 && y % 2 == 1) {\n            return -1;\n        } else {\n      \
    \      throw new RuntimeException(\"There is an error in chooseNum\");\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0hb__qp3.java:29)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return Stream.iterate(x, t -> t + 1)\n            .filter(t\
    \ -> t % 2 == 0)\n            .filter(t -> t <= y)\n            .reduce((a, b)\
    \ -> b)\n            .orElse(-1l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // If x is even, then return the largest even number in\
    \ the\n        // range [x, y]. If x is odd, then return the largest even number\
    \ in the\n        // range [x + 1, y].\n        // Note that the largest even\
    \ number in the range [x, y] is y if x is\n        // even and y - 1 if x is odd.\n\
    \        // We can use the Java ternary operator to do this in one line:\n   \
    \     return (x % 2 == 0) ? y : y - 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpau0l0uc0.java:27)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long maxEven = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                maxEven = i;\n           \
    \ }\n        }\n        return maxEven;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long num = -1;\n        long z = (x > y) ? x : y;\n  \
    \      long curr = ((z % 2 == 0) ? z : z - 1);\n        while (curr >= x && curr\
    \ >= y) {\n            num = curr;\n            curr -= 2;\n        }\n      \
    \  return num;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltjw3w22.java:28)\n"
  stdout: ''
  timestamp: 1660011015
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd8qcr4q_.java:21)\n"
  stdout: ''
  timestamp: 1660011014
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // TODO: fill in the implementation of this function.\n\
    \        if(x % 2 == 0){\n            return y % 2 == 0 ? y : y - 1;\n       \
    \ }else{\n            return y % 2 == 0 ? y - 1 : y - 2;\n        }\n    }\n \
    \   public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprh6s50pz.java:27)\n"
  stdout: ''
  timestamp: 1660011015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjza_z7r.java:21)\n"
  stdout: ''
  timestamp: 1660011015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0) {\n            return x;\n        } else\
    \ if (x+1 <= y) {\n            return x+1;\n        } else {\n            return\
    \ -1;\n        }\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt04u_279.java:27)\n"
  stdout: ''
  timestamp: 1660011015
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long ret = x % 2 == 0 ? x : x + 1;\n        while (ret\
    \ <= y) {\n            if (ret % 2 == 0) return ret;\n            ret += 2;\n\
    \        }\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe1srcwx2.java:26)\n"
  stdout: ''
  timestamp: 1660011015
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long result = -1;\n        for (long i = y; i >= x; i--)\
    \ {\n            if (i % 2 == 0) {\n                result = i;\n            \
    \    break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011012
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // All the code in this section should be removed and\
    \ replaced\n        // with your implementation of the function.\n        return\
    \ Math.max(Math.max(x, y) % 2 == 0 ? Math.max(x, y) : Math.max(x, y) - 1, -1);\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaavenghh.java:24)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long r = 0;\n        boolean evenExists = false;\n   \
    \     for (long i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n       \
    \         evenExists = true;\n                r = i;\n            }\n        }\n\
    \        if (evenExists) {\n            return r;\n        } else {\n        \
    \    return -1;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011016
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        } else if\
    \ (x == y) {\n            if (x % 2 == 0) {\n                return x;\n     \
    \       } else {\n                return -1;\n            }\n        } else {\n\
    \            if (y % 2 == 0) {\n                return y;\n            } else\
    \ {\n                return chooseNum(x, y - 1);\n            }\n        }\n \
    \   }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // TODO: YOUR CODE HERE\n        return 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0q3p3xp5.java:22)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        int num = 0;\n        for (int i = 0; i < y - x + 1; i++)\
    \ {\n            num = (int) (x + i);\n            if (num % 2 == 0) {\n     \
    \           return num;\n            }\n        }\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_pj9kmel.java:28)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x <= y) {\n            if (x % 2 == 0) {\n       \
    \         return x;\n            } else {\n                return chooseNum(x\
    \ + 1, y);\n            }\n        } else {\n            return -1;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0ow07km.java:29)\n"
  stdout: ''
  timestamp: 1660011008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        }\n    \
    \    else if (x % 2 == 0) {\n            return x;\n        }\n        else {\n\
    \            return x + 1;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphsm33v4e.java:29)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x == y) {\n            if (x % 2 == 0) {\n       \
    \         return x;\n            } else {\n                return -1;\n      \
    \      }\n        } else if (x % 2 == 0) {\n            return x;\n        } else\
    \ if (y % 2 == 0) {\n            return y;\n        } else {\n            return\
    \ -1;\n        }\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxylwooso.java:33)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long res = -1;\n        if (x % 2 == 0) {\n          \
    \  res = x;\n        } else {\n            res = x + 1;\n        }\n        if\
    \ (res > y) {\n            res = -1;\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7e2q3u7p.java:30)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long result = -1;\n        long i = x;\n        while\
    \ (i <= y) {\n            if (i % 2 == 0) {\n                result = i;\n   \
    \         }\n            i++;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011016
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // We must return the correct value:\n        return 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi1xhfnwt.java:22)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0) {\n            return x;\n        } else\
    \ if (x + 1 == y) {\n            return -1;\n        } else {\n            return\
    \ x + 1;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3r3hf7r.java:27)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        //@@\n        long z = 0;\n        long a = x;\n     \
    \   long b = y;\n        boolean found = false;\n        if(a > b){\n        \
    \    z = -1;\n        }\n        else{\n            for(long i = a; i <= b; i++){\n\
    \                if(i % 2 == 0){\n                    z = i;\n               \
    \     found = true;\n                }\n            }\n            if(!found){\n\
    \                z = -1;\n            }\n        }\n        return z;\n    }\n\
    \    public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x%2 == 0) {\n            return x;\n        } else\
    \ if (x+1 == y) {\n            return -1;\n        } else {\n            return\
    \ x+1;\n        }\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ejy4fc5.java:27)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // your code here...\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpglj449dq.java:19: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            long temp = x;\n           \
    \ x = y;\n            y = temp;\n        }\n        long answer = -1;\n      \
    \  while (x < y) {\n            if (x % 2 == 0) {\n                answer = x;\n\
    \            }\n            x += 1;\n        }\n        if (y % 2 == 0) {\n  \
    \          answer = y;\n        }\n        return answer;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9uto2mgv.java:37)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long f = x;\n        while (f <= y) {\n            if\
    \ (f % 2 == 0)\n                return f;\n            f++;\n        }\n     \
    \   return -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6q97q3h.java:27)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return 42;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjlngzs9h.java:21)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        }\n    \
    \    else if (x % 2 == 0) {\n            return x;\n        }\n        else {\n\
    \            return x + 1;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphsm33v4e.java:29)\n"
  stdout: ''
  timestamp: 1660011016
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gtyx09f.java:21)\n"
  stdout: ''
  timestamp: 1660011007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long num = x;\n        for (; num <= y; num++) {\n   \
    \         if (num % 2 == 0)\n                return num;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2p63f5tz.java:26)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return (y - x + 1) / 2;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptuelcr22.java:21)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return -1l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplaknk9cg.java:21)\n"
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(x > y) return -1;\n        if(x % 2 == 0) return x;\n\
    \        return chooseNum(x + 1, y);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeo4lrmem.java:23)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // NOTE: This implementation uses the fact that the numbers\
    \ in Java\n        // are represented in the 2's complement.\n        // TODO:\
    \ replace with your code here.\n        if (x > y) {\n          return -1;\n \
    \       } else if (x == y) {\n          if (x % 2 == 0) {\n            return\
    \ x;\n          } else {\n            return -1;\n          }\n        } else\
    \ {\n          if (x % 2 == 0) {\n            return x;\n          } else {\n\
    \            return chooseNum(x + 1, y);\n          }\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp18hlcm8s.java:38)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // YOUR CODE GOES HERE\n        return 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6colgwe.java:22)\n"
  stdout: ''
  timestamp: 1660011017
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0 && y % 2 == 0)\n            return Math.max(x,\
    \ y);\n        else if (x % 2 == 0 && y % 2 != 0)\n            return y;\n   \
    \     else if (x % 2 != 0 && y % 2 == 0)\n            return x;\n        else\n\
    \            return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqy_7uk0.java:28)\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(x % 2 == 0) {\n            return x;\n        } else\
    \ if(y % 2 == 0) {\n            return y;\n        } else {\n            return\
    \ -1;\n        }\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0dciv7zy.java:27)\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2\
    \ == 0) {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // YOUR CODE HERE\n        if (x > y) {\n            return\
    \ -1;\n        }\n        if (x % 2 == 0) {\n            return x;\n        }\n\
    \        else {\n            return x + 1;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2c2c2dx.java:30)\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Your answer here.\n        if(x%2 == 0){\n        \
    \    return x;\n        }else if(y%2 == 0){\n            return y;\n        }else{\n\
    \            return -1;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpal8ggmr4.java:28)\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long n = x;\n        while (n >= x && n <= y) {\n    \
    \        if (n % 2 == 0) {\n                return n;\n            }\n       \
    \     n++;\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcx_t6pw.java:28)\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long dif = y - x;\n        if(dif%2==0) return y-1;\n\
    \        return y;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8xn5pz3h.java:23)\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Your code here.\n        if(x % 2 == 0 && y % 2 ==\
    \ 0)\n        \treturn Math.max(x, y);\n        else if(x % 2 == 0 && y % 2 !=\
    \ 0)\n        \treturn y - 1;\n        else if(x % 2 != 0 && y % 2 == 0)\n   \
    \     \treturn y;\n        else\n        \treturn -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmr0tzt2s.java:30)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // TODO: implement this function\n        return 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5mxsvrlt.java:22)\n"
  stdout: ''
  timestamp: 1660011018
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        int diff = (int)(y - x);\n        if (diff % 2 == 0) {\n\
    \            return y - (diff / 2);\n        } else {\n            return y -\
    \ (diff / 2) - 1;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwi0nrntn.java:26)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long number = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                number = i;\n            }\n\
    \        }\n        return number;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return (x+y)/2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3hh3pjo.java:21)\n"
  stdout: ''
  timestamp: 1660011009
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // TODO: Implement this function.\n        if (x > y)\
    \ {\n            return -1;\n        }\n        int count = 0;\n        long result\
    \ = 0;\n        while (x <= y) {\n            if (x % 2 == 0) {\n            \
    \    result = x;\n                count += 1;\n            }\n            x +=\
    \ 1;\n        }\n        if (count == 0) {\n            return -1;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long l = Math.max(x, y);\n        long r = Math.min(x,\
    \ y);\n        if (l%2 == 0) {\n            return l;\n        } else if (r%2\
    \ == 0) {\n            return r;\n        } else {\n            return -1;\n \
    \       }\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7coe2p2.java:29)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (long z = y; z >= x; z--) {\n            if (z % 2\
    \ == 0) {\n                return z;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x > y) {\n            return -1;\n        }\n    \
    \    if (x % 2 == 0) {\n            return x;\n        }\n        return chooseNum(x\
    \ + 1, y);\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaasisqoe.java:27)\n"
  stdout: ''
  timestamp: 1660011010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        for (int i = 0; i < 2; i++) {\n            x++;\n    \
    \        if (x % 2 == 0) {\n                return x;\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8odtb684.java:28)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            return y;\n\
    \        } else if (x % 2 == 0 && y % 2 != 0) {\n            return y - 1;\n \
    \       } else if (x % 2 != 0 && y % 2 == 0) {\n            return x;\n      \
    \  } else {\n            return x + 1;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7e0c8s92.java:30)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return (x > y) ? -1 : BigInteger.valueOf(x).nextProbablePrime().longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppb6miwxj.java:21)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        return Stream.iterate(x, i -> i + 1).limit(y - x + 1).filter(i\
    \ -> i % 2 == 0).max(Long::compare).orElse(-1l);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: -16\n\t\
    at java.base/java.util.stream.ReferencePipeline.limit(ReferencePipeline.java:568)\n\
    \tat Problem.chooseNum(tmp7j9v7z2s.java:18)\n\tat Problem.main(tmp7j9v7z2s.java:26)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // REPLACE THIS LINE WITH YOUR SOLUTION\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52wjd7m4.java:22)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Fill in your implementation here.\n        return -1l;\n\
    \    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl1ehyoa1.java:22)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long result = (long)(-1);\n        if ((y % 2l) == 0l)\
    \ {\n            result = y;\n        } else {\n            if ((x % 2l) == 0l)\
    \ {\n                result = x;\n            } else {\n                result\
    \ = (long)(-1);\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7yicbpg4.java:31)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long ans = -1;\n        long i = 0;\n        for (i =\
    \ x; i <= y; i++) {\n            if (i % 2 == 0) {\n                ans = i;\n\
    \            }\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011019
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long biggestEven = -1;\n        for (long i = x; i <=\
    \ y; i++) {\n            if (i % 2 == 0) {\n                biggestEven = i;\n\
    \            }\n        }\n        return biggestEven;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            return y;\n\
    \        } else if (x % 2 == 0 && y % 2 != 0) {\n            return y - 1;\n \
    \       } else if (x % 2 != 0 && y % 2 == 0) {\n            return x;\n      \
    \  } else {\n            return x + 1;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7e0c8s92.java:30)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long temp;\n        if (x > y) {\n            temp = x;\n\
    \            x = y;\n            y = temp;\n        }\n        if (x % 2 == 0)\
    \ {\n            return x;\n        } else if (x + 1 == y) {\n            return\
    \ -1;\n        } else {\n            return x + 2;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5tryk072.java:33)\n"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            return y;\n\
    \        } else if (x % 2 == 0 && y % 2 != 0) {\n            return y - 1;\n \
    \       } else if (x % 2 != 0 && y % 2 == 0) {\n            return x;\n      \
    \  } else {\n            return x + 1;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7e0c8s92.java:30)\n"
  stdout: ''
  timestamp: 1660011019
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long v = x - (x & 1l);\n        if (v < x) {\n       \
    \     v += 2l;\n        }\n        return v <= y ? v : -1l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35rpoo6p.java:25)\n"
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // REPLACE ME\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyg6mpzf.java:22)\n"
  stdout: ''
  timestamp: 1660011020
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long ret = -1;\n        for (long z = x; z <= y; z++)\
    \ {\n            if (z % 2 == 0) {\n                ret = z;\n            }\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011020
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long res = -1;\n        for (long i = y; i >= x; i--)\
    \ {\n            if (i % 2 == 0) {\n                res = i;\n               \
    \ break;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011020
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        // Your code here.\n        if (x > y) return -1;\n  \
    \      for (long i = y; i >= x; i--) {\n            if (i % 2 == 0) return i;\n\
    \        }\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011020
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long count;\n        if(x%2==0)\n            count=x;\n\
    \        else\n            count=x+1;\n        while(count<=y)\n        {\n  \
    \          if(count%2==0)\n                return count;\n            count++;\n\
    \        }\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt6kix3g.java:32)\n"
  stdout: ''
  timestamp: 1660011020
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        long result = -1;\n        for (long i = x; i <= y; i++)\
    \ {\n            if (i % 2 == 0) {\n                result = i;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011020
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        if(x%2 != 0){\n            x++;\n        }\n        if(y%2\
    \ != 0){\n            y--;\n        }\n        if(x > y){\n            return\
    \ -1;\n        }\n        return y;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011020
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // This function takes two positive numbers x and y and returns\
    \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    // there's no such number, then the function should return -1.\n  \
    \  // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>>\
    \ chooseNum((13l), (12l))\n    // (-1l)\n    public static long chooseNum(long\
    \ x, long y) {\n        List<Long> arr = new ArrayList<Long>();\n        for (long\
    \ i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                arr.add(i);\n\
    \            }\n        }\n        if (arr.size() == 0) {\n            return\
    \ -1;\n        }\n        return Collections.max(arr);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011020
