language: java
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int lastIndex = -1;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n             \
    \   lastIndex = i;\n            }\n        }\n        return lastIndex;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ehoyhyg.java:29)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int ans = -1;\n        for (int i = arr.size() - 1; i > 0; i--)\
    \ {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans = i;\n\
    \            }\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0nut73q5.java:31)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i - 1) <= arr.get(i)) {\n                ret\
    \ = i - 1;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31dkh2lh.java:28)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        throw new UnsupportedOperationException(\"Not yet implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ yet implemented\n\tat Problem.canArrange(tmp6j96rx1n.java:19)\n\tat Problem.main(tmp6j96rx1n.java:22)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // arr.forEach(x -> System.out.print(x + \" \"));\n        //\
    \ System.out.println();\n        boolean valid = true;\n        int n = arr.size();\n\
    \        long index = -1;\n        long max = arr.get(0);\n        for (int i\
    \ = 1; i < n; i++) {\n            if (arr.get(i) < max) {\n                if\
    \ (index != -1) {\n                    valid = false;\n                    break;\n\
    \                }\n                index = i;\n            }\n            max\
    \ = Math.max(max, arr.get(i));\n        }\n        if (valid) {\n            return\
    \ index;\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3dige9xz.java:44)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() < 2) {\n            return -1;\n        }\n \
    \       long mv = 0;\n        long mo = 1;\n        while (mo < arr.size()) {\n\
    \            if (arr.get((int)mv) >= arr.get((int)mo)) {\n                return\
    \ mv;\n            }\n            mv = mo;\n            mo += 1;\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_cbjo75.java:34)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long p = -1l;\n        for (int i = arr.size() - 1; i > 0; i--)\
    \ {\n            if (arr.get(i) < arr.get(i - 1)) {\n                p = (long)i;\n\
    \                break;\n            }\n        }\n        return p;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() < 2) {\n            return -1;\n        }\n \
    \       long prev = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) <= prev) {\n                return i;\n      \
    \      }\n            prev = arr.get(i);\n        }\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6xwtudju.java:35)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // replace with your code\n        long curr=Long.MIN_VALUE;\n\
    \        long index=-1;\n        for(int i=0;i<arr.size();i++){\n            if(arr.get(i)>=curr){\n\
    \                curr=arr.get(i);\n                index=i;\n            }\n \
    \       }\n        return index;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwpj4fpr.java:31)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here.\n        long maxIdx = -1;\n        for (int\
    \ i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1))\
    \ {\n                maxIdx = i - 1;\n            }\n        }\n        return\
    \ maxIdx;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqvx8xiz.java:29)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // You may assume that the given array is 1-indexed\n      \
    \  for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i\
    \ + 1)) {\n                continue;\n            }\n            return i;\n \
    \       }\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1qxqnpzn.java:29)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int n = arr.size();\n        long[] suffMax = new long[n];\n\
    \        suffMax[n - 1] = arr.get(n - 1);\n        for (int i = n - 2; i >= 0;\
    \ i--) {\n            suffMax[i] = Math.max(suffMax[i + 1], arr.get(i));\n   \
    \     }\n        int idx = -1;\n        for (int i = 0; i < n - 1; i++) {\n  \
    \          if (arr.get(i) <= suffMax[i + 1]) {\n                idx = i;\n   \
    \         }\n        }\n        return idx;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy3oyt525.java:35)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // INSERT YOUR CODE HERE\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06tefwk0.java:23)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int max_idx = -1;\n        long max_val = -1;\n        int idx\
    \ = 0;\n        while (idx < arr.size()) {\n            if (arr.get(idx) > max_val)\
    \ {\n                max_val = arr.get(idx);\n                max_idx = idx;\n\
    \            }\n            idx++;\n        }\n        return max_idx;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprmlvpmuh.java:32)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int n = arr.size();\n        int maxI = n - 1;\n        int\
    \ maxJ = n - 1;\n        while(maxI >= 0 && maxJ >= 0) {\n            if(arr.get(maxI)\
    \ >= arr.get(maxJ)) {\n                maxJ--;\n            } else {\n       \
    \         maxI--;\n            }\n        }\n        return (long)maxJ;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjdo4s8p.java:32)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        //insert your code here\n        long ret = -1l;\n        for\
    \ (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) >= arr.get(i\
    \ + 1)) {\n                ret = i;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1q3tj52.java:29)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long n = arr.size();\n        if (n == 1) {\n            return\
    \ -1;\n        }\n        long ind = -1;\n        long max = arr.get(n - 1);\n\
    \        long diff = (max - arr.get(n - 2));\n        for (long i = n - 2; i >=\
    \ 0; i--) {\n            if (arr.get(i) >= max) {\n                max = arr.get(i);\n\
    \                diff = (max - arr.get(i - 1));\n            } else {\n      \
    \          long curr_diff = (max - arr.get(i));\n                if (curr_diff\
    \ <= diff) {\n                    diff = curr_diff;\n                    ind =\
    \ i;\n                }\n            }\n        }\n        return ind;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6oqr9kn.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long max = arr.get(n - 1);\n                     \
    \        ^\n/tmp/tmpl6oqr9kn.java:25: error: incompatible types: possible lossy\
    \ conversion from long to int\n        long diff = (max - arr.get(n - 2));\n \
    \                                    ^\n/tmp/tmpl6oqr9kn.java:27: error: incompatible\
    \ types: possible lossy conversion from long to int\n            if (arr.get(i)\
    \ >= max) {\n                        ^\n/tmp/tmpl6oqr9kn.java:28: error: incompatible\
    \ types: possible lossy conversion from long to int\n                max = arr.get(i);\n\
    \                              ^\n/tmp/tmpl6oqr9kn.java:29: error: incompatible\
    \ types: possible lossy conversion from long to int\n                diff = (max\
    \ - arr.get(i - 1));\n                                        ^\n/tmp/tmpl6oqr9kn.java:31:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            long curr_diff = (max - arr.get(i));\n                          \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660010774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int i = arr.size() - 1;\n        while (i >= 0) {\n        \
    \    if (arr.get(i) >= arr.get(i - 1)) {\n                i--;\n            }\
    \ else {\n                return i;\n            }\n        }\n        return\
    \ (long)-1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpc963162s.java:21)\n\tat Problem.main(tmpc963162s.java:31)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long prev = arr.get(0);\n        long ans = -1;\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < prev) {\n \
    \               ans = i;\n            }\n            prev = arr.get(i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpvpkvzshf.java:19)\n\tat Problem.main(tmpvpkvzshf.java:34)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Fill in your code here\n        if (arr.size() == 0) return\
    \ -1;\n        if (arr.size() == 1) return 0;\n        long temp = arr.get(0);\n\
    \        long index = -1;\n        for (int i = 1; i < arr.size(); i++) {\n  \
    \          if (arr.get(i) >= temp) {\n                temp = arr.get(i);\n   \
    \         } else {\n                index = i;\n            }\n        }\n   \
    \     return index;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010775
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        final ArrayList<Long> arr_copy = new ArrayList<Long>(arr);\n\
    \        final ArrayList<Long> arr_sorted = new ArrayList<Long>(arr);\n      \
    \  Collections.sort(arr_sorted);\n        for (int i = 0; i < arr_copy.size();\
    \ i++) {\n            final long original_value = arr_copy.get(i);\n         \
    \   final long sorted_value = arr_sorted.get(i);\n            if (original_value\
    \ > sorted_value) {\n                return arr_copy.indexOf(sorted_value);\n\
    \            }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = 0;\n        for (int i = arr.size() - 1; i > 0; i--)\
    \ {\n            if (arr.get(i) <= arr.get(i - 1))\n                continue;\n\
    \            long index = i;\n            while (i > 0 && arr.get(i) > arr.get(i\
    \ - 1)) {\n                i--;\n            }\n            max = Math.max(max,\
    \ index);\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gf75crx.java:32)\n"
  stdout: ''
  timestamp: 1660010775
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long index = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n           \
    \     if (arr.get(i) >= arr.get(j)) {\n                    if (j > index) {\n\
    \                        index = j;\n                    }\n                }\n\
    \            }\n        }\n        return index;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() < 2) return -1l;\n        if (arr.size() == 2)\
    \ return arr.get(0) <= arr.get(1) ? 0l : -1l;\n        int last = arr.size() -\
    \ 1;\n        int curr = last - 1;\n        while (curr >= 0) {\n            if\
    \ (arr.get(curr) >= arr.get(last)) {\n                last = curr;\n         \
    \       curr -= 1;\n            } else {\n                return (long) curr;\n\
    \            }\n        }\n        return -1l;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnafr3yty.java:35)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (long i = 0; i < arr.size() - 1; i++) {\n            if\
    \ (arr.get((int)i) >= arr.get((int)(i + 1))) {\n                return i;\n  \
    \          }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ex5_qtp.java:27)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) return -1;\n        for (int i = 0; i <\
    \ arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) return\
    \ i;\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5mtmqux.java:26)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1l;\n        }\n\
    \        long cur = arr.get(0);\n        long ans = -1l;\n        for (int i =\
    \ 1; i < arr.size(); i++) {\n            if (arr.get(i) <= cur) {\n          \
    \      ans = i;\n            }\n            cur = arr.get(i);\n        }\n   \
    \     return ans;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1;\n        } else\
    \ if (arr.size() == 1) {\n            return 0;\n        } else {\n          \
    \  long prev = arr.get(0);\n            long index = -1;\n            long max\
    \ = 0;\n            for (int i = 1; i < arr.size(); i++) {\n                if\
    \ (arr.get(i) <= prev) {\n                    if (max < arr.get(i)) {\n      \
    \                  max = arr.get(i);\n                        index = i;\n   \
    \                 }\n                }\n                prev = arr.get(i);\n \
    \           }\n            return index;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr40n8utr.java:43)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (long i = 0; i < arr.size() - 1; i++) {\n            if\
    \ (arr.get((int)i) >= arr.get((int)(i + 1))) {\n                return i;\n  \
    \          }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ex5_qtp.java:27)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = 0;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                result\
    \ = i;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn15eingp.java:28)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long arr_size = arr.size();\n        long maxIndex = -1;\n \
    \       long maxElement = -1;\n        for (long i = arr_size - 1; i >= 0; i--)\
    \ {\n            if (arr.get((int)i) >= maxElement) {\n                maxElement\
    \ = arr.get((int)i);\n                maxIndex = i;\n            }\n        }\n\
    \        return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckxlnm2d.java:31)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n      // Put your code here\n      return -1l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnk9v425q.java:23)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        List<Tuple2<Long,Long>> xx = new ArrayList<Tuple2<Long,Long>>();\n\
    \        long index = 0;\n        for (long x : arr) {\n            xx.add(new\
    \ Tuple2<Long,Long>(x, index));\n            index += 1;\n        }\n        xx.sort((e1,\
    \ e2) -> (int)(e1.getValue0() - e2.getValue0()));\n        long[] xx1 = new long[xx.size()];\n\
    \        int[] xx2 = new int[xx.size()];\n        for (int i = 0; i < xx.size();\
    \ i++) {\n            xx1[i] = xx.get(i).getValue0();\n            xx2[i] = (int)xx.get(i).getValue1();\n\
    \        }\n        long[] xx3 = new long[xx.size()];\n        Arrays.fill(xx3,\
    \ -1);\n        for (int i = 0; i < xx.size() - 1; i++) {\n            if (xx1[i]\
    \ > xx1[i + 1]) {\n                xx3[xx2[i]] = xx2[i + 1];\n            }\n\
    \        }\n        long result = -1;\n        for (int i = 0; i < xx.size();\
    \ i++) {\n            if (xx3[i] != -1) {\n                result = xx3[i];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39zzwfuy.java:19: error: cannot find symbol\n        List<Tuple2<Long,Long>>\
    \ xx = new ArrayList<Tuple2<Long,Long>>();\n             ^\n  symbol:   class\
    \ Tuple2\n  location: class Problem\n/tmp/tmp39zzwfuy.java:19: error: cannot find\
    \ symbol\n        List<Tuple2<Long,Long>> xx = new ArrayList<Tuple2<Long,Long>>();\n\
    \                                                   ^\n  symbol:   class Tuple2\n\
    \  location: class Problem\n/tmp/tmp39zzwfuy.java:22: error: cannot find symbol\n\
    \            xx.add(new Tuple2<Long,Long>(x, index));\n                      \
    \ ^\n  symbol:   class Tuple2\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n      long result = -1l;\n      for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n        if (arr.get(i) <= arr.get(i - 1)) {\n          result = i;\n\
    \        }\n      }\n      return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_wjgqpoc.java:31)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        Long largest_index = new Long(-1l);\n        Long prev = new\
    \ Long(-1l);\n        for (Long i = new Long(0l); i < new Long(arr.size()); i++)\
    \ {\n            if (arr.get(i.intValue()) >= prev) {\n                largest_index\
    \ = i;\n            }\n            prev = arr.get(i.intValue());\n        }\n\
    \        return largest_index;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8wded1t.java:30)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long r = -1l;\n        if(arr.size() > 1) {\n            long\
    \ m = arr.get(0);\n            long i = 0l;\n            while(i < arr.size()\
    \ - 1) {\n                i++;\n                if(arr.get(i) <= m) {\n      \
    \              r = i;\n                    break;\n                }\n       \
    \         m = arr.get(i);\n            }\n        }\n        return r;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsco2ohj9.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if(arr.get(i) <= m) {\n                  \
    \         ^\n/tmp/tmpsco2ohj9.java:29: error: incompatible types: possible lossy\
    \ conversion from long to int\n                m = arr.get(i);\n             \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long n = arr.size();\n        for (long i = 0; i < n - 1; i++)\
    \ {\n            if (arr.get((int) i) >= arr.get((int) (i + 1))) {\n         \
    \       return i;\n            }\n        }\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp81o_bwae.java:28)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1fpao588.java:23)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = 0; i < arr.size() -\
    \ 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4csmncs7.java:29)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        //fill out here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7o079ch.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int len = arr.size();\n        // System.out.println(len);\n\
    \        if (len == 0) {\n            return 0;\n        }\n        // System.out.println(arr);\n\
    \        if (len == 1) {\n            return -1;\n        }\n        for (int\
    \ i = len - 1; i > 0; i--) {\n            // System.out.println(i);\n        \
    \    if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n         \
    \   }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3sgh0c7e.java:41)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // your code goes here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_tfdtcp.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1;\n        }\n\
    \        long max = -1;\n        long maxInd = -1;\n        for (int i = arr.size()\
    \ - 1; i >= 0; i--) {\n            if (arr.get(i) <= max) {\n                return\
    \ maxInd;\n            }\n            max = arr.get(i);\n            maxInd =\
    \ i;\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6omwzvj5.java:34)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long len = arr.size();\n        long max = 0;\n        for (long\
    \ x = 0; x < len; x++) {\n            long cur = arr.get((int)x);\n          \
    \  long max2 = 0;\n            for (long y = x + 1; y < len; y++) {\n        \
    \        long cur2 = arr.get((int)y);\n                if (cur2 <= cur) {\n  \
    \                  max2 = y;\n                }\n            }\n            if\
    \ (max2 > max) {\n                max = max2;\n            }\n        }\n    \
    \    if (max != 0) {\n            return max;\n        } else {\n            return\
    \ -1;\n        }\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Insert your code here\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe2l7cluu.java:23)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // insert your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjr3np7nn.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // >>> your code goes here <<<\n        long max = 0;\n    \
    \    long maxIndex = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n\
    \            if (arr.get(i) >= arr.get(i + 1))\n                continue;\n  \
    \          if (arr.get(i + 1) > max) {\n                max = arr.get(i + 1);\n\
    \                maxIndex = i + 1;\n            }\n        }\n        return maxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvnsyo1bk.java:33)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        for (int i = arr.size() - 1;\
    \ i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n            \
    \    return i - 1;\n            }\n        }\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp57f1vouj.java:28)\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i - 1) >= arr.get(i)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rh95p6w.java:31)\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // write your code here\n        if (arr.size() == 0) {\n  \
    \          return -1;\n        }\n        long max = arr.get(0);\n        long\
    \ maxIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) < max) {\n                if (arr.get(i) >= arr.get(i - 1)) {\n\
    \                    max = arr.get(i);\n                    maxIndex = i;\n  \
    \              }\n            } else {\n                max = arr.get(i);\n  \
    \              maxIndex = i;\n            }\n        }\n        for (int i = (int)maxIndex;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < max) {\n              \
    \  if (arr.get(i) >= arr.get(i - 1)) {\n                    return i;\n      \
    \          }\n            }\n        }\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpda8jiljz.java:46)\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here.\n        return -1l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqk33c7u.java:23)\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int n = arr.size();\n        long[] ar = new long[n];\n    \
    \    for (int i = 0; i < n; i++) {\n            ar[i] = arr.get(i);\n        }\n\
    \        int last = n - 1;\n        long res = -1;\n        for (int i = n - 2;\
    \ i >= 0; i--) {\n            if (ar[i] <= ar[last]) {\n                res =\
    \ last;\n                last = i;\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78b2j1ai.java:35)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1;\n        }\n\
    \        else {\n            long index = -1;\n            long last_element =\
    \ arr.get(arr.size() - 1);\n            for (int i = arr.size() - 2; i >= 0; i--)\
    \ {\n                if (arr.get(i) <= last_element) {\n                    index\
    \ = i;\n                    last_element = arr.get(i);\n                }\n  \
    \          }\n            return index;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwdap18yu.java:35)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp073w7snb.java:22)\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i + 1) <= arr.get(i)) {\n                ret\
    \ = i;\n                break;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ucgz0cs.java:29)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long len = arr.size();\n        long j = 1;\n        long result\
    \ = -1;\n        while (j < len) {\n            long i = arr.get((int) (len -\
    \ j));\n            long k = arr.get((int) (len - j - 1));\n            if (i\
    \ >= k) {\n                j = j + 1;\n            } else {\n                result\
    \ = len - j - 1;\n                break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3jk75nj_.java:35)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbxl0b_8u.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        throw new NotImplementedException();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp218uxk3a.java:19: error: cannot find symbol\n        throw new\
    \ NotImplementedException();\n                  ^\n  symbol:   class NotImplementedException\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long retval = 0;\n        return retval;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpww6_kd1j.java:23)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        long len = arr.size();\n        long\
    \ i = 0;\n        while (i < len && i < (len - 1)) {\n            long a = arr.get((int)\
    \ i);\n            long b = arr.get((int) (i + 1));\n            if (a <= b) {\n\
    \                i += 1;\n            } else {\n                result = i;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxa9elqy.java:35)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return arr.get(i).longValue();\n      \
    \      }\n        }\n        return -1l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwogkzpbe.java:30)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long min = arr.get(0);\n        long ans = -1;\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= min) {\n \
    \               ans = i;\n                min = arr.get(i);\n            }\n \
    \       }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz7z38njh.java:30)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vj6w4o8.java:31)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long result = -1l;\n        for (int i = arr.size()\
    \ - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n      \
    \          result = i;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi3tfiiek.java:34)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        long previous = arr.get(0);\n  \
    \      for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >= previous)\
    \ {\n                result = i;\n            }\n            previous = arr.get(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnmp86wif.java:30)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i)\
    \ > arr.get(i + 1)) {\n                return i;\n            }\n        }\n \
    \       return -1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdn99po98.java:27)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int lastIndex = arr.size() - 1;\n        for (int i = lastIndex;\
    \ i >= 0; i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n          \
    \      return i - 1;\n            }\n        }\n        return -1;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6q894ron.java:29)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        //  Write your code here\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpisllycwv.java:23)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Let's start by initializing the current maximum with the\
    \ first element in the array.\n        long curr_max = arr.get(0);\n        //\
    \ We also need to initialize the index of the current maximum.\n        long curr_max_idx\
    \ = 0;\n        // We also need to initialize the answer we want.\n        long\
    \ ans = -1;\n        // Finally, we need to loop over the array from the second\
    \ element to the end.\n        for (long i = 1; i < arr.size(); i++) {\n     \
    \       // Is the current element less than or equal to the current maximum?\n\
    \            if (arr.get((int)i) <= curr_max) {\n                // If so, update\
    \ the current maximum index, and update the answer.\n                curr_max_idx\
    \ = i;\n                ans = curr_max_idx;\n            } else {\n          \
    \      // If not, update the current maximum with the current element.\n     \
    \           curr_max = arr.get((int)i);\n            }\n        }\n        //\
    \ Finally, return the answer.\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpc56lyce6.java:20)\n\tat Problem.main(tmpc56lyce6.java:45)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ <= arr.get(i - 1)) {\n                return i;\n            }\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdxq5lovh.java:22)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5c5893h.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = 0; i < arr.size() -\
    \ 1; i++) {\n            if (arr.get(i + 1) <= arr.get(i)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7go446n1.java:28)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        if (arr.size() > 0) {\n        \
    \    result = 0l;\n            long lastItem = arr.get(0);\n            for (int\
    \ i = 1; i < arr.size(); i++) {\n                if (arr.get(i) <= lastItem) {\n\
    \                    result = i;\n                }\n                lastItem\
    \ = arr.get(i);\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp15j7p7h1.java:34)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long ans = -1l;\n        if (arr.size() < 2) return\
    \ ans;\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ <= arr.get(i - 1)) {\n                ans = i;\n            }\n        }\n \
    \       return ans;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckgnpord.java:35)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ret = i -\
    \ 1;\n                break;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb__mgdfp.java:29)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int len = arr.size();\n        for (int i = len - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return\
    \ (long) i;\n            }\n        }\n        return (long) -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ >= arr.get(i - 1)) {\n                return i - 1;\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoobd1z19.java:28)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        Long result = arr.size() - 1l;\n        for (Long i = arr.size()\
    \ - 1l; i > 0l; i--) {\n            if (arr.get(i.intValue()) >= arr.get(i.intValue()\
    \ - 1)) {\n                result = i - 1l;\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1hnnwiyc.java:28)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int m = 0;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) <= arr.get(i - 1)) {\n                m = i;\n   \
    \         }\n        }\n        return m - 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpponfvvhh.java:28)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        long last = arr.get(0);\n        int\
    \ i = 1;\n        for (; i < arr.size(); i++) {\n            if (arr.get(i) <=\
    \ last) {\n                break;\n            }\n            last = arr.get(i);\n\
    \        }\n        if (i != arr.size()) {\n            res = (long)i - 1;\n \
    \       }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpskvy3v8w.java:34)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        long i = 0;\n        long n = arr.size();\n\
    \        while (i < n - 1) {\n            long j = n - 1;\n            while (j\
    \ > i) {\n                if (arr.get((int)j) <= arr.get((int)i)) {\n        \
    \            j--;\n                } else {\n                    break;\n    \
    \            }\n            }\n            if (j > i) {\n                if (j\
    \ > res) {\n                    res = j;\n                }\n            }\n \
    \           i++;\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4rwmv3hk.java:41)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                result\
    \ = i - 1;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyleh30cn.java:29)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        // IMPORTANT:\
    \ Add a new line at the end of your output\n        // otherwise you will print\
    \ the output of the next test case\n        long curr = arr.get(0);\n        long\
    \ max = arr.get(0);\n        int index = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            long next = arr.get(i);\n            if (next <= curr) {\n\
    \                if (max <= curr) {\n                    result = index;\n   \
    \                 max = curr;\n                }\n                curr = next;\n\
    \                index = i;\n            } else {\n                curr = next;\n\
    \            }\n        }\n        if (max <= curr) {\n            result = index;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhlyf7yq.java:48)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return 0;\n        } else\
    \ {\n            long currentMax = 0;\n            long currentMaxIndex = -1;\n\
    \            for (int i = arr.size() - 1; i >= 0; i--) {\n                long\
    \ currentValue = arr.get(i);\n                if (currentValue <= currentMax)\
    \ {\n                    currentMax = currentValue;\n                    currentMaxIndex\
    \ = i;\n                }\n            }\n            return currentMaxIndex;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7loigsv2.java:35)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1w4ats3r.java:27)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i)\
    \ > arr.get(i + 1))\n                return (long)i;\n        }\n        return\
    \ (long)-1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaj34xeq1.java:26)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long low = arr.get(0);\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) >= low) {\n \
    \               low = arr.get(i);\n                max = (long)i;\n          \
    \  }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpej9ddaff.java:30)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long res = -1l;\n        for\
    \ (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) >= arr.get(i\
    \ - 1)) {\n                res = i - 1;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxcz5hc9.java:29)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long ans = -1;\n        for (int i =\
    \ arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1))\
    \ {\n                if (max < arr.get(i)) {\n                    max = arr.get(i);\n\
    \                    ans = i;\n                }\n            }\n        }\n \
    \       return ans;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph7jo6g6d.java:35)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long index = -1;\n        long\
    \ value = -1;\n        for (int i = arr.size() - 1; i > 0; i--) {\n          \
    \  if (arr.get(i) < arr.get(i - 1)) {\n                index = i;\n          \
    \      value = arr.get(i);\n                break;\n            }\n        }\n\
    \        if (index == -1)\n            return index;\n        while (index < arr.size()\
    \ - 1 && arr.get(index) <= arr.get(index + 1)) {\n            index++;\n     \
    \   }\n        return index;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ej1xon8.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        while (index < arr.size() - 1 && arr.get(index) <=\
    \ arr.get(index + 1)) {\n                                                 ^\n\
    /tmp/tmp5ej1xon8.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        while (index < arr.size() - 1 && arr.get(index) <=\
    \ arr.get(index + 1)) {\n                                                    \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // your code here...\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95gm57zl.java:23)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (long i = arr.size() - 1; i >= 0; i -= 1) {\n          \
    \  if (arr.get((int) i) >= arr.get((int) i - 1)) {\n                continue;\n\
    \            }\n            return i;\n        }\n        return -1l;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpa00y9952.java:20)\n\tat Problem.main(tmpa00y9952.java:29)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            // insert here\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0bw42dk.java:26)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // your code goes here\n        return 0l;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpndp0cloc.java:23)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        ArrayList<Long> arr1 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ arr2 = new ArrayList<Long>();\n        for (Long a: arr) {\n            arr1.add(a);\n\
    \            arr2.add(a);\n        }\n        Collections.sort(arr1);\n      \
    \  long res = -1;\n        for (int i = arr1.size() - 1; i >= 0; i--) {\n    \
    \        if (arr1.get(i) == arr2.get(i)) {\n                res = i;\n       \
    \     }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpej87v1mv.java:35)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n      // Write your code here\n      // To print results to the standard\
    \ output you can use System.out.println()\n      // Example: System.out.println(\"\
    Hello world!\");\n      return -1l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjssqbxpe.java:25)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // if (arr.isEmpty()) { return -1l; }\n        // long ans =\
    \ -1l;\n        // for (int i = 0; i < arr.size() - 1; i++) {\n        //    \
    \ if (arr.get(i) > arr.get(i + 1)) {\n        //         ans = i;\n        //\
    \     }\n        // }\n        // return ans;\n        int start = -1;\n     \
    \   for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i\
    \ + 1)) {\n                start = i;\n                break;\n            }\n\
    \        }\n        return start;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwb9wgx36.java:37)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int i = arr.size() - 1;\n        while (i > 0) {\n         \
    \   if (arr.get(i) >= arr.get(i - 1)) {\n                i -= 1;\n           \
    \ } else {\n                return i;\n            }\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010780
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() < 2) return -1;\n        for (int i = arr.size()\
    \ - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n      \
    \          return i;\n            }\n        }\n        return -1;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        //start writing your code here...\n        long result = -1;\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ebooytx.java:24)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return (long) -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv4i7fux4.java:22)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1l;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            long el = arr.get(i);\n            if (el <= arr.get(i - 1))\
    \ {\n                ret = i - 1;\n                break;\n            }\n   \
    \     }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7premrh.java:30)\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i\
    \ - 1) > arr.get(i)) {\n                return i - 1;\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_yfwmrp.java:27)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here.\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3igyigyd.java:23)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1l;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                ans\
    \ = (long)i;\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi75l02hj.java:28)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1_l8kr4.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // <- Insert your solution here.\n        return 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2szupvn.java:23)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n\
    \        long largest = -1;\n        long largestIndex = -1;\n        long num2\
    \ = arr.get(0);\n        long num1 = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            num1 = num2;\n            num2 = arr.get(i);\n         \
    \   if (num2 <= num1) {\n                if (num2 > largest) {\n             \
    \       largest = num2;\n                    largestIndex = i;\n             \
    \   }\n            }\n        }\n        return largestIndex;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprkkm6zta.java:42)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Replace 'return -1l;' with your return statement\n      \
    \  return -1l;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzi81b_c_.java:23)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // >>> YOUR CODE HERE <<<\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztc42sq4.java:23)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ >= arr.get(i - 1)) {\n                return i - 1;\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoobd1z19.java:28)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1))\n                return i - 1;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2y4ioicn.java:26)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // >>> YOUR CODE HERE <<<\n        return (long)-1l;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6h7tvjal.java:23)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ result = i;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5g9rcsw_.java:31)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max_idx = -1;\n        long max_value = -1;\n        for\
    \ (int i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) >= max_value)\
    \ {\n                max_value = arr.get(i);\n                max_idx = i;\n \
    \           }\n        }\n        return max_idx;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13aqhh84.java:30)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long last = arr.get(0);\n        long max = 0;\n        long\
    \ best = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ <= last) {\n                if (max < i) {\n                    max = i;\n \
    \                   best = i;\n                }\n            }\n            last\
    \ = arr.get(i);\n        }\n        return best;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpr_5xv2dt.java:19)\n\tat Problem.main(tmpr_5xv2dt.java:38)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        int index = 0;\n        long previous\
    \ = 0;\n        while (index < arr.size()) {\n            if (arr.get(index) >=\
    \ previous) {\n                previous = arr.get(index);\n                res\
    \ = index;\n            }\n            index++;\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpock1j38t.java:32)\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1l;\n        }\n\
    \        else {\n            return arr.stream().\n            reduce(\n     \
    \       (last, elem) ->\n            new Tuple2<Long, Long>(elem, last.getValue1()\
    \ - 1l)\n            ).getValue1();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9uw2q_34.java:26: error: cannot find symbol\n            new Tuple2<Long,\
    \ Long>(elem, last.getValue1() - 1l)\n                ^\n  symbol:   class Tuple2\n\
    \  location: class Problem\n/tmp/tmp9uw2q_34.java:26: error: cannot find symbol\n\
    \            new Tuple2<Long, Long>(elem, last.getValue1() - 1l)\n           \
    \                                  ^\n  symbol:   method getValue1()\n  location:\
    \ variable last of type Long\n/tmp/tmp9uw2q_34.java:27: error: cannot find symbol\n\
    \            ).getValue1();\n             ^\n  symbol:   method getValue1()\n\
    \  location: class Optional<Long>\n3 errors\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        long temp = -1;\n        for (int i\
    \ = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1))\
    \ {\n                res = (long) i;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxq8y4yf1.java:29)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // TODO\n        return (long)0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwygs854.java:23)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans=-1;\n        for(int i=arr.size()-1;i>0;i--){\n   \
    \         if(arr.get(i)<=arr.get(i-1))\n                ans=i;\n        }\n  \
    \      return ans;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnidj_hjp.java:30)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ <= arr.get(i - 1)) {\n                return i - 1;\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppm6bwnj8.java:27)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int arrLength = arr.size();\n        if (arrLength == 0) {\n\
    \            return -1;\n        }\n        int largestIndex = -1;\n        Long\
    \ largestValue = arr.get(arrLength - 1);\n        for (int i = arrLength - 2;\
    \ i >= 0; i--) {\n            Long currentValue = arr.get(i);\n            if\
    \ (currentValue <= largestValue) {\n                largestIndex = i;\n      \
    \          largestValue = currentValue;\n            }\n        }\n        return\
    \ largestIndex;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyfjg0om.java:35)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return (long) i;\n            }\n     \
    \   }\n        return (long) -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return -1l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwom4tf8.java:22)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (long i = 0; i < arr.size() - 1; i++) {\n            if\
    \ (arr.get((int)i) >= arr.get((int)(i + 1))) {\n                return i;\n  \
    \          }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ex5_qtp.java:27)\n"
  stdout: ''
  timestamp: 1660010776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return -1l;\n        }\n\
    \        long v = arr.get(0);\n        long idx = -1l;\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < v) {\n                v\
    \ = arr.get(i);\n                idx = i;\n            }\n        }\n        return\
    \ idx;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyob2eu9i.java:33)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp073w7snb.java:22)\n"
  stdout: ''
  timestamp: 1660010777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppksamvoo.java:22)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwggei4og.java:31)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        long previous = 0;\n        long\
    \ i = 0;\n        while (i < arr.size()) {\n            if (arr.get((int)i) >=\
    \ previous) {\n                previous = arr.get((int)i);\n                result\
    \ = i;\n            }\n            i += 1;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgkh5iaw.java:32)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (long i = 1; i < arr.size(); i += 1) {\n            if (arr.get((int)i)\
    \ <= arr.get((int)(i - 1))) {\n                return i - 1;\n            }\n\
    \        }\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1tecpemr.java:27)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here.\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04tnuevt.java:23)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long largestIndex = -1l;\n        int currentIndex = 0;\n  \
    \      Long largestValue = -1l;\n        for (Long value : arr) {\n          \
    \  if (value > largestValue) {\n                largestValue = value;\n      \
    \          largestIndex = currentIndex;\n            }\n            currentIndex++;\n\
    \        }\n        return largestIndex;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ve4w80p.java:32)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        int i = arr.size() - 1;\n        while\
    \ (i > 0) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n               \
    \ res = i;\n                break;\n            }\n            i--;\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010782
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() < 1) {\n            return -1;\n        }\n \
    \       for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return i;\n            }\n        }\n \
    \       return -1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i - 1) >= arr.get(i)) {\n                ret\
    \ = i;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb8m_itc2.java:31)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // your code here\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj6i6e39e.java:23)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Fill in your code here\n        long retval = -1;\n     \
    \   long temp;\n        if (arr.size() > 1) {\n            for (int i = arr.size()\
    \ - 1; i > 0; i--) {\n                temp = arr.get(i);\n                if (temp\
    \ <= arr.get(i - 1)) {\n                    retval = i;\n                    break;\n\
    \                }\n            }\n        }\n        return retval;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        if (arr.size() < 2) {\n           \
    \ return res;\n        }\n        long cur = arr.get(0);\n        for (int i =\
    \ 1; i < arr.size(); i++) {\n            if (arr.get(i) <= cur) {\n          \
    \      res = i;\n                break;\n            }\n            cur = arr.get(i);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3j5ngvuy.java:37)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vj6w4o8.java:31)\n"
  stdout: ''
  timestamp: 1660010778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here\n        long maxIndex = -1l;\n     \
    \   for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i\
    \ + 1)) {\n                maxIndex = (long) i;\n            }\n        }\n  \
    \      return maxIndex;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc095gjxm.java:29)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int n = arr.size();\n        long[] lis = new long[n];\n   \
    \     for (int i = 0; i < n; i++) {\n            lis[i] = 1;\n        }\n    \
    \    for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n\
    \                if (arr.get(i) <= arr.get(j) && lis[i] < lis[j] + 1) {\n    \
    \                lis[i] = lis[j] + 1;\n                }\n            }\n    \
    \    }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n       \
    \     if (max < lis[i]) {\n                max = lis[i];\n            }\n    \
    \    }\n        if (max == 1) {\n            return -1;\n        }\n        return\
    \ max - 1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3j4uoil.java:43)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        for (int i = 0; i < arr.size() -\
    \ 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n        \
    \        if (arr.get(i) <= arr.get(j)) {\n                    continue;\n    \
    \            }\n                if (j - 1 > result) {\n                    result\
    \ = j - 1;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0elkcsm.java:33)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long i = arr.size() - 1;\n        while(i >= 0 && arr.get((int)i)\
    \ >= arr.get((int)(i - 1))) {\n            i--;\n        }\n        return i -\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3r4g0xtc.java:26)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // REPLACE WITH YOUR CODE\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprszhxw_n.java:23)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1l;\n        int i = 0;\n        while (i < arr.size()\
    \ - 1) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n                res\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return res;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyvhjs9wg.java:31)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Create a function which returns the largest index of an element\
    \ which\n        // is not greater than or equal to the element immediately preceding\
    \ it. If\n        // no such element exists then return -1. The given array array\
    \ list will not contain\n        // duplicate values.\n        // Examples:\n\
    \        // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l))))\n        // (3l)\n        // >>> canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n        // (-1l)\n\
    \        long ans = 0;\n        for (long i = arr.size() - 1; i >= 0; i--) {\n\
    \            long prev = (i - 1) >= 0 ? arr.get((int)(i - 1)) : 0;\n         \
    \   if (arr.get((int)i) >= prev) {\n                ans = i;\n            }\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqf13kj1.java:38)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1l;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                result\
    \ = (long)i - 1;\n                break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdh4nr420.java:29)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long idx = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n                idx\
    \ = i;\n            }\n        }\n        return idx;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e_0yy6a.java:28)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (long idx = (long)1l; idx < arr.size(); idx++) {\n     \
    \       if (arr.get((int)idx).compareTo(arr.get((int)(idx - (long)1l))) < (long)0l)\
    \ {\n                return idx - (long)1l;\n            }\n        }\n      \
    \  return (long)-1l;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdyf6yhra.java:27)\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdxq5lovh.java:22)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84z3w_bb.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010783
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ret = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ret\
    \ = i - 1;\n                break;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_yyk9q35.java:29)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long output = -1;\n        long n = arr.size();\n        long\
    \ i = 0;\n        while (i < n - 1) {\n            if (arr.get((int) i) <= arr.get((int)\
    \ (i + 1))) {\n                i = i + 1;\n            } else {\n            \
    \    output = i;\n                i = n;\n            }\n        }\n        return\
    \ output;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdog4d_t.java:33)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Type your solution here\n        long lastMax = arr.get(0);\n\
    \        long lastMaxIndex = 0;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) <= lastMax) {\n                lastMax = arr.get(i);\n\
    \                lastMaxIndex = i;\n            }\n        }\n        return lastMaxIndex;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphts3t05s.java:31)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long i = arr.size() - 1;\n        while (0 <= i && i < arr.size())\
    \ {\n            if (arr.get((int)i) < arr.get((int)(i - 1))) {\n            \
    \    return i;\n            }\n            i = i - 1;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmp4d0dyc40.java:21)\n\tat Problem.main(tmp4d0dyc40.java:30)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        if (arr.size() < 1) {\n            return -1;\n        }\n \
    \       long count = 0;\n        for (int i = 1; i < arr.size(); i++) {\n    \
    \        if (arr.get(i) <= arr.get(i - 1)) {\n                count = i;\n   \
    \         }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcncmrf0r.java:32)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here\n        return -1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3qat9azs.java:23)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long result = -1;\n        long max = arr.get(0);\n        long\
    \ index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ <= max) {\n                max = arr.get(i);\n                index = i;\n \
    \           }\n        }\n        if (index == arr.size() - 1) {\n           \
    \ result = -1;\n        } else {\n            result = index;\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8s5oz_f2.java:36)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long wyn = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) >= arr.get(i - 1)) {\n                wyn\
    \ = i - 1;\n            }\n        }\n        return wyn;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpessoif4y.java:28)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Insert code here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpphn5v20x.java:23)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long longestNotIncreasingSubsequence = -1l;\n        int currentIndex\
    \ = 0;\n        for (Long currentElement : arr) {\n            // If the current\
    \ element is less than or equal to the previous\n            // element then we\
    \ can add the current index to the longest\n            // decreasing subsequence.\n\
    \            if (currentIndex > 0 &&\n                arr.get(currentIndex - 1)\
    \ >= currentElement) {\n                longestNotIncreasingSubsequence = currentIndex;\n\
    \            }\n            currentIndex += 1;\n        }\n        return longestNotIncreasingSubsequence;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                max\
    \ = (long)i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdg2wmtx6.java:31)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        long result = -1l;\n        for (int\
    \ i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i -\
    \ 1)) {\n                result = i;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp98m90f8z.java:32)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ >= arr.get(i - 1)) {\n                return i - 1;\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoobd1z19.java:28)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long output = 0l;\n        for (long i = arr.size() - 1; i >=\
    \ 0; i--) {\n            if (arr.get((int)i) >= arr.get((int)(i - 1))) {\n   \
    \             continue;\n            }\n            else {\n                output\
    \ = i;\n                break;\n            }\n        }\n        return output;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmp_4gvvb2r.java:21)\n\tat Problem.main(tmp_4gvvb2r.java:33)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long answer = 0;\n        if(arr.size() <= 1)\n            return\
    \ answer;\n        for(int i = arr.size() - 1; i > 0; i--) {\n            if(arr.get(i)\
    \ >= arr.get(i - 1)) {\n                answer = i - 1;\n                break;\n\
    \            }\n        }\n        return answer;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpljhy00yz.java:32)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long maxP = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                maxP\
    \ = (long)i;\n            }\n        }\n        return maxP;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparntkel0.java:28)\n"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (long i = 0; i < arr.size() - 1; i++) {\n            if\
    \ (arr.get((int)i) <= arr.get((int)(i + 1))) {\n                continue;\n  \
    \          }\n            return i;\n        }\n        return -1;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmsdj_fzt.java:28)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return arr.stream().reduce(((value, accumulator) -> accumulator.compareTo(value)\
    \ >= 0 ? value : accumulator)).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkgm83tlm.java:22)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        ArrayList<Long> dict = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            Long v = arr.get(i);\n          \
    \  dict.add(v);\n        }\n        dict.sort(null);\n        Collections.reverse(dict);\n\
    \        int i = 0;\n        while (i < dict.size() - 1) {\n            Long current\
    \ = dict.get(i);\n            Long next = dict.get(i + 1);\n            if (current\
    \ >= next) {\n                i += 1;\n            } else {\n                return\
    \ i;\n            }\n        }\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqlppa1hd.java:39)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ >= arr.get(i - 1)) {\n                return i - 1;\n            }\n       \
    \ }\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoobd1z19.java:28)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long curr;\n        long prev;\n        long index;\n      \
    \  long output;\n        output = -1l;\n        if (arr.size() == 0) {\n     \
    \       return output;\n        }\n        curr = arr.get(0);\n        prev =\
    \ arr.get(0);\n        index = 0l;\n        for (int j = 1; j < arr.size(); j++)\
    \ {\n            curr = arr.get(j);\n            if (curr <= prev) {\n       \
    \         output = index;\n            }\n            index = (long)j;\n     \
    \       prev = curr;\n        }\n        return output;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpemc031wc.java:41)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long len = arr.size();\n        long ans = -1;\n        // boolean\
    \ ans = false;\n        long ele = -1;\n        long index = 0;\n        while(index\
    \ < len - 1) {\n            if(arr.get((int)index) >= arr.get((int)(index + 1)))\
    \ {\n                if(ele == -1) {\n                    ele = arr.get((int)index);\n\
    \                    ans = index;\n                } else if(ele <= arr.get((int)index))\
    \ {\n                    ele = arr.get((int)index);\n                    ans =\
    \ index;\n                }\n            }\n            index += 1;\n        }\n\
    \        if(ans == 0) {\n            return -1;\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjig9dcen.java:42)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1;\n        long maxIndex = arr.size() - 1;\n  \
    \      for (long i = arr.size() - 1; i >= 0; i--) {\n            if (i == maxIndex)\
    \ {\n                ans = i;\n            } else if (arr.get((int) i) >= arr.get((int)\
    \ (i + 1))) {\n                ans = i;\n            } else {\n              \
    \  break;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0b5qphi.java:33)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int index = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i + 1) <= arr.get(i)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpec0mo3bn.java:28)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                res\
    \ = i;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk67z5t47.java:31)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long ans = -1l;\n        for (int i = arr.size() - 1; i > 0;\
    \ i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans\
    \ = i;\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbm9j7bow.java:31)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        List<Long> a = new ArrayList<>();\n        long max = -1;\n\
    \        long idx = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n\
    \            if (arr.get(i + 1) <= arr.get(i)) {\n                a.add((long)\
    \ i);\n            }\n        }\n        for (int i = 0; i < a.size(); i++) {\n\
    \            if (max < a.get(i)) {\n                max = a.get(i);\n        \
    \        idx = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxefozm6.java:36)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        return -1l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwom4tf8.java:22)\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1_l8kr4.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l))))\n        // (3l)\n        // >>>\
    \ canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n\
    \        // (-1l)\n        long result = -1;\n        long prev = arr.get(0);\n\
    \        long index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n   \
    \         long curr = arr.get(i);\n            if (curr <= prev) {\n         \
    \       index = i;\n                result = index;\n            }\n         \
    \   prev = curr;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmppn26_lxk.java:24)\n\tat Problem.main(tmppn26_lxk.java:41)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code goes here.\n        return (long)-1l;\n    }\n\
    \    public static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxrj0egvr.java:23)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long n = arr.size();\n        long res = -1;\n        for (long\
    \ i = n - 1; i >= 1; i--) {\n            if (arr.get((int) i - 1) >= arr.get((int)\
    \ i)) {\n                res = i;\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjiayudo_.java:32)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        int index = -1;\n        for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                index\
    \ = i;\n            }\n        }\n        return index;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxd8i2fql.java:28)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long max = -1;\n        long index = -1;\n        long last\
    \ = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) <= last) {\n                max = Math.max(max, arr.get(i));\n \
    \               index = i;\n            }\n            last = arr.get(i);\n  \
    \      }\n        return index;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmpayrpnmlu.java:21)\n\tat Problem.main(tmpayrpnmlu.java:36)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        long ret = -1;\n        for (int\
    \ i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i +\
    \ 1)) {\n                ret = i;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8hje0f3.java:30)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        final class $Solution {\n            $Solution(ArrayList<Long>\
    \ arr) {\n                arr_ = arr;\n            }\n            public long\
    \ solve() {\n                return solve(arr_);\n            }\n            ArrayList<Long>\
    \ arr_;\n        }\n        return new $Solution(arr).solve();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptt5qy3wz.java:24: error: method solve in class $Solution cannot\
    \ be applied to given types;\n                return solve(arr_);\n          \
    \             ^\n  required: no arguments\n  found:    ArrayList<Long>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1w4ats3r.java:27)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long l = arr.size();\n        if (l <= 1) {\n            return\
    \ -1;\n        }\n        long i = l - 1;\n        while (i >= 0) {\n        \
    \    if (arr.get((int)i) >= arr.get((int)(i - 1))) {\n                return i\
    \ - 1;\n            }\n            i = i - 1;\n        }\n        return -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixcrsffl.java:34)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            long\
    \ prev = arr.get(i - 1);\n            long curr = arr.get(i);\n            if\
    \ (curr <= prev) {\n                return i;\n            }\n        }\n    \
    \    return -1;\n    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long prev = arr.get(0);\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) <= prev) {\n                return i - 1;\n\
    \            }\n            prev = arr.get(i);\n        }\n        return -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))\
    \ == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2riq3id.java:29)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i)\
    \ < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n\
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1w4ats3r.java:27)\n"
  stdout: ''
  timestamp: 1660010779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i)\
    \ >= arr.get(i + 1)) {\n                return (long)i;\n            }\n     \
    \   }\n        return (long)-1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqu_j6jxx.java:27)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        Long highest=arr.get(0);\n        Long result=0l;\n\
    \        for(int i=1;i<arr.size();i++){\n            if(arr.get(i)<=highest){\n\
    \                highest=arr.get(i);\n                result=i-1l;\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpp7t7of.java:33)\n"
  stdout: ''
  timestamp: 1660010785
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // TODO\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vl4k408.java:23)\n"
  stdout: ''
  timestamp: 1660010786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        // Fill in the function here\n        long result = -1l;\n \
    \       for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i)\
    \ <= arr.get(i + 1)) {\n                result = arr.get(i + 1);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l)))) ==\
    \ (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38_yjh8k.java:29)\n"
  stdout: ''
  timestamp: 1660010786
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Create a function which returns the largest index of an\
    \ element which\n    // is not greater than or equal to the element immediately\
    \ preceding it. If\n    // no such element exists then return -1. The given array\
    \ array list will not contain\n    // duplicate values.\n    // Examples:\n  \
    \  // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)3l, (long)5l))))\n    // (3l)\n    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (-1l)\n    public static long canArrange(ArrayList<Long>\
    \ arr) {\n        long res = -1;\n        long prior = arr.get(0);\n        for\
    \ (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= prior) {\n\
    \                res = i;\n            }\n            prior = arr.get(i);\n  \
    \      }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))) == (3l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)5l)))) == (-1l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))))\
    \ == (2l));\n    assert(canArrange((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)8l, (long)5l, (long)7l, (long)3l)))) == (4l));\n    assert(canArrange((new\
    \ ArrayList<Long>(Arrays.asList()))) == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.canArrange(tmp5ze4xw79.java:20)\n\tat Problem.main(tmp5ze4xw79.java:34)\n"
  stdout: ''
  timestamp: 1660010786
