language: java
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) != 0)\n                r = r * 2 % p;\n            n >>= 1;\n\
    \        }\n        return r;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48g3dcu1.java:30)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Base case.\n        if (n == 0) return 1;\n\
    \        // Recursion.\n        long sqrt = modp(n / 2, p);\n        sqrt = (sqrt\
    \ * sqrt) % p;\n        // Even case.\n        if (n % 2 == 0) {\n           \
    \ return sqrt;\n        }\n        // Odd case.\n        return (sqrt * 2) % p;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long r = modp(n / 2, p);\n            return r * r % p;\n\
    \        } else {\n            return n * modp(n - 1, p) % p;\n        }\n   \
    \ }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbd0xpqo5.java:31)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        n = n % p;\n        n = (2 * n) % p;\n     \
    \   n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n   \
    \     n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n \
    \       n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n        n = (2 * n) % p;\n\
    \        n = (2 * n) % p;\n        n = (2 * n) % p;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb94r4gir.java:64: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ret = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) != 0) {\n                ret = (ret * 2) % p;\n        \
    \    }\n            n /= 2;\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiz84jq6b.java:31)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1l;\n    \
    \    }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long r = modp(n / 2, p);\n            return (r * r)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpunafl3ev.java:36)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        long m = n;\n        while\
    \ (p > 0) {\n            if ((p & 1) == 1) {\n                r = (r * m) % MOD;\n\
    \            }\n            m = (m * m) % MOD;\n            p >>= 1;\n       \
    \ }\n        return r;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sa4q0is.java:25: error: cannot find symbol\n                r\
    \ = (r * m) % MOD;\n                              ^\n  symbol:   variable MOD\n\
    \  location: class Problem\n/tmp/tmp2sa4q0is.java:27: error: cannot find symbol\n\
    \            m = (m * m) % MOD;\n                          ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * 2 % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        assert p > 0;\n        assert n >= 0;\n    \
    \    assert n < p;\n        if (n == 0) {\n            return 1;\n        }\n\
    \        long half = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return\
    \ (half * half) % p;\n        } else {\n            return (half * half * 2) %\
    \ p;\n        }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.modp(tmp8vcmmdnc.java:23)\n\
    \tat Problem.main(tmp8vcmmdnc.java:36)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long s = modp(n / 2, p);\n        s = s * s % p;\n        if (n\
    \ % 2 == 1) {\n            s = s * 2 % p;\n        }\n        return s;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long val = modp(n / 2, p);\n   \
    \         return (val * val) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return (new BigInteger(String.valueOf(n))).modPow(BigInteger.ONE,\
    \ new BigInteger(String.valueOf(p))).longValue();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsprilwlk.java:25)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ret = 1l;\n        for (int i = 0; i <\
    \ n; i++)\n            ret = (ret * 2l) % p;\n        return ret;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        while (n > 0) {\n     \
    \       long b = (n & 1);\n            if (b == 1) {\n                r = (r *\
    \ 2) % p;\n            }\n            n = n >> 1;\n        }\n        return r;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp88081tis.java:32)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1l;\n        long i = 0l;\n       \
    \ long x = n;\n        while (((1l << i) & n) != 0l) {\n            if ((i & 1l)\
    \ == 0l) {\n                x = (x * x) % p;\n            }\n            r = (r\
    \ * x) % p;\n            i = i + 1l;\n        }\n        return r;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8iyiccw.java:34)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1l;\n        long pow = n;\n    \
    \    while (p > 0) {\n            if ((p & 1) != 0) res = (res * pow) % p;\n \
    \           pow = (pow * pow) % p;\n            p = p >> 1;\n        }\n     \
    \   return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1q6os45g.java:31)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long res = modp(n / 2, p);\n        res = (res * res) % p;\n  \
    \      if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n      \
    \  return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ret = 1l;\n        long base = 2l;\n  \
    \      while (n > 0) {\n            if ((n & 1) == 1) {\n                ret =\
    \ ret * base % p;\n            }\n            base = base * base % p;\n      \
    \      n = n >> 1;\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        int bits = (int)n;\n        long res = 1;\n\
    \        while (bits > 0) {\n            if ((bits & 1) == 1) {\n            \
    \    res = (res * 2) % p;\n            }\n            bits >>= 1;\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc40fwb_s.java:32)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        for (long i = 0; i\
    \ < n; i++) {\n            result = (result * 2) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Insert your code here.\n        if (n==0)\
    \ {\n            return 1;\n        }\n        else {\n            long k = modp(n/2,\
    \ p);\n            long ans = (2*k)%p;\n            if (n%2==1) {\n          \
    \      ans = (ans*3)%p;\n            }\n            return ans;\n        }\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpok1ks15m.java:35)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        for (long i = 0; i\
    \ < n; i++)\n            result = (result * 2) % p;\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ 2;\n        long half = modp(n / 2, p);\n        long res = half * half % p;\n\
    \        if (n % 2 == 1) res = res * 2 % p;\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return ((BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p))).longValue());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4s26a8iu.java:24)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // >>> x = 1l\n        // >>> for i in range(n):\n\
    \        // >>> x = (x * 2) % p\n        // >>> x\n        long x = 1;\n     \
    \   for (int i = 0; i < n; i++) {\n            x = (x * 2) % p;\n        }\n \
    \       return x;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ans = 1l;\n        long b = 2l;\n     \
    \   while (n > 0) {\n            if ((n & 1) == 1)\n                ans = (ans\
    \ * b) % p;\n            b = (b * b) % p;\n            n >>= 1;\n        }\n \
    \       return ans;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Compute n % p.\n        n %= p;\n       \
    \ // If n is not in the range 0..p-1, fix it.\n        if ((n < 0) || (n >= p))\
    \ {\n            n = (n % p + p) % p;\n        }\n        return n;\n    }\n \
    \   public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77kcw9dh.java:31)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0)\n            return modp(p - (Math.abs(n)\
    \ % p), p);\n        else if (n < p)\n            return n;\n        else\n  \
    \          return modp(n % p, p);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj7nz21n3.java:30)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        assert(p != 0);\n        return n % p;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptfdpqz2s.java:26)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long a = 1;\n        long c = 1;\n        for\
    \ (int i = 0; i < n; i++) {\n            c = c * a % p;\n            a = a * 2\
    \ % p;\n        }\n        return c;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5k245g9e.java:31)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ret = 1;\n        long x = n % p;\n   \
    \     while (n > 0) {\n            if ((n & 1) == 1) {\n                ret =\
    \ (ret * x) % p;\n            }\n            x = (x * x) % p;\n            n =\
    \ n >> 1;\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyswpgixx.java:33)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        for (int i = 0; i\
    \ < n; i++) {\n            result = (result * 2) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // print((n) + (' ') + (p))\n        if (n ==\
    \ 0)\n            return 1;\n        if (n == 1)\n            return n;\n    \
    \    long t = modp(n / 2, p);\n        if (n % 2 == 0)\n            return t *\
    \ t % p;\n        else\n            return (t * t % p) * n % p;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3lfmsr2q.java:34)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long z = modp(n / 2, p);\n        z = z * z % p;\n        if (n\
    \ % 2 == 1) {\n            z = z * 2 % p;\n        }\n        return z;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * 3 % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp38syoqg8.java:31)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return pow(2, n, p);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrvhn44a.java:21: error: cannot find symbol\n        return pow(2,\
    \ n, p);\n               ^\n  symbol:   method pow(int,long,long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        else if (n % 2 == 0) {\n            long res = modp(n / 2, p);\n\
    \            return (res * res) % p;\n        }\n        else {\n            return\
    \ (modp(n - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6khti7v.java:34)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // >>> 2 ** 100 % 101\n        // 1\n      \
    \  long result = 1;\n        for (long power = n; power > 0; power >>= 1) {\n\
    \            if ((power & 1) != 0) {\n                result = result * n % p;\n\
    \            }\n            n = n * n % p;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2q0xhg8.java:33)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                result = (result * 2) % p;\n\
    \            }\n            n >>= 1;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt0t80mzn.java:31)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return (t * t) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        for (long i = 0; i <\
    \ n; i++) {\n            res = (res * 2) % p;\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if(n < 0)\n            return modp(p + n, p);\n\
    \        if(n < p)\n            return n;\n        if(n == 0)\n            return\
    \ 1;\n        long result = 1;\n        long cur = 2;\n        while(n > 0) {\n\
    \            if(n % 2 == 1)\n                result = result * cur % p;\n    \
    \        cur = cur * cur % p;\n            n /= 2;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpah86d3u5.java:40)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return (long)BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphymrlkov.java:24)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            // (n mod p) == -(-n\
    \ mod p)\n            return -modp(-n, p);\n        }\n        if (n == 0) {\n\
    \            return 1;\n        }\n        if (n == 1) {\n            return n;\n\
    \        }\n        if (n % 2 == 0) {\n            // n = n_0 + n_1 * 2\n    \
    \        // n^2 = n_0^2 + n_1^2 * 2^2\n            // n^2 = n_0^2 + n_1^2 * 4\n\
    \            // n^2 = (n_0^2 mod p) + (n_1^2 mod p) * 4\n            // n^2 mod\
    \ p = (n_0^2 mod p) + (n_1^2 mod p) * 4 mod p\n            // n^2 mod p = (n_0^2\
    \ mod p) + (n_1^2 mod p) * 4 mod p\n            // n^2 mod p = (n_0^2 mod p) +\
    \ (n_1^2 mod p) * (2 mod p) * 2 mod p\n            // n^2 mod p = (n_0^2 mod p)\
    \ + (n_1^2 mod p) * (2 mod p) * (2 mod p) mod p\n            // n^2 mod p = (n_0^2\
    \ mod p) + (n_1^2 mod p) * (2^2 mod p) mod p\n            // n^2 mod p = (n_0^2\
    \ mod p) + (n_1^2 mod p) * ((n_0 mod p)^2 mod p) mod p\n            // n^2 mod\
    \ p = (n_0^2 mod p) + (n_1^2 mod p) * (n_0^2 mod p) mod p\n            // n^2\
    \ mod p = (n_0^2 mod p) + (n_1^2 mod p) * (n_0^2 mod p) mod p\n            //\
    \ (n_0^2 mod p) + (n_1^2 mod p) * (n_0^2 mod p) mod p = ((n_0^\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9i76faz.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long temp = modp(n / 2, p);\n  \
    \          return (temp * temp) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64o6f7m_.java:33)\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ret = 1l;\n        long cur = 2l;\n   \
    \     for (;n > 0l; n /= 2l) {\n            if (n % 2l == 1l) {\n            \
    \    ret = (ret * cur) % p;\n            }\n            cur = (cur * cur) % p;\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Inverse power series.\n        long res =\
    \ 1;\n        long x = 2;\n        long pwr = p - 2;\n        while (pwr > 0)\
    \ {\n            if ((pwr & 1) == 1) {\n                res = res * x % p;\n \
    \           }\n            x = x * x % p;\n            pwr >>= 1;\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfmzdmzsc.java:36)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long k = 1;\n        long b = 2;\n        while\
    \ (n > 0) {\n            if (n % 2 == 1) {\n                k = (k * b) % p;\n\
    \            }\n            n = n / 2;\n            b = (b * b) % p;\n       \
    \ }\n        return k;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger bigN = BigInteger.valueOf(n);\n \
    \       BigInteger bigP = BigInteger.valueOf(p);\n        BigInteger two = BigInteger.valueOf(2);\n\
    \        BigInteger one = BigInteger.valueOf(1);\n        long res = 1;\n    \
    \    for (int i = 0; i < p; i++) {\n            if (bigN.testBit(i)) {\n     \
    \           res = (res * two.modPow(bigP.subtract(one), bigP).longValue()) % p;\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9iere5t.java:34)\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return modp(n + p,\
    \ p);\n        }\n        if (n == 0) {\n            return 1;\n        }\n  \
    \      if (n == 1) {\n            return n;\n        }\n        if (n % 2 == 0)\
    \ {\n            return modp(2 * modp(n / 2, p), p);\n        }\n        return\
    \ (modp(n - 1, p) + modp(n - 1, p)) % p;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.modp(tmpwm1nij_h.java:21)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp(tmpwm1nij_h.java:31)\n\
    \tat Problem.modp(tmpwm1nij_h.java:31)\n\tat Problem.modp"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // INSERT YOUR CODE HERE\n        return -1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnc841kol.java:25)\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return (modp((p +\
    \ n), p));\n        }\n        long z = 1;\n        for (int i = 0; i < n; i++)\
    \ {\n            z = (z * 2) % p;\n        }\n        return z;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // >>> bin(3)\n        // '0b11'\n        //\
    \ >>> bin(5)\n        // '0b101'\n        // >>> bin(19)\n        // '0b10011'\n\
    \        // >>> bin(101)\n        // '0b1100101'\n        // >>> bin(101)[2:]\n\
    \        // '1100101'\n        // >>> 1100101 & 1\n        // 1\n        // >>>\
    \ 1100101 >> 1\n        // 110010\n        // >>> int('0b110010', 2)\n       \
    \ // 50\n        // >>> bin(50)\n        // '0b110010'\n        // >>> 0b110010\
    \ & 1\n        // 0\n        // >>> 110010 >> 1\n        // 1100\n        // >>>\
    \ bin(1100)\n        // '0b101100'\n        // >>> int('0b101100', 2)\n      \
    \  // 44\n        // >>> 44 & 1\n        // 0\n        // >>> 1100 >> 1\n    \
    \    // 110\n        // >>> bin(110)\n        // '0b110110'\n        // >>> 11\
    \ & 1\n        // 1\n        // >>> 11 >> 1\n        // 5\n        // >>> 5 &\
    \ 1\n        // 1\n        // >>> 5 >> 1\n        // 2\n        // >>> 2 & 1\n\
    \        // 0\n        // >>> 2 >> 1\n        // 1\n        // >>> 1 & 1\n   \
    \     // 1\n        // >>> 1 >> 1\n        // 0\n        // >>> bin(2)\n     \
    \   // '0b10'\n        // >>> bin(3)\n        // '0b11'\n        // >>> bin(3\
    \ * 2)\n        // '0b110'\n        // >>> bin(3 * 2 * 2)\n        // '0b1100'\n\
    \        // >>> bin(3 * 2 * 2 * 2)\n        // '0b11000'\n        // >>> bin(3\
    \ * 2 * 2 * 2 * 2)\n        // '0b110000'\n        // >>> bin(3 * 2 * 2 * 2 *\
    \ 2 * 2)\n        // '0b1100000'\n        // >>> bin(3 * 2 * 2 * 2 * 2 * 2 * 2)\n\
    \        // '0b11000000'\n        // >>>\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxibaruld.java:86: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long res\
    \ = 1;\n        if (n % 2 == 1) {\n            res = modp(n - 1, p);\n       \
    \     res = (res * n) % p;\n        } else {\n            res = modp(n / 2, p);\n\
    \            res = (res * res) % p;\n        }\n        return res;\n    }\n \
    \   public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptuhb4yrn.java:39)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        for (int i = 0; i < n;\
    \ i++) {\n            r = (r * 2) % p;\n        }\n        return r;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        // O(log2(n))\n        long res = modp(n / 2, p);\n        // In\
    \ order to avoid overflow when computing res * res\n        res = (res * res)\
    \ % p;\n        if (n % 2 == 1) {\n            res = (res * 3) % p;\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpji3euyz2.java:34)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1l;\n    \
    \    }\n        return (n * modp((n - 1l), p)) % p;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph7cnyo8h.java:27)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) != 0) {\n                res = (res * 2) % p;\n        \
    \    }\n            n >>= 1;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj9_35r1g.java:31)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0 || p < 0) {\n            throw new\
    \ IllegalArgumentException();\n        }\n        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long m = modp(n / 2, p);\n\
    \            return (m * m) % p;\n        } else {\n            return (2 * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011568
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        long result =\
    \ modp(n / 2, p);\n        result = result * result % p;\n        if (n % 2 ==\
    \ 1) result = result * 2 % p;\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ans = 1;\n        long a = n;\n       \
    \ while (n > 0) {\n            if ((n % 2) == 1)\n                ans = (ans *\
    \ a) % p;\n            a = (a * a) % p;\n            n = n / 2;\n        }\n \
    \       return ans;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpppvksvbd.java:32)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return modp(new BigInteger(Long.toString(n)),\
    \ new BigInteger(Long.toString(p))).longValue();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0e5qegxh.java:21: error: incompatible types: BigInteger cannot\
    \ be converted to long\n        return modp(new BigInteger(Long.toString(n)),\
    \ new BigInteger(Long.toString(p))).longValue();\n                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        //Compute the value of 2^n modulo p.\n     \
    \   if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n     \
    \       return 2;\n        } else if (n % 2 == 0) {\n            long l = modp(n\
    \ / 2, p);\n            return (l * l) % p;\n        } else {\n            long\
    \ l = modp(n - 1, p);\n            return (2 * l) % p;\n        }\n    }\n   \
    \ public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011568
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        int i;\n        long res = 1;\n        for (i\
    \ = 0; i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long y = modp(n / 2, p);\n     \
    \       return (y * y) % p;\n        } else {\n            return (modp(n - 1,\
    \ p) * n) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqk9qqcnw.java:33)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long a = 1;\n        long b = n;\n        while\
    \ (p > 0) {\n            if ((p & 1) == 1) {\n                a = (a * b) % mod;\n\
    \            }\n            b = (b * b) % mod;\n            p = p >> 1;\n    \
    \    }\n        return a;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9ttho73.java:25: error: cannot find symbol\n                a\
    \ = (a * b) % mod;\n                              ^\n  symbol:   variable mod\n\
    \  location: class Problem\n/tmp/tmpc9ttho73.java:27: error: cannot find symbol\n\
    \            b = (b * b) % mod;\n                          ^\n  symbol:   variable\
    \ mod\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ans = 1;\n        long x = n;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                ans = (ans\
    \ * x) % p;\n            }\n            x = (x * x) % p;\n            n >>= 1;\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzptb99h_.java:33)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long ans = 1;\n        n %= p;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                ans = (ans * 2) % p;\n          \
    \  }\n            n >>= 1;\n            if (n > 0) {\n                ans = (ans\
    \ * ans) % p;\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppyttnbkz.java:39)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1l;\n        long two = 2l;\n     \
    \   while (n > 0) {\n            if ((n & 1) == 1)\n                r = (r * two)\
    \ % p;\n            two = (two * two) % p;\n            n = n >> 1;\n        }\n\
    \        return r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        else if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            long t = x * x;\n            t = t % p;\n            return t;\n\
    \        }\n        else {\n            long x = modp(n - 1, p);\n           \
    \ long t = x * n;\n            t = t % p;\n            return t;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp779odfm0.java:39)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        long two = 2;\n       \
    \ while (n > 0) {\n            if ((n % 2) == 1) {\n                r = (r * two)\
    \ % p;\n            }\n            two = (two * two) % p;\n            n = n /\
    \ 2;\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1l;\n    \
    \    }\n        long halfn = modp(n / 2, p);\n        if (n % 2 == 0) {\n    \
    \        return (halfn * halfn) % p;\n        } else {\n            return ((halfn\
    \ * halfn) % p * n) % p;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpra110sb6.java:33)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // print \"modp\", n, p\n        if (n < p)\
    \ {\n            return n;\n        }\n        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p)\
    \ * modp(n / 2, p) % p;\n        }\n        return modp(n / 2, p) * modp(n / 2,\
    \ p) * 2 % p;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02q1gw8v.java:35)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        for (int i = 0; i\
    \ < n; i++) {\n            result = (result * 2) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        else if (n % 2 == 0) {\n            return modp((n / 2), p) * modp((n\
    \ / 2), p) % p;\n        }\n        else {\n            return modp((n / 2), p)\
    \ * modp((n / 2), p) * 2 % p;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            n += p;\n        }\n\
    \        if (n == 0) {\n            return 1;\n        }\n        // Typical optimization.\n\
    \        if (n == 1) {\n            return n;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long temp = modp(n / 2, p);\n            return (temp * temp)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7os7v9d_.java:40)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long k = 1;\n        for (long i = 0; i < n;\
    \ i++) {\n            k = (k * 2) % p;\n        }\n        return k;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n      // Implement me!\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dg23xka.java:22: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        n = n % p;\n        long result = 1;\n     \
    \   while (n > 0) {\n            if ((n & 1) == 1) result = (result * 2) % p;\n\
    \            n = n >> 1;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppxh8rgn9.java:30)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        long base = n;\n      \
    \  while (n > 0) {\n            if ((n & 1) == 1) {\n                r = (r *\
    \ base) % p;\n            }\n            base = (base * base) % p;\n         \
    \   n = n >> 1;\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhyn193g.java:33)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        for (int i = 0; i < n;\
    \ i++) {\n            r = (r * 2) % p;\n        }\n        return r;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long half\
    \ = modp(n / 2, p);\n        if (n % 2 == 0) {\n            return (half * half)\
    \ % p;\n        } else {\n            return (half * half * n) % p;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolbs4omv.java:36)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Fill in the code for this method.\n     \
    \   return n;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf2igb3l1.java:26)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0 || p < 0) {\n            throw new\
    \ RuntimeException(\"impossible\");\n        }\n        if (n == 0) {\n      \
    \      return 1;\n        }\n        long z = modp(n/2, p);\n        if (n % 2\
    \ == 0) {\n            return (z*z) % p;\n        } else {\n            return\
    \ (z*z*2) % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                r = (r * (p)) % (p);\n          \
    \  }\n            n = n >> 1;\n            p = (p * (p)) % (p);\n        }\n \
    \       return r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.modp(tmpynm46rnq.java:24)\n\tat Problem.main(tmpynm46rnq.java:32)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return modp(-n, p);\n\
    \        }\n        if (n < p) {\n            return n;\n        }\n        if\
    \ (n == 0) {\n            return 1;\n        }\n        return modp(n / 2, p)\
    \ * modp(n - n / 2, p) % p;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwetritl_.java:34)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long res\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = res * 2 % p;\n            }\n            n >>= 1;\n            long\
    \ d = 2 * 2 % p;\n            if (d > 0) {\n                d = d * d % p;\n \
    \           }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp83bh6926.java:41)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Since (2l)^(n/2l) * (2l)^(n/2l) = (2l)^n.\n\
    \        // >>> n\n        // (4l)\n        // >>> n/2l\n        // (2l)\n   \
    \     // >>> 2l^(n/2l)\n        // (16l)\n        // >>> 2l^(n/2l) * 2l^(n/2l)\n\
    \        // (256l)\n        // >>> 2l^(n/2l) * 2l^(n/2l) * 3l\n        // (768l)\n\
    \        // >>> 2l^(n/2l) * 2l^(n/2l) * 3l % 11l\n        // (5l)\n        if\
    \ (n == (0l)) {\n            return (1l);\n        }\n        if (n == (1l)) {\n\
    \            return (2l);\n        }\n        if (n % (2l) == (0l)) {\n      \
    \      return modp(n / (2l), p) * modp(n / (2l), p) % p;\n        }\n        else\
    \ {\n            return modp(n / (2l), p) * modp(n / (2l), p) * (2l) % p;\n  \
    \      }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger bn = BigInteger.valueOf(n);\n   \
    \     BigInteger bp = BigInteger.valueOf(p);\n        BigInteger r = bn.modPow(BigInteger.valueOf(2),\
    \ bp);\n        return r.longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdq5d33ys.java:27)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        else if (n % 2 == 0) {\n            long temp = modp(n / 2, p);\n\
    \            return (temp * temp) % p;\n        }\n        else {\n          \
    \  return (n * modp(n - 1, p)) % p;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibumj7fe.java:34)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        for (int k = 0; k < n;\
    \ k++) {\n            r = (r * 2) % p;\n        }\n        return r;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return modp(p - (-n\
    \ % p), p);\n        }\n        else {\n            return n % p;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4iqldb13.java:30)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        while (n > 0) {\n\
    \            if ((n % 2) != 0) {\n                result = (result * n) % p;\n\
    \            }\n            n = n / 2;\n            n = n % p;\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpadbjz3eq.java:33)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        long result\
    \ = modp(n / 2, p);\n        result = (result * result) % p;\n        if (n %\
    \ 2 == 1) {\n            result = (result * n) % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp5vofli5.java:36)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long t = modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n     \
    \   }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xr51m13.java:36)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         long r = n % 2;\n            if (r == 1) {\n                res = (res\
    \ * 2) % p;\n            }\n            n = n / 2;\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdta4_6if.java:32)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         res = (res * (n % 2 == 1 ? 2 : 1)) % p;\n            n /= 2;\n     \
    \   }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp080id_w_.java:29)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long z = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                z = (z * 2) % p;\n            }\n\
    \            n = n >> 1;\n        }\n        return z;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsk_37ze2.java:31)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        if (n == 0) return\
    \ 1;\n        while (n > 0) {\n            if ((n % 2) != 0) {\n             \
    \   result = (result * p) % MODULUS;\n            }\n            p = (p * p) %\
    \ MODULUS;\n            n /= 2;\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpke43dmrr.java:25: error: cannot find symbol\n                result\
    \ = (result * p) % MODULUS;\n                                        ^\n  symbol:\
    \   variable MODULUS\n  location: class Problem\n/tmp/tmpke43dmrr.java:27: error:\
    \ cannot find symbol\n            p = (p * p) % MODULUS;\n                   \
    \       ^\n  symbol:   variable MODULUS\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < p) {\n            return n;\n      \
    \  }\n        if (n % 2 == 0) {\n            long temp = modp(n / 2, p);\n   \
    \         temp = (temp * temp) % p;\n            return temp;\n        } else\
    \ {\n            long temp = modp(n - 1, p);\n            temp = (temp * 2) %\
    \ p;\n            return temp;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8q3nuwdy.java:36)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Compute the result for n = 0 separately (to\
    \ avoid\n        // possible divison by zero).\n        if (n == 0) {\n      \
    \      return 1;\n        }\n        // Now compute the power of 2^n modulo p.\n\
    \        long res = 1;\n        long a = 2;\n        while (n > 0) {\n       \
    \     if (n % 2 == 1) {\n                res = (res * a) % p;\n            }\n\
    \            a = (a * a) % p;\n            n = n / 2;\n        }\n        return\
    \ res % p;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Fill in your code here.\n        long e =\
    \ n;\n        long t = p;\n        long r = 1;\n        while (e > 0) {\n    \
    \        long q = e/2;\n            long r_p = r;\n            long expo = e %\
    \ 2;\n            if (expo == 1) {\n                r = (r_p * t) % p;\n     \
    \       }\n            t = (t * t) % p;\n            e = q;\n        }\n     \
    \   return r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmep4zp_6.java:38)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long f = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                f = (f * n) % p;\n            }\n\
    \            n = n >> 1;\n        }\n        return f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxfvvnpob.java:32)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * 2 % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // Implement modp\n        BigInteger n1 = BigInteger.valueOf(n);\n\
    \        BigInteger p1 = BigInteger.valueOf(p);\n        BigInteger result = n1.modPow(BigInteger.valueOf(2),\
    \ p1);\n        return result.longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpig9u79uq.java:28)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < p)\n            return n;\n        long\
    \ r = n % p;\n        if (r < 0)\n            r += p;\n        return r;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vevseuw.java:30)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger bi = BigInteger.valueOf(2).modPow(BigInteger.valueOf(n),\
    \ BigInteger.valueOf(p));\n        return bi.longValue();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < p) {\n            return n;\n      \
    \  }\n        else {\n            long t = modp(n / 2, p);\n            if (n\
    \ % 2 == 0) {\n                return (2 * t) % p;\n            }\n          \
    \  else {\n                return (2 * t + p - 1) % p;\n            }\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_l4_hmc5.java:36)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return modp(BigInteger.valueOf(n), BigInteger.valueOf(p)).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg701j9gz.java:21: error: incompatible types: BigInteger cannot\
    \ be converted to long\n        return modp(BigInteger.valueOf(n), BigInteger.valueOf(p)).longValue();\n\
    \                                      ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long a = 1;\n        for (int i = 0; i < n;\
    \ i++) {\n            a = (a * 2) % p;\n        }\n        return a;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // TODO: fill in.\n        long ans = 1;\n \
    \       long cur = 2;\n        long rem = n;\n        while (rem > 0) {\n    \
    \        if (rem % 2 == 1) {\n                ans = (ans * cur) % p;\n       \
    \     }\n            cur = (cur * cur) % p;\n            rem /= 2;\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger nn = BigInteger.valueOf(n);\n   \
    \     BigInteger pp = BigInteger.valueOf(p);\n        return nn.modPow(BigInteger.valueOf(2),\
    \ pp).longValue();\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_vpgotr.java:26)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        n = n % p;\n        return n * (n + 1) / 2 %\
    \ p;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zxobjkp.java:25)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0 || p < 0)\n            throw new IllegalArgumentException(\"\
    n and p must be non-negative.\");\n        if (n == 0)\n            return 1;\n\
    \        if (n == 1)\n            return n;\n        return (modp(n - 1, p) *\
    \ n) % p;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rq10919.java:30)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger n_big = BigInteger.valueOf(n);\n\
    \        BigInteger p_big = BigInteger.valueOf(p);\n        BigInteger m = n_big.modPow(BigInteger.valueOf(2l),\
    \ p_big);\n        return m.longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwoqb5ws.java:27)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        long exp = n;\n     \
    \   while (exp > 0) {\n            if ((exp & 1) == 1) {\n                res\
    \ = (res * n) % p;\n            }\n            n = (n * n) % p;\n            exp\
    \ >>= 1;\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw87veage.java:33)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        for (int i = 0; i < n;\
    \ i++) {\n            res = (res * 2) % p;\n        }\n        return res;\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (modp(n - 1, p) * n) % p;\n        }\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzz6qmq4m.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        n = n % p;\n        long res = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2)\
    \ % p;\n            }\n            n >>= 1;\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcn225ycb.java:32)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger N = BigInteger.valueOf(n);\n    \
    \    BigInteger P = BigInteger.valueOf(p);\n        BigInteger one = BigInteger.valueOf(1);\n\
    \        BigInteger two = BigInteger.valueOf(2);\n        BigInteger x = N.modPow(two,\
    \ P);\n        if (x.compareTo(one) == 0) {\n            return 1;\n        }\
    \ else {\n            return x.longValue();\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72jcwq0t.java:33)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else\
    \ {\n            return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        if (n > 0) {\n   \
    \         long c = 2;\n            while (c <= n) {\n                c = c * 2;\n\
    \            }\n            c = c / 2;\n            while (c > 0) {\n        \
    \        result = (result * result) % p;\n                if (n >= c) {\n    \
    \                result = (result * 2) % p;\n                    n = n - c;\n\
    \                }\n                c = c / 2;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n        } else {\n            return n * modp(n-1, p) % p;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9pl1ldt.java:32)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long c = 1l;\n        for (int i = 0; i < n;\
    \ i++) {\n            c = (c * 2l) % p;\n        }\n        return c;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long x = 1;\n        for (int i = 1; i <= n;\
    \ i++) {\n            x = x * 2 % p;\n        }\n        return x;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        if (n\
    \ % 2 == 0) {\n            long half = modp(n / 2, p);\n            return (half\
    \ * half) % p;\n        } else {\n            return (n * modp(n - 1, p)) % p;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n8_tn4t.java:36)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1l;\n    \
    \    }\n        if (n % 2 == 0) {\n            long ret = modp(n / 2, p);\n  \
    \          return ((ret * ret) % p);\n        } else {\n            return ((2\
    \ * modp(n - 1, p)) % p);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        n = n % p;\n        n = n + p;\n        n =\
    \ n % p;\n        return n;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwuatwsg.java:28)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n >= p) {\n            return modp(n % p,\
    \ p);\n        }\n        if (n == 0) {\n            return 1;\n        }\n  \
    \      if (n == 1) {\n            return n;\n        }\n        if (n % 2 == 0)\
    \ {\n            long d = modp(n / 2, p);\n            return (d * d) % p;\n \
    \       }\n        long d = modp((n - 1) / 2, p);\n        return (((d * d) %\
    \ p) * n) % p;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu82hdehs.java:39)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long s = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                s = (s * 2) % p;\n            }\n\
    \            n >>= 1;\n        }\n        return s;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp577m5y9o.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0)\n            n = n % p + p;\n   \
    \     if (n < 2)\n            return n;\n        else\n            return (2 *\
    \ modp(n / 2, p) % p) % p;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0xd4ar8s.java:29)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        assert(n >= 0);\n        long result = 1;\n\
    \        for (int i = 1; i <= n; i++) {\n            result = (result * 2) % p;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ans = 1;\n        for (long i = 0; i <\
    \ n; i++) {\n            ans = (ans * 2) % p;\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        // (n+1)^p = n^p + p * n^(p-1)\n        // p * n^(p-1) = n^p +\
    \ 1 - n^p\n        // n^p % p = (n^p + 1 - n^p) % p\n        // n^p % p = (1 -\
    \ n^p) % p\n        // n^p % p = (1 + p - n^p) % p\n        // n^p % p = (p -\
    \ n^p) % p\n        //\n        // (n-1)^p = n^p - p * n^(p-1)\n        // p *\
    \ n^(p-1) = n^p - (n^p - 1)\n        // n^p % p = (n^p - n^p + 1) % p\n      \
    \  // n^p % p = (1) % p\n        //\n        // n^(p-1) % p = p - n^p % p\n  \
    \      // (n+1)^(p-1) % p = p - (n+1)^p % p\n        // (n-1)^(p-1) % p = p -\
    \ (n-1)^p % p\n        //\n        // n^p = n * n^(p-1)\n        // (n+1)^p =\
    \ (n+1) * (n+1)^(p-1)\n        // (n-1)^p = (n-1) * (n-1)^(p-1)\n        if (n\
    \ % 2 == 0) {\n            long m = modp(n / 2, p);\n            return (m * m)\
    \ % p;\n        } else {\n            long m = modp(n - 1, p);\n            long\
    \ s = (m * n) % p;\n            return s;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkgyv2721.java:54)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        while (n > 0) {\n     \
    \       r = (r * (n % 2 == 1 ? 3 : 1)) % p;\n            n /= 2;\n        }\n\
    \        return r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphrszdp1c.java:29)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n <= 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long res = modp(n / 2, p);\n   \
    \         return (res * res) % p;\n        } else {\n            return (modp(n\
    \ - 1, p) * n) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ze0rcmv.java:33)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // assert p > 0\n        // assert n >= 0\n\
    \        long res = 1l;\n        long x = n;\n        while (p > 0) {\n      \
    \      if ((p & 1) != 0) {\n                res = (res * x) % MOD;\n         \
    \   }\n            x = (x * x) % MOD;\n            p >>= 1;\n        }\n     \
    \   return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9i6lgkb.java:27: error: cannot find symbol\n                res\
    \ = (res * x) % MOD;\n                                  ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmpw9i6lgkb.java:29: error: cannot find\
    \ symbol\n            x = (x * x) % MOD;\n                          ^\n  symbol:\
    \   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n     \
    \       return (x * x) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_vqv3ky.java:33)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return new BigInteger(Long.toString(n)).modPow(BigInteger.ONE,\
    \ new BigInteger(Long.toString(p))).longValue();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpunmm8_lc.java:25)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return p - modp(-n,\
    \ p);\n        }\n        BigInteger bn = BigInteger.valueOf(n);\n        BigInteger\
    \ bp = BigInteger.valueOf(p);\n        return bn.modPow(BigInteger.valueOf(2l),\
    \ bp).longValue();\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmt42vvkq.java:29)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return n != 0 ? new BigInteger(Long.toString(n)).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue() : 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinbzasb3.java:24)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        for (long i = 0; i <\
    \ n; i++) {\n            res = (res * 2) % p;\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        n %= p;\n        for\
    \ (int i = 0; i < 63; i++) {\n            res = (res * res) % p;\n           \
    \ if (((n >> i) & 1) == 1) {\n                res = (res * n) % p;\n         \
    \   }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprwnbg6nc.java:32)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1l;\n        long cur = n;\n    \
    \    while (p > 0) {\n            if ((p & 1) == 1) {\n                res = (res\
    \ * cur) % MOD;\n            }\n            cur = (cur * cur) % MOD;\n       \
    \     p >>= 1;\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_p55ubs0.java:25: error: cannot find symbol\n                res\
    \ = (res * cur) % MOD;\n                                    ^\n  symbol:   variable\
    \ MOD\n  location: class Problem\n/tmp/tmp_p55ubs0.java:27: error: cannot find\
    \ symbol\n            cur = (cur * cur) % MOD;\n                             \
    \   ^\n  symbol:   variable MOD\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        assert(n >= 0);\n        assert(p >= 2);\n \
    \       n %= p;\n        long result = 1;\n        long sq = n;\n        for (long\
    \ bit = 0; bit < 64; bit++) {\n            if (((p-1) & (1l << bit)) != 0) {\n\
    \                result = (result * sq) % p;\n            }\n            sq =\
    \ (sq * sq) % p;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nzptgn_.java:35)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long z = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                z = (z * 2) % p;\n            }\n\
    \            n >>= 1;\n        }\n        return z;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1jnfjnk2.java:31)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        long ans = modp(n\
    \ / 2, p);\n        ans = (ans * ans) % p;\n        if (n % 2 == 1) {\n      \
    \      ans = (ans * 2) % p;\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger N = BigInteger.valueOf(n);\n    \
    \    BigInteger P = BigInteger.valueOf(p);\n        BigInteger TWO = BigInteger.valueOf(2);\n\
    \        BigInteger TEN = BigInteger.valueOf(10);\n        long t = 1;\n     \
    \   while (n > 0) {\n            if ((n & 1) == 1) {\n                t = (t *\
    \ 2) % p;\n            }\n            n = n >> 1;\n            if (n > 0) {\n\
    \                t = (t * t) % p;\n            }\n        }\n        return t;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbl0jidq.java:39)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        long base = n % p;\n\
    \        long exponent = n;\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p;\n            }\n\
    \            exponent >>= 1;\n            base = (base * base) % p;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2jw1_utz.java:34)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        long r = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                r =\
    \ (r * 2) % p;\n            }\n            n = n >> 1;\n        }\n        return\
    \ r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6cwkfv74.java:32)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return p - modp(-n,\
    \ p);\n        }\n        if (n == 0) {\n            return 1;\n        }\n  \
    \      long result = 1;\n        long base = 2;\n        while (n > 0) {\n   \
    \         if (n % 2 == 1) {\n                result = (result * base) % p;\n \
    \           }\n            base = (base * base) % p;\n            n /= 2;\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long res = 1;\n        while (n > 0) {\n   \
    \         if ((n % 2) == 1) {\n                res = (res * n) % p;\n        \
    \    }\n            n = n / 2;\n            n = (n * n) % p;\n        }\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011578
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long pw = 1;\n        long a = 2;\n        for\
    \ (;n > 0; n >>= 1) {\n            if ((n & 1) == 1) {\n                pw = (pw\
    \ * a) % p;\n            }\n            a = (a * a) % p;\n        }\n        return\
    \ pw;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1;\n        while (n > 0) {\n     \
    \       r = ((r * 2) % p);\n            n = (n - 1);\n        }\n        return\
    \ r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n       \
    \     res = (res * 2) % p;\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n /\
    \ 2, p) % p;\n        } else {\n            return modp(n / 2, p) * modp(n / 2,\
    \ p) * n % p;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi4i__5_5.java:32)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        long v = modp(n / 2, p);\n        if (n % 2 == 0) return (v * v)\
    \ % p;\n        return (((v * v) % p) * n) % p;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmsp9ddt.java:29)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ans = 1l;\n        for (int i = 0; i <\
    \ n; i++) {\n            ans = (ans * 2l) % p;\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long tmp = modp(n / 2, p);\n        tmp = (tmp * tmp) % p;\n  \
    \      if (n % 2 == 1) {\n            tmp = (tmp * 2) % p;\n        }\n      \
    \  return tmp;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n == 1) {\n            return n;\n        }\n        return\
    \ ((modp((n / 2), p) * modp((n / 2), p)) % p * modp((n % 2), p)) % p;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpijm9c71x.java:30)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // We only have to compute half of the bits\
    \ of n\n        // (rounded up).\n        long r = 1;\n        for (long i = 0;\
    \ i < Math.ceil(Math.log(n) / Math.log(2)); i++) {\n            r = r * r % p;\n\
    \            if (((n >> i) & 1) == 1) {\n                r = r * 2 % p;\n    \
    \        }\n        }\n        return r;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbz1e5xw6.java:34)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = 1l;\n        long a = 2l;\n       \
    \ while (n > 0l) {\n            if ((n & 1l) != 0l) {\n                r = (r\
    \ * a) % p;\n            }\n            a = (a * a) % p;\n            n >>= 1l;\n\
    \        }\n        return r;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long k = n % p;\n        return k == 0 ? 1 :\
    \ k;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s1eqiun.java:26)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1l;\n        long tmp = modp(n\
    \ / 2, p);\n        tmp = (tmp * tmp) % p;\n        if (n % 2 == 1) tmp = (tmp\
    \ * 2) % p;\n        return tmp;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0)\n            return modp(n + p, p);\n\
    \        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2), BigInteger.valueOf(p)).longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqezmk72o.java:26)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long res = modp(n / 2, p);\n   \
    \         return (res * res) % p;\n        } else {\n            return (n * modp(n\
    \ - 1, p)) % p;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp85dtm8r0.java:33)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long p2 = 1;\n        long res = 1;\n      \
    \  while (p2 <= n) {\n            p2 <<= 1;\n        }\n        while (p2 > 0)\
    \ {\n            p2 >>= 1;\n            if (n >= p2) {\n                res =\
    \ (res * res) % p;\n                if (res == 0) {\n                    return\
    \ 0;\n                }\n                if (res == 1) {\n                   \
    \ return 1;\n                }\n                n -= p2;\n                res\
    \ = (res * res) % p;\n                if (res == 0) {\n                    return\
    \ 0;\n                }\n                if (res == 1) {\n                   \
    \ return 1;\n                }\n            } else {\n                res = (res\
    \ * res) % p;\n                if (res == 0) {\n                    return 0;\n\
    \                }\n                if (res == 1) {\n                    return\
    \ 1;\n                }\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdazlhx6l.java:57)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        if (n % 2 == 0) {\n            long t = modp(n / 2, p);\n     \
    \       return ((t * t) % p);\n        } else {\n            return ((2 * modp(n\
    \ - 1, p)) % p);\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long result = modp(n / 2, p);\n            return result *\
    \ result % p;\n        } else {\n            return n * modp(n - 1, p) % p;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphqcn2nv9.java:31)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1l;\n    \
    \    }\n        long[] a = new long[64];\n        a[0] = n;\n        for (int\
    \ i = 1; i < 64; i++) {\n            a[i] = a[i - 1] * a[i - 1] % p;\n       \
    \ }\n        long ans = 1l;\n        for (int i = 0; i < 64; i++) {\n        \
    \    if ((n & (1l << i)) != 0) {\n                ans = ans * a[i] % p;\n    \
    \        }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppesec00v.java:38)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            throw new RuntimeException(\"\
    n is negative\");\n        }\n        if (p < 2) {\n            throw new RuntimeException(\"\
    p less than 2\");\n        }\n        long result = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                result = (result * 2) %\
    \ p;\n            }\n            n >>= 1;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpehmzscfo.java:37)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        assert n >= 0;\n        assert p >= 2;\n   \
    \     long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\n\
    \                res = (res * 2) % p;\n            n >>= 1;\n        }\n     \
    \   return res;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmopzro6.java:32)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long remainder = n % p;\n        long result\
    \ = remainder;\n        while (remainder != 0) {\n            remainder = (remainder\
    \ * 2) % p;\n            result = (result + remainder) % p;\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011579
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return BigInteger.valueOf(n).modPow(BigInteger.valueOf(2),\
    \ BigInteger.valueOf(p)).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxncp5hw.java:24)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        else if (n %\
    \ 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n       \
    \ } else {\n            return modp(n / 2, p) * modp(n / 2, p) * n % p;\n    \
    \    }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphee_yce9.java:30)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long x = modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (modp(n - 1, p) * n) % p;\n        }\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzz6qmq4m.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long ans = 1;\n        for (int i = 0; i < n;\
    \ i++) {\n            ans = (ans * 2) % p;\n        }\n        return ans;\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // fill in code here\n        return 0;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc1c9ja40.java:25)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        long base = modp(n\
    \ / 2, p);\n        if (n % 2 == 0) return base * base % p;\n        else return\
    \ (base * base % p) * n % p;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppz1liwje.java:28)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n < 0) {\n            return modp(n + p,\
    \ p);\n        }\n        if (n < p) {\n            return n;\n        }\n   \
    \     if (n % 2 == 0) {\n            return (modp(n / 2, p) * modp(2, p)) % p;\n\
    \        }\n        return (modp(n / 2, p) * modp(2, p) * modp(1, p)) % p;\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3l3mu0rd.java:34)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        long c = modp(n\
    \ / 2, p);\n        c = c * c % p;\n        if (n % 2 == 1) c = c * 2 % p;\n \
    \       return c;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        else if (n % 2 == 0) {\n            long x = modp(n / 2, p);\n\
    \            return x * x % p;\n        }\n        else {\n            return\
    \ n * modp(n - 1, p) % p;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0d7kczym.java:34)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger nn = BigInteger.valueOf(n);\n   \
    \     BigInteger pp = BigInteger.valueOf(p);\n        return nn.modPow(BigInteger.valueOf(2),\
    \ pp).longValue();\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_vpgotr.java:26)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long result = 1;\n        for (int i = 0; i\
    \ < n; i++) {\n            result = result * 2 % p;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        return modp((long) n, (long) p, (long) (1l));\n\
    \    }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw4c3d0fm.java:21: error: method modp in class Problem cannot be\
    \ applied to given types;\n        return modp((long) n, (long) p, (long) (1l));\n\
    \               ^\n  required: long,long\n  found:    long,long,long\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) {\n            return 1;\n     \
    \   }\n        long r;\n        if (n % 2 == 0) {\n            r = modp(n / 2,\
    \ p);\n            r = (r * r) % p;\n        } else {\n            r = modp(n\
    \ - 1, p);\n            r = (r * 2) % p;\n        }\n        return r % p;\n \
    \   }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // return pow(2, n, p);\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        long ans = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) != 0) {\n                ans = (ans * 2) % p;\n\
    \            }\n            n >>= 1;\n            if (n > 0) {\n             \
    \   ans = (ans * ans) % p;\n            }\n        }\n        return ans;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90vzlbsz.java:39)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long m = modp(n / 2, p);\n            return ((m % p) * (m\
    \ % p)) % p;\n        } else {\n            return ((3 * modp(n - 1, p)) % p);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpds0ekfg7.java:30)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        BigInteger _n = BigInteger.valueOf(n);\n   \
    \     BigInteger _p = BigInteger.valueOf(p);\n        return _n.modPow(BigInteger.valueOf(2),\
    \ _p).longValue();\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy5gh1tla.java:26)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        //long modp = 1l;\n        long modp = p;\n\
    \        long s = n;\n        while(s > 0) {\n            if( (s & 1) == 1) {\n\
    \                modp = modp * n % p;\n            }\n            n = n * n %\
    \ p;\n            s = s >> 1;\n        }\n        return modp;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(modp((3l), (5l)) == (3l));\n \
    \   assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n\
    \    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n\
    \    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfra7m3dx.java:34)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        long r = n;\n        int i = 0;\n        while\
    \ (i < 64) {\n            if (((n & (1L << i)) != 0)) {\n                r = (r\
    \ * r) % p;\n            }\n            i = i + 1;\n        }\n        return\
    \ r;\n    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp28gfvg1d.java:32)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
    \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
    \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n  \
    \  // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long\
    \ modp(long n, long p) {\n        // BEGIN SOLUTION\n        long res = 1;\n \
    \       while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * n) % p;\n            }\n            n = n >> 1;\n        }\n      \
    \  return res;\n        // END SOLUTION\n    }\n    public static void main(String[]\
    \ args) {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjwyy51u5.java:34)\n"
  stdout: ''
  timestamp: 1660011574
