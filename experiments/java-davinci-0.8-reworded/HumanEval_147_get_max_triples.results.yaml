language: java
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ mod = 3;\n        long res = 0;\n        int[] a = new int[(int)n];\n      \
    \  a[0] = 1;\n        for (int i = 1; i < n; i++) {\n            a[i] = (i*i)\
    \ - i + 1;\n        }\n        long[] map = new long[(int)mod];\n        for (int\
    \ j = 0; j < n; j++) {\n            int rem = a[j] % mod;\n            if (rem\
    \ == 0) {\n                res += map[0];\n            } else {\n            \
    \    res += map[(int)(mod - rem)];\n            }\n            map[(int)rem]++;\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmperfnq3yh.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int rem = a[j] % mod;\n                      \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        int count = 0;\n        ArrayList<Integer> arrayList = new ArrayList<Integer>();\n\
    \        for (int i = 1; i <= n; i++) {\n            arrayList.add(i * i - i +\
    \ 1);\n        }\n        for (int i = 0; i < arrayList.size(); i++) {\n     \
    \       for (int j = i + 1; j < arrayList.size(); j++) {\n                for\
    \ (int k = j + 1; k < arrayList.size(); k++) {\n                    if ((arrayList.get(i)\
    \ + arrayList.get(j) + arrayList.get(k)) % 3 == 0) {\n                       \
    \ count++;\n                    }\n                }\n            }\n        }\n\
    \        return count;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        int\
    \ count = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j =\
    \ i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n  \
    \                  if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) {\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphuprke6x.java:34)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (((i*i-i+1) + (j*j-j+1) + (k*k-k+1)) % 3 == 0) {\n       \
    \                 sum++;\n                    }\n                }\n         \
    \   }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgy3tl7gw.java:34)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        int\
    \ count = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n\
    \                    if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1))\
    \ % 3 == 0)\n                        count++;\n                }\n           \
    \ }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n          \
    \  a.add(i * i - i + 1);\n        }\n        // for (long val : a) {\n       \
    \ //     System.out.print(val + \" \");\n        // }\n        long triplets =\
    \ 0;\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = i\
    \ + 1; j < a.size(); j++) {\n                for (int k = j + 1; k < a.size();\
    \ k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n\
    \                        triplets++;\n                    }\n                }\n\
    \            }\n        }\n        return triplets;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ counter = 0;\n        for (int i = 1; i < n - 1; i++) {\n            long x\
    \ = i * i - i + 1;\n            for (int j = i + 1; j < n; j++) {\n          \
    \      long y = j * j - j + 1;\n                for (int k = j + 1; k <= n; k++)\
    \ {\n                    long z = k * k - k + 1;\n                    if ((x +\
    \ y + z) % 3 == 0) {\n                        counter++;\n                   \
    \ }\n                }\n            }\n        }\n        return counter;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        long count = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            a[i] = (i+1) * (i+1) - (i+1) + 1;\n        }\n      \
    \  for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here.\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2h3sfj30.java:24)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        long triplets = 0;\n        long[] a = new long[(int)n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        for (int i = 0; i < n - 2; i++) {\n            for (int j =\
    \ i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                  \
    \      triplets++;\n                    }\n                }\n            }\n\
    \        }\n        return triplets;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcnljtjiu.java:38)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ c=0;\n        int[] a=new int[(int)n];\n        for(int i=0;i<n;i++){\n    \
    \        a[i]=i*i-i+1;\n        }\n        for(int i=0;i<n;i++){\n           \
    \ for(int j=i+1;j<n;j++){\n                for(int k=j+1;k<n;k++){\n         \
    \           if((a[i]+a[j]+a[k])%3==0){\n                        c++;\n       \
    \             }\n                }\n            }\n        }\n        return c;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk3ni96o2.java:37)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ s = 0;\n        for (long i = 1; i < n - 1; i++) {\n            for (long j\
    \ = i + 1; j < n; j++) {\n                if ((i * i - i + 1 + j * j - j + 1)\
    \ % 3 == 0) {\n                    s += n - j;\n                }\n          \
    \  }\n        }\n        return s;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pcyp0ip.java:31)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ array = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n  \
    \          array.add(i * i - i + 1);\n        }\n        long count = 0;\n   \
    \     for (int i = 0; i < array.size(); i++) {\n            for (int j = i + 1;\
    \ j < array.size(); j++) {\n                for (int k = j + 1; k < array.size();\
    \ k++) {\n                    if ((array.get(i) + array.get(j) + array.get(k))\
    \ % 3 == 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv8bbojx.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp765pws20.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        throw\
    \ new UnsupportedOperationException(\"Unimplemented.\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Unimplemented.\n\
    \tat Problem.getMaxTriples(tmpkbv_8d8b.java:20)\n\tat Problem.main(tmpkbv_8d8b.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ retval = 0;\n        // Given n, there are n possible values for the first a[i].\n\
    \        // Given the first a[i], the third a[k] will be between a[i] + 1 and\
    \ n.\n        // Given the first a[i] and the third a[k], the second a[j] will\
    \ be between a[i] + 1 and a[k] - 1.\n        // So the number of possibilities\
    \ for (a[i], a[j], a[k]) is thus n * (n - a[i]) * (a[k] - a[i]).\n        // What\
    \ remains is to filter on the number being a multiple of 3.\n        // We can\
    \ further reduce the time complexity by not repeating the same triple in the count.\n\
    \        // a[i] will never be 0, so we can divide by 3; a[i] mod 3 will be 1\
    \ or 2, so there are only 2 cases.\n        long ai = 1;\n        long m = (long)\
    \ Math.ceil(n / 3);\n        for (; ai <= m; ai++) {\n            long ak = ai\
    \ + 1;\n            for (; ak <= n; ak++) {\n                if ((ai * ai - ai\
    \ + 1 + ak * ak - ak + 1) % 3 == 0) {\n                    // a[i] and a[k] sum\
    \ to a multiple of 3.\n                    long aj = ai + 1;\n               \
    \     for (; aj < ak; aj++) {\n                        if (((ai * ai - ai + 1)\
    \ + (aj * aj - aj + 1) + (ak * ak - ak + 1)) % 3 == 0) {\n                   \
    \         // a[i], a[j], and a[k] sum to a multiple of 3.\n                  \
    \          // We found a valid triple.\n                            retval++;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return retval;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0bn3geyb.java:49)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ nToReturn = 0;\n        List<Long> arrayList = new ArrayList<Long>();\n    \
    \    for (long i = 1; i <= n; i++) {\n            arrayList.add(i * i - i + 1);\n\
    \        }\n        for (int i = 0; i < arrayList.size(); i++) {\n           \
    \ for (int j = i + 1; j < arrayList.size(); j++) {\n                for (int k\
    \ = j + 1; k < arrayList.size(); k++) {\n                    if ((arrayList.get(i)\
    \ + arrayList.get(j) + arrayList.get(k)) % 3 == 0) {\n                       \
    \ nToReturn++;\n                    }\n                }\n            }\n    \
    \    }\n        return nToReturn;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ total = 0;\n        for (int i = 0; i < n - 2; i++) {\n            long a =\
    \ i * i - i + 1;\n            for (int j = i + 1; j < n - 1; j++) {\n        \
    \        long b = j * j - j + 1;\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    long c = k * k - k + 1;\n                    if ((a +\
    \ b + c) % 3 == 0) total++;\n                }\n            }\n        }\n   \
    \     return total;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgzxca083.java:34)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = (long)i * i - i + 1;\n        }\n        long max = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n        \
    \        for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                        max += 1;\n                   \
    \ }\n                }\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyfwhihur.java:37)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        long answer = 0;\n        for (int i = 1; i < n; i++) {\n        \
    \    for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k\
    \ - k + 1) % 3 == 0) {\n                        answer++;\n                  \
    \  }\n                }\n            }\n        }\n        return answer;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rsawiu4.java:37)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0;\n        ArrayList<Long> a = new ArrayList<Long>();\n        for\
    \ (long i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n\
    \        for (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1;\
    \ j < a.size(); j++) {\n                for (int k = j + 1; k < a.size(); k++)\
    \ {\n                    long sum = a.get(i) + a.get(j) + a.get(k);\n        \
    \            if (sum % 3 == 0) count++;\n                }\n            }\n  \
    \      }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code here!\n        long triplets = 0;\n        for(int i = 1; i < n - 1; i++)\
    \ {\n            for(int j = i + 1; j < n; j++) {\n                for(int k =\
    \ j + 1; k <= n; k++) {\n                    if((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n                        triplets++;\n        \
    \            }\n                }\n            }\n        }\n        return triplets;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ list = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n       \
    \     list.add(i * i - i + 1);\n        }\n        long result = 0;\n        for\
    \ (int i = 0; i < list.size(); i++) {\n            for (int j = i + 1; j < list.size();\
    \ j++) {\n                for (int k = j + 1; k < list.size(); k++) {\n      \
    \              if ((list.get(i) + list.get(j) + list.get(k)) % 3 == 0) {\n   \
    \                     result++;\n                    }\n                }\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976174
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ < 3) return 0;\n        long count = 0;\n        long[] a = new long[(int)n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        for (int i = 0; i < n - 2; i++) {\n            for (int j =\
    \ i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if ((a[i] + a[j] + a[k]) % 3 == 0) count++;\n           \
    \     }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7le6lj30.java:36)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n    \t// start\
    \ of the algorithm.\n    \tlong tot = 0;\n    \tfor(long i = 1; i < n - 1; i++)\
    \ {\n    \t\tfor(long j = i + 1; j < n; j++) {\n    \t\t\tfor(long k = j + 1;\
    \ k <= n; k++) {\n    \t\t\t\tif(i*i - i + 1 + j*j - j + 1 + k*k - k + 1 == 0)\
    \ {\n    \t\t\t\t\ttot++;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n  \
    \  \t// end of the algorithm.\n    \treturn tot;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ww3rvan.java:35)\n"
  stdout: ''
  timestamp: 1659976174
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        List<Integer> ints = new ArrayList<>();\n        for\
    \ (int i = 1; i <= n; i++) {\n            ints.add(i * i - i + 1);\n        }\n\
    \        long triples = 0;\n        for (int i = 0; i < ints.size(); i++) {\n\
    \            for (int j = i + 1; j < ints.size(); j++) {\n                for\
    \ (int k = j + 1; k < ints.size(); k++) {\n                    if ((ints.get(i)\
    \ + ints.get(j) + ints.get(k)) % 3 == 0) triples++;\n                }\n     \
    \       }\n        }\n        return triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0l;\n        long a = 1l;\n        long b = 3l;\n        long c = 7l;\n\
    \        while (a + b + c <= n) {\n            if ((a + b + c) % 3 == 0) {\n \
    \               sum++;\n            }\n            a = b;\n            b = c;\n\
    \            c = a + b + c;\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn62ovho_.java:35)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code here\n        // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n        // For each i (1 \u2264\
    \ i \u2264 n), the value of a[i] = i * i - i + 1.\n        // Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] +\
    \ a[j] + a[k] is a multiple of 3.\n        // Example :\n        // >>> getMaxTriples((5l))\n\
    \        // (1l)\n        // Explanation: \n        // a = [1, 3, 7, 13, 21]\n\
    \        // The only valid triple is (1, 7, 13).\n        int s = 0;\n       \
    \ for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n \
    \               for(int k = j+1; k < n; k++) {\n                    long v = (i*i-i+1)\
    \ + (j*j-j+1) + (k*k-k+1);\n                    if(v % 3 == 0) s++;\n        \
    \        }\n            }\n        }\n        return s;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0fhsp7w9.java:43)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n\
    \                    if ((j * j - j + 1 + i * i - i + 1 + k * k - k + 1) % 3 ==\
    \ 0)\n                        count++;\n                }\n            }\n   \
    \     }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ l = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n           \
    \ l.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i\
    \ = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++)\
    \ {\n                for (int k = j + 1; k < l.size(); k++) {\n              \
    \      if ((l.get(i) + l.get(j) + l.get(k)) % 3 == 0) {\n                    \
    \    count++;\n                    }\n                }\n            }\n     \
    \   }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // \
    \  System.out.println(\"n = \" + n);\n        long result = 0;\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        // System.out.println(\"a = \"\
    \ + a);\n        for (int i = 0; i < a.size(); i++) {\n            for (int j\
    \ = i + 1; j < a.size(); j++) {\n                for (int k = j + 1; k < a.size();\
    \ k++) {\n                    // System.out.println(\"Checking \" + i + \",\"\
    \ + j + \",\" + k);\n                    if ((a.get(i) + a.get(j) + a.get(k))\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Create\
    \ an array list of integers.\n        ArrayList<Integer> a = new ArrayList<Integer>();\n\
    \        // Iterate through each integer value in the range of 1 to n.\n     \
    \   for (int i = 1; i <= n; i++) {\n            // Add the value of i * i - i\
    \ + 1 to the array list.\n            a.add(i * i - i + 1);\n        }\n     \
    \   // Return the number of triples of a where i < j < k and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n        return a.stream().mapToInt(x -> x).filter(x ->\
    \ x % 3 == 0).count();\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpse64vwz8.java:31)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        int\
    \ count = 0;\n        long[] a = new long[(int)n];\n        for (int i = 0; i\
    \ < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                        count++;\n               \
    \     }\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp85ssdfbm.java:37)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 1l;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_ke_9m_.java:24)\n"
  stdout: ''
  timestamp: 1659976174
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = (long)i * i - i + 1;\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) count++;\n                }\n            }\n        }\n\
    \        return count;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphoszws3b.java:35)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n        System.out.println(Arrays.toString(a));\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \          sum++;\n                    }\n                }\n            }\n \
    \       }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3hbual88.java:38)\n"
  stdout: '[1, 1, 3, 7, 13]

    '
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ r = 0;\n        for (long i = 1; i < n; i++) {\n            for (long j = i\
    \ + 1; j < n; j++) {\n                for (long k = j + 1; k < n; k++) {\n   \
    \                 if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) %\
    \ 3 == 0) {\n                        r++;\n                    }\n           \
    \     }\n            }\n        }\n        return r;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpum9v3f24.java:34)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here.\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26g84tho.java:21: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ ans = 0l;\n        ArrayList<Long> a = new ArrayList<Long>();\n        for (long\
    \ i = 1l; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n     \
    \   for (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j <\
    \ a.size(); j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n\
    \                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n      \
    \                  ans++;\n                    }\n                }\n        \
    \    }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here...\n        long result = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if ((i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0) {\n                        result++;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsfntk02c.java:35)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = (long)i * i - i + 1;\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                        count++;\n               \
    \     }\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2gbtjpl.java:37)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Good\
    \ Luck\n        List<Long> list = new ArrayList<>();\n        for (long i = 1l;\
    \ i <= n; i++) {\n            list.add(i * i - i + 1);\n        }\n        //\
    \ System.out.println(list);\n        long ans = 0l;\n        for (int i = 0; i\
    \ < list.size(); i++) {\n            for (int j = i + 1; j < list.size(); j++)\
    \ {\n                for (int k = j + 1; k < list.size(); k++) {\n           \
    \         long a = list.get(i);\n                    long b = list.get(j);\n \
    \                   long c = list.get(k);\n                    long total = a\
    \ + b + c;\n                    if (total % 3 == 0) {\n                      \
    \  // System.out.println(a + \" \" + b + \" \" + c);\n                       \
    \ ans++;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // This\
    \ is of O(n^3) time complexity.\n        // It works for the test cases but its\
    \ too slow.\n        int ans = 0;\n        ArrayList<Long> a = new ArrayList<Long>();\n\
    \        for (long i = 1; i <= n; i++)\n            a.add(i * i - i + 1);\n  \
    \      for (int i = 0; i < n; i++)\n            for (int j = i + 1; j < n; j++)\n\
    \                for (int k = j + 1; k < n; k++)\n                    if ((a.get(i)\
    \ + a.get(j) + a.get(k)) % 3 == 0)\n                        ans++;\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ al = new ArrayList<Long>();\n        for (long i = 1l; i <= n; i++) {\n    \
    \        al.add(i * i - i + 1);\n        }\n        long ans = 0l;\n        for\
    \ (int i = 0; i < al.size(); i++) {\n            for (int j = i + 1; j < al.size();\
    \ j++) {\n                for (int k = j + 1; k < al.size(); k++) {\n        \
    \            if ((al.get(i) + al.get(j) + al.get(k)) % 3 == 0) {\n           \
    \             ans++;\n                    }\n                }\n            }\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here!\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6atikb5o.java:24)\n"
  stdout: ''
  timestamp: 1659976175
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp765pws20.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here.\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmc5gfboa.java:24)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Create\
    \ array.\n        long[] a = new long[(int)n];\n        for (int i = 0; i < n;\
    \ i++) {\n            a[i] = i * i - i + 1;\n        }\n        // Evaluate all\
    \ possible triples.\n        long sum = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 ==\
    \ 0) {\n                        sum++;\n                    }\n              \
    \  }\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2goeddfv.java:39)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv8bbojx.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // We\
    \ want to set our array a so that there is only one tuple (i, j, k) where i <\
    \ j < k, \n        // and a[i] + a[j] + a[k] % 3 == 0.\n        // We do this\
    \ by creating an array where a[i] is some number m such that m % 3 == i. \n  \
    \      // Then the tuple (a[0], a[1], a[2]) will be our only triple.\n       \
    \ // To accomplish this, we take the numbers 0, 1, 2 and do each of them mod 3\
    \ to obtain a number 0 <= m < 3.\n        // If a[i] = m, then the sum a[i] +\
    \ a[i + 1] + a[i + 2] % 3 == 0.\n        long[] array = new long[(int) n];\n \
    \       for (int i = 0; i < n; i++) {\n            array[i] = i % 3;\n       \
    \ }\n        return 1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2tdnwce2.java:34)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ array = new long[(int)n];\n        long sum = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            array[i] = (i * i) - i + 1;\n            sum += array[i];\n\
    \        }\n        if (sum % 3 != 0) {\n            return 0;\n        }\n  \
    \      long leftSum = 0;\n        long rightSum = sum;\n        long result =\
    \ 0;\n        for (int i = 0; i < n - 2; i++) {\n            leftSum += array[i];\n\
    \            rightSum -= array[i];\n            if (leftSum % 3 == 0 && rightSum\
    \ % 3 == 0) {\n                result += n - i - 1;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0k_0c15.java:42)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        ArrayList<Long> a = new ArrayList<Long>();\n        for (long i =\
    \ 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        long\
    \ ans = 0;\n        for (int i = 0; i < a.size(); i++) {\n            for (int\
    \ j = i + 1; j < a.size(); j++) {\n                for (int k = j + 1; k < a.size();\
    \ k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n\
    \                        ans++;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = IntStream.range(1, (int) n + 1).mapToObj(i -> (long) i * i - i + 1).collect(Collectors.toList());\n\
    \        long ans = 0l;\n        int len = a.size();\n        for (int i = 0;\
    \ i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n         \
    \       for (int k = j + 1; k < len; k++) {\n                    if ((a.get(i)\
    \ + a.get(j) + a.get(k)) % 3 == 0) {\n                        ans++;\n       \
    \             }\n                }\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // First,\
    \ let's create the array list\n        ArrayList<Long> arr = new ArrayList<Long>();\n\
    \        // Then, let's fill the array list with the numbers\n        for (long\
    \ i = 1; i <= n; i++) {\n            long curr = i * i - i + 1;\n            arr.add(curr);\n\
    \        }\n        // We will count the amount of valid triplets\n        long\
    \ validTriplets = 0;\n        // For each i\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            // For each j\n            for (int j = i + 1; j < arr.size();\
    \ j++) {\n                // For each k\n                for (int k = j + 1; k\
    \ < arr.size(); k++) {\n                    // If this is a valid triplet, increase\
    \ the amount of valid triplets by 1\n                    if ((arr.get(i) + arr.get(j)\
    \ + arr.get(k)) % 3 == 0) validTriplets++;\n                }\n            }\n\
    \        }\n        // Return the amount of valid triplets\n        return validTriplets;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ array = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n  \
    \          array.add(i * i - i + 1);\n        }\n        long count = 0;\n   \
    \     for (int i = 0; i < array.size(); i++) {\n            for (int j = i + 1;\
    \ j < array.size(); j++) {\n                for (int k = j + 1; k < array.size();\
    \ k++) {\n                    if ((array.get(i) + array.get(j) + array.get(k))\
    \ % 3 == 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        long count = 0;\n        for\
    \ (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size();\
    \ j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n         \
    \           if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ n;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ju112vr.java:23)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return 1;\n        }\n        long count = 0;\n        for (long i = 2; i\
    \ < n; i++) {\n            if (((i * i - i + 1) % 3) == 0) {\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpex0slg0l.java:36)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv8bbojx.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        //BEGIN_SOLUTION\n\
    \        if (n < 3) return 0;\n        return n * (n - 1) * (n - 2) / 6;\n   \
    \     //END_SOLUTION\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhy24xom.java:26)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                long result = (i * i - i + 1) + (j * j - j + 1) + (k * k - k\
    \ + 1);\n                    if (result % 3 == 0) {\n                        sum++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbjccp9ip.java:35)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // YOUR\
    \ CODE HERE\n        List<Long> a = new ArrayList<>();\n        for (long i =\
    \ 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        long\
    \ count = 0;\n        for (int i = 0; i < a.size(); i++) {\n            for (int\
    \ j = i + 1; j < a.size(); j++) {\n                for (int k = j + 1; k < a.size();\
    \ k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv8bbojx.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        int a[] = new int[(int)n];\n        for(int i = 1; i <= n; i++) {\n\
    \            a[i-1] = i * i - i + 1;\n        }\n        int count = 0;\n    \
    \    for(int i = 0; i < n - 2; i++) {\n            for(int j = i + 1; j < n -\
    \ 1; j++) {\n                for(int k = j + 1; k < n; k++) {\n              \
    \      if((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // your\
    \ code goes here.\n        return 1l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpms58gyjk.java:25)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ (n<=2)?(0l):(n-2);\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7sbpd2x.java:23)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        int[]\
    \ a = new int[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] +\
    \ a[k]) % 3 == 0) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3kq_8vy.java:37)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ res = 0;\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwup2u873.java:24)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int j\
    \ = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n\
    \                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) {\n                        sum++;\n                    }\n              \
    \  }\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if ((j * j - j + 1 + i * i - i + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                        sum++;\n                    }\n                }\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpof6p_pjj.java:34)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code goes here.\n        ArrayList<Long> a = new ArrayList<Long>();\n      \
    \  for (long i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n      \
    \  }\n        long sum = 0;\n        for (int i = 0; i < a.size(); i++) {\n  \
    \          for (int j = i + 1; j < a.size(); j++) {\n                for (int\
    \ k = j + 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j)\
    \ + a.get(k)) % 3 == 0) {\n                        sum++;\n                  \
    \  }\n                }\n            }\n        }\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ == 1) return 0;\n        else if (n == 2) return 0;\n        else if (n == 3)\
    \ return 1;\n        else {\n            long triples = 0;\n            for (long\
    \ i = 2; i < n; i++) {\n                for (long j = i + 1; j < n; j++) {\n \
    \                   for (long k = j + 1; k < n; k++) {\n                     \
    \   long first = i * i - i + 1;\n                        long second = j * j -\
    \ j + 1;\n                        long third = k * k - k + 1;\n              \
    \          if ((first + second + third) % 3 == 0) {\n                        \
    \    triples++;\n                        }\n                    }\n          \
    \      }\n            }\n            return triples;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7nnjtof.java:41)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code here\n        return (n < 3) ? 0 : getTriples(n);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp61l23ngm.java:21: error: cannot find symbol\n        return (n\
    \ < 3) ? 0 : getTriples(n);\n                             ^\n  symbol:   method\
    \ getTriples(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ < 3) {\n            return 0;\n        }\n        long numTriples = 0;\n   \
    \     long[] a = new long[(int)n];\n        for (int i = 1; i <= n; i++) {\n \
    \           a[i - 1] = i * i - i + 1;\n        }\n        for (int i = 0; i <\
    \ n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n         \
    \       for (int k = j + 1; k < n; k++) {\n                    long sum = a[i]\
    \ + a[j] + a[k];\n                    if (sum % 3 == 0) {\n                  \
    \      numTriples++;\n                    }\n                }\n            }\n\
    \        }\n        return numTriples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        BigInteger\
    \ result = BigInteger.ZERO;\n        BigInteger bigN = BigInteger.valueOf(n);\n\
    \        for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    BigInteger ai = BigInteger.valueOf(i);\n                    BigInteger aj\
    \ = BigInteger.valueOf(j);\n                    BigInteger ak = BigInteger.valueOf(k);\n\
    \                    BigInteger sum = ai.multiply(ai).subtract(ai).add(BigInteger.ONE).add(aj.multiply(aj).subtract(aj).add(BigInteger.ONE)).add(ak.multiply(ak).subtract(ak).add(BigInteger.ONE));\n\
    \                    if (sum.mod(BigInteger.valueOf(3)).equals(BigInteger.ZERO))\
    \ {\n                        result = result.add(BigInteger.ONE);\n          \
    \          }\n                }\n            }\n        }\n        return result.longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazldjzbr.java:39)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ list = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n       \
    \     list.add(i * i - i + 1);\n        }\n        long res = 0;\n        for\
    \ (int i = 0; i < list.size(); i++) {\n            for (int j = i + 1; j < list.size();\
    \ j++) {\n                for (int k = j + 1; k < list.size(); k++) {\n      \
    \              if ((list.get(i) + list.get(j) + list.get(k)) % 3 == 0) {\n   \
    \                     res++;\n                    }\n                }\n     \
    \       }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ array = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n  \
    \          array.add(i * i - i + 1);\n        }\n        long triples = 0;\n \
    \       for (int i = 0; i < array.size(); i++) {\n            for (int j = i +\
    \ 1; j < array.size(); j++) {\n                for (int k = j + 1; k < array.size();\
    \ k++) {\n                    if ((array.get(i) + array.get(j) + array.get(k))\
    \ % 3 == 0) {\n                        triples++;\n                    }\n   \
    \             }\n            }\n        }\n        return triples;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        // System.out.println(a);\n \
    \       long sum = 0;\n        for (int i = 0; i < a.size(); i++) {\n        \
    \    for (int j = i + 1; j < a.size(); j++) {\n                for (int k = j\
    \ + 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k))\
    \ % 3 == 0) {\n                        sum++;\n                    }\n       \
    \         }\n            }\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for\
    \ (int i = 1; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n\
    \                for (int k = j + 1; k <= n; k++) {\n                    if ((i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                 \
    \       sum++;\n                    }\n                }\n            }\n    \
    \    }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // \
    \ Write your code here\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxm4ux1zy.java:24)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0l;\n        long[] a = new long[(int)n];\n        for (int i = 0; i\
    \ < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int i = 0;\n\
    \        while (i < n) {\n            int j = i + 1;\n            while (j < n)\
    \ {\n                int k = j + 1;\n                while (k < n) {\n       \
    \             if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count\
    \ += 1;\n                    }\n                    k += 1;\n                }\n\
    \                j += 1;\n            }\n            i += 1;\n        }\n    \
    \    return count;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkg0_t7dd.java:43)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        long [] a = new long[(int)n];\n        for(int i = 0;\
    \ i < n; i++) {\n            a[i] = (long) (i * i - i + 1);\n        }\n     \
    \   long count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n\
    \                    if(a[i] + a[j] + a[k] % 3 == 0) count++;\n              \
    \  }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50leb3wd.java:36)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ (long)n*(n-1)*(n-2)/6;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcvxf3os.java:23)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ array = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n  \
    \          array.add(i * i - i + 1);\n        }\n        System.out.println(array);\n\
    \        int count = 0;\n        for (int i = 0; i < array.size(); i++) {\n  \
    \          for (int j = i + 1; j < array.size(); j++) {\n                for (int\
    \ k = j + 1; k < array.size(); k++) {\n                    if ((array.get(i) +\
    \ array.get(j) + array.get(k)) % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: '[1, 3, 7, 13, 21]

    [1, 3, 7, 13, 21, 31]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for (long i = 1l; i <= n; i++) {\n         \
    \   a.add(i * i - i + 1);\n        }\n        System.out.println(a);\n       \
    \ long count = 0l;\n        for (int i = 0; i < a.size(); i++) {\n           \
    \ for (int j = i + 1; j < a.size(); j++) {\n                for (int k = j + 1;\
    \ k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k))\
    \ % 3 == 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: '[1, 3, 7, 13, 21]

    [1, 3, 7, 13, 21, 31]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (long i = 1l; i <= n; i++) {\n     \
    \       a.add(i * i - i + 1);\n        }\n        long count = 0l;\n        for\
    \ (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size();\
    \ j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n         \
    \           if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ list = new ArrayList<>();\n        long i = 1, count = 0;\n        while(i <=\
    \ n) {\n            list.add(i * i - i + 1);\n            i++;\n        }\n  \
    \      for(int i1 = 0; i1 < list.size(); i1++) {\n            for(int i2 = i1\
    \ + 1; i2 < list.size(); i2++) {\n                for(int i3 = i2 + 1; i3 < list.size();\
    \ i3++) {\n                    if((list.get(i1) + list.get(i2) + list.get(i3))\
    \ % 3 == 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        int triplets = 0;\n        // inititalise the\
    \ array\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i +\
    \ 1;\n        }\n        // iterate through the array, and look for triples\n\
    \        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j\
    \ < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n       \
    \             if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        triplets++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ triplets;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhpg4swj.java:39)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = (long) (i * i - i + 1);\n        }\n        long ret = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                        ret++;\n                 \
    \   }\n                }\n            }\n        }\n        return ret;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwz8hw_zn.java:37)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here.\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2h3sfj30.java:24)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // First,\
    \ we build the array A according to the instructions\n        long[] A = new long[(int)n];\n\
    \        for (int i = 0; i < n; i++) {\n            A[i] = i * i - i + 1;\n  \
    \      }\n        // Next, we will use a dynamic programming approach with the\
    \ data structure\n        // HashMap<Long, Long> to store the number of ways to\
    \ get the triple.\n        // Let F(a, b, c) be the number of ways to get the\
    \ triple (a, b, c).\n        // Then, F(a, b, c) = F(a, b, c - 1) + F(a, b - a,\
    \ c - a), for c > b and c - a > b - a.\n        // In other words, F(a, b, c)\
    \ counts the number of ways to get the triple (a, b, c - 1)\n        // and the\
    \ number of ways to get the triple (a, b - a, c - a).\n        // Therefore, the\
    \ desired output is F(a, b, c) where a = A[0], b = A[1], c = A[2].\n        HashMap<Long,\
    \ Long> map = new HashMap<Long, Long>();\n        // As a base case, F(a, b, c)\
    \ = 1 if a + b + c is a multiple of 3.\n        // Otherwise, F(a, b, c) = 0.\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    long sum = A[i] + A[j] + A[k];\n                    map.put(sum, map.getOrDefault(sum,\
    \ 0l) + 1);\n                }\n            }\n        }\n        // At the end,\
    \ we return the maximum of map.get(x) for x in A when x % 3 == 0.\n        long\
    \ result = 0;\n        for (int i = 0; i < n; i++) {\n            long temp =\
    \ A[i];\n            if (temp % 3 == 0) {\n                result\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmxj68l9u.java:48: error: not a statement\n                result\n\
    \                ^\n/tmp/tmpmxj68l9u.java:48: error: ';' expected\n          \
    \      result\n                      ^\n/tmp/tmpmxj68l9u.java:50: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ Arrays.stream(new long[(int)n])\n            .map(i -> i * i - i + 1)\n    \
    \        .collect(ArrayList::new, ArrayList::add, ArrayList::addAll)\n       \
    \     .stream()\n            .filter(i -> i >= 0)\n            .sorted(Comparator.naturalOrder())\n\
    \            .collect(ArrayList::new, ArrayList::add, ArrayList::addAll)\n   \
    \         .stream()\n            .mapToLong(l -> l)\n            .sum();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7a92rduo.java:24: error: bad operand types for binary operator\
    \ '>='\n            .filter(i -> i >= 0)\n                           ^\n  first\
    \ type:  Object\n  second type: int\n/tmp/tmp7a92rduo.java:25: error: incompatible\
    \ types: inference variable T has incompatible bounds\n            .sorted(Comparator.naturalOrder())\n\
    \            ^\n    lower bounds: Comparable<? super T>\n    lower bounds: Object\n\
    \  where T is a type-variable:\n    T extends Comparable<? super T> declared in\
    \ method <T>naturalOrder()\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ s = 0;\n        for (long i = 1; i < n - 1; i++) {\n            for (long j\
    \ = i + 1; j < n; j++) {\n                for (long k = j + 1; k <= n; k++) {\n\
    \                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) {\n                        s++;\n                    }\n                }\n\
    \            }\n        }\n        return s;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n\
    \                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) {\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code here\n        long[] a = IntStream.rangeClosed(1,(int)n).map(i -> (i*i)-i+1).toArray();\n\
    \        long count = 0;\n        for(int i = 0; i < a.length-2; i++){\n     \
    \       for(int j = i+1; j < a.length-1; j++){\n                for(int k = j+1;\
    \ k < a.length; k++){\n                    if((a[i]+a[j]+a[k])%3 == 0){\n    \
    \                    count++;\n                    }\n                }\n    \
    \        }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpfjgqzz.java:21: error: incompatible types: int[] cannot be converted\
    \ to long[]\n        long[] a = IntStream.rangeClosed(1,(int)n).map(i -> (i*i)-i+1).toArray();\n\
    \                                                                            \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ < 3) {\n            return 0l;\n        }\n        long ans = 0l;\n        LinkedList<Long>\
    \ a = new LinkedList<Long>();\n        for (long i = 1l; i <= n; i++) {\n    \
    \        a.add(i * i - i + 1);\n        }\n        long[] arr = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            arr[i] = a.get(i);\n     \
    \   }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1;\
    \ j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if ((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n                     \
    \   ans++;\n                    }\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukv7hgn4.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] arr = new long[n];\n                      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n        long numTriples = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) numTriples++;\n                }\n            }\n   \
    \     }\n        return numTriples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_0x802p.java:35)\n"
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = (long)Math.pow(i, 2) - i + 1;\n        }\n        System.out.println(Arrays.toString(a));\n\
    \        long output = 0;\n        for (int i = 0; i < n - 2; i++) {\n       \
    \     for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j +\
    \ 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                        output++;\n                    }\n                }\n\
    \            }\n        }\n        return output;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyrotlb9f.java:38)\n"
  stdout: '[1, 1, 3, 7, 13]

    '
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a[] = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n           \
    \ a[i] = i * i - i + 1;\n        }\n        long result = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                        result++;\n              \
    \      }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwke54i1b.java:37)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        long[] a = new long[(int)n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long numberOfTriples\
    \ = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i\
    \ + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                  \
    \      numberOfTriples++;\n                    }\n                }\n        \
    \    }\n        }\n        return numberOfTriples;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp81ia92wk.java:40)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ (1l);\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_ux1lum.java:24)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0l;\n        long[] a = new long[(int)n];\n        for (int i = 0; i\
    \ < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                        count++;\n               \
    \     }\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6beups00.java:37)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ (1l);\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_ux1lum.java:24)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n        long count = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] +\
    \ a[k]) % 3 == 0) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpleu247ni.java:37)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here.\n        ArrayList<Long> a = new ArrayList<Long>();\n      \
    \  for (long i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n      \
    \  }\n        long count = 0;\n        for (int i = 0; i < a.size(); i++) {\n\
    \            for (int j = i + 1; j < a.size(); j++) {\n                for (int\
    \ k = j + 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j)\
    \ + a.get(k)) % 3 == 0) {\n                        count++;\n                \
    \    }\n                }\n            }\n        }\n        return count;\n \
    \   }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Fill\
    \ in your code here.\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxwgadzu3.java:21: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ arr[] = new long[(int)n];\n        for(int i = 0; i < n; i++) {\n          \
    \  arr[i] = i * i - i + 1;\n        }\n        long result = 0;\n        for(int\
    \ i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n       \
    \         for(int k = j + 1; k < n; k++) {\n                    if((arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0) {\n                        result += 1;\n              \
    \      }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92x3uxmg.java:37)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here!\n        return getMaxTriplesHelper(n);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6_aquds.java:21: error: cannot find symbol\n        return getMaxTriplesHelper(n);\n\
    \               ^\n  symbol:   method getMaxTriplesHelper(long)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn0gm3wul.java:24)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        System.out.println(a);\n    \
    \    long maxTriples = 0;\n        for (int i = 0; i < a.size(); i++) {\n    \
    \        for (int j = i + 1; j < a.size(); j++) {\n                for (int k\
    \ = j + 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j)\
    \ + a.get(k)) % 3 == 0) {\n                        maxTriples++;\n           \
    \         }\n                }\n            }\n        }\n        return maxTriples;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: '[1, 3, 7, 13, 21]

    [1, 3, 7, 13, 21, 31]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnkcgetxq.java:23)\n"
  stdout: ''
  timestamp: 1659976178
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n\
    \                    long a = (long) (i * i - i + 1);\n                    long\
    \ b = (long) (j * j - j + 1);\n                    long c = (long) (k * k - k\
    \ + 1);\n                    if ((a + b + c) % 3 == 0) {\n                   \
    \     count++;\n                    }\n                }\n            }\n    \
    \    }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ res = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j =\
    \ i + 1; j < n; j++) {\n                for (long k = j + 1; k < n; k++) {\n \
    \                   if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1))\
    \ % 3 == 0)\n                        res++;\n                }\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp538wf4m7.java:32)\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3\
    \ == 0) {\n                        sum++;\n                    }\n           \
    \     }\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkais8g1.java:34)\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // return\
    \ n;\n        int c = 0;\n        List<Integer> list = new ArrayList<>();\n  \
    \      for (int i = 1; i <= n; i++) {\n            list.add(i * i - i + 1);\n\
    \        }\n        for (int i = 0; i < list.size(); i++) {\n            for (int\
    \ j = i + 1; j < list.size(); j++) {\n                for (int k = j + 1; k <\
    \ list.size(); k++) {\n                    if ((list.get(i) + list.get(j) + list.get(k))\
    \ % 3 == 0) {\n                        c++;\n                    }\n         \
    \       }\n            }\n        }\n        return c;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        //You\
    \ need to implement this\n        long result = 0;\n        if (n < 3) {\n   \
    \         return result;\n        }\n        int arr[] = new int[3];\n       \
    \ for (int i = 1; i <= n - 2; i++) {\n            for (int j = i + 1; j <= n -\
    \ 1; j++) {\n                for (int k = j + 1; k <= n; k++) {\n            \
    \        arr[0] = i * i - i + 1;\n                    arr[1] = j * j - j + 1;\n\
    \                    arr[2] = k * k - k + 1;\n                    Arrays.sort(arr);\n\
    \                    if (arr[0] + arr[1] + arr[2] % 3 == 0) {\n              \
    \          result++;\n                    }\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfjt8f372.java:42)\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // 1.get\
    \ all possible groups of 3\n        // 1a. Base Case\n        if (n < 3) {\n \
    \           return 0;\n        }\n        // 1b. Recursive Case\n        // i.\
    \  Determine group size\n        long groupSize = 0;\n        if (n % 3 == 0)\
    \ {\n            groupSize = n / 3;\n        } else {\n            groupSize =\
    \ (n - (n % 3)) / 3;\n        }\n        // ii.  Get groups\n        long numGroups\
    \ = n - 2;\n        long nextNum = getMaxTriples(n - 1);\n        return numGroups\
    \ + nextNum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5km_ve0g.java:39)\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ (long)Arrays.stream(new Pair[]{new Pair(1l, 3l), new Pair(2l, 3l), new Pair(3l,\
    \ 3l)})\n            .map(p -> p.getValue0() * (n - p.getValue1() + 1) / p.getValue1())\n\
    \            .reduce(0l, (a, b) -> a + b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn5kokn37.java:21: error: bad operand types for binary operator\
    \ '-'\n            .map(p -> p.getValue0() * (n - p.getValue1() + 1) / p.getValue1())\n\
    \                                         ^\n  first type:  long\n  second type:\
    \ Object\n/tmp/tmpn5kokn37.java:22: error: bad operand types for binary operator\
    \ '+'\n            .reduce(0l, (a, b) -> a + b);\n                           \
    \         ^\n  first type:  Object\n  second type: Object\nNote: /tmp/tmpn5kokn37.java\
    \ uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked\
    \ for details.\n2 errors\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = (long) (i * i - i + 1);\n        }\n        long numTriples = 0;\n       \
    \ for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n\
    \                for (int k = j + 1; k < n; k++) {\n                    if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0) {\n                        numTriples++;\n        \
    \            }\n                }\n            }\n        }\n        return numTriples;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp97w0lci.java:37)\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ list = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n       \
    \     list.add(i * i - i + 1);\n        }\n        return list.stream().filter(x\
    \ -> x % 3 == 0).count();\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e2v458n.java:27)\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ triple = 0;\n        ArrayList<Long> list = new ArrayList<Long>();\n       \
    \ for (long l = 1; l <= n; l++)\n            list.add(l * l - l + 1);\n      \
    \  for (int i = 0; i < list.size(); i++)\n            for (int j = i + 1; j <\
    \ list.size(); j++)\n                for (int k = j + 1; k < list.size(); k++)\n\
    \                    if ((list.get(i) + list.get(j) + list.get(k)) % 3 == 0)\n\
    \                        triple++;\n        return triple;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv8bbojx.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ triplets = 0;\n        long nSquared = n * n;\n        long nCubed = nSquared\
    \ * n;\n        // n^3 + n^2 - n + 1 = sum(i = 1 to n) (i * i - i + 1)\n     \
    \   // n^3 + n^2 - n + 1 = sum(i = 1 to n) (i^2 - i + 1)\n        // n^3 + n^2\
    \ - n + 1 = sum(i = 1 to n) i^2 - sum(i = 1 to n) i + n\n        // n^3 + n^2\
    \ - n + 1 = sum(i = 1 to n) i^2 - (n * (n + 1)) / 2 + n\n        // n^3 + n^2\
    \ - n + 1 = sum(i = 1 to n) i^2 - n^2 - n/2 + n\n        // n^3 + n^2 - n + 1\
    \ = n^3 - n^2 - n/2 + n\n        // n^3 + n^2 - n + 1 = n^3 - n^2 - n/2 + n\n\
    \        // n^3 + n^2 - n + 1 = n^3 - n^2 - n/2 + n\n        // n^3 + n^2 - n\
    \ + 1 = n^3 - n^2 - n/2 + n\n        if (nCubed + nSquared - n + 1 % 3 == 0) {\n\
    \            triplets++;\n        }\n        return triplets;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrmf7elp.java:38)\n"
  stdout: ''
  timestamp: 1659976179
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Fill\
    \ up this function body\n        // You have to return the number of triples\n\
    \        int i,j,k;\n        long c=0;\n        int arr[]=new int[(int)n];\n \
    \       for(i=0;i<n;i++)\n        {\n            arr[i]=i*i-i+1;\n        }\n\
    \        for(i=0;i<n;i++)\n        {\n            for(j=i+1;j<n;j++)\n       \
    \     {\n                for(k=j+1;k<n;k++)\n                {\n             \
    \       if((arr[i]+arr[j]+arr[k])%3==0)\n                    {\n             \
    \           c++;\n                    }\n                }\n            }\n  \
    \      }\n        return c;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd12f_9no.java:45)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ result = 0;\n        long[] a = new long[(int)n];\n        for (int i = 0; i\
    \ < n; i++) {\n            a[i] = (long)Math.pow(i+1, 2) - i;\n        }\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++)\
    \ {\n                for (int k = j+1; k < n; k++) {\n                    if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0) {\n                        result++;\n            \
    \        }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0l;\n        long count = 0l;\n        long[] array = new long[(int)n];\n\
    \        for (int i = 0; i < n; i++) {\n            array[i] = i * i - i + 1;\n\
    \        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                sum = array[i] + array[j] + array[k];\n                    if\
    \ (sum % 3 == 0) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpugasfvo_.java:39)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ ans = 0;\n        long[] val = new long[3];\n        for (int i = 1; i <= n;\
    \ i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for\
    \ (int k = j + 1; k <= n; k++) {\n                    val[0] = i * i - i + 1;\n\
    \                    val[1] = j * j - j + 1;\n                    val[2] = k *\
    \ k - k + 1;\n                    if ((val[0] + val[1] + val[2]) % 3 == 0) {\n\
    \                        ans++;\n                    }\n                }\n  \
    \          }\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ cnt = 0;\n        List<Long> a = new ArrayList<>();\n        for (long i = 1;\
    \ i <= n; i++)\n            a.add(i * i - i + 1);\n        for (int i = 0; i <\
    \ a.size(); i++)\n            for (int j = i + 1; j < a.size(); j++)\n       \
    \         for (int k = j + 1; k < a.size(); k++)\n                    if ((a.get(i)\
    \ + a.get(j) + a.get(k)) % 3 == 0)\n                        cnt++;\n        return\
    \ cnt;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n\
    \                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) {\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976177
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ result = 0;\n        // Write your code here.\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcbvloq1q.java:25)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // There\
    \ are no possible sets that can be made from < 3 numbers.\n        if (n < 3)\
    \ return 0l;\n        long ans = 0l;\n        long mod3 = 0l;\n        long a\
    \ = 1l;\n        long b = 3l;\n        long c = 7l;\n        // We will do 3 loops,\
    \ and calculate the answer for each one.\n        for (long i = 0; i < n; i++)\
    \ {\n            // We will calculate the answer mod 3 and return the answer.\n\
    \            mod3 = (a + b + c) % 3;\n            ans += (mod3 == 0) ? 1 : 0;\n\
    \            a = b;\n            b = c;\n            c = ((i + 3) * (i + 3)) -\
    \ (i + 3) + 1;\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99fie8qm.java:40)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j =\
    \ i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n  \
    \                  int a = i * i - i + 1;\n                    int b = j * j -\
    \ j + 1;\n                    int c = k * k - k + 1;\n                    if ((a\
    \ + b + c) % 3 == 0) {\n                        count++;\n                   \
    \ }\n                }\n            }\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpscfsajkd.java:37)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ res = 0;\n        for (long i = 0; i < n; i++) {\n            for (long j =\
    \ i + 1; j < n; j++) {\n                for (long k = j + 1; k < n; k++) {\n \
    \                   if (((i + 1) * (i + 1) - (i + 1) + 1) + ((j + 1) * (j + 1)\
    \ - (j + 1) + 1) + ((k + 1) * (k + 1) - (k + 1) + 1) % 3 == 0) {\n           \
    \             res++;\n                    }\n                }\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5koty7yy.java:33)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        long sum = 0;\n        for (int\
    \ i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size(); j++)\
    \ {\n                for (int k = j + 1; k < a.size(); k++) {\n              \
    \      if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                    \
    \    sum++;\n                    }\n                }\n            }\n       \
    \ }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code\n        return 0l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxreutam5.java:24)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ result = 0;\n        // result = Arrays.stream(in).sum();\n        for (int\
    \ i = 1; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n  \
    \              for (int k = j + 1; k <= n; k++) {\n                    long t\
    \ = i * i - i + 1 + j * j - j + 1 + k * k - k + 1;\n                    if (t\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ solution goes here.\n        List<Integer> a = new ArrayList<>();\n        for\
    \ (int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n \
    \       long count = 0;\n        for (int i = 0; i < a.size(); i++) {\n      \
    \      for (int j = i + 1; j < a.size(); j++) {\n                for (int k =\
    \ j + 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j) +\
    \ a.get(k)) % 3 == 0) {\n                        count++;\n                  \
    \  }\n                }\n            }\n        }\n        return count;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ res = 0;\n        for (long i = 1; i < n - 1; i++) {\n            for (long\
    \ j = i + 1; j < n; j++) {\n                for (long k = j + 1; k <= n; k++)\
    \ {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0) {\n                        res++;\n                    }\n         \
    \       }\n            }\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ arr = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n    \
    \        arr.add(i * i - i + 1);\n        }\n        long sum = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size();\
    \ j++) {\n                for (int k = j + 1; k < arr.size(); k++) {\n       \
    \             if ((arr.get(i) + arr.get(j) + arr.get(k)) % 3 == 0) {\n       \
    \                 sum++;\n                    }\n                }\n         \
    \   }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        int\
    \ result = 0;\n        List<Long> a = new ArrayList<>();\n        for (long i\
    \ = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        for\
    \ (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size();\
    \ j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n         \
    \           if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n               \
    \         result++;\n                    }\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ squares = new long[100000];\n        long[] cubes = new long[100000];\n    \
    \    long[] fourth = new long[100000];\n        long count = 0;\n        long\
    \ temp = 0;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            temp = i * i - i + 1;\n            squares[i] = temp;\n         \
    \   cubes[i] = temp * temp;\n            fourth[i] = temp * temp * temp;\n   \
    \     }\n        if (n > 1) {\n            for (int i = 0; i < n; i++) {\n   \
    \             for (int j = i + 1; j < n; j++) {\n                    count +=\
    \ (long) (j - i) * (n - j);\n                }\n            }\n        }\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ ((squares[i] + squares[j] + squares[k]) % 3 == 0) {\n                      \
    \  total++;\n                    }\n                }\n            }\n       \
    \ }\n        return count - total;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ca_mekj.java:51)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] +\
    \ a[k]) % 3 == 0) {\n                        max++;\n                    }\n \
    \               }\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxkqq1wi2.java:37)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ ret = 0;\n        // your code goes here\n        ret = n / 3;\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxz6vnl2.java:27)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ max_triples = 0;\n        for (long i = 1; i < n; i++) {\n            for (long\
    \ j = i + 1; j < n; j++) {\n                long triples = (i * i - i + 1) + (j\
    \ * j - j + 1);\n                for (long k = j + 1; k < n; k++) {\n        \
    \            if ((triples + (k * k - k + 1)) % 3 == 0) {\n                   \
    \     max_triples++;\n                    }\n                }\n            }\n\
    \        }\n        return max_triples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpco6zxyh8.java:35)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ arr = new long[(int)n];\n        for (int i = 0; i < n; i++)\n            arr[i]\
    \ = i * i - i + 1;\n        long c = 0;\n        for (int i = 0; i < n; i++)\n\
    \            for (int j = i + 1; j < n; j++)\n                for (int k = j +\
    \ 1; k < n; k++)\n                    if ((arr[i] + arr[j] + arr[k]) % 3 == 0)\n\
    \                        c++;\n        return c;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcz1if1kr.java:32)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ Code here\n        return 1l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc6ejf_u2.java:25)\n"
  stdout: ''
  timestamp: 1659976180
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // IMPLEMENT\
    \ HERE!\n        long total = 0;\n        for (int i = 1; i < n - 1; i++) {\n\
    \            for (int j = i + 1; j < n; j++) {\n                for (int k = j\
    \ + 1; k <= n; k++) {\n                    long iVal = i * i - i + 1;\n      \
    \              long jVal = j * j - j + 1;\n                    long kVal = k *\
    \ k - k + 1;\n                    if ((iVal + jVal + kVal) % 3 == 0) total++;\n\
    \                }\n            }\n        }\n        return total;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here.\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2h3sfj30.java:24)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ result = 0;\n        // (1, 3, 7, 13, 21)\n        // -1, 2, 5, 9, 13\n    \
    \    // +1, -1, 2, 5, 9\n        long arr[] = new long[5];\n        arr[0] = 1;\n\
    \        arr[1] = 2;\n        arr[2] = 5;\n        arr[3] = 9;\n        arr[4]\
    \ = 13;\n        for (int i = 1; i < 5; i++)\n            arr[i] += arr[i - 1];\n\
    \        long rem = (n - 1) % 5;\n        long quo = (n - 1) / 5;\n        result\
    \ += ((n - 1) * (n - 2) * (n - 3)) / 6;\n        result -= quo * arr[4];\n   \
    \     result -= arr[(int) rem];\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lidv8pn.java:40)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        BigInteger\
    \ output = BigInteger.ZERO;\n        BigInteger[] factorial = new BigInteger[(int)n\
    \ + 1];\n        factorial[0] = BigInteger.ONE;\n        for (int i = 1; i <=\
    \ n; i++) {\n            factorial[i] = factorial[i - 1].multiply(BigInteger.valueOf(i));\n\
    \        }\n        for (int i = 1; i <= n; i++) {\n            BigInteger new_output\
    \ = output.add(\n                factorial[(int)n - i + 1].divide(factorial[(int)n\
    \ - i].multiply(factorial[2]))\n            );\n            if (new_output.compareTo(output)\
    \ > 0) {\n                output = new_output;\n            } else {\n       \
    \         break;\n            }\n        }\n        return output.longValue();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjlwd6fl.java:39)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ maxTriples = 0l;\n        int [] arr =  new int[(int)n];\n        for(int i\
    \ = 1; i <= n; i++) {\n            arr[i-1] = i * i - i + 1;\n        }\n    \
    \    for(int i = 0; i < arr.length; i++) {\n            for(int j = i+1; j < arr.length;\
    \ j++) {\n                for(int k = j+1; k < arr.length; k++) {\n          \
    \          if(arr[i] + arr[j] + arr[k] % 3 == 0) {\n                        maxTriples++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ maxTriples;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxwo5o4ho.java:37)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ rem = n % 3;\n        long sum = (n * (n + 1) / 2);\n        long min = ((sum\
    \ / 3) * 3);\n        if (rem == 0) {\n            return (n - 1) * (n - 2) /\
    \ 2;\n        } else if (rem == 1) {\n            return (n - 1) * (n - 2) / 2\
    \ - (n - 1) / 3;\n        } else {\n            return (n - 1) * (n - 2) / 2 -\
    \ (n - 1) / 3 * 2;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7xb0r_lc.java:32)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ getMaxTriples(n, 1, 2, 3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyla375l.java:20: error: method getMaxTriples in class Problem\
    \ cannot be applied to given types;\n        return getMaxTriples(n, 1, 2, 3);\n\
    \               ^\n  required: long\n  found:    long,int,int,int\n  reason: actual\
    \ and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        int[]\
    \ a = new int[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] +\
    \ a[k]) % 3 == 0) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3kq_8vy.java:37)\n"
  stdout: ''
  timestamp: 1659976176
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // (1,\
    \ 3, 7) => 11\n        // (1, 3, 13) => 17\n        // (1, 3, 21) => 25\n    \
    \    // (1, 7, 13) => 21\n        // (1, 7, 21) => 29\n        // (1, 13, 21)\
    \ => 35\n        // (3, 7, 13) => 23\n        // (3, 7, 21) => 31\n        //\
    \ (3, 13, 21) => 39\n        // (7, 13, 21) => 41\n        // \n        // \n\
    \        // The below solution is what I came up with. It works, but is dumb.\
    \ \n        // It uses a list of list as a grid and picks the last element in\
    \ the first row, last element of the second row,\n        // and third last element\
    \ of the second row. The grid is built by going down the diagonal. This way, each\
    \ \n        // element is the lowest index element in the triple.\n        //\
    \ \n        // A better way is to just figure out how many multiples of 3 there\
    \ are between 1 and n. (n / 3)\n        // For each multiple of 3, there are two\
    \ ways to get it. \n        // (3, x, x) and (x, 3, x)\n        // Where x is\
    \ between 1 and the multiple of 3.\n        // So, there are (n / 3) + (n / 3)\
    \ ways to get a multiple of 3.\n        // Since, we can have overlapping numbers\
    \ in the triples, we need to subtract the overlapping values.\n        // For\
    \ example (1, 3, 7) and (1, 3, 13) have overlapping 3s. So, 1 is counted twice.\
    \ So, we subtract\n        // the repeating elements. \n        // \n        //\
    \ We also need to take care of that fact that the triples could have (3,3,3) in\
    \ them. The tricky part here\n        // is that this triple would be counted\
    \ twice. Once for each 3. So, we need to account for this as well.\n        //\
    \ \n        // So, \n        // (n / 3) + (n / 3) - repeating elements - (3,3,3)\n\
    \        // (n / 3) + (n / 3) - (n / 3\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24ajbz1t.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ res = 0;\n        for (long i = 1; i < n; i++) {\n            for (long j =\
    \ i + 1; j < n; j++) {\n                for (long k = j + 1; k < n; k++) {\n \
    \                   long x = i * i - i + 1;\n                    long y = j *\
    \ j - j + 1;\n                    long z = k * k - k + 1;\n                  \
    \  if ((x + y + z) % 3 == 0) {\n                        res++;\n             \
    \       }\n                }\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp24tmi6sb.java:37)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n          \
    \  a.add(i * i - i + 1);\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size(); j++)\
    \ {\n                for (int k = j + 1; k < a.size(); k++) {\n              \
    \      if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                    \
    \    count++;\n                    }\n                }\n            }\n     \
    \   }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ array = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n  \
    \          array.add(i * i - i + 1);\n        }\n        long count = 0;\n   \
    \     for (int i = 0; i < array.size(); i++) {\n            for (int j = i + 1;\
    \ j < array.size(); j++) {\n                for (int k = j + 1; k < array.size();\
    \ k++) {\n                    if ((array.get(i) + array.get(j) + array.get(k))\
    \ % 3 == 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ arr = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n    \
    \        arr.add(i * i - i + 1);\n        }\n        System.out.println(arr);\n\
    \        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         for (int j = i + 1; j < arr.size(); j++) {\n                for (int\
    \ k = j + 1; k < arr.size(); k++) {\n                    long sum = arr.get(i)\
    \ + arr.get(j) + arr.get(k);\n                    if (sum % 3 == 0) {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: '[1, 3, 7, 13, 21]

    [1, 3, 7, 13, 21, 31]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0l;\n        for (long i = 0l; i < n; i++) {\n            for (long j\
    \ = i + 1l; j < n; j++) {\n                for (long k = j + 1l; k < n; k++) {\n\
    \                    long a = i * i - i + 1l;\n                    long b = j\
    \ * j - j + 1l;\n                    long c = k * k - k + 1l;\n              \
    \      if ((a + b + c) % 3l == 0l) {\n                        sum += 1l;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb4xhbjtz.java:36)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp765pws20.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        ArrayList<Long> list = new ArrayList<Long>();\n        for (long i\
    \ = 1; i <= n; i++) {\n            list.add(i * i - i + 1);\n        }\n     \
    \   long res = 0;\n        for (int i = 0; i < list.size(); i++) {\n         \
    \   for (int j = i + 1; j < list.size(); j++) {\n                for (int k =\
    \ j + 1; k < list.size(); k++) {\n                    if ((list.get(i) + list.get(j)\
    \ + list.get(k)) % 3 == 0) {\n                        res++;\n               \
    \     }\n                }\n            }\n        }\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ < 3) return 0;\n        long[] a = new long[(int)n];\n        long z = n * n\
    \ - n + 1;\n        Arrays.fill(a, z);\n        a[0] = 1;\n        //System.out.println(Arrays.toString(a));\n\
    \        int left = 0;\n        int right = a.length - 1;\n        while (left\
    \ < right) {\n            z = a[left] + a[right];\n            if (z % 3 == 0)\
    \ {\n                //System.out.println(String.format(\"%d %d %d\", a[left],\
    \ a[right], z));\n                return 1;\n            }\n            if (z\
    \ > 3) {\n                right--;\n            } else {\n                left++;\n\
    \            }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqaks_8wj.java:43)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv8bbojx.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ == 1l) {\n            return 0l;\n        } else {\n            return ((n -\
    \ 1l) * (n - 2l) * (n - 3l)) / 6l;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxh56auwh.java:27)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here!\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vnmmjh_.java:24)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n        return countTriples(a);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2ncr49g.java:24: error: cannot find symbol\n        return countTriples(a);\n\
    \               ^\n  symbol:   method countTriples(long[])\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ ((n * (n - 1)) / 2) / 3;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tt431xq.java:23)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        if (n\
    \ <= 0) {\n            return 0;\n        }\n        long result = 0;\n      \
    \  List<Long> a = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n\
    \            a.add(i * i - i + 1);\n        }\n        for (int i = 0; i < a.size();\
    \ i++) {\n            for (int j = i + 1; j < a.size(); j++) {\n             \
    \   for (int k = j + 1; k < a.size(); k++) {\n                    if ((a.get(i)\
    \ + a.get(j) + a.get(k)) % 3 == 0) {\n                        result++;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // do\
    \ your magic here\n        return 0l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1luo01lp.java:24)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for (int i = 1; i <= n; i++)\n            a.add(i\
    \ * i - i + 1);\n        long res = 0;\n        for (int i = 0; i < n; i++)\n\
    \            for (int j = i + 1; j < n; j++)\n                for (int k = j +\
    \ 1; k < n; k++)\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3\
    \ == 0)\n                        res++;\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Please\
    \ implement this method by yourself.\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7phq1o72.java:24)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code here.\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphphmgt3g.java:24)\n"
  stdout: ''
  timestamp: 1659976181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        long result = 0;\n        if (n < 3) {\n\
    \            return result;\n        }\n        for (long i = 1; i <= n; i++)\
    \ {\n            a.add(i * i - i + 1);\n        }\n        for (int i = 0; i <\
    \ a.size() - 2; i++) {\n            for (int j = i + 1; j < a.size() - 1; j++)\
    \ {\n                for (int k = j + 1; k < a.size(); k++) {\n              \
    \      if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                    \
    \    result++;\n                    }\n                }\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976181
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        int\
    \ m = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int j =\
    \ i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n \
    \                   if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) {\n                        m++;\n                    }\n                }\n\
    \            }\n        }\n        return m;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ result = 0;\n        long[] a = new long[(int)n];\n        // { Write your code\
    \ here\n        for (int i = 0; i < n; i++) {\n            a[i] = (i * i) - i\
    \ + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                  \
    \      result++;\n                    }\n                }\n            }\n  \
    \      }\n        // }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_e96gqo.java:39)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ a = 0;\n        ArrayList<Long> arr = new ArrayList<Long>();\n        for (long\
    \ i = 1; i <= n; i++) {\n            arr.add(i * i - i + 1);\n        }\n    \
    \    for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j\
    \ < arr.size(); j++) {\n                for (int k = j + 1; k < arr.size(); k++)\
    \ {\n                    if ((arr.get(i) + arr.get(j) + arr.get(k)) % 3 == 0)\
    \ {\n                        a++;\n                    }\n                }\n\
    \            }\n        }\n        return a;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Construct\
    \ the array \n        long[] arr = new long[(int)n];\n        for (int i = 0;\
    \ i < n; i++) {\n            arr[i] = i * i - i + 1;\n        }\n        long\
    \ count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int\
    \ j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if ((arr[i] + arr[j] + arr[k]) % 3 == 0) count++;\n \
    \               }\n            }\n        }\n        return count;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnuv6a1y5.java:36)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        return -1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1i_t70h.java:26)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                        sum++;\n                    }\n                }\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp98uiws0n.java:33)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t6_vx7i.java:24)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n        \
    \    list.add(i * i - i + 1);\n        }\n        int cnt = 0;\n        for (int\
    \ i = 0; i < list.size(); i++) {\n            for (int j = i + 1; j < list.size();\
    \ j++) {\n                for (int k = j + 1; k < list.size(); k++) {\n      \
    \              if ((list.get(i) + list.get(j) + list.get(k)) % 3 == 0) {\n   \
    \                     cnt++;\n                    }\n                }\n     \
    \       }\n        }\n        return cnt;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code here\n        ArrayList<Long> a = new ArrayList<Long>();\n        for (long\
    \ i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n      \
    \  long result = 0;\n        for (int i = 0; i < a.size(); i++) {\n          \
    \  for (int j = i + 1; j < a.size(); j++) {\n                for (int k = j +\
    \ 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k))\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (long i = 1; i <= n; i++) {\n      \
    \      a.add(i * i - i + 1);\n        }\n        long maxCount = 0;\n        for\
    \ (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size();\
    \ j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n         \
    \           if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n               \
    \         maxCount++;\n                    }\n                }\n            }\n\
    \        }\n        return maxCount;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ val = 0;\n        int[] a = new int[(int)n];\n        for (int i = 0; i < n;\
    \ i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0;\
    \ i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n     \
    \           for (int k = j + 1; k < n; k++) {\n                    if ((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                        val++;\n                 \
    \   }\n                }\n            }\n        }\n        return val;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cms6kqi.java:37)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // n\
    \ is non-negative\n        if (n < 3) {\n            return 0;\n        }\n  \
    \      // a[i] = i * i - i + 1\n        long sum = 0;\n        long begin = 1;\n\
    \        long end = 3;\n        int mod = 3;\n        while (end <= n) {\n   \
    \         // a[i] + a[j] + a[k] = i*i + j*j + k*k - i - j - k + 3\n          \
    \  // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n            // is divisible\
    \ by 3 when\n            // (i + j + k) % 3 == 0\n            // and\n       \
    \     // (i + j + k) != 0\n            // thus we can use the sum of sequence\
    \ formula\n            // (n * (n + 1)) / 2\n            // to calculate the number\
    \ of (i + j + k) % 3 == 0 for (i + j + k) > 0 \n            // for all i, j, k\
    \ in [begin, end)\n            long remainder = 0;\n            remainder = ((end\
    \ * (end + 1)) / 2) - ((begin * (begin + 1)) / 2);\n            if (remainder\
    \ % mod == 0) {\n                sum += remainder / mod;\n            }\n    \
    \        begin = end;\n            end++;\n        }\n        return sum;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lrds_gm.java:51)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Integer>\
    \ a = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n           \
    \ a.add(i * i - i + 1);\n        }\n        int answer = 0;\n        for (int\
    \ i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size(); j++)\
    \ {\n                for (int k = j + 1; k < a.size(); k++) {\n              \
    \      if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                    \
    \    answer++;\n                    }\n                }\n            }\n    \
    \    }\n        return answer;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp765pws20.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ count = 0;\n        for (int i = 1; i < n - 1; i++) {\n            int iVal\
    \ = i * i - i + 1;\n            if (iVal % 3 == 0) {\n                count +=\
    \ n - i - 1;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdpp6vvlm.java:30)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for (long i = 1l; i <= n; i++) {\n         \
    \   a.add(i * i - i + 1);\n        }\n        return a.stream().flatMap(i -> a.stream().filter(j\
    \ -> j > i).flatMap(j -> a.stream().filter(k -> k > j).filter(k -> (i + j + k)\
    \ % 3 == 0))).count();\n    }\n    public static void main(String[] args) {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv8bbojx.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long[]\
    \ a = new long[(int)n];\n        for (int i = 0; i < n; i++)\n            a[i]\
    \ = (long)i * i - i + 1;\n        long x = 0;\n        for (int i = 0; i < n;\
    \ i++)\n            for (int j = i + 1; j < n; j++)\n                for (int\
    \ k = j + 1; k < n; k++)\n                    if ((a[i] + a[j] + a[k]) % 3 ==\
    \ 0)\n                        x++;\n        return x;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7mzzlb5.java:32)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp765pws20.java:23)\n"
  stdout: ''
  timestamp: 1659976173
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ mod = 3l;\n        long mod3 = 0l;\n        long mod1 = 0l;\n        long mod2\
    \ = 0l;\n        long num_mod3 = 0l;\n        for (long i = 1l; i <= n; i++) {\n\
    \            long val = i * i - i + 1;\n            if (val % mod == 0) {\n  \
    \              mod3++;\n            } else if (val % mod == 1) {\n           \
    \     mod1++;\n            } else {\n                mod2++;\n            }\n\
    \        }\n        num_mod3 = (mod3 * (mod3 - 1l) * (mod3 - 2l)) / 6l;\n    \
    \    num_mod3 += mod3 * mod2 * mod1;\n        num_mod3 += mod3 * (mod2 * (mod2\
    \ - 1l)) / 2l;\n        num_mod3 += mod3 * (mod1 * (mod1 - 1l)) / 2l;\n      \
    \  num_mod3 += mod2 * mod1 * (mod1 - 1l) / 3l;\n        return num_mod3;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0soa2zp.java:43)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // your\
    \ code goes here\n        if (n < 3) return 0;\n        long total = 0;\n    \
    \    for (long i = 1; i < n; i++) {\n            for (long j = i + 1; j < n; j++)\
    \ {\n                for (long k = j + 1; k < n; k++) {\n                    long\
    \ a = i * i - i + 1;\n                    long b = j * j - j + 1;\n          \
    \          long c = k * k - k + 1;\n                    if ((a + b + c) % 3 ==\
    \ 0) {\n                        total++;\n                    }\n            \
    \    }\n            }\n        }\n        return total;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2apqy8ya.java:39)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        long\
    \ result = 0l;\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdt9rwsr.java:24)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        List<Long>\
    \ a = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n          \
    \  a.add(i * i - i + 1);\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size(); j++)\
    \ {\n                for (int k = j + 1; k < a.size(); k++) {\n              \
    \      if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                    \
    \    count++;\n                    }\n                }\n            }\n     \
    \   }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // Your\
    \ code here\n        long i, j, k, sum = 0, ans = 0;\n        long[] a = new long[(int)n];\n\
    \        for(i = 0; i < n; i++) {\n            a[(int)i] = i * i - i + 1;\n  \
    \      }\n        for(i = 0; i < n - 2; i++) {\n            for(j = i + 1; j <\
    \ n - 1; j++) {\n                for(k = j + 1; k < n; k++) {\n              \
    \      sum = a[(int)i] + a[(int)j] + a[(int)k];\n                    if(sum %\
    \ 3 == 0) {\n                        ans++;\n                    }\n         \
    \       }\n            }\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphcjrc0bk.java:39)\n"
  stdout: ''
  timestamp: 1659976182
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a positive integer n. You have to create\
    \ an integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long getMaxTriples(long n) {\n        // initializing\
    \ my return variable\n        long maxTriples = 0;\n        // i think it may\
    \ be possible to stream\n        for (int i = 1; i < n - 1; i++) {\n         \
    \   for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <=\
    \ n; k++) {\n                    long sum = (i * i - i + 1) + (j * j - j + 1)\
    \ + (k * k - k + 1);\n                    if (sum % 3 == 0) {\n              \
    \          maxTriples++;\n                    }\n                }\n         \
    \   }\n        }\n        return maxTriples;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976183
