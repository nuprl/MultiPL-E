name: HumanEval_63_fibfib
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // The FibFib number sequence is a sequence similar to the\
  \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
  \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
  \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
  \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
  \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n \
  \   public static long fibfib(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
  \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
  \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l))\
  \ == (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
completions: ['        return 0l;', "        long[] f = new long[3];\n        f[0]\
    \ = 0;\n        f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n;\
    \ i++) {\n            long temp = f[2];\n            f[2] = f[0] + f[1] + f[2];\n\
    \            f[0] = f[1];\n            f[1] = temp;\n        }\n        return\
    \ f[2];", "        long f0 = 0;\n        long f1 = 0;\n        long f2 = 1;\n\
    \        long f3 = 1;\n        for (long i = 3; i <= n; i++) {\n            f3\
    \ = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n            f2\
    \ = f3;\n        }\n        return f3;", '        return 0;', '        return
    0;', "        if (n == 0) {\n            return 0;\n        }\n        if (n ==\
    \ 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        long[] memo = new long[(int) n + 1];\n        memo[0]\
    \ = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n        for (int i = 3; i\
    \ <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n\
    \        }\n        return memo[(int) n];", '        return 0;', "        if (n\
    \ == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        for (long i = 1; i < n; i++)\
    \ {\n            a = b;\n            b = c;\n            c = a + b + c;\n    \
    \    }\n        return c;", "        long fibfibNumber = 0;\n        long fibfibNumberPrevious\
    \ = 0;\n        long fibfibNumberPrevious2 = 0;\n        long fibfibNumberPrevious3\
    \ = 0;\n        for (long i = 0; i < n; i++) {\n            if (i == 0) {\n  \
    \              fibfibNumber = 0;\n            } else if (i == 1) {\n         \
    \       fibfibNumber = 0;\n            } else if (i == 2) {\n                fibfibNumber\
    \ = 1;\n            } else {\n                fibfibNumberPrevious3 = fibfibNumberPrevious2;\n\
    \                fibfibNumberPrevious2 = fibfibNumberPrevious;\n             \
    \   fibfibNumberPrevious = fibfibNumber;\n                fibfibNumber = fibfibNumberPrevious\
    \ + fibfibNumberPrevious2 + fibfibNumberPrevious3;\n            }\n        }\n\
    \        return fibfibNumber;", "        if (n == 0l) return 0l;\n        if (n\
    \ == 1l) return 0l;\n        if (n == 2l) return 1l;\n        long last = 0l;\n\
    \        long secondToLast = 0l;\n        long thirdToLast = 1l;\n        long\
    \ answer = 1l;\n        for (long i = 3l; i <= n; i++) {\n            answer =\
    \ last + secondToLast + thirdToLast;\n            thirdToLast = secondToLast;\n\
    \            secondToLast = last;\n            last = answer;\n        }\n   \
    \     return answer;", "        // >>> your code here <<<\n        if (n <= 1)\
    \ {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n\
    \        long d = a + b + c;\n        for (int i = 3; i <= n; i++) {\n       \
    \     a = b;\n            b = c;\n            c = d;\n            d = a + b +\
    \ c;\n        }\n        return d;", "        if (n <= 1) {\n            return\
    \ 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n   \
    \     return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", "        // BEGIN\
    \ SOLUTION\n        long fibfib1 = 0l;\n        long fibfib2 = 0l;\n        long\
    \ fibfib3 = 1l;\n        long fibfib4 = 0l;\n        if (n == 0) return fibfib1;\n\
    \        if (n == 1) return fibfib2;\n        if (n == 2) return fibfib3;\n  \
    \      for (long i = 3; i <= n; i++) {\n            fibfib4 = fibfib1 + fibfib2\
    \ + fibfib3;\n            fibfib1 = fibfib2;\n            fibfib2 = fibfib3;\n\
    \            fibfib3 = fibfib4;\n        }\n        return fibfib4;\n        //\
    \ END SOLUTION", "        long[] a = new long[3];\n        a[0] = 0;\n       \
    \ a[1] = 0;\n        a[2] = 1;\n        for (int i = 3; i <= n; i++) {\n     \
    \       long new_a = a[0] + a[1] + a[2];\n            a[0] = a[1];\n         \
    \   a[1] = a[2];\n            a[2] = new_a;\n        }\n        return a[2];",
  "        // ...\n        throw new RuntimeException(\"not implemented\");", "  \
    \      // Fill in your solution here\n        return 0;", "        // YOUR CODE\
    \ HERE\n        return 0;", "        long[]fib = new long[3];\n        fib[0]\
    \ = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for(int i = 2; i < n;\
    \ i++) {\n            fib[2] = fib[2] + fib[1] + fib[0];\n            fib[0] =\
    \ fib[1];\n            fib[1] = fib[2] - fib[1] - fib[0];\n        }\n       \
    \ return fib[2];", "        return stream()\n            .mapToLong(BigInteger::longValue)\n\
    \            .limit(n + 1)\n            .reduce((long) 0, (a, b) -> b);", "  \
    \      long prevPrev = 0;\n        long prev = 0;\n        long current = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            long temp = current;\n \
    \           current = prev + prevPrev + current;\n            prevPrev = prev;\n\
    \            prev = temp;\n        }\n        return current;", "        long\
    \ a=0;\n        long b=0;\n        long c=1;\n        for(long i=1;i<n;i++){\n\
    \            a=b;\n            b=c;\n            c=a+b+c;\n        }\n       \
    \ return a;", "        long n1 = 0;\n        long n2 = 0;\n        long n3 = 1;\n\
    \        long n4 = 1;\n        long n5 = 1;\n        long temp = 0;\n        for\
    \ (long i = 0; i < n - 2; i++) {\n            temp = n4;\n            n4 = n4\
    \ + n5 + n3;\n            n5 = n4;\n            n3 = temp;\n        }\n      \
    \  return n4;", "        long [] nums = new long[3];\n        nums[0] = 0;\n \
    \       nums[1] = 0;\n        nums[2] = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            long sum = 0;\n            for (int j = 0; j < 3; j++) {\n  \
    \              sum += nums[j];\n            }\n            for (int j = 0; j <\
    \ 2; j++) {\n                nums[j] = nums[j+1];\n            }\n           \
    \ nums[2] = sum;\n        }\n        return nums[2];", "        // >>> Start writing\
    \ your code here.\n        long result;\n        if (n == 0) {\n            result\
    \ = 0;\n        } else if (n == 1) {\n            result = 0;\n        } else\
    \ if (n == 2) {\n            result = 1;\n        } else {\n            result\
    \ = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n        return\
    \ result;\n        // >>> End writing your code here.", "        if (n <= 1) {\n\
    \            return 0;\n        }\n        else if (n == 2) {\n            return\
    \ 1;\n        }\n        else {\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n        }", '        throw new UnsupportedOperationException("Please
    implement me");', "        if (n == 0) return 0;\n        if (n == 1) return 0;\n\
    \        if (n == 2) return 1;\n        long[] fibs = new long[3];\n        fibs[0]\
    \ = 0;\n        fibs[1] = 0;\n        fibs[2] = 1;\n        return fibfibHelper(n,\
    \ fibs);", "        if (n == 0) {\n            return 0;\n        }\n        if\
    \ (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n      \
    \      return 1;\n        }\n        long n1 = 0;\n        long n2 = 0;\n    \
    \    long n3 = 1;\n        long ans = 0;\n        for (long i = 0; i < n - 2;\
    \ i++) {\n            ans = n1 + n2 + n3;\n            n1 = n2;\n            n2\
    \ = n3;\n            n3 = ans;\n        }\n        return ans;", "        // >>>\
    \ Solution.fibfib((1l))\n        // (0l)\n        // >>> Solution.fibfib((5l))\n\
    \        // (4l)\n        // >>> Solution.fibfib((8l))\n        // (24l)\n   \
    \     return 0l;", "        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return Problem.fibfib(n - 1) +\
    \ Problem.fibfib(n - 2) + Problem.fibfib(n - 3);", "        // BEGIN\n       \
    \ if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n   \
    \         return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n  \
    \      for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n    \
    \        a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ c;\n        // END", '        throw new UnsupportedOperationException("Problem
    fibfib not implemented");', "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n < 2l) {\n            return\
    \ 0l;\n        }\n        if (n == 2l) {\n            return 1l;\n        }\n\
    \        long a = 0l;\n        long b = 0l;\n        long c = 1l;\n        for\
    \ (long i = 3l; i <= n; i += 1l) {\n            long d = a + b + c;\n        \
    \    a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ c;", '        return 0;', '        return 0;', "        if (n <= 1) return 0;\n\
    \        if (n == 2) return 1;\n        long fibminus1 = 0;\n        long fibminus2\
    \ = 0;\n        long fibminus3 = 1;\n        long fib = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            fib = fibminus1 + fibminus2 + fibminus3;\n\
    \            fibminus3 = fibminus2;\n            fibminus2 = fibminus1;\n    \
    \        fibminus1 = fib;\n        }\n        return fib;", "        if (n ==\
    \ 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "        if (n == 0)\
    \ {\n            return 0;\n        }\n        if (n == 1) {\n            return\
    \ 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n   \
    \     return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", "        // Write\
    \ your code here.\n        return 0l;", '        throw new UnsupportedOperationException("Problem.fibfib
    is undefined");', "        if (n == 0) return 0;\n        if (n == 1) return 0;\n\
    \        if (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n   \
    \     long c = 1;\n        for (long i = 3; i <= n; i++) {\n            long temp\
    \ = c;\n            c = a + b + c;\n            a = b;\n            b = temp;\n\
    \        }\n        return c;", '        throw new RuntimeException("Not implemented");',
  "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
    \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", " \
    \       long fibfib = 0;\n        // write your code here.\n        return fibfib;",
  "        long a = 0, b = 0, c = 1;\n        while (n > 2) {\n            long tmp\
    \ = c;\n            c = a + b + c;\n            a = b;\n            b = tmp;\n\
    \            n--;\n        }\n        return c;", "        if (n <= 1) {\n   \
    \         return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        long[] fibfib = new long[n + 1];\n        fibfib[0] = 0;\n\
    \        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <=\
    \ n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i\
    \ - 3];\n        }\n        return fibfib[n];", "        if (n < 2) {\n      \
    \      return 0;\n        }\n        if (n == 2) {\n            return 1;\n  \
    \      }\n        return (fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3));", " \
    \       long f0 = 0;\n        long f1 = 0;\n        long f2 = 1;\n        long\
    \ f3 = 0;\n        for (long i = 3; i <= n; i++) {\n            f3 = f2 + f1 +\
    \ f0;\n            f0 = f1;\n            f1 = f2;\n            f2 = f3;\n    \
    \    }\n        return f3;", "        if (n == 0) {\n            return 0;\n \
    \       }\n        if (n == 1) {\n            return 0;\n        }\n        if\
    \ (n == 2) {\n            return 1;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        long d = 0;\n        for (long i = 3; i\
    \ <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b\
    \ = c;\n            c = d;\n        }\n        return d;", '        return -1;',
  "        if (n < 0)\n            throw new IllegalArgumentException();\n       \
    \ if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
    \ 0;\n        if (n == 2)\n            return 1;\n        if (n == 3)\n      \
    \      return 1;\n        final long[] fibfib = new long[3];\n        Arrays.fill(fibfib,\
    \ 1);\n        for (int i = 3; i < n; i++) {\n            final long tmp = fibfib[0]\
    \ + fibfib[1] + fibfib[2];\n            fibfib[0] = fibfib[1];\n            fibfib[1]\
    \ = fibfib[2];\n            fibfib[2] = tmp;\n        }\n        return fibfib[0]\
    \ + fibfib[1] + fibfib[2];", "        throw new UnsupportedOperationException(\"\
    Problem doesn't have a solution\");", '        throw new UnsupportedOperationException("Problem.fibfib
    has not been implemented");', '      return 0;', "        // BEGIN SOLUTION\n\
    \        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        long n1 = 0;\n        long n2 =\
    \ 0;\n        long n3 = 1;\n        for (long i = 3; i <= n; i++) {\n        \
    \    long f = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n    \
    \        n3 = f;\n        }\n        return n3;\n        // END SOLUTION", '        return
    0;', "        if (n == 0) {\n            return 0;\n        }\n        if (n ==\
    \ 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        long [] ar = new long[3];\n        ar[0] = 0;\n     \
    \   ar[1] = 0;\n        ar[2] = 1;\n        for (int i = 3; i <= n; i++) {\n \
    \           long temp = ar[2];\n            ar[2] = ar[2] + ar[1] + ar[0];\n \
    \           ar[0] = ar[1];\n            ar[1] = temp;\n        }\n        return\
    \ ar[2];", "        if (n == 0) {\n            return 0;\n        }\n        if\
    \ (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n      \
    \      return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);", '        return 0l;', '        return 0;', "        if (n == 0) {\n\
    \            return 0l;\n        }\n        if (n == 1) {\n            return\
    \ 0l;\n        }\n        if (n == 2) {\n            return 1l;\n        }\n \
    \       return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", '        throw
    new UnsupportedOperationException("Problem.fibfib()");', "        long[][] seq\
    \ = new long[3][3];\n        for (int i = 0; i < 3; i++) {\n            seq[i][i]\
    \ = 1;\n        }\n        long[][] cur = seq;\n        for (int i = 2; i < n;\
    \ i++) {\n            cur = matrixMultiply(cur, seq);\n        }\n        return\
    \ cur[0][0];", "        long memo[] = new long[3];\n        memo[0] = 0;\n   \
    \     memo[1] = 0;\n        memo[2] = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            long nextFib = memo[0] + memo[1] + memo[2];\n            memo[0]\
    \ = memo[1];\n            memo[1] = memo[2];\n            memo[2] = nextFib;\n\
    \        }\n        return memo[2];", "        long a = 0, b = 0, c = 1;\n   \
    \     for (int i = 0; i < n; i++) {\n            a = b;\n            b = c;\n\
    \            c = a + b + c;\n        }\n        return a;", "        long ans\
    \ = 0;\n        return ans;", "        if (n == 0) {\n            return 0;\n\
    \        }\n        if (n == 1) {\n            return 0;\n        }\n        if\
    \ (n == 2) {\n            return 1;\n        }\n        long[] a = new long[3];\n\
    \        a[0] = 0;\n        a[1] = 0;\n        a[2] = 1;\n        for (int i =\
    \ 3; i <= n; i++) {\n            long newNum = a[0] + a[1] + a[2];\n         \
    \   a[0] = a[1];\n            a[1] = a[2];\n            a[2] = newNum;\n     \
    \   }\n        return a[2];", "        long a = 0, b = 0, c = 1;\n        for\
    \ (int i = 0; i < n; i++) {\n            long d = a + b + c;\n            a =\
    \ b;\n            b = c;\n            c = d;\n        }\n        return a;", '        throw
    new RuntimeException("Not implemented");', "        // BEGIN\n        // For any\
    \ positive integer n, the n-th element in the fibfib number sequence is the same\
    \ as the\n        // n-th element in the Fibonacci number sequence!\n        return\
    \ fib(n);\n        // END", '        throw new RuntimeException("Not yet implemented");',
  "        if (n < 2) return 0;\n        if (n == 2) return 1;\n        long a = 0;\n\
    \        long b = 0;\n        long c = 1;\n        long d = 0;\n        for (long\
    \ i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return d;", '        return
    (long) (a(n-1,0,0,1));', "        // Insert code here\n        return 0;", '        return
    fibfib(n, new HashMap<>());', "        long first = 0;\n        long second =\
    \ 0;\n        long third = 1;\n        for (long i = 2; i <= n; i++) {\n     \
    \       long fourth = first + second + third;\n            first = second;\n \
    \           second = third;\n            third = fourth;\n        }\n        return\
    \ third;", '        throw new UnsupportedOperationException("Problem: fibfib");',
  "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c = 1;\n\
    \        long d = 0;\n        for (long i = 2; i < n; i++) {\n            d =\
    \ a + b + c;\n            a = b;\n            b = c;\n            c = d;\n   \
    \     }\n        return d;", '        throw new UnsupportedOperationException("Unimplemented
    method");', '        return 0;', '        return 0;', "        // >>> fibfib((1l))\n\
    \        // (0l)\n        // >>> fibfib((5l))\n        // (4l)\n        // >>>\
    \ fibfib((8l))\n        // (24l)\n        if (n == 0) {\n            return 0l;\n\
    \        }\n        if (n == 1) {\n            return 0l;\n        }\n       \
    \ if (n == 2) {\n            return 1l;\n        }\n        if (n == 3) {\n  \
    \          return 2l;\n        }\n        long a = 1l;\n        long b = 1l;\n\
    \        long c = 2l;\n        for (long i = 4l; i <= n; i++) {\n            long\
    \ d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return c;", "        // Insert your code here\n        long[]\
    \ arr = new long[(int)n+1];\n        arr[0] = 0;\n        arr[1] = 0;\n      \
    \  arr[2] = 1;\n        for(int i = 3; i < n+1; i++){\n            arr[i] = arr[i-1]\
    \ + arr[i-2] + arr[i-3];\n        }\n        return arr[(int)n];", "        if\
    \ (n < 0) {\n            throw new RuntimeException(\"negative number\");\n  \
    \      }\n        if (n == 0) {\n            return 0;\n        }\n        if\
    \ (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n      \
    \      return 1;\n        }\n        long a = 0;\n        long b = 0;\n      \
    \  long c = 1;\n        long d = 1;\n        while (n > 0) {\n            if (n\
    \ % 2 == 1) {\n                Pair<Long, Long> p = matrixMul(a, b, c, d);\n \
    \               a = p.getValue0();\n                b = p.getValue1();\n     \
    \       }\n            Pair<Long, Long> p = matrixMul(c, d, c, d);\n         \
    \   c = p.getValue0();\n            d = p.getValue1();\n            n /= 2;\n\
    \        }\n        return b;", "        // Write your code here...\n        return\
    \ 0;", "        long[] cache = new long[4];\n        for (int i = 0; i < 4; i++)\
    \ {\n            cache[i] = 0;\n        }\n        for (int i = 0; i < n; i++)\
    \ {\n            cache[3] = cache[0] + cache[1] + cache[2];\n            cache[0]\
    \ = cache[1];\n            cache[1] = cache[2];\n            cache[2] = cache[3];\n\
    \        }\n        return cache[3];", "        // your code goes here\n     \
    \   long sum = 0;\n        long a = 0;\n        long b = 0;\n        long c =\
    \ 1;\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==\
    \ 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        for (int i = 3; i <= n; i++) {\n            sum = a +\
    \ b + c;\n            a = b;\n            b = c;\n            c = sum;\n     \
    \   }\n        return sum;", "        long fib = 0;\n        long fib1 = 0;\n\
    \        long fib2 = 1;\n        long fib3 = 0;\n        for (long i = 2; i <=\
    \ n; i++) {\n            fib = fib1 + fib2 + fib3;\n            fib3 = fib2;\n\
    \            fib2 = fib1;\n            fib1 = fib;\n        }\n        return\
    \ fib;", "        long[] f = new long[3];\n        f[0] = 0;\n        f[1] = 0;\n\
    \        f[2] = 1;\n        if (n <= 2) {\n            return f[(int) n];\n  \
    \      }\n        for (int i = 3; i <= n; i++) {\n            long f_i = f[0]\
    \ + f[1] + f[2];\n            f[0] = f[1];\n            f[1] = f[2];\n       \
    \     f[2] = f_i;\n        }\n        return f[2];", "        if (n < 0) {\n \
    \           throw new IllegalArgumentException(\"n must be positive\");\n    \
    \    } else if (n == 0) {\n            return 0l;\n        } else if (n == 1)\
    \ {\n            return 0l;\n        } else if (n == 2) {\n            return\
    \ 1l;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n        }", "        long f0 = 0;\n        long f1 = 0;\n        long\
    \ f2 = 1;\n        long result = 0;\n        for (long i = 3; i <= n; i++) {\n\
    \            result = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n\
    \            f2 = result;\n        }\n        return result;", '        return
    0;', "        long f0 = 0;\n        long f1 = 0;\n        long f2 = 1;\n     \
    \   long f3 = 1;\n        while (n > 0) {\n            f3 = f3 + f2 + f1;\n  \
    \          f1 = f2;\n            f2 = f3 - f2 - f1;\n            n--;\n      \
    \  }\n        return f2;", "        if (n == 0) return 0;\n        if (n == 1)\
    \ return 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);", "        // Write a function that efficiently computes the\
    \ n-th element of the fibfib number sequence.\n        long [] arr = new long[3];\n\
    \        arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 1;\n        for(int\
    \ i = 2; i < n; i++){\n            long t = arr[0] + arr[1] + arr[2];\n      \
    \      arr[0] = arr[1];\n            arr[1] = arr[2];\n            arr[2] = t;\n\
    \        }\n        return arr[2];", "        // BEGIN SOLUTION\n        if (n\
    \ < 3) return n - 1;\n        long a = 0, b = 0, c = 1;\n        for (int i =\
    \ 3; i <= n; i++) {\n            long next = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = next;\n        }\n        return c;\n   \
    \     // END SOLUTION", '        return -1;', '        return 0;', "        long\
    \ m0 = 0;\n        long m1 = 0;\n        long m2 = 1;\n        long m3 = 1;\n\
    \        long m4 = 1;\n        long m5 = 2;\n        long m6 = 4;\n        long\
    \ m7 = 8;\n        long m8 = 15;\n        long m9 = 29;\n        long m10 = 56;\n\
    \        long m11 = 108;\n        long m12 = 208;\n        long m13 = 401;\n \
    \       long m14 = 773;\n        long m15 = 1490;\n        long m16 = 2872;\n\
    \        long m17 = 5536;\n        long m18 = 10671;\n        long m19 = 20569;\n\
    \        long m20 = 39648;\n        long m21 = 76424;\n        long m22 = 147312;\n\
    \        long m23 = 284656;\n        long m24 = 549310;\n        long m25 = 1065005;\n\
    \        long m26 = 2047807;\n        long m27 = 3957886;\n        long m28 =\
    \ 7644432;\n        long m29 = 14763360;\n        long m30 = 28565576;\n     \
    \   long m31 = 55119504;\n        long m32 = 106497498;\n        long m33 = 205691504;\n\
    \        long m34 = 395906968;\n        long m35 = 764801152;\n        long m36\
    \ = 1478060680;\n        long m37 = 2853749072l;\n        long m38 = 5507518976l;\n\
    \        long m39 = 10642368256l;\n        long m40 = 20549689088l;\n        long\
    \ m41 = 39595833344l;\n        long m42 = 76491455488l;\n        long m43 = 147811687936l;\n\
    \        long m44 = 285442448128l;\n        long m45 = 550994034688l;\n      \
    \  long m46 = 1064214347776l;\n        long m47 = 2054945134592l;\n        long\
    \ m48 = 3959620300800l;\n        long m49 = 764919390105", '        return 0;',
  "        long a = 0;\n        long b = 0;\n        long c = 1;\n        for (long\
    \ i = 1; i < n; i++) {\n            a = b;\n            b = c;\n            c\
    \ = a + b + c;\n        }\n        return c;", "        // TODO: add your code\
    \ here\n        return 1;", "        if (n == 0) {\n            return 0;\n  \
    \      }\n        if (n == 1) {\n            return 0;\n        }\n        if\
    \ (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);", "        Pair<Long, Long> fibfib = fibfib_helper(n);\n\
    \        return fibfib.getValue1();", "        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long p1 = 0;\n\
    \        long p2 = 0;\n        long p3 = 1;\n        long sum = 0;\n        for\
    \ (long i = 2; i < n; i++) {\n            sum = p1 + p2 + p3;\n            p1\
    \ = p2;\n            p2 = p3;\n            p3 = sum;\n        }\n        return\
    \ sum;", "        // Fill in your answer here\n        return 0;", "        //\
    \ your code here\n        return 0l;", "        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long[] cache =\
    \ new long[(int)n+1];\n        cache[0] = 0;\n        cache[1] = 0;\n        cache[2]\
    \ = 1;\n        for (int i = 3; i <= n; i++) {\n            cache[i] = cache[i-1]\
    \ + cache[i-2] + cache[i-3];\n        }\n        return cache[(int)n];", "   \
    \     // Fill in implementation here\n        long fn1=0;\n        long fn2=0;\n\
    \        long fn3=1;\n        long sum=0;\n        if(n==0){\n            return\
    \ 0;\n        }\n        if(n==1){\n            return 0;\n        }\n       \
    \ if(n==2){\n            return 1;\n        }\n        for(int i=3;i<=n;i++){\n\
    \            sum=fn1+fn2+fn3;\n            fn1=fn2;\n            fn2=fn3;\n  \
    \          fn3=sum;\n        }\n        return sum;", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be positive\");\n   \
    \     }\n        long cur = 0;\n        long prev = 0;\n        long prev2 = 0;\n\
    \        for (long i = 0; i < n; i++) {\n            cur = prev + prev2 + (i ==\
    \ 2 ? 1 : 0);\n            prev2 = prev;\n            prev = cur;\n        }\n\
    \        return cur;", '        return 0l;', "        // Fill in your solution\
    \ here.\n        return 0;", "        if (n < 2) {\n            return n;\n  \
    \      }\n        long nMinus1 = 1;\n        long nMinus2 = 1;\n        long nMinus3\
    \ = 0;\n        long fibFib = 0;\n        for (long i = 3; i <= n; i++) {\n  \
    \          fibFib = nMinus1 + nMinus2 + nMinus3;\n            nMinus3 = nMinus2;\n\
    \            nMinus2 = nMinus1;\n            nMinus1 = fibFib;\n        }\n  \
    \      return fibFib;", "        if (n < 0) {\n            throw new AssertionError();\n\
    \        }\n        if (n == 0) {\n            return 0l;\n        }\n       \
    \ if (n == 1) {\n            return 0l;\n        }\n        if (n == 2) {\n  \
    \          return 1l;\n        }\n        long dp[] = new long[(int) n + 1];\n\
    \        dp[0] = 0l;\n        dp[1] = 0l;\n        dp[2] = 1l;\n        for (int\
    \ i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n\
    \        }\n        return dp[(int) n];", "        // \"A\" solution:\n      \
    \  // if(n <= 1) return 0;\n        // if(n == 2) return 1;\n        // return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        // \"B\" solution:\n     \
    \   // fibfib(n) = A*fibfib(n-1) + B*fibfib(n-2) + C*fibfib(n-3)\n        // fibfib(n)\
    \ = A*(A*fibfib(n-2) + B*fibfib(n-3) + C*fibfib(n-4)) + B*fibfib(n-2) + C*fibfib(n-3)\n\
    \        // fibfib(n) = A*A*fibfib(n-2) + A*B*fibfib(n-3) + A*C*fibfib(n-4) +\
    \ B*fibfib(n-2) + C*fibfib(n-3)\n        // fibfib(n) = A*A*fibfib(n-2) + A*B*fibfib(n-3)\
    \ + A*C*fibfib(n-4) + B*(A*fibfib(n-3) + B*fibfib(n-4) + C*fibfib(n-5)) + C*fibfib(n-3)\n\
    \        // fibfib(n) = A*A*fibfib(n-2) + A*B*fibfib(n-3) + A*C*fibfib(n-4) +\
    \ B*A*fibfib(n-3) + B*B*fibfib(n-4) + B*C*fibfib(n-5) + C*fibfib(n-3)\n      \
    \  // fibfib(n) = A*A*fibfib(n-2) + A*B*fibfib(n-3) + A*C*f", '        throw new
    UnsupportedOperationException("fibfib has not been implemented yet");', '        return
    fibfibInt(n).n;', "        // Write your code here.\n        return 0;", "   \
    \     long a = 0;\n        long b = 0;\n        long c = 1;\n        if (n ==\
    \ 0) {\n            return a;\n        }\n        if (n == 1) {\n            return\
    \ b;\n        }\n        if (n == 2) {\n            return c;\n        }\n   \
    \     for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n     \
    \       a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ c;", "        long f1 = 0;\n        long f2 = 0;\n        long f3 = 1;\n   \
    \     long count = 2;\n        while (count <= n) {\n            long f4 = f1\
    \ + f2 + f3;\n            f1 = f2;\n            f2 = f3;\n            f3 = f4;\n\
    \            count++;\n        }\n        return f3;", '        return fibfibRec(n,
    0, 0, 1);', '        return 0l;', "        if (n < 3) return n;\n        long\
    \ a = 0;\n        long b = 1;\n        long c = 1;\n        for (long i = 3; i\
    \ <= n; i++) {\n            long d = a + b + c;\n            a = b;\n        \
    \    b = c;\n            c = d;\n        }\n        return c;", '        return
    0;', "        // BEGIN SOLUTION\n        if (n <= 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 1;\n        }\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        // END SOLUTION", " \
    \     if (n == 0 || n == 1) {\n        return 0;\n      }\n      if (n == 2) {\n\
    \        return 1;\n      }\n      return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
  "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
    \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n  \
    \      long r = 0;\n        for (long i = 3; i <= n; i++) {\n            r = a\
    \ + b + c;\n            a = b;\n            b = c;\n            c = r;\n     \
    \   }\n        return r;", "        ArrayList<Long> list = new ArrayList<Long>();\n\
    \        list.add(0l);\n        list.add(0l);\n        list.add(1l);\n       \
    \ if (n <= 2) {\n            return list.get((int)n);\n        }\n        long\
    \ result = 0;\n        for (int i = 3; i <= n; i++) {\n            result = list.get(0)\
    \ + list.get(1) + list.get(2);\n            list.remove(0);\n            list.add(result);\n\
    \        }\n        return result;", "        // YOUR CODE HERE\n        long\
    \ f0 = 0;\n        long f1 = 0;\n        long f2 = 1;\n        long f3 = 0;\n\
    \        if (n == 0) {\n            return f0;\n        }\n        if (n == 1)\
    \ {\n            return f1;\n        }\n        if (n == 2) {\n            return\
    \ f2;\n        }\n        for (int i = 2; i < n; i++) {\n            f3 = f2 +\
    \ f1 + f0;\n            f0 = f1;\n            f1 = f2;\n            f2 = f3;\n\
    \        }\n        return f3;", "        long a = 0;\n        long b = 0;\n \
    \       long c = 1;\n        long d = a + b + c;\n        for (long i = 0; i <\
    \ n; i++) {\n            a = b;\n            b = c;\n            c = d;\n    \
    \        d = a + b + c;\n        }\n        return d;", "        if (n <= 1) {\n\
    \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n  \
    \      for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n    \
    \        a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ c;", '        return 0;', '        return 0;', "        long x=0;\n        long\
    \ y=0;\n        long z=1;\n        long w=0;\n        long ans=0;\n        if(n==0){\n\
    \            return 0;\n        }\n        if(n==1){\n            return 0;\n\
    \        }\n        if(n==2){\n            return 1;\n        }\n        for(int\
    \ i=3;i<=n;i++){\n            ans=x+y+z;\n            x=y;\n            y=z;\n\
    \            z=ans;\n        }\n        return ans;", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n < 0\");\n        }\n     \
    \   if (n == 0) {\n            return 0l;\n        }\n        if (n == 1) {\n\
    \            return 0l;\n        }\n        if (n == 2) {\n            return\
    \ 1l;\n        }\n        long a = 0l;\n        long b = 0l;\n        long c =\
    \ 1l;\n        long d = 1l;\n        long e = 1l;\n        long f = 1l;\n    \
    \    long g = 0l;\n        long h = 0l;\n        long i = 0l;\n        while (n\
    \ > 0) {\n            if ((n & 1) != 0) {\n                long j = (((((g * d)\
    \ + (h * e)) + (i * f)) % 1000000007l) * a) % 1000000007l;\n                long\
    \ k = (((((g * e) + (h * f)) + (i * g)) % 1000000007l) * b) % 1000000007l;\n \
    \               long l = (((((g * f) + (h * g)) + (i * h)) % 1000000007l) * c)\
    \ % 1000000007l;\n                g = (((j + k) % 1000000007l) + l) % 1000000007l;\n\
    \                h = (j + k) % 1000000007l;\n                i = j;\n        \
    \    }\n            long j = ((((d * d) + (e * e)) + (f * f)) % 1000000007l) *\
    \ a;\n            long k = (((((d * e) * 2l) + (e * f)) * 2l) + (f * d)) % 1000000007l;\n\
    \            long l = ((((d * f) + (e * d)) + (f * e)) % 1000000007l) * c;\n \
    \           d = (((j + k) % 1000000007l) + l) % 1000000007l;\n            e =\
    \ (j + k) % 1000000007l;\n            f = j;\n            n >>= 1;\n        }\n\
    \        return g;", '        return fibfib((0l), (1l), (0l), (1l), (n));', " \
    \       long a = 0;\n        long b = 0;\n        long c = 1;\n        long d\
    \ = 1;\n        long ans = 0;\n        while (n != 0) {\n            if (n % 2\
    \ == 1) {\n                ans = d * c + a * b;\n                b = d * (b +\
    \ c) + a * b;\n                a = ans;\n            }\n            n = n / 2;\n\
    \            ans = c * c + d * d;\n            d = d * (2 * c - d);\n        \
    \    c = ans;\n        }\n        return a;", "        // REPLACE THIS LINE WITH\
    \ YOUR CODE\n        return 0;", "        // BEGIN SOLUTION\n        if (n < 0)\
    \ {\n            throw new IllegalArgumentException(\"Negative n\");\n       \
    \ }\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==\
    \ 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return\
    \ 1;\n        }\n        if (n == 3) {\n            return 1;\n        }\n   \
    \     if (n == 4) {\n            return 2;\n        }\n        long a = 0;\n \
    \       long b = 0;\n        long c = 1;\n        long d = 2;\n        long e\
    \ = 4;\n        while (n >= 5) {\n            a = b;\n            b = c;\n   \
    \         c = d;\n            d = e;\n            e = a + b + c;\n           \
    \ n -= 1;\n        }\n        return e;\n        // END SOLUTION", "        long\
    \ a = 0;\n        long b = 0;\n        long c = 1;\n        for (long i = 0; i\
    \ < n; i++) {\n            long d = a + b + c;\n            a = b;\n         \
    \   b = c;\n            c = d;\n        }\n        return a;", '        return
    0;', "        long first = 0;\n        long second = 0;\n        long third =\
    \ 1;\n        for (long i = 3; i <= n; i++) {\n            long tmp = first +\
    \ second + third;\n            first = second;\n            second = third;\n\
    \            third = tmp;\n        }\n        return third;", "        /* REPLACE\
    \ THIS COMMENT WITH YOUR CODE\n        This code is executed when you run your\
    \ program.\n        */\n        return -1;", '        return 0;', "        //\
    \ Given a long, find the nth element of the fibfib sequence.\n        // The time\
    \ complexity of this solution is O(n).\n        // Your solution must be recursive.\n\
    \        if (n < 2) {\n            return 0;\n        } else if (n == 2) {\n \
    \           return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n        }", "        long a = 0;\n        long b = 0;\n    \
    \    long c = 1;\n        if (n == 0) {\n            return a;\n        }\n  \
    \      if (n == 1) {\n            return b;\n        }\n        if (n == 2) {\n\
    \            return c;\n        }\n        for (long i = 3; i <= n; i++) {\n \
    \           long d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return c;", "        if (n == 0) return 0;\n\
    \        if (n == 1) return 0;\n        if (n == 2) return 1;\n        long a\
    \ = 0;\n        long b = 0;\n        long c = 1;\n        long d = 0;\n      \
    \  while (n > 0) {\n            n--;\n            d = a + b + c;\n           \
    \ a = b;\n            b = c;\n            c = d;\n        }\n        return d;",
  "        // null ->\n        // n -> n-1, n-2, n-3\n        // n-1 -> n-2, n-3,\
    \ n-4\n        // n-2 -> n-3, n-4, n-5\n        // n-3 -> n-4, n-5, n-6\n    \
    \    // ...\n        // 1 -> 0, 1, 2\n        // 0 -> 1, 2, 3\n        // -1 ->\
    \ 2, 3, 4\n        // -2 -> 3, 4, 5\n        // -3 -> 4, 5, 6\n        // -4 ->\
    \ 5, 6, 7\n        // -5 -> 6, 7, 8\n        // ...\n        // n = 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\
    \ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\
    \ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,\
    \ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\
    \ 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,\
    \ 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\
    \ 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,\
    \ 165, 166, 167, 168, 169, 170, 171, 172, 173, 174", "        // @TODO\n     \
    \   return 0;", "        if (n == 0l) {\n            return 0l;\n        }\n \
    \       if (n == 1l) {\n            return 0l;\n        }\n        if (n == 2l)\
    \ {\n            return 1l;\n        }\n        long f1 = 0l;\n        long f2\
    \ = 0l;\n        long f3 = 1l;\n        long f = 0l;\n        for (long i = 0l;\
    \ i < n - 2l; i++) {\n            f = f1 + f2 + f3;\n            f1 = f2;\n  \
    \          f2 = f3;\n            f3 = f;\n        }\n        return f;", "   \
    \   long a = 0;\n      long b = 0;\n      long c = 1;\n      for (long i = 0;\
    \ i < n; i++) {\n        long next = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = next;\n      }\n      return a;", '        return 0;', "        if\
    \ (n < 2) return 0;\n        long n1 = 0, n2 = 0, n3 = 1;\n        for (int i\
    \ = 2; i <= n; i++) {\n            long n4 = n1 + n2 + n3;\n            n1 = n2;\n\
    \            n2 = n3;\n            n3 = n4;\n        }\n        return n3;", " \
    \       //\n        // Your code goes here ...\n        //\n        return -1;",
  '        return 0;', "        if (n == 0) return 0;\n        else if (n == 1) return\
    \ 0;\n        else if (n == 2) return 1;\n        else {\n            return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n        }", "        if (n == 0) {\n         \
    \   return 0;\n        }\n        else if (n == 1) {\n            return 0;\n\
    \        }\n        else if (n == 2) {\n            return 1;\n        }\n   \
    \     else {\n            return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n\
    \        }", '        return 0l;', "        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);", "        if (n == 0) return 0;\n   \
    \     if (n == 1) return 0;\n        if (n == 2) return 1;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);", '        return n;', "        if (n == 0) {\n\
    \            return 0;\n        }\n        if (n == 1) {\n            return 0;\n\
    \        }\n        if (n == 2) {\n            return 1;\n        }\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", "        long a = 0;\n    \
    \    long b = 0;\n        long c = 1;\n        for (long i = 0; i < n; i++) {\n\
    \            long t = a + b + c;\n            a = b;\n            b = c;\n   \
    \         c = t;\n        }\n        return a;", "        // your code here\n\
    \        return n;", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);", "        // Construct your solution below and return the answer\n\
    \        return -1l;", '        throw new RuntimeException("Unimplemented");',
  "        if (n <= 2) {\n            return n - 1;\n        }\n        long f1 =\
    \ 0;\n        long f2 = 1;\n        long f3 = 2;\n        long i = 3;\n      \
    \  while (i <= n) {\n            long next = f1 + f2 + f3;\n            f1 = f2;\n\
    \            f2 = f3;\n            f3 = next;\n            i++;\n        }\n \
    \       return f3;", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);", "        long[] a = new long[1];\n        long[] b = new long[1];\n\
    \        long[] c = new long[1];\n        long[] d = new long[1];\n        long[]\
    \ e = new long[1];\n        long[] i = new long[1];\n        i[0] = 0;\n     \
    \   a[0] = 0;\n        b[0] = 0;\n        c[0] = 1;\n        d[0] = 1;\n     \
    \   while (i[0] < n) {\n            e[0] = d[0];\n            d[0] = c[0] + d[0]\
    \ + b[0];\n            b[0] = c[0];\n            c[0] = d[0];\n            i[0]\
    \ = i[0] + 1;\n        }\n        return e[0];", "        long[] arr = new long[3];\n\
    \        arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 1;\n        for (int\
    \ i = 0; i < n - 2; i++) {\n            long cur = arr[0] + arr[1] + arr[2];\n\
    \            arr[0] = arr[1];\n            arr[1] = arr[2];\n            arr[2]\
    \ = cur;\n        }\n        return arr[2];", "        if (n == 0) return 0;\n\
    \        if (n == 1) return 0;\n        if (n == 2) return 1;\n        long[]\
    \ fn = new long[3];\n        fn[0] = 0;\n        fn[1] = 0;\n        fn[2] = 1;\n\
    \        for (int i = 3; i <= n; i++) {\n            long tmp = fn[0] + fn[1]\
    \ + fn[2];\n            fn[0] = fn[1];\n            fn[1] = fn[2];\n         \
    \   fn[2] = tmp;\n        }\n        return fn[2];", "        Pair<Long, Long>\
    \ fib = new Pair<Long, Long>(0l, 1l);\n        long[] fibs = new long[3];\n  \
    \      fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 1;\n        for (int\
    \ i = 3; i <= n; i++) {\n            fibs[0] = fibs[1];\n            fibs[1] =\
    \ fibs[2];\n            fibs[2] = fibs[0] + fibs[1] + fibs[2];\n        }\n  \
    \      return fibs[2];", "        long[] f = new long[3];\n        f[0] = 0;\n\
    \        f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n\
    \            long f0 = f[0];\n            long f1 = f[1];\n            long f2\
    \ = f[2];\n            f[0] = f1;\n            f[1] = f2;\n            f[2] =\
    \ f0 + f1 + f2;\n        }\n        return f[2];", '        return -1;', "   \
    \     long a = 0, b = 0, c = 1;\n        for (int i = 0; i < n; i++) {\n     \
    \       long t = a + b + c;\n            a = b;\n            b = c;\n        \
    \    c = t;\n        }\n        return c;", "        // Your code here.\n    \
    \    return 0;", "        long fibfib_prev_prev = 0;\n        long fibfib_prev\
    \ = 0;\n        long fibfib_current = 1;\n        if (n < 2) {\n            return\
    \ fibfib_prev;\n        }\n        for (long i = 2; i <= n; i++) {\n         \
    \   fibfib_prev_prev = fibfib_prev;\n            fibfib_prev = fibfib_current;\n\
    \            fibfib_current = fibfib_prev_prev + fibfib_prev + fibfib_current;\n\
    \        }\n        return fibfib_current;", "        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        long d = 0;\n        if (n == 0) {\n  \
    \          return a;\n        }\n        if (n == 1) {\n            return b;\n\
    \        }\n        if (n == 2) {\n            return c;\n        }\n        for\
    \ (int i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = d;\n        }\n        return d;", '        return
    new long[]{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0',
  "        if (n == 0) {\n            return 0l;\n        }\n        if (n == 1) {\n\
    \            return 0l;\n        }\n        if (n == 2) {\n            return\
    \ 1l;\n        }\n        Pair<Long, Long> fibfib_1_fibfib_2 = new Pair<Long,\
    \ Long>(0l, 0l);\n        Pair<Long, Long> fibfib_2_fibfib_3 = new Pair<Long,\
    \ Long>(0l, 1l);\n        Pair<Long, Long> fibfib_3_fibfib_4 = new Pair<Long,\
    \ Long>(1l, 1l);\n        for (long i = 3l; i < n; i++) {\n            fibfib_1_fibfib_2\
    \ = fibfib_2_fibfib_3;\n            fibfib_2_fibfib_3 = fibfib_3_fibfib_4;\n \
    \           fibfib_3_fibfib_4 = new Pair<Long, Long>(fibfib_2_fibfib_3.getValue0()\
    \ + fibfib_1_fibfib_2.getValue0() + fibfib_1_fibfib_2.getValue1(), fibfib_2_fibfib_3.getValue0());\n\
    \        }\n        return fibfib_3_fibfib_4.getValue0();", "        long[] fib\
    \ = new long[3];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n\
    \        if (n == 0 || n == 1) {\n            return fib[0];\n        }\n    \
    \    if (n == 2) {\n            return fib[2];\n        }\n        for (int i\
    \ = 3; i <= n; i++) {\n            long temp = fib[0] + fib[1] + fib[2];\n   \
    \         fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2] =\
    \ temp;\n        }\n        return fib[2];", "        // >>> YOUR CODE HERE\n\
    \        return -1l;", '        return 0l;', "        if (n < 2) {\n         \
    \   return n;\n        }\n        long n_minus_1 = 1;\n        long n_minus_2\
    \ = 1;\n        long n_minus_3 = 0;\n        long fibfib_n = 0;\n        for (long\
    \ i = 2; i < n; i++) {\n            fibfib_n = n_minus_1 + n_minus_2 + n_minus_3;\n\
    \            n_minus_3 = n_minus_2;\n            n_minus_2 = n_minus_1;\n    \
    \        n_minus_1 = fibfib_n;\n        }\n        return fibfib_n;", "      \
    \  long[] mem = new long[3];\n        for (int i = 0; i < 3; i++) {\n        \
    \    mem[i] = 0;\n        }\n        for (int i = 3; i <= n; i++) {\n        \
    \    long newVal = mem[0] + mem[1] + mem[2];\n            mem[0] = mem[1];\n \
    \           mem[1] = mem[2];\n            mem[2] = newVal;\n        }\n      \
    \  return mem[2];", "        long[] a = new long[(int) n+1];\n        a[0] = 0;\n\
    \        a[1] = 0;\n        a[2] = 1;\n        for (int i = 3; i <= n; i++) {\n\
    \            a[i] = a[i-1] + a[i-2] + a[i-3];\n        }\n        return a[(int)\
    \ n];", "        if (n == 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        if (n == 2) {\n         \
    \   return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);", '        throw new RuntimeException("Not implemented.");', "       \
    \ long[] arr = new long[3];\n        arr[0] = 0;\n        arr[1] = 0;\n      \
    \  arr[2] = 1;\n        if (n < 3) {\n            return arr[(int)n];\n      \
    \  }\n        long result = 0;\n        for (long i = 3; i <= n; i += 1) {\n \
    \           result = arr[0] + arr[1] + arr[2];\n            arr[0] = arr[1];\n\
    \            arr[1] = arr[2];\n            arr[2] = result;\n        }\n     \
    \   return result;", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        long[] dp = new long[2];\n      \
    \  dp[0] = 0;\n        dp[1] = 1;\n        long current = 0;\n        for (int\
    \ i = 3; i <= n; i++) {\n            current = dp[0] + dp[1] + current;\n    \
    \        dp[0] = dp[1];\n            dp[1] = current;\n        }\n        return\
    \ current;", '        return 0;', "        if (n == 0) {\n            return 0;\n\
    \        }\n        if (n == 1) {\n            return 0;\n        }\n        if\
    \ (n == 2) {\n            return 1;\n        }\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 1;\n        long d = 0;\n        for (long i = 2; i\
    \ < n; i++) {\n            d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return d;", "        if (n == 0)\
    \ {\n            return 0;\n        }\n        if (n == 1) {\n            return\
    \ 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n   \
    \     long a = 0;\n        long b = 0;\n        long c = 1;\n        for (long\
    \ i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a = b;\n\
    \            b = c;\n            c = d;\n        }\n        return c;", "    \
    \    // >>> START\n        long[] arr = new long[(int)n + 1];\n        arr[0]\
    \ = 0;\n        arr[1] = 0;\n        arr[2] = 1;\n        if (n < 3) {\n     \
    \       return arr[(int)n];\n        }\n        for (int i = 3; i <= n; i++) {\n\
    \            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n     \
    \   return arr[(int)n];\n        // <<< END", "        if (n == 0) {\n       \
    \     return 0;\n        }\n        if (n == 1) {\n            return 0;\n   \
    \     }\n        if (n == 2) {\n            return 1;\n        }\n        long[]\
    \ fibfib = new long[(int) n + 1];\n        fibfib[0] = 0;\n        fibfib[1] =\
    \ 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n       \
    \     fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\
    \        return fibfib[(int) n];", "        long[] cache = new long[3];\n    \
    \    cache[0] = 0;\n        cache[1] = 0;\n        cache[2] = 1;\n        for\
    \ (int i = 3; i <= n; i++) {\n            long tmp = cache[0] + cache[1] + cache[2];\n\
    \            cache[0] = cache[1];\n            cache[1] = cache[2];\n        \
    \    cache[2] = tmp;\n        }\n        return cache[2];", "        if (n ==\
    \ 0) {\n            return 0;\n        }\n        else if (n == 1) {\n       \
    \     return 0;\n        }\n        else if (n == 2) {\n            return 1;\n\
    \        }\n        else {\n            return ((Problem.fibfib((n - 1))) + (Problem.fibfib((n\
    \ - 2))) + (Problem.fibfib((n - 3))));\n        }", "        long[] a = new long[3];\n\
    \        a[0] = 0;\n        a[1] = 0;\n        a[2] = 1;\n        for (int i =\
    \ 3; i <= n; i++) {\n            long temp = a[0] + a[1] + a[2];\n           \
    \ a[0] = a[1];\n            a[1] = a[2];\n            a[2] = temp;\n        }\n\
    \        return a[2];"]
stop_tokens:
- "\n    }\n"
