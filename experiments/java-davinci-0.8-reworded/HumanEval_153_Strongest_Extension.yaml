name: HumanEval_153_Strongest_Extension
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and an\
  \ array array list of extensions.\n    // The extensions are to be used to load\
  \ additional classes to the class. The\n    // strength of the extension is as follows:\
  \ Let CAP be the number of the uppercase\n    // letters in the extension's name,\
  \ and let SM be the number of lowercase letters \n    // in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    // You should find the strongest\
  \ extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the array list.\n    // For example,\
  \ if you are given \"Slices\" as the class and an array array list of the\n    //\
  \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return\
  \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n   \
  \ // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"\
  ), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"\
  CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
  \ class_name, ArrayList<String> extensions) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        double max = 0;\n        String best = \"\";\n        for (String\
    \ s : extensions) {\n            double c = s.chars().filter(Character::isUpperCase).count();\n\
    \            double l = s.chars().filter(Character::isLowerCase).count();\n  \
    \          double strength = c / l;\n            if (strength > max) {\n     \
    \           max = strength;\n                best = s;\n            }\n      \
    \  }\n        return class_name + \".\" + best;", "        int max_strength =\
    \ 0;\n        String strongest_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            int caps = extension.chars().filter(Character::isUpperCase).sum();\n\
    \            int smalls = extension.chars().filter(Character::isLowerCase).sum();\n\
    \            int strength = caps - smalls;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Declarations\n        //HashMap<String, Pair<Integer,\
    \ Integer>> extension_strength = new HashMap<String, Pair<Integer, Integer>>();\n\
    \        ArrayList<Pair<String, Pair<Integer, Integer>>> extension_strength =\
    \ new ArrayList<Pair<String, Pair<Integer, Integer>>>();\n        double strength\
    \ = 0.0;\n        double max_strength = 0.0;\n        int upper_count = 0;\n \
    \       int lower_count = 0;\n        int max_extension_count = 0;\n        //\
    \ Calculate the strength of each extension\n        for (int count = 0; count\
    \ < extensions.size(); count++) {\n            upper_count = 0;\n            lower_count\
    \ = 0;\n            for (int char_count = 0; char_count < extensions.get(count).length();\
    \ char_count++) {\n                if (Character.isUpperCase(extensions.get(count).charAt(char_count)))\
    \ {\n                    upper_count++;\n                } else {\n          \
    \          lower_count++;\n                }\n            }\n            strength\
    \ = (double) upper_count - (double) lower_count;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                max_extension_count\
    \ = count;\n            }\n            extension_strength.add(new Pair<String,\
    \ Pair<Integer, Integer>>(extensions.get(count), new Pair<Integer, Integer>(upper_count,\
    \ lower_count)));\n        }\n        // Create the return statement\n       \
    \ String return_string = class_name + \".\" + extensions.get(max_extension_count);\n\
    \        return return_string;", "        String string = class_name;\n      \
    \  String best_extension = \"\";\n        double best_strength = -1.0;\n     \
    \   for (String extension : extensions) {\n            double strength = 0.0;\n\
    \            for (int i = 0; i < extension.length(); i++) {\n                char\
    \ c = extension.charAt(i);\n                if (Character.isUpperCase(c)) {\n\
    \                    strength += 1.0;\n                } else {\n            \
    \        strength -= 1.0;\n                }\n            }\n            if (strength\
    \ > best_strength) {\n                best_strength = strength;\n            \
    \    best_extension = extension;\n            }\n        }\n        string +=\
    \ \".\" + best_extension;\n        return string;", "        // <<< Complete the\
    \ implementation\n        double strongestStrength = 0;\n        String strongestExtension\
    \ = \"\";\n        for (String extension : extensions) {\n            double strength\
    \ = calculateStrength(extension);\n            if (strength > strongestStrength)\
    \ {\n                strongestStrength = strength;\n                strongestExtension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongestExtension;", "        // Your code here\n        return null;", " \
    \       Integer max_strength = new Integer(0);\n        String strongest_extension\
    \ = new String();\n        for (int i = 0; i < extensions.size(); i++) {\n   \
    \         String extension = extensions.get(i);\n            Integer strength\
    \ = new Integer(0);\n            for (int j = 0; j < extension.length(); j++)\
    \ {\n                Character character = extension.charAt(j);\n            \
    \    if (Character.isUpperCase(character)) {\n                    strength +=\
    \ 1;\n                } else {\n                    strength -= 1;\n         \
    \       }\n            }\n            if (max_strength.equals(strength)) {\n \
    \               if (strongest_extension.compareTo(extension) > 0) {\n        \
    \            strongest_extension = extension;\n                }\n           \
    \ } else if (max_strength < strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return String.format(\"%s.%s\", class_name, strongest_extension);", " \
    \       // your code goes here\n        return \"\";", '        return class_name
    + "." + Collections.max(extensions, new ExtensionStrengthComparator());', '        return
    "";', '        return null;', "        String strongest_extension = \"\";\n  \
    \      double strength = 0;\n        for (String ext : extensions) {\n       \
    \     double ext_strength = getStrength(ext);\n            if (ext_strength >\
    \ strength) {\n                strength = ext_strength;\n                strongest_extension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        if (extensions.size() == 0) {\n            return class_name;\n       \
    \ }\n        String[] parsed_class_name = class_name.split(\"\\\\.\");\n     \
    \   String extension = parsed_class_name[parsed_class_name.length - 1];\n    \
    \    float extension_strength = (float) (extension.replaceAll(\"[^A-Z]\", \"\"\
    ).length() - extension.replaceAll(\"[^a-z]\", \"\").length());\n        int i;\n\
    \        for (i = 0; i < extensions.size(); i++) {\n            String[] parsed_extension\
    \ = extensions.get(i).split(\"\\\\.\");\n            extension = parsed_extension[parsed_extension.length\
    \ - 1];\n            float temp_strength = (float) (extension.replaceAll(\"[^A-Z]\"\
    , \"\").length() - extension.replaceAll(\"[^a-z]\", \"\").length());\n       \
    \     if (temp_strength > extension_strength) {\n                extension_strength\
    \ = temp_strength;\n                break;\n            }\n        }\n       \
    \ if (i < extensions.size()) {\n            return class_name + \".\" + extensions.get(i);\n\
    \        }\n        return class_name;", "        StringBuilder result = new StringBuilder();\n\
    \        String strongest_extension = null;\n        double max_strength = 0;\n\
    \        for (String extension : extensions) {\n            double strength =\
    \ 0;\n            for (char letter : extension.toCharArray()) {\n            \
    \    if (Character.isUpperCase(letter)) {\n                    strength++;\n \
    \               } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        result.append(class_name);\n        result.append(\".\");\n\
    \        result.append(strongest_extension);\n        return result.toString();",
  "        int max = Integer.MIN_VALUE;\n        String maxExtension = \"\";\n   \
    \     for (String str : extensions) {\n            int n = str.length();\n   \
    \         int CAP = 0;\n            int SM = 0;\n            for (int i = 0; i\
    \ < n; i++) {\n                if (Character.isUpperCase(str.charAt(i))) {\n \
    \                   CAP++;\n                } else {\n                    SM++;\n\
    \                }\n            }\n            if (CAP - SM > max) {\n       \
    \         max = CAP - SM;\n                maxExtension = str;\n            }\n\
    \        }\n        return class_name + \".\" + maxExtension;", "        String\
    \ res = \"\";\n        String strongest = \"\";\n        double strongest_strength\
    \ = -1;\n        for (String s : extensions) {\n            double strength =\
    \ 0;\n            for (int i = 0; i < s.length(); i++) {\n                char\
    \ c = s.charAt(i);\n                if (Character.isUpperCase(c)) {\n        \
    \            strength += 1;\n                } else {\n                    strength\
    \ -= 1;\n                }\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest\
    \ = s;\n            }\n        }\n        res = class_name + \".\" + strongest;\n\
    \        return res;", "        double largest = -Double.MAX_VALUE;\n        String\
    \ extension = \"\";\n        for (String ext : extensions) {\n            int\
    \ upperCase = 0;\n            int lowerCase = 0;\n            for (int i = 0;\
    \ i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    upperCase++;\n                } else {\n            \
    \        lowerCase++;\n                }\n            }\n            double strength\
    \ = (double) upperCase - (double) lowerCase;\n            if (strength > largest)\
    \ {\n                largest = strength;\n                extension = ext;\n \
    \           }\n        }\n        return class_name + \".\" + extension;", " \
    \       String str = extensions.get(0);\n        String strongest_extension =\
    \ \"\";\n        int strength = 0;\n        char c;\n        int caps = 0;\n \
    \       int sm = 0;\n        int temp_strength = 0;\n        int index = 0;\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            str = extensions.get(i);\n\
    \            for (int j = 0; j < str.length(); j++) {\n                c = str.charAt(j);\n\
    \                if (Character.isUpperCase(c)) {\n                    caps++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            temp_strength = caps - sm;\n            if (temp_strength\
    \ > strength) {\n                index = i;\n                strength = temp_strength;\n\
    \            }\n            caps = 0;\n            sm = 0;\n        }\n      \
    \  return class_name + \".\" + extensions.get(index);", "        int length =\
    \ extensions.size();\n        int[] strength = new int[length];\n        for (int\
    \ i = 0; i < length; i++) {\n            String extension = extensions.get(i);\n\
    \            strength[i] = uppercase(extension) - lowercase(extension);\n    \
    \    }\n        int index = indexOfMax(strength);\n        return class_name +\
    \ \".\" + extensions.get(index);", '        return class_name;', "        double\
    \ str = Double.NEGATIVE_INFINITY;\n        String strongest = \"\";\n        for\
    \ (String ext : extensions) {\n            int upper = 0;\n            int lower\
    \ = 0;\n            for (int i = 0; i < ext.length(); i++) {\n               \
    \ char c = ext.charAt(i);\n                if (Character.isUpperCase(c)) {\n \
    \                   upper++;\n                } else {\n                    lower++;\n\
    \                }\n            }\n            double strength = (double) upper\
    \ - (double) lower;\n            if (strength > str) {\n                str =\
    \ strength;\n                strongest = ext;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest;", "        // placeholder\n      \
    \  return class_name;", '        throw new RuntimeException("Not Implemented Yet");',
  "        class_name = \".\" + class_name;\n        String strongest = \"\";\n  \
    \      String strongest_name = \"\";\n        double strongest_strength = 0;\n\
    \        for (String s : extensions) {\n            double strength = 0;\n   \
    \         for (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_strength = strength;\n  \
    \              strongest = s;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        Integer max_strength = 0;\n        String chosen_extension\
    \ = extensions.get(0);\n        for (String extension : extensions) {\n      \
    \      Integer extension_strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                String curr_char = extension.substring(i, i + 1);\n\
    \                if (curr_char.equals(curr_char.toUpperCase())) {\n          \
    \          extension_strength++;\n                } else {\n                 \
    \   extension_strength--;\n                }\n            }\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            chosen_extension = extension;\n            }\n        }\n       \
    \ return class_name + \".\" + chosen_extension;", "        int max_strength =\
    \ 0;\n        String best_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                char c = extension.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  best_extension = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + best_extension;", "        // get all uppercase characters\n     \
    \   // get all lowercase characters\n        // subtract their lengths to get\
    \ the strength\n        // get the largest\n        // return the class_name plus\
    \ the first instance of the largest\n\n        // possibly useful methods:\n \
    \       // class_name.charAt(i)\n        // extensions.get(i)\n        // extensions.size()\n\
    \        // extensions.set(i, j)\n        // extensions.remove(i)\n        //\
    \ extensions.add(i)\n        // extensions.indexOf(i)\n        // extensions.lastIndexOf(i)\n\
    \        // extensions.contains(i)\n        // extensions.isEmpty()\n        //\
    \ extensions.toArray()\n        // extensions.toArray(a)\n        // extensions.toString()\n\
    \        // extensions.listIterator()\n        // extensions.listIterator(i)\n\
    \        // extensions.iterator()\n        // extensions.forEach(action)\n   \
    \     // extensions.spliterator()\n        // extensions.stream()\n        //\
    \ extensions.parallelStream()\n        // extensions.sort(c)\n        // extensions.replaceAll(uop)\n\
    \        // extensions.removeIf(p)\n        // extensions.sort(c)\n        //\
    \ extensions.trimToSize()\n        // extensions.clear()\n        // extensions.removeAll(c)\n\
    \        // extensions.removeRange(i, j)\n        // extensions.removeIf(p)\n\
    \        // extensions.replaceAll(uop)\n        // extensions.spliterator()\n\
    \        // extensions.stream()\n        // extensions.parallelStream()\n    \
    \    // extensions.forEach(action)\n        // extensions.listIterator()\n   \
    \     // extensions.listIterator(i)\n        // extensions.iterator()\n      \
    \  // extensions.toArray()\n        // extensions.toArray(a)\n        // extensions.toString()\n\
    \        // extensions.contains(i)\n        // extensions.isEmpty()\n        //\
    \ extensions.size()\n        // extensions.add(i)\n        // extensions.set(i,\
    \ j)\n        // extensions.remove(i)\n        // extensions.indexOf(i)\n    \
    \    // extensions.lastIndexOf(i)\n        // extensions.addAll(i)\n        //\
    \ extensions.addAll", "        int max_strength = Integer.MIN_VALUE;\n       \
    \ String result = \"\";\n        StringBuilder file_name = new StringBuilder();\n\
    \        for (String i : extensions) {\n            int cap = count_upper(i);\n\
    \            int sm = count_lower(i);\n            int strength = cap - sm;\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                result = i;\n            }\n        }\n        file_name.append(class_name);\n\
    \        file_name.append(\".\");\n        file_name.append(result);\n       \
    \ return file_name.toString();", "        double strength = Double.NEGATIVE_INFINITY;\n\
    \        String strongest = \"\";\n        for (String ext : extensions) {\n \
    \           double s = 0;\n            for (int i = 0; i < ext.length(); i++)\
    \ {\n                if (Character.isUpperCase(ext.charAt(i))) {\n           \
    \         s++;\n                } else {\n                    s--;\n         \
    \       }\n            }\n            if (s > strength) {\n                strength\
    \ = s;\n                strongest = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;", "        double strength = -2;\n        String\
    \ strongest_extension = \"\";\n        for (String extension : extensions) {\n\
    \            double ext_strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                char ch = extension.charAt(i);\n                if (Character.isUpperCase(ch))\
    \ {\n                    ext_strength += 1;\n                } else {\n      \
    \              ext_strength -= 1;\n                }\n            }\n        \
    \    if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", '        return class_name
    + "." + extension_strength(extensions).getValue1();', "        ArrayList<Pair<String,\
    \ Double>> ext_strength = new ArrayList<Pair<String, Double>>();\n        for\
    \ (String ext : extensions) {\n            int n_upper = 0;\n            int n_lower\
    \ = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ n_upper++;\n                else n_lower++;\n            }\n            double\
    \ strength = (double) n_upper - (double) n_lower;\n            ext_strength.add(new\
    \ Pair<String, Double>(ext, strength));\n        }\n        Collections.sort(ext_strength,\
    \ new Comparator<Pair<String, Double>>() {\n            @Override\n          \
    \  public int compare(Pair<String, Double> o1, Pair<String, Double> o2) {\n  \
    \              if (o1.getValue1() < o2.getValue1()) return 1;\n              \
    \  else if (o1.getValue1() > o2.getValue1()) return -1;\n                else\
    \ return 0;\n            }\n        });\n        return class_name + \".\" + ext_strength.get(0).getValue0();",
  "        // Your code goes here\n        return \"\";", '        return "";', " \
    \       int strong, strong_ext = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            strong = 0;\n            for (int j = 0; j < extensions.get(i).length();\
    \ j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\n\
    \                    strong++;\n                else if (Character.isLowerCase(extensions.get(i).charAt(j)))\n\
    \                    strong--;\n            }\n            if (Math.abs(strong)\
    \ > Math.abs(strong_ext)) {\n                strong_ext = strong;\n          \
    \      class_name = class_name + \".\" + extensions.get(i);\n            }\n \
    \       }\n        return class_name;", "        int max_strength = 0;\n     \
    \   String max_strength_extension = \"\";\n        int curr_strength = 0;\n  \
    \      for (String extension : extensions) {\n            curr_strength = 0;\n\
    \            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    curr_strength++;\n                } else {\n        \
    \            curr_strength--;\n                }\n            }\n            if\
    \ (curr_strength > max_strength) {\n                max_strength = curr_strength;\n\
    \                max_strength_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + max_strength_extension;", "        //implement\
    \ method\n        double maxStrength = -1;\n        int maxPos = -1;\n       \
    \ for (int i = 0; i < extensions.size(); i++) {\n            String e = extensions.get(i);\n\
    \            int capCount = 0;\n            int smCount = 0;\n            for\
    \ (int k = 0; k < e.length(); k++) {\n                if (Character.isUpperCase(e.charAt(k)))\
    \ {\n                    capCount++;\n                } else {\n             \
    \       smCount++;\n                }\n            }\n            double strength\
    \ = (double)capCount - (double)smCount;\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                maxPos = i;\n  \
    \          }\n        }\n        return class_name + \".\" + extensions.get(maxPos);",
  "        // Implement me!\n        return \"\";", "        String strongest = \"\
    \";\n        float strength = 0;\n        String current = \"\";\n        float\
    \ current_strength = 0;\n        for (String extension : extensions) {\n     \
    \       current = extension;\n            current_strength = (float)numUpperCase(extension)\
    \ - (float)numLowerCase(extension);\n            if (current_strength > strength)\
    \ {\n                strength = current_strength;\n                strongest =\
    \ current;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        // >>> your code goes here\n        return null;", "        Pair<String,\
    \ Double> strongest = new Pair<>(\"\", -1D);\n        for (String extension :\
    \ extensions) {\n            int caps = 0;\n            int smalls = 0;\n    \
    \        for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   smalls++;\n                }\n            }\n            if (caps - smalls\
    \ > strongest.getValue1()) {\n                strongest = new Pair<>(extension,\
    \ (double)caps - smalls);\n            }\n        }\n        return class_name\
    \ + \".\" + strongest.getValue0();", "        String str = \"\";\n        int\
    \ count = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n        \
    \    int cnt = 0;\n            for (int j = 0; j < extensions.get(i).length();\
    \ j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    cnt++;\n                }\n            }\n          \
    \  if (cnt - (extensions.get(i).length() - cnt) > count) {\n                count\
    \ = cnt - (extensions.get(i).length() - cnt);\n                str = extensions.get(i);\n\
    \            }\n        }\n        return class_name + \".\" + str;", "      double\
    \ maxValue = 0;\n      String maxName = \"\";\n      for (String extension : extensions)\
    \ {\n        double strength = findStrength(extension);\n        if (strength\
    \ > maxValue) {\n          maxValue = strength;\n          maxName = extension;\n\
    \        }\n      }\n      return class_name + \".\" + maxName;", '        return
    "";', "        int max = 0;\n        int k = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            int count = 0;\n            int lower = 0;\n           \
    \ for (int j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    count++;\n                } else {\n                \
    \    lower++;\n                }\n            }\n            if (max < count -\
    \ lower) {\n                max = count - lower;\n                k = i;\n   \
    \         }\n        }\n        return class_name + \".\" + extensions.get(k);",
  "        // write your answer between //~~~~~ and //~~~~~\n        class Ext {\n\
    \            String name;\n            int strength;\n            public Ext(String\
    \ name, int strength) {\n                this.name = name;\n                this.strength\
    \ = strength;\n            }\n        }\n        Ext best = new Ext(\"\", -100);\n\
    \        for (String ext : extensions) {\n            int caps = 0;\n        \
    \    int smal = 0;\n            for (int i = 0; i < ext.length(); i++) {\n   \
    \             char c = ext.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   smal++;\n                }\n            }\n            int strength = caps\
    \ - smal;\n            if (strength > best.strength) {\n                best =\
    \ new Ext(ext, strength);\n            }\n        }\n        String r = class_name\
    \ + \".\" + best.name;\n        //~~~\n        return r;\n        //~~~", "  \
    \      // Enter your code here\n        return null;", "        // place your\
    \ code here\n        int strength = 0;\n        String extension = \"\";\n   \
    \     for (String ext : extensions) {\n            int cap = (int) ext.chars().filter(Character::isUpperCase).count();\n\
    \            int sm = (int) ext.chars().filter(Character::isLowerCase).count();\n\
    \            int new_strength = cap - sm;\n            if (new_strength > strength)\
    \ {\n                strength = new_strength;\n                extension = ext;\n\
    \            }\n        }\n        return class_name + \".\" + extension;", " \
    \       String s = \"\";\n        //char[] chars = extensions.toCharArray();\n\
    \        int max = Integer.MIN_VALUE;\n        int max_pos = 0;\n        int max_len\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            char[]\
    \ chars = extensions.get(i).toCharArray();\n            int num_caps = 0;\n  \
    \          int num_small = 0;\n            for (int j = 0; j < chars.length; j++)\
    \ {\n                if (Character.isUpperCase(chars[j])) {\n                \
    \    num_caps++;\n                } else {\n                    num_small++;\n\
    \                }\n            }\n            int strength = num_caps - num_small;\n\
    \            if (strength > max) {\n                max = strength;\n        \
    \        max_pos = i;\n                max_len = extensions.get(i).length();\n\
    \            } else if (strength == max) {\n                if (extensions.get(i).length()\
    \ > max_len) {\n                    max_pos = i;\n                    max_len\
    \ = extensions.get(i).length();\n                }\n            }\n        }\n\
    \        s = String.format(\"%s.%s\", class_name, extensions.get(max_pos));\n\
    \        return s;", "\tString ret = \"\";\n\tdouble strength = 0;\n\tfor (String\
    \ ext : extensions) {\n\t    int caps = 0;\n\t    int smalls = 0;\n\t    for (int\
    \ i = 0; i < ext.length(); i++) {\n\t\tif (Character.isUpperCase(ext.charAt(i)))\n\
    \t\t    caps++;\n\t\telse\n\t\t    smalls++;\n\t    }\n\t    double newStrength\
    \ = (double)caps/(double)smalls;\n\t    if (newStrength > strength) {\n\t\tstrength\
    \ = newStrength;\n\t\tret = class_name + \".\" + ext;\n\t    }\n\t}\n\treturn\
    \ ret;", '        // your code here', "        // Your code goes here\n      \
    \  String strongestExtension = \"\";\n        int numCaps = 0;\n        int numLower\
    \ = 0;\n        float str = 0;\n        for (String ext: extensions) {\n     \
    \       for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    numCaps++;\n                } else {\n              \
    \      numLower++;\n                }\n            }\n            if (numCaps\
    \ - numLower > str) {\n                str = numCaps - numLower;\n           \
    \     strongestExtension = ext;\n            }\n            numCaps = 0;\n   \
    \         numLower = 0;\n        }\n        return class_name + \".\" + strongestExtension;",
  "        // >>> StrongestExtension((\"Slices\"), (new ArrayList<String>(Arrays.asList((String)\"\
    SErviNGSliCes\", (String)\"Cheese\", (String)\"StuFfed\"))))\n        // (\"Slices.SErviNGSliCes\"\
    )\n        String strongest_extension = \"\";\n        int largest_extension_strength\
    \ = 0;\n        for (String extension : extensions) {\n            int extension_strength\
    \ = getExtensionStrength(extension);\n            if (extension_strength > largest_extension_strength)\
    \ {\n                largest_extension_strength = extension_strength;\n      \
    \          strongest_extension = extension;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension;", '        return class_name
    + "." + extensions.stream().reduce((a, b) -> compareExtensions(a, b)).get();',
  "        int best_strength = 0;\n        String best_extension = \"\";\n       \
    \ for (String extension : extensions) {\n            int strength = extension.replaceAll(\"\
    [^A-Z]\", \"\").length() - extension.replaceAll(\"[^a-z]\", \"\").length();\n\
    \            if (strength > best_strength) {\n                best_strength =\
    \ strength;\n                best_extension = extension;\n            }\n    \
    \    }\n        return class_name + \".\" + best_extension;", "        String\
    \ strongest_extension = \"\";\n        if (extensions == null || extensions.size()\
    \ == 0) {\n            return strongest_extension;\n        }\n        String\
    \ r = \"\";\n        int strength = 0;\n        for (String extension : extensions)\
    \ {\n            int upper_case_count = extension.replaceAll(\"[^A-Z]\", \"\"\
    ).length();\n            int lower_case_count = extension.replaceAll(\"[^a-z]\"\
    , \"\").length();\n            if (strength < upper_case_count - lower_case_count)\
    \ {\n                strength = upper_case_count - lower_case_count;\n       \
    \         r = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + r;", "        String str = \"\";\n        return str;", "        //\
    \ Write your code here.\n        return \"\";", "        int best_diff = Integer.MIN_VALUE;\n\
    \        String best_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int upper = 0;\n            int lower = 0;\n            for (int\
    \ i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ upper++;\n                else lower++;\n            }\n            int diff\
    \ = upper - lower;\n            if (diff > best_diff) {\n                best_diff\
    \ = diff;\n                best_extension = extension;\n            }\n      \
    \  }\n        return class_name + \".\" + best_extension;", "        class Object\
    \ {\n            int strength(String input) {\n                int cap = input.chars().filter(Character::isUpperCase).sum();\n\
    \                int small = input.chars().filter(Character::isLowerCase).sum();\n\
    \                return cap - small;\n            }\n        }\n        ArrayList<Tuple2<String,\
    \ Integer>> extensions_strengths = new ArrayList<Tuple2<String, Integer>>();\n\
    \        Object o = new Object();\n        for (String extension : extensions)\
    \ {\n            extensions_strengths.add(Tuple.with(extension, o.strength(extension)));\n\
    \        }\n        extensions_strengths.sort((a, b) -> {\n            if (a.getValue1()\
    \ > b.getValue1()) {\n                return -1;\n            } else if (a.getValue1()\
    \ < b.getValue1()) {\n                return 1;\n            } else {\n      \
    \          return 0;\n            }\n        });\n        String strongest_extension\
    \ = \"\";\n        for (Tuple2<String, Integer> t : extensions_strengths) {\n\
    \            strongest_extension = t.getValue0();\n            break;\n      \
    \  }\n        return class_name + \".\" + strongest_extension;", "        String\
    \ res=\"\";\n        double max=Double.MIN_VALUE;\n        String str=\"\";\n\
    \        for(String ext:extensions){\n            double tmp = getExtStr(ext);\n\
    \            if(tmp>max){\n                max=tmp;\n                str=ext;\n\
    \            }\n        }\n        res=class_name+\".\"+str;\n        return res;",
  "        // >>> YOUR CODE HERE <<<\n        if (extensions.size() == 0) {\n    \
    \        return class_name;\n        }\n        int strength = Integer.MIN_VALUE;\n\
    \        String strongest = \"\";\n        for (String s : extensions) {\n   \
    \         int cap = (int)s.chars().filter(c -> Character.isUpperCase(c)).count();\n\
    \            int sm = (int)s.chars().filter(c -> Character.isLowerCase(c)).count();\n\
    \            int diff = cap - sm;\n            if (diff > strength) {\n      \
    \          strength = diff;\n                strongest = s;\n            }\n \
    \       }\n        return class_name + \".\" + strongest;", "        String strongest_extension\
    \ = \"\";\n        Double strength = -1.0;\n        for (String ext : extensions)\
    \ {\n            Double new_strength = strength(ext);\n            if (new_strength\
    \ > strength) {\n                strength = new_strength;\n                strongest_extension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        int greatest = 0;\n        int greatest_index = 0;\n        for (int i\
    \ = 0; i < extensions.size(); i++) {\n            int difference = 0;\n      \
    \      for (int j = 0; j < extensions.get(i).length(); j++) {\n              \
    \  if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n               \
    \     difference += 1;\n                } else {\n                    difference\
    \ -= 1;\n                }\n            }\n            if (difference > greatest)\
    \ {\n                greatest = difference;\n                greatest_index =\
    \ i;\n            }\n        }\n        return class_name + \".\" + extensions.get(greatest_index);",
  "        // <<< Complete the function\n        int strength = -1000;\n        String\
    \ strongest_extension = null;\n        for (String ext: extensions) {\n      \
    \      int ext_strength = count_uppercase(ext) - count_lowercase(ext);\n     \
    \       if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                strongest_extension = ext;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension;", "        int maxi = -1;\n\
    \        String result = class_name;\n        for (String e : extensions) {\n\
    \            int cap = (int)e.chars().filter(c -> Character.isUpperCase(c)).count();\n\
    \            int sm = (int)e.chars().filter(c -> Character.isLowerCase(c)).count();\n\
    \            if (cap - sm > maxi) {\n                maxi = cap - sm;\n      \
    \          result = class_name + \".\" + e;\n            }\n        }\n      \
    \  return result;", "        int best_strength = 0;\n        String best_extension\
    \ = \"\";\n        for (String e : extensions) {\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int i = 0; i < e.length(); i++) {\n\
    \                if (Character.isUpperCase(e.charAt(i))) {\n                 \
    \   cap++;\n                } else {\n                    sm++;\n            \
    \    }\n            }\n            int strength = cap - sm;\n            if (strength\
    \ > best_strength) {\n                best_strength = strength;\n            \
    \    best_extension = e;\n            }\n        }\n        return String.format(\"\
    %s.%s\", class_name, best_extension);", '        return null;', "        return\
    \ class_name + \".\" + Collections.max(extensions, (a, b) -> {\n            return\
    \ strength(a) - strength(b);\n        });", "        // Fill in the code for this\
    \ function\n        return \"\";", "        int max_strength = Integer.MIN_VALUE;\n\
    \        String max_strength_extension = \"\";\n        for (String extension\
    \ : extensions) {\n            int strength = 0;\n            for (int i = 0;\
    \ i < extension.length(); i++) {\n                char ch = extension.charAt(i);\n\
    \                if (Character.isUpperCase(ch))\n                    strength++;\n\
    \                else\n                    strength--;\n            }\n      \
    \      if (strength > max_strength) {\n                max_strength = strength;\n\
    \                max_strength_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + max_strength_extension;", "        int max_strength\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            int up = 0;\n            int low = 0;\n            for (int\
    \ j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    up++;\n                } else {\n                   \
    \ low++;\n                }\n            }\n            int strength = up - low;\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(max_index);", "        int max_cap = 0;\n        int\
    \ max_sm = 0;\n        String max_ext = \"\";\n        for (String s : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (int i\
    \ = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > max_cap\
    \ - max_sm) {\n                max_cap = cap;\n                max_sm = sm;\n\
    \                max_ext = s;\n            }\n        }\n        return class_name\
    \ + \".\" + max_ext;", "        // WRITE YOUR CODE HERE\n        // USE THE SAME\
    \ FUNCTION NAME ABOVE\n        // DO NOT DELETE COMMENTS\n        String strongest_extension\
    \ = \"\";\n        String strongest_name = \"\";\n        int strongest_strength\
    \ = 0;\n        for (String ext : extensions) {\n            int strength = 0;\n\
    \            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest_extension = ext;\n      \
    \          strongest_strength = strength;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", '        return "";', "        //\
    \ Take your answer from the string object class_name and append to it the \n \
    \       // strongest extension.\n        // Since each extension is loaded into\
    \ your class, you can create a method \n        // that returns the strongest\
    \ extension.\n        // The returned extension will be accessed by appending\
    \ a \".\" to the string \n        // that is given to the method. So, if you are\
    \ given the class name \"my_class\"\n        // and the strongest extension is\
    \ \"AA\", then your method should return \n        // \"my_class.AA\".\n     \
    \   // To access the first extension in the array list, you would write:\n   \
    \     // extensions.get(0);\n        // To get the length of the array list, you\
    \ would write:\n        // extensions.size();\n        // You are given the following\
    \ method for getting the strength of the extension.\n        // >>> GetStrength(\"\
    Be\")\n        // 0.1\n        // >>> GetStrength(\"CC\")\n        // 0.0\n  \
    \      // You can use a hash map to store the strength and the extension.\n  \
    \      // Then, you can compare each strength and return the extension with the\
    \ highest\n        // strength.\n        String classandstrongestextension = class_name;\n\
    \        int numOfExtensions = extensions.size();\n        double largestStrength\
    \ = 0.0;\n        double strengthOfCurrentExtension = 0.0;\n        String strongestExtension\
    \ = \"\";\n        HashMap<String, Double> strengtOfExtension = new HashMap<String,\
    \ Double>();\n        for (int i = 0; i < numOfExtensions; i++) {\n          \
    \  strengthOfCurrentExtension = GetStrength(extensions.get(i));\n            strengtOfExtension.put(extensions.get(i),\
    \ strengthOfCurrentExtension);\n            if (strengthOfCurrentExtension > largestStrength)\
    \ {\n                largestStrength = strengthOfCurrentExtension;\n         \
    \       strongestExtension = extensions.get(i);\n            }\n        }\n  \
    \      classandstrongestextension = class_name + \".\" + strongestExtension;\n\
    \        return classandstrongestextension;", '        return "";', "        String\
    \ strongest = \"\";\n        double strength = 0;\n        for (String ext : extensions)\
    \ {\n            double tmp = strength(ext);\n            if (tmp > strength)\
    \ {\n                strength = tmp;\n                strongest = ext;\n     \
    \       }\n        }\n        return class_name + \".\" + strongest;", "     \
    \   double max_strength = Double.NEGATIVE_INFINITY;\n        String max_extension\
    \ = null;\n        for (String extension : extensions) {\n            double strength\
    \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       strength += Character.isUpperCase(extension.charAt(i)) ? 1 : -1;\n   \
    \         }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_extension = extension;\n            }\n   \
    \     }\n        return class_name + \".\" + max_extension;", "        // Write\
    \ your code here\n        int CAP = 0;\n        int SM = 0;\n        double highest\
    \ = 0;\n        int highestInd = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            CAP = 0;\n            SM = 0;\n            for (int j =\
    \ 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    CAP++;\n                } else {\n                  \
    \  SM++;\n                }\n            }\n            if (highest < (CAP - SM))\
    \ {\n                highest = CAP - SM;\n                highestInd = i;\n  \
    \          }\n        }\n        return class_name + \".\" + extensions.get(highestInd);",
  "        System.out.println(\"class_name = \" + class_name);\n        return class_name;",
  "      double strength = 0.0;\n      int uppercase = 0;\n      int lowercase = 0;\n\
    \      String strongest_extension = \"\";\n      for (String s : extensions) {\n\
    \        int local_uppercase = 0;\n        int local_lowercase = 0;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n          if (Character.isUpperCase(s.charAt(i)))\
    \ {\n            local_uppercase++;\n          } else {\n            local_lowercase++;\n\
    \          }\n        }\n        double local_strength = (double)local_uppercase\
    \ / (double)local_lowercase;\n        if (local_strength > strength) {\n     \
    \     uppercase = local_uppercase;\n          lowercase = local_lowercase;\n \
    \         strength = local_strength;\n          strongest_extension = s;\n   \
    \     }\n      }\n      return class_name + \".\" + strongest_extension;", " \
    \       //Take in class name and extensions\n        //Get strength of every extension\n\
    \        //Choose strongest extension\n        //Return name of class and strongest\
    \ extension\n        int highestStrength = 0;\n        int holderStrength = 0;\n\
    \        String strongestExtension = \"\";\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            holderStrength = getStrength(extensions.get(i));\n     \
    \       if (holderStrength > highestStrength) {\n                highestStrength\
    \ = holderStrength;\n                strongestExtension = extensions.get(i);\n\
    \            }\n        }\n        return class_name + \".\" + strongestExtension;",
  "        BigDecimal strongest_strength = new BigDecimal(-100000);\n        String\
    \ strongest_extension = \"\";\n        for (String extension : extensions) {\n\
    \            String extension_name = extension.toLowerCase();\n            int\
    \ cap = extension_name.replaceAll(\"[^A-Z]\", \"\").length();\n            int\
    \ sm = extension_name.replaceAll(\"[^a-z]\", \"\").length();\n            BigDecimal\
    \ extension_strength = new BigDecimal(cap - sm);\n            if (extension_strength.compareTo(strongest_strength)\
    \ > 0) {\n                strongest_strength = extension_strength;\n         \
    \       strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        float Max = 0;\n      \
    \  String result = \"\";\n        for (String el : extensions) {\n           \
    \ float tmp = 0;\n            for (int i = 0; i < el.length(); i++) {\n      \
    \          if (Character.isUpperCase(el.charAt(i))) {\n                    tmp\
    \ += 1;\n                } else {\n                    tmp -= 1;\n           \
    \     }\n            }\n            if (tmp > Max) {\n                Max = tmp;\n\
    \                result = el;\n            }\n        }\n        return class_name\
    \ + \".\" + result;", "        // your code here\n        return \"\";", "   \
    \     String ext = extensions.get(0);\n        String strongest = ext;\n     \
    \   float curr = 0;\n        float strongest_val = 0;\n        for (int i = 0;\
    \ i < extensions.size(); i++) {\n            curr = get_strength(extensions.get(i));\n\
    \            if (curr > strongest_val) {\n                strongest_val = curr;\n\
    \                strongest = extensions.get(i);\n            }\n        }\n  \
    \      return class_name + \".\" + strongest;", "        double maxStrength =\
    \ 0;\n        String retExtension = \"\";\n        for (String extension : extensions)\
    \ {\n            int cap = (int)extension.chars().filter(Character::isUpperCase).count();\n\
    \            int sm = (int)extension.chars().filter(Character::isLowerCase).count();\n\
    \            double strength = cap - sm;\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                retExtension = extension;\n\
    \            }\n        }\n        String ret = String.format(\"%s.%s\", class_name,\
    \ retExtension);\n        return ret;", "        // Insert your code here\n  \
    \      char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n     \
    \   char[] Alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n        ArrayList<String>\
    \ temp=new ArrayList<String>();\n        int longest_run_of_letter=0;\n      \
    \  int longest_run_of_Cap=0;\n        double highest_score=0;\n        String\
    \ strongest_extension=\"\";\n        for(int i=0;i<extensions.size();i++){\n \
    \           char[] current_char=extensions.get(i).toCharArray();\n           \
    \ String current_extension=extensions.get(i);\n            int cap_counter=0;\n\
    \            int sm_counter=0;\n            for(int j=0;j<current_char.length;j++){\n\
    \                int temp_run_of_caps=0;\n                int temp_run_of_sm=0;\n\
    \                for(int a=0;a<alphabet.length;a++){\n                    if(current_char[j]==alphabet[a]){\n\
    \                        temp_run_of_sm++;\n                        sm_counter++;\n\
    \                        if(temp_run_of_sm>longest_run_of_letter){\n         \
    \                   longest_run_of_letter=temp_run_of_sm;\n                  \
    \      }\n                    }\n                }\n                for(int b=0;b<Alphabet.length;b++){\n\
    \                    if(current_char[j]==Alphabet[b]){\n                     \
    \   temp_run_of_caps++;\n                        cap_counter++;\n            \
    \            if(temp_run_of_caps>longest_run_of_Cap){\n                      \
    \      longest_run_of_Cap=temp_run_of_caps;\n                        }\n     \
    \               }\n                }\n            }\n            double current_score=cap_counter-sm_counter;\n\
    \            if(current_score>highest_score){\n                highest_score=current_score;\n\
    \                strongest_extension=current_extension;\n            }\n     \
    \   }\n        return class_name+\".\"+strongest_extension", "        int max_strength\
    \ = 0;\n        String extension = null;\n        for (String string : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < string.length();\
    \ i++) {\n                char c = string.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  extension = string;\n            }\n        }\n        return class_name +\
    \ \".\" + extension;", "        final int class_name_length = class_name.length();\n\
    \        final int n = extensions.size();\n        int max_lowercase_chars = 0;\n\
    \        int max_uppercase_chars = 0;\n        String max_string = \"\";\n   \
    \     for (int i = 0; i < n; i++) {\n            String extension = extensions.get(i);\n\
    \            final int extension_length = extension.length();\n            int\
    \ lowercase_chars = 0;\n            int uppercase_chars = 0;\n            for\
    \ (int j = 0; j < extension_length; j++) {\n                char c = extension.charAt(j);\n\
    \                if (Character.isUpperCase(c)) {\n                    uppercase_chars++;\n\
    \                } else {\n                    lowercase_chars++;\n          \
    \      }\n            }\n            if (lowercase_chars > max_lowercase_chars\
    \ ||\n                (lowercase_chars == max_lowercase_chars &&\n           \
    \      uppercase_chars > max_uppercase_chars)) {\n                max_lowercase_chars\
    \ = lowercase_chars;\n                max_uppercase_chars = uppercase_chars;\n\
    \                max_string = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + max_string;", "      String result = class_name + \".\"\
    \ + extensions.get(0);\n      float strongest = 0;\n      for (String ext : extensions)\
    \ {\n        String extension = ext.toLowerCase();\n        float cap = 0;\n \
    \       float sm = 0;\n        for (int i = 0; i < extension.length(); i++) {\n\
    \          char c = extension.charAt(i);\n          if (Character.isUpperCase(c))\
    \ {\n            cap++;\n          } else {\n            sm++;\n          }\n\
    \        }\n        float strength = cap - sm;\n        if (strength > strongest)\
    \ {\n          strongest = strength;\n          result = class_name + \".\" +\
    \ ext;\n        }\n      }\n      return result;", "\t\t// !! Write your code\
    \ below.\n\t\t// The code below shows how to use the class loader to load a class.\n\
    \t\t// Do not change the code below.\n\t\t// You will need to change the code\
    \ above.\n\t\tint max = -1;\n\t\tString strongest = \"\";\n\t\tint temp = 0;\n\
    \t\tfor(String s : extensions) {\n\t\t\ttemp = 0;\n\t\t\tfor(int i = 0; i < s.length();\
    \ i++) {\n\t\t\t\tif(Character.isUpperCase(s.charAt(i))) {\n\t\t\t\t\ttemp++;\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttemp--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(temp\
    \ > max) {\n\t\t\t\tmax = temp;\n\t\t\t\tstrongest = s;\n\t\t\t}\n\t\t}\n\t\t\n\
    \t\t\n\t\t\n\t\treturn class_name + \".\" + strongest;", "        // Your code\
    \ goes here\n        return null;", "        // Your code here\n        return\
    \ \"\";", "        // IMPLEMENT ME\n        return \"\";", "        if (extensions.size()\
    \ == 0) {\n            return class_name;\n        }\n        int max = 0;\n \
    \       String max_str = \"\";\n        for (String extension : extensions) {\n\
    \            int caps = 0;\n            int smalls = 0;\n            for (int\
    \ i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   smalls++;\n                }\n            }\n            if (caps - smalls\
    \ > max) {\n                max = caps - smalls;\n                max_str = extension;\n\
    \            }\n        }\n        return class_name + \".\" + max_str;", "  \
    \      String strongest_extension = null;\n        // make sure the name of the\
    \ class is in the right format\n        if (!class_name.matches(\"^[A-Z]{1}[a-zA-Z0-9]+$\"\
    )) {\n            return null;\n        }\n        // make sure the extensions\
    \ are in the right format\n        for (String ext : extensions) {\n         \
    \   if (!ext.matches(\"^[a-zA-Z]+$\")) {\n                return null;\n     \
    \       }\n        }\n        // Do the work\n        float strongest_strength\
    \ = -1;\n        for (String ext : extensions) {\n            int uppercase_letters\
    \ = 0;\n            int lowercase_letters = 0;\n            for (int i = 0; i\
    \ < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    uppercase_letters++;\n                } else {\n    \
    \                lowercase_letters++;\n                }\n            }\n    \
    \        float strength = (float) uppercase_letters - (float) lowercase_letters;\n\
    \            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = ext;\n            }\n   \
    \     }\n        return class_name + \".\" + strongest_extension;", "        double\
    \ best_score = 0;\n        String best_extension = \"\";\n        for (String\
    \ extension : extensions) {\n            double score = 0;\n            for (char\
    \ c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    score += 1;\n                } else {\n             \
    \       score -= 1;\n                }\n            }\n            if (score >\
    \ best_score) {\n                best_score = score;\n                best_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ best_extension;", "        String strongest = \"\";\n        double max = Double.MIN_VALUE;\n\
    \        for (String ext : extensions) {\n            double strength = strengthOf(ext);\n\
    \            if (strength > max) {\n                max = strength;\n        \
    \        strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        // returns the string with the strongest extension\n\
    \        // initialize variables that are going to be used\n        String strongest_extension\
    \ = extensions.get(0);\n        double strongest_strength = 0;\n        double\
    \ current_strength = 0;\n        String current_strongest_extension = \"\";\n\
    \        // loop through each extension to determine which one is the strongest\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            // loop through\
    \ each character of the extension\n            for (int j = 0; j < extensions.get(i).length();\
    \ j++) {\n                // if a character is an uppercase letter, increment\
    \ counter\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    current_strength++;\n                }\n            \
    \    // if a character is a lowercase letter, decrement counter\n            \
    \    else if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n        \
    \            current_strength--;\n                }\n            }\n         \
    \   // if the strength of the current extension is greater than the current strongest\
    \ strength, update strength and current strongest extension\n            if (current_strength\
    \ > strongest_strength) {\n                strongest_strength = current_strength;\n\
    \                current_strongest_extension = extensions.get(i);\n          \
    \  }\n            // reset current strength\n            current_strength = 0;\n\
    \        }\n        // return the strongest extension\n        return class_name\
    \ + \".\" + current_strongest_extension;", "        int strength = 0;\n      \
    \  int c = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n       \
    \     int cap = 0;\n            int sm = 0;\n            for (int j = 0; j < extensions.get(i).length();\
    \ j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j)))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (strength < cap - sm)\
    \ {\n                strength = cap - sm;\n                c = i;\n          \
    \  }\n        }\n        return class_name + \".\" + extensions.get(c);", "  \
    \      int MAX = Integer.MIN_VALUE;\n        int EXT_IDX = -1;\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n\
    \            int CAP = 0;\n            int SM = 0;\n            for (int j = 0;\
    \ j < ext.length(); j++) {\n                if (Character.isUpperCase(ext.charAt(j)))\
    \ {\n                    CAP++;\n                } else {\n                  \
    \  SM++;\n                }\n            }\n            if (CAP - SM > MAX) {\n\
    \                MAX = CAP - SM;\n                EXT_IDX = i;\n            }\n\
    \        }\n        return class_name + \".\" + extensions.get(EXT_IDX);", " \
    \       // Fill in code here\n        int len = extensions.size();\n        int\
    \ sum = 0;\n        String strongest_extension = \"\";\n        String extension\
    \ = \"\";\n        for (int i = 0; i < len; i++) {\n            extension = extensions.get(i);\n\
    \            int cap = (int) extension.chars().filter(c -> Character.isUpperCase(c)).count();\n\
    \            int sm = (int) extension.chars().filter(c -> Character.isLowerCase(c)).count();\n\
    \            int strength = cap - sm;\n            if (strength > sum) {\n   \
    \             sum = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        String str = \"\";\n        double max = Double.MIN_VALUE;\n        for\
    \ (String ext : extensions) {\n            int count = 0;\n            for (int\
    \ i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    double cap = count;\n            double sm = ext.length() - count;\n    \
    \        double value = cap - sm;\n            if (value >= max) {\n         \
    \       max = value;\n                str = ext;\n            }\n        }\n \
    \       return class_name + \".\" + str;", "        int max_strength = Integer.MIN_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String extension : extensions)\
    \ {\n            int strength = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    strength++;\n                } else {\n                 \
    \   strength--;\n                }\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Extract the number of the uppercase letters\
    \ from the extensions\n        class UppercaseCount implements Function<String,\
    \ Integer> {\n            public Integer apply(String extension) {\n         \
    \       // The number of the uppercase letters in the extension\n            \
    \    return (int)extension.chars().filter(Character::isUpperCase).count();\n \
    \           }\n        }\n        // Extract the number of the lowercase letters\
    \ from the extensions\n        class LowercaseCount implements Function<String,\
    \ Integer> {\n            public Integer apply(String extension) {\n         \
    \       // The number of the lowercase letters in the extension\n            \
    \    return (int)extension.chars().filter(Character::isLowerCase).count();\n \
    \           }\n        }\n        // Create the a list of the uppercase letter\
    \ counts\n        List<Integer> uppercase_letter_counts = extensions.stream().map(new\
    \ UppercaseCount()).collect(Collectors.toList());\n        // Create the a list\
    \ of the lowercase letter counts\n        List<Integer> lowercase_letter_counts\
    \ = extensions.stream().map(new LowercaseCount()).collect(Collectors.toList());\n\
    \        // Create the a list of the uppercase letter counts\n        List<Double>\
    \ strengths = new ArrayList<Double>();\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            // The strength of the extension\n            double strength\
    \ = uppercase_letter_counts.get(i) - lowercase_letter_counts.get(i);\n       \
    \     // Append the extension strength to the list of the strengths\n        \
    \    strengths.add(strength);\n        }\n        // Find the index of the strongest\
    \ extension\n        int max_strength_index = strengths.indexOf(Collections.max(strengths));\n\
    \        // return the strongest extension\n        return class_name + \".\"\
    \ + extensions.get(max_strength_index);", "        int max_score = Integer.MIN_VALUE;\n\
    \        String strongest_extension = \"\";\n        for (String s : extensions)\
    \ {\n            int score = 0;\n            for (int i = 0; i < s.length(); i++)\
    \ {\n                char c = s.charAt(i);\n                if (Character.isUpperCase(c))\
    \ score++;\n                else score--;\n            }\n            if (score\
    \ > max_score) {\n                max_score = score;\n                strongest_extension\
    \ = s;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension\
    \ = \"\";\n        for (String ext : extensions) {\n            int strength =\
    \ 0;\n            for (int i = 0; i < ext.length(); i++) {\n                if\
    \ (Character.isUpperCase(ext.charAt(i))) {\n                    strength++;\n\
    \                } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength >= maxStrength) {\n                maxStrength\
    \ = strength;\n                strongestExtension = ext;\n            }\n    \
    \    }\n        return String.format(\"%s.%s\", class_name, strongestExtension);",
  "        int max_strength = 0;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions) {\n            int strength = 0;\n \
    \           for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        String ret = class_name;\n\
    \        float max_strength = 0;\n        for (String ext : extensions) {\n  \
    \          float strength = (float)get_strength(ext);\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  ret = class_name + \".\" + ext;\n            }\n        }\n        return ret;",
  '        return "";', "        // start with the first extension.\n        String\
    \ strongest_extension = extensions.get(0);\n        // keep track of the strngth\
    \ of the strongest extension.\n        int max_strength = 0;\n        // loop\
    \ through the list of extensions.\n        for (String extension : extensions)\
    \ {\n            // keep track of the strength of the current extension.\n   \
    \         int strength = 0;\n            // loop through the characters of the\
    \ current extension.\n            for (char character : extension.toCharArray())\
    \ {\n                // if the character is a capital letter, \n             \
    \   // add one to the strength of the current extension.\n                if (Character.isUpperCase(character))\
    \ {\n                    strength++;\n                }\n                // if\
    \ the character is a lowercase letter, \n                // subtract one from\
    \ the strength of the current extension.\n                else if (Character.isLowerCase(character))\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       // if the strength of the current extension is greater than the strength\
    \ of the \n            // strongest extension, the current extension becomes the\
    \ strongest extension.\n            if (strength > max_strength) {\n         \
    \       max_strength = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        // return the strongest extension\n       \
    \ return class_name + \".\" + strongest_extension;", "        double strongest\
    \ = 0;\n        String s = \"\";\n        String strongestExtension = \"\";\n\
    \        int i = 0;\n        for (String ext: extensions) {\n            int upper\
    \ = ext.chars().filter(Character::isUpperCase).sum();\n            int lower =\
    \ ext.chars().filter(Character::isLowerCase).sum();\n            double strength\
    \ = upper - lower;\n            if (strength > strongest) {\n                strongest\
    \ = strength;\n                strongestExtension = ext;\n            }\n    \
    \        i++;\n        }\n        return class_name + \".\" + strongestExtension;",
  "        String result = \"\";\n        double strongest = 0;\n        for (String\
    \ ext : extensions) {\n            double cap = ext.chars().filter(Character::isUpperCase).count();\n\
    \            double sm = ext.chars().filter(Character::isLowerCase).count();\n\
    \            double extStrength = cap - sm;\n            if (extStrength > strongest)\
    \ {\n                strongest = extStrength;\n                result = class_name\
    \ + \".\" + ext;\n            }\n        }\n        return result;", "       \
    \ ArrayList<String> array_list = extensions;\n        // add code here\n     \
    \   return class_name;", "        String strongest = \"\";\n        double strongestStrength\
    \ = -2;\n        double strength;\n        for (String ext : extensions) {\n \
    \           strength = (double)ext.replaceAll(\"[^A-Z]\", \"\").length() - (double)ext.replaceAll(\"\
    [^a-z]\", \"\").length();\n            if (strength > strongestStrength) {\n \
    \               strongestStrength = strength;\n                strongest = ext;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", '        return
    null;', "        // >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"\
    AA\", (String)\"Be\", (String)\"CC\"))))\n        // (\"my_class.AA\")\n     \
    \   double strongest = Double.MIN_VALUE;\n        String strongest_name = \"\"\
    ;\n        for (String extension : extensions) {\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int i = 0; i < extension.length(); i++)\
    \ {\n                char c = extension.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            double strength = cap\
    \ - sm;\n            if (strength > strongest) {\n                strongest =\
    \ strength;\n                strongest_name = extension;\n            }\n    \
    \    }\n        return String.format(\"%s.%s\", class_name, strongest_name);",
  "        float max = -10000;\n        int index = 0;\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            int caps = 0;\n            int sm =\
    \ 0;\n            for (int j = 0; j < extensions.get(i).length(); j++) {\n   \
    \             if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n    \
    \                caps++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            float current_extension_strength\
    \ = (float) caps - (float) sm;\n            if (current_extension_strength > max)\
    \ {\n                max = current_extension_strength;\n                index\
    \ = i;\n            }\n        }\n        return class_name + \".\" + extensions.get(index);",
  "        double strong = 0;\n        String strong_ext = \"\";\n        for (String\
    \ ext : extensions) {\n            double ext_str = 0;\n            for (int i\
    \ = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\n\
    \                    ext_str++;\n                else\n                    ext_str--;\n\
    \            }\n            if (Math.abs(ext_str) > strong) {\n              \
    \  strong = Math.abs(ext_str);\n                strong_ext = ext;\n          \
    \  }\n        }\n        return class_name + \".\" + strong_ext;", "        int\
    \ maxStrength = 0;\n        String strongest = \"\";\n        for (String extension\
    \ : extensions) {\n            int lowercase = 0;\n            int uppercase =\
    \ 0;\n            for (int i = 0; i < extension.length(); i++) {\n           \
    \     if (Character.isUpperCase(extension.charAt(i))) {\n                    uppercase++;\n\
    \                } else {\n                    lowercase++;\n                }\n\
    \            }\n            int strength = uppercase - lowercase;\n          \
    \  if (strength > maxStrength) {\n                maxStrength = strength;\n  \
    \              strongest = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;", '        return "";', '        return null;',
  "        // Implement\n        class Extension {\n            public String name;\n\
    \            public double strength;\n            public Extension(String name,\
    \ double strength) {\n                this.name = name;\n                this.strength\
    \ = strength;\n            }\n        }\n        ArrayList<Extension> strengthExtensions\
    \ = new ArrayList<Extension>();\n        for (String extension : extensions) {\n\
    \            double strength = 0;\n            for (char ch : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(ch)) {\n                    strength\
    \ += 1;\n                } else {\n                    strength -= 1;\n      \
    \          }\n            }\n            strengthExtensions.add(new Extension(extension,\
    \ strength));\n        }\n        Collections.sort(strengthExtensions, (a, b)\
    \ -> a.strength < b.strength ? 1 : a.strength > b.strength ? -1 : 0);\n      \
    \  Extension strongestExtension = strengthExtensions.get(0);\n        return class_name\
    \ + \".\" + strongestExtension.name;", "        if (extensions.size() == 0) {\n\
    \            return class_name;\n        }\n        String extension = \"\";\n\
    \        double max_strength = 0;\n        for (String ext : extensions) {\n \
    \           double strength = (double) ext.replaceAll(\"[^A-Z]\", \"\").length()\
    \ -\n                (double) ext.replaceAll(\"[^a-z]\", \"\").length();\n   \
    \         if (strength > max_strength) {\n                max_strength = strength;\n\
    \                extension = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        // Get the class object\n        // Check if\
    \ the class object is null, return an error if it is\n        // If the class\
    \ object is not null, continue\n        // Get the number of extensions\n    \
    \    // Check if there are extensions, return an error if there aren't\n     \
    \   // For each extension, calculate its strength\n        // Remember the extension\
    \ with the highest strength\n        // Return the class name and the extension\
    \ with the highest strength", "        // calculate extension strength\n     \
    \   // return class_name + \".\" + strongestExtension\n        return null;",
  "        // fill-in\n        return class_name + \".\" + extensions.get(0);", '        return
    null;', "        String best_extension = \"\";\n        int best_score = 0;\n\
    \        for (String ext : extensions) {\n            int score = getScore(ext);\n\
    \            if (score > best_score) {\n                best_score = score;\n\
    \                best_extension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + best_extension;", "        // Write your code here\n  \
    \      // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int number_of_upper_case_letters;\n\
    \        int number_of_lower_case_letters;\n        double min_strength;\n   \
    \     int min_strength_index;\n        ArrayList<Double> strength_array_list =\
    \ new ArrayList<Double>();\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            number_of_upper_case_letters = extensions.get(i).replaceAll(\"\
    [^A-Z]\", \"\").length();\n            number_of_lower_case_letters = extensions.get(i).replaceAll(\"\
    [^a-z]\", \"\").length();\n            strength_array_list.add((double) number_of_upper_case_letters\
    \ - (double) number_of_lower_case_letters);\n        }\n        min_strength =\
    \ Collections.min(strength_array_list);\n        min_strength_index = strength_array_list.indexOf(min_strength);\n\
    \        return class_name + \".\" + extensions.get(min_strength_index);", '        //
    >>> Write your code here <<<', "        String strongest_extension = extensions.get(0);\n\
    \        double strength = 0.0;\n        for (String extension : extensions) {\n\
    \            double strength_temp = getStrength(extension);\n            if (strength_temp\
    \ > strength) {\n                strength = strength_temp;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double best_strength = -1e10;\n        String\
    \ best_extension = \"\";\n        for (String extension : extensions) {\n    \
    \        int upper = 0;\n            int lower = 0;\n            for (int k =\
    \ 0; k < extension.length(); k++) {\n                if (Character.isUpperCase(extension.charAt(k)))\
    \ {\n                    upper++;\n                } else {\n                \
    \    lower++;\n                }\n            }\n            double strength =\
    \ upper - lower;\n            if (strength > best_strength) {\n              \
    \  best_strength = strength;\n                best_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + best_extension;",
  '        return "";', '        // write code here', "        if (extensions.size()\
    \ == 0) return class_name;\n        String[] s = extensions.toArray(new String[extensions.size()]);\n\
    \        int curr = -1;\n        String strongest = \"\";\n        for (int i\
    \ = 0; i < s.length; i++) {\n            int strength = 0;\n            for (int\
    \ j = 0; j < s[i].length(); j++) {\n                if (Character.isUpperCase(s[i].charAt(j)))\
    \ strength++;\n                else strength--;\n            }\n            if\
    \ (strength > curr) {\n                curr = strength;\n                strongest\
    \ = s[i];\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        int max_strength = 0;\n        int strength;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            strength\
    \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       if (Character.isUpperCase(extension.charAt(i))) {\n                  \
    \  strength++;\n                } else {\n                    strength--;\n  \
    \              }\n            }\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strongest = 0;\n        String strongest_extension\
    \ = \"\";\n        for (String extension : extensions) {\n            int caps\
    \ = (int)extension.chars().filter(Character::isUpperCase).count();\n         \
    \   int smalls = (int)extension.chars().filter(Character::isLowerCase).count();\n\
    \            double strength = (double)caps - (double)smalls;\n            if\
    \ (strength > strongest) {\n                strongest = strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        // return \"\";\n     \
    \   // BEGIN SOLUTION\n        int max_strength = -1;\n        String max_name\
    \ = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n\
    \            int lower = 0;\n            for (int i = 0; i < ext.length(); i++)\
    \ {\n                if (Character.isUpperCase(ext.charAt(i))) {\n           \
    \         upper++;\n                } else {\n                    lower++;\n \
    \               }\n            }\n            int strength = upper - lower;\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                max_name = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + max_name;\n        // END SOLUTION", '        return "";', "     \
    \   // >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"\
    AA\", (String)\"Be\", (String)\"CC\"))))\n        // (\"my_class.AA\")\n     \
    \   return \"my_class.AA\";", "        double strength = 0;\n        int index\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            double\
    \ current_strength = (double)extensions.get(i).replaceAll(\"[^A-Z]\", \"\").length()\
    \ - (double)extensions.get(i).replaceAll(\"[^a-z]\", \"\").length();\n       \
    \     if (current_strength > strength) {\n                strength = current_strength;\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(index);", "        ArrayList<Pair<String, Integer>>\
    \ strengths = new ArrayList<Pair<String, Integer>>();\n        for (String ext\
    \ : extensions) {\n            int strength = 0;\n            for (int i = 0;\
    \ i < ext.length(); i++) {\n                char c = ext.charAt(i);\n        \
    \        if (Character.isUpperCase(c)) {\n                    strength += 1;\n\
    \                } else {\n                    strength -= 1;\n              \
    \  }\n            }\n            strengths.add(new Pair<String, Integer>(ext,\
    \ strength));\n        }\n        Collections.sort(strengths, new Comparator<Pair<String,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<String,\
    \ Integer> left, Pair<String, Integer> right) {\n                if (left.getValue1()\
    \ < right.getValue1()) {\n                    return 1;\n                } else\
    \ if (left.getValue1() > right.getValue1()) {\n                    return -1;\n\
    \                } else {\n                    return 0;\n                }\n\
    \            }\n        });\n        return class_name + \".\" + strengths.get(0).getValue0();",
  "        //JavaTuples.Tuple2<String, Integer> tuple = new Tuple2<String, Integer>(\"\
    hello\", 2);\n        //tuple.setValue0(\"new value\");\n        //System.out.println(tuple.getValue0());\n\
    \        List<Tuple2<String, Integer>> tuples = new ArrayList<Tuple2<String, Integer>>();\n\
    \        int max = 0;\n        String maxStr = \"\";\n        for (String ext\
    \ : extensions) {\n            int caps = 0;\n            int smalls = 0;\n  \
    \          for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   smalls++;\n                }\n            }\n            tuples.add(new Tuple2<String,\
    \ Integer>(ext, caps - smalls));\n            if (caps - smalls > max) {\n   \
    \             max = caps - smalls;\n                maxStr = ext;\n          \
    \  }\n        }\n        for (Tuple2<String, Integer> tuple : tuples) {\n    \
    \        if (tuple.getValue1() == max) {\n                if (tuple.getValue0().compareTo(maxStr)\
    \ < 0) {\n                    maxStr = tuple.getValue0();\n                }\n\
    \            }\n        }\n        return class_name + \".\" + maxStr;", "   \
    \     double maxStrength = -1, strength;\n        String extension = \"\", temp;\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            strength =\
    \ getStrength(extensions.get(i));\n            if (strength > maxStrength) {\n\
    \                maxStrength = strength;\n                extension = extensions.get(i);\n\
    \            }\n        }\n        return class_name + \".\" + extension;", " \
    \       int max_strength = 0;\n        String strongest_extension = \"\";\n  \
    \      for (String extension : extensions) {\n            int curr_strength =\
    \ get_strength(extension);\n            if (curr_strength > max_strength) {\n\
    \                max_strength = curr_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        int max = -1;\n        String result = \"\"\
    ;\n        for (String ext : extensions) {\n            int sum = 0;\n       \
    \     int count = 0;\n            for (int i = 0; i < ext.length(); i++) {\n \
    \               if (Character.isUpperCase(ext.charAt(i))) {\n                \
    \    sum += 1;\n                } else {\n                    count += 1;\n  \
    \              }\n            }\n            if (sum - count > max) {\n      \
    \          max = sum - count;\n                result = ext;\n            }\n\
    \        }\n        return class_name + \".\" + result;", "        // Your code\
    \ goes here\n        String strongest = \"\";\n        int strength = 0;\n   \
    \     for (String e : extensions) {\n            int uppers = (int) e.chars().filter(c\
    \ -> Character.isUpperCase(c)).count();\n            int lowers = (int) e.chars().filter(c\
    \ -> Character.isLowerCase(c)).count();\n            int e_strength = uppers -\
    \ lowers;\n            if (e_strength >= strength) {\n                strongest\
    \ = e;\n                strength = e_strength;\n            }\n        }\n   \
    \     return class_name + \".\" + strongest;", "        if (extensions.size()\
    \ == 0) return class_name;\n        String extension = extensions.get(0);\n  \
    \      int strength = getStrength(extension);\n        int sz = extensions.size();\n\
    \        for (int i = 1; i < sz; i++) {\n            int tmp = getStrength(extensions.get(i));\n\
    \            if (tmp > strength) {\n                strength = tmp;\n        \
    \        extension = extensions.get(i);\n            }\n        }\n        return\
    \ class_name + \".\" + extension;", "        String ans = \"\";\n        int max\
    \ = 0;\n        int cur = 0;\n        int uppercase = 0;\n        int lowercase\
    \ = 0;\n        for (String extension : extensions) {\n            uppercase =\
    \ 0;\n            lowercase = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    uppercase++;\n                } else {\n                \
    \    lowercase++;\n                }\n            }\n            cur = uppercase\
    \ - lowercase;\n            if (cur > max) {\n                max = cur;\n   \
    \             ans = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + ans;", "        String strongest_extension = \"\";\n        double\
    \ strongest_extension_strength = 0;\n        for (String extension : extensions)\
    \ {\n            int capital_letter_count = 0;\n            int small_letter_count\
    \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       char current_char = extension.charAt(i);\n                if (Character.isUpperCase(current_char))\
    \ {\n                    capital_letter_count++;\n                } else if (Character.isLowerCase(current_char))\
    \ {\n                    small_letter_count++;\n                }\n          \
    \  }\n            double extension_strength = capital_letter_count - small_letter_count;\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_strength = extension_strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ String.format(\"%s.%s\", class_name, strongest_extension);", '        return
    null;', "        // your code here!\n        return null;", "        String strongest_extension\
    \ = \"\";\n        double strongest_strength = Double.NEGATIVE_INFINITY;\n   \
    \     for (String extension : extensions) {\n            double strength = 0;\n\
    \            for (int i = 0; i < extension.length(); i++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(i))) {\n                    strength++;\n\
    \                } else {\n                    strength--;\n                }\n\
    \            }\n            if (strength > strongest_strength) {\n           \
    \     strongest_strength = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        String extension = \"\";\n        float strength = 0;\n        for (String\
    \ e : extensions) {\n            int CAP = 0;\n            int SM = 0;\n     \
    \       for (int i = 0; i < e.length(); i++) {\n                char c = e.charAt(i);\n\
    \                if (Character.isUpperCase(c)) {\n                    CAP++;\n\
    \                } else {\n                    SM++;\n                }\n    \
    \        }\n            float new_strength = (float) CAP / SM;\n            if\
    \ (strength < new_strength) {\n                strength = new_strength;\n    \
    \            extension = e;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        class C{\n            String name;\n       \
    \     double strength;\n            C(String name,double strength){\n        \
    \        this.name=name;\n                this.strength=strength;\n          \
    \  }\n        }\n        ArrayList<C> a=new ArrayList<>();\n        for(String\
    \ s:extensions){\n            int c=0,l=0;\n            for(int i=0;i<s.length();i++){\n\
    \                if(Character.isUpperCase(s.charAt(i)))c++;\n                else\
    \ l++;\n            }\n            a.add(new C(s,(double)c-l));\n        }\n \
    \       a.sort((x,y)->(int)(x.strength-y.strength));\n        return class_name+\"\
    .\"+a.get(a.size()-1).name;", "        int max = 0;\n        String strongest\
    \ = null;\n        for (String extension : extensions) {\n            int strength\
    \ = 0;\n            for (int i = 0; i < extension.length(); i++) {\n         \
    \       char c = extension.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > max) {\n                max = strength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       int max_strength = 0;\n        int strength = 0;\n        int upcase =\
    \ 0;\n        int lowcase = 0;\n        String ext = \"\";\n        for (String\
    \ ext : extensions) {\n            upcase = 0;\n            lowcase = 0;\n   \
    \         for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n                    upcase++;\n                } else {\n               \
    \     lowcase++;\n                }\n            }\n            strength = upcase\
    \ - lowcase;\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                ext = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + ext;", '        return null;', '        return "";', " \
    \       int sumCap = 0;\n        int sumSm = 0;\n        int sumStr = 0;\n   \
    \     int maxSum = 0;\n        int i = 0;\n        int max = 0;\n        // loop\
    \ through arraylist extensions\n        for (int j = 0; j < extensions.size();\
    \ j++) {\n            // loop through each extension\n            while (i < extensions.get(j).length())\
    \ {\n                // loop through each character\n                if (Character.isUpperCase(extensions.get(j).charAt(i)))\
    \ {\n                    sumCap++;\n                } else {\n               \
    \     sumSm++;\n                }\n                i++;\n            }\n     \
    \       // reset i for next extension\n            i = 0;\n            // get\
    \ fraction for current extension\n            sumStr = sumCap - sumSm;\n     \
    \       // get the largest fraction\n            if (sumStr > maxSum) {\n    \
    \            maxSum = sumStr;\n                max = j;\n            }\n     \
    \       // reset everything for next extension\n            sumCap = 0;\n    \
    \        sumSm = 0;\n            sumStr = 0;\n        }\n        return class_name\
    \ + \".\" + extensions.get(max);", '        throw new RuntimeException("Not implemented");',
  '        // Your code goes here.', "        double strength = 0;\n        String\
    \ strongest_extension = \"\";\n        for (String extension : extensions) {\n\
    \            int count_upper = 0;\n            int count_lower = 0;\n        \
    \    for (char character : extension.toCharArray()) {\n                if (Character.isUpperCase(character))\
    \ {\n                    count_upper++;\n                } else {\n          \
    \          count_lower++;\n                }\n            }\n            double\
    \ temp_strength = (double)count_upper - (double)count_lower;\n            if (temp_strength\
    \ >= strength) {\n                strength = temp_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        int max_extension_index = 0;\n        int max_extension_value\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            int\
    \ upper_case_letters = 0;\n            int lower_case_letters = 0;\n         \
    \   for (int j = 0; j < extensions.get(i).length(); j++) {\n                char\
    \ ch = extensions.get(i).charAt(j);\n                if (Character.isUpperCase(ch))\
    \ {\n                    upper_case_letters++;\n                } else {\n   \
    \                 lower_case_letters++;\n                }\n            }\n  \
    \          int extension_value = upper_case_letters - lower_case_letters;\n  \
    \          if (extension_value > max_extension_value) {\n                max_extension_value\
    \ = extension_value;\n                max_extension_index = i;\n            }\n\
    \        }\n        return String.format(\"%s.%s\", class_name, extensions.get(max_extension_index));",
  "        ArrayList<String> strongest = new ArrayList<String>();\n        ArrayList<Integer>\
    \ strongest_strength = new ArrayList<Integer>();\n        int i = 0;\n       \
    \ while (i < extensions.size()) {\n            int strength = 0;\n           \
    \ int j = 0;\n            while (j < extensions.get(i).length()) {\n         \
    \       char character = extensions.get(i).charAt(j);\n                if (Character.isUpperCase(character))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n                j += 1;\n      \
    \      }\n            if (strongest_strength.size() == 0) {\n                strongest_strength.add(strength);\n\
    \                strongest.add(extensions.get(i));\n            } else {\n   \
    \             if (strongest_strength.get(0) <= strength) {\n                 \
    \   strongest_strength.set(0, strength);\n                    strongest.set(0,\
    \ extensions.get(i));\n                }\n            }\n            i += 1;\n\
    \        }\n        return class_name + \".\" + strongest.get(0);", "        //\
    \ >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"\
    AA\", (String)\"Be\", (String)\"CC\"))))\n        // (\"my_class.AA\")\n     \
    \   if (class_name.contains(\".\")) {\n            class_name = class_name.substring(class_name.lastIndexOf(\"\
    .\") + 1);\n        }\n        double max_strength = -1;\n        String strongest_extension\
    \ = \"\";\n        for (String ext : extensions) {\n            double strength\
    \ = (double)ext.replaceAll(\"[^A-Z]\", \"\").length() - (double)ext.replaceAll(\"\
    [^a-z]\", \"\").length();\n            if (strength > max_strength) {\n      \
    \          max_strength = strength;\n                strongest_extension = ext;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Implement your solution here.\n        return null;", "        int maxStrength\
    \ = Integer.MIN_VALUE;\n        String strongestExtension = null;\n        for\
    \ (String extension : extensions) {\n            String name = class_name + \"\
    .\" + extension;\n            int strength = classStrength(name);\n          \
    \  if (strength > maxStrength) {\n                maxStrength = strength;\n  \
    \              strongestExtension = name;\n            }\n        }\n        return\
    \ strongestExtension;", '        throw new NotImplementedException();', "    \
    \    // NOTE: You must leave the class_name parameter be, it may be changed by\
    \ the judge\n        // NOTE: You may add extra methods, variables, etc. to the\
    \ class\n        // input:\n        // class_name: a string, the name of the class.\n\
    \        // extensions: an array list of strings, the extensions, as described\
    \ above.\n        // return: a string, in the format \"class_name.ExtensionName\"\
    \ as described above.\n        return null;", "        if (extensions.size() ==\
    \ 0) return class_name;\n        int strongest_i = 0;\n        double strongest_strength\
    \ = -1;\n        double strength;\n        int i = 0;\n        for (String extension\
    \ : extensions) {\n            strength = (double)extension.replaceAll(\"[^A-Z]\"\
    , \"\").length() - extension.replaceAll(\"[^a-z]\", \"\").length();\n        \
    \    if (strength > strongest_strength) {\n                strongest_i = i;\n\
    \                strongest_strength = strength;\n            }\n            i++;\n\
    \        }\n        return class_name + \".\" + extensions.get(strongest_i);",
  '        return "";', "        ArrayList<Tuple3<String, Integer, Integer>> extension_strength\
    \ = new ArrayList<Tuple3<String, Integer, Integer>>();\n        for (String extension\
    \ : extensions) {\n            int caps = 0;\n            int lowers = 0;\n  \
    \          for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   lowers++;\n                }\n            }\n            extension_strength.add(new\
    \ Tuple3<String, Integer, Integer>(extension, caps, lowers));\n        }\n   \
    \     Tuple3<String, Integer, Integer> strongest = extension_strength.get(0);\n\
    \        for (Tuple3<String, Integer, Integer> extension : extension_strength)\
    \ {\n            if (extension.getValue0() - extension.getValue1() > strongest.getValue0()\
    \ - strongest.getValue1()) {\n                strongest = extension;\n       \
    \     }\n        }\n        return class_name + \".\" + strongest.getValue0();",
  "      HashMap<String, Integer> strengths = new HashMap<String, Integer>();\n  \
    \    for (String ext : extensions) {\n        int strength = 0;\n        for (int\
    \ i = 0; i < ext.length(); i++) {\n          if (Character.isUpperCase(ext.charAt(i)))\
    \ {\n            strength++;\n          } else {\n            strength--;\n  \
    \        }\n        }\n        strengths.put(ext, strength);\n      }\n      int\
    \ max = 0;\n      String max_key = \"\";\n      for (String ext : strengths.keySet())\
    \ {\n        if (strengths.get(ext) > max) {\n          max = strengths.get(ext);\n\
    \          max_key = ext;\n        }\n      }\n      return class_name + \".\"\
    \ + max_key;", '        // Your code here', "        if (extensions.size() ==\
    \ 0) {\n            return class_name;\n        }\n        String strongest =\
    \ extensions.get(0);\n        int strength = get_strength(strongest);\n      \
    \  for (int i = 1; i < extensions.size(); i++) {\n            int ext_strength\
    \ = get_strength(extensions.get(i));\n            if (ext_strength > strength)\
    \ {\n                strongest = extensions.get(i);\n                strength\
    \ = ext_strength;\n            }\n        }\n        return class_name + \".\"\
    \ + strongest;", "        // >>> your_code_here <<<\n        return \"\";", " \
    \       String result = class_name;\n        String[] arr = new String[extensions.size()];\n\
    \        extensions.toArray(arr);\n        int[] arr1 = new int[arr.length];\n\
    \        for (int i = 0; i < arr.length; i++) {\n            int count1 = 0;\n\
    \            int count2 = 0;\n            for (int j = 0; j < arr[i].length();\
    \ j++) {\n                if (Character.isUpperCase(arr[i].charAt(j))) {\n   \
    \                 count1++;\n                } else {\n                    count2++;\n\
    \                }\n            }\n            arr1[i] = count1 - count2;\n  \
    \      }\n        int max = arr1[0];\n        int k = 0;\n        for (int i =\
    \ 0; i < arr1.length; i++) {\n            if (arr1[i] > max) {\n             \
    \   max = arr1[i];\n                k = i;\n            }\n        }\n       \
    \ result = result + \".\" + arr[k];\n        return result;", "        // compute\
    \ the strength of each extension\n        // sort the extension by strength (strongest\
    \ first)\n        // return the class name and the first (strongest) extension\n\
    \        return class_name + \".\" + extensions.get(0);", "        String clss\
    \ = class_name;\n        ArrayList<String> extensions2 = extensions;\n       \
    \ String[] exts = extensions2.toArray(new String[extensions2.size()]);\n     \
    \   int sze = exts.length;\n        double high = 0;\n        String return_this\
    \ = \"\";\n        for (int i = 0; i < sze; i++) {\n            String str = exts[i];\n\
    \            double strength = 0;\n            int uppercase = 0;\n          \
    \  int lowercase = 0;\n            for (int c = 0; c < str.length(); c++) {\n\
    \                char character = str.charAt(c);\n                if (Character.isUpperCase(character))\
    \ {\n                    uppercase++;\n                } else {\n            \
    \        lowercase++;\n                }\n            }\n            strength\
    \ = uppercase - lowercase;\n            if (strength > high) {\n             \
    \   high = strength;\n                return_this = str;\n            }\n    \
    \    }\n        return clss + \".\" + return_this;", "        String strongest\
    \ = class_name;\n        double strongestStrength = -100;\n        for (String\
    \ ext : extensions) {\n            int cap_ext = 0;\n            int sm_ext =\
    \ 0;\n            for (int i = 0; i < ext.length(); i++) {\n                char\
    \ ch = ext.charAt(i);\n                if (Character.isUpperCase(ch)) {\n    \
    \                cap_ext++;\n                } else {\n                    sm_ext++;\n\
    \                }\n            }\n            double strength = (double)cap_ext\
    \ - (double)sm_ext;\n            if (strength > strongestStrength) {\n       \
    \         strongestStrength = strength;\n                strongest = class_name\
    \ + \".\" + ext;\n            }\n        }\n        return strongest;", "    \
    \    HashMap<String, Double> map = new HashMap<String, Double>();\n        for\
    \ (String s : extensions) {\n            double strength = 0;\n            for\
    \ (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            map.put(s,\
    \ strength);\n        }\n        ArrayList<Double> strength = new ArrayList<Double>(map.values());\n\
    \        Collections.sort(strength);\n        for (String s : map.keySet()) {\n\
    \            if (map.get(s) == strength.get(strength.size() - 1)) {\n        \
    \        return class_name + \".\" + s;\n            }\n        }\n        return\
    \ \"\";", "        // // Method 1\n        // return class_name + \".\" + extensions.stream().map(e\
    \ -> \n        //     Pair.with(e,\n        //     Math.abs(Stream.of(e.split(\"\
    \")).map(c -> c.matches(\"[A-Z]\") ? 1 : 0).reduce(0, (a, b) -> a + b) -\n   \
    \     //     Stream.of(e.split(\"\")).map(c -> c.matches(\"[a-z]\") ? 1 : 0).reduce(0,\
    \ (a, b) -> a + b)))\n        //     ).max(Comparator.comparing(p -> p.getValue1())).get().getValue0();\n\
    \        // Method 2\n        // return class_name + \".\" + extensions.stream().map(e\
    \ -> \n        //     Pair.with(e,\n        //     Math.abs(Stream.of(e.split(\"\
    \")).map(c -> c.matches(\"[A-Z]\") ? 1 : 0).reduce(0, (a, b) -> a + b) -\n   \
    \     //     Stream.of(e.split(\"\")).map(c -> c.matches(\"[a-z]\") ? 1 : 0).reduce(0,\
    \ (a, b) -> a + b)))\n        //     ).max(Comparator.comparing(p -> p.getValue1())).get().getValue0();\n\
    \        // Method 3\n        return class_name + \".\" + extensions.stream().map(e\
    \ -> \n            Pair.with(e,\n            Math.abs(Stream.of(e.split(\"\")).map(c\
    \ -> c.matches(\"[A-Z]\") ? 1 : 0).reduce(0, (a, b) -> a + b) -\n            Stream.of(e.split(\"\
    \")).map(c -> c.matches(\"[a-z]\") ? 1 : 0).reduce(0, (a, b) -> a + b)))\n   \
    \         ).max(Comparator.comparing(p -> p.getValue1())).get().getValue0();",
  "        // >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"\
    AA\", (String)\"Be\", (String)\"CC\"))))\n        // (\"my_class.AA\")\n     \
    \   String ret = class_name;\n        String strongest_extension = null;\n   \
    \     double max_strength = 0;\n        for (String extension : extensions) {\n\
    \            // Count upper case letters\n            double upper_case_count\
    \ = extension.chars().filter(\n                (int c) -> Character.isUpperCase(c)\n\
    \            ).count();\n            // Count lower case letters\n           \
    \ double lower_case_count = extension.chars().filter(\n                (int c)\
    \ -> Character.isLowerCase(c)\n            ).count();\n            double strength\
    \ = upper_case_count - lower_case_count;\n            if (max_strength < strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        if (strongest_extension != null)\
    \ {\n            ret += \".\" + strongest_extension;\n        }\n        return\
    \ ret;", "        HashMap<String, Integer> map = new HashMap<String, Integer>();\n\
    \        for (String extension : extensions) {\n            int caps = 0;\n  \
    \          int smalls = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n\
    \                    caps++;\n                } else {\n                    smalls++;\n\
    \                }\n            }\n            map.put(extension, caps - smalls);\n\
    \        }\n        String strongest_extension = \"\";\n        int strongest_strength\
    \ = 0;\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n  \
    \          if (entry.getValue() > strongest_strength) {\n                strongest_extension\
    \ = entry.getKey();\n                strongest_strength = entry.getValue();\n\
    \            }\n        }\n        String result = String.format(\"%s.%s\", class_name,\
    \ strongest_extension);\n        return result;", "        // Type your code here.\n\
    \        String ret = \"\";\n        String[] exts = new String[extensions.size()];\n\
    \        int max = 0;\n        int index = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            int cap = 0;\n            int sm = 0;\n            exts[i]\
    \ = extensions.get(i);\n            for (int j = 0; j < exts[i].length(); j++)\
    \ {\n                if (Character.isUpperCase(exts[i].charAt(j))) {\n       \
    \             cap++;\n                } else {\n                    sm++;\n  \
    \              }\n            }\n            if (max < cap - sm) {\n         \
    \       max = cap - sm;\n                index = i;\n            }\n        }\n\
    \        ret = class_name + \".\" + exts[index];\n        return ret;", "    \
    \    int max = 0;\n        String strongest = \"\";\n        for (String ext :\
    \ extensions) {\n            int caps = (int) ext.chars().filter(ch -> Character.isUpperCase(ch)).count();\n\
    \            int sm = (int) ext.chars().filter(ch -> Character.isLowerCase(ch)).count();\n\
    \            int strength = caps - sm;\n            if (strength > max) {\n  \
    \              max = strength;\n                strongest = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + strongest;", "        // >>>\
    \ Enter solution here <<<\n        return \"\";", "        int strongest_value\
    \ = Integer.MIN_VALUE;\n        String strongest_extension = null;\n        for\
    \ (String ext : extensions) {\n            int c = ext.chars().filter(Character::isUpperCase).count();\n\
    \            int l = ext.chars().filter(Character::isLowerCase).count();\n   \
    \         int strength = c - l;\n            if (strength > strongest_value) {\n\
    \                strongest_value = strength;\n                strongest_extension\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  '        return class_name + "." + extensions.stream().reduce((a, b) -> getStrength(a)
    > getStrength(b) ? a : b).get();', "        if (extensions.size() == 0) return\
    \ class_name;\n        String strongest = extensions.get(0);\n        double max_strength\
    \ = -Double.MAX_VALUE;\n        for (String ext : extensions) {\n            int\
    \ caps = 0;\n            int smalls = 0;\n            for (int i = 0; i < ext.length();\
    \ i++) {\n                char c = ext.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    caps++;\n                } else {\n                 \
    \   smalls++;\n                }\n            }\n            double strength =\
    \ (double)caps - (double)smalls;\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest = ext;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       String extension = \"\";\n        int cap, sm, strength = Integer.MIN_VALUE;\n\
    \        for (String e : extensions) {\n            cap = sm = 0;\n          \
    \  for (int i = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i)))\
    \ cap++;\n                else sm++;\n            }\n            int s = cap -\
    \ sm;\n            if (s >= strength) {\n                strength = s;\n     \
    \           extension = e;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "      try {\n        int index = 0;\n        double\
    \ strongest = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n    \
    \      if (strength(extensions.get(i)) > strongest) {\n            strongest =\
    \ strength(extensions.get(i));\n            index = i;\n          }\n        }\n\
    \        return String.format(\"%s.%s\", class_name, extensions.get(index));\n\
    \      } catch (Throwable e) {\n        return String.format(\"%s.%s\", class_name,\
    \ e.getMessage());\n      }", "        //YOUR CODE HERE\n        return \"\";",
  "        int max = 0;\n        String ext = \"\";\n        for (String extension\
    \ : extensions) {\n            int numUpper = 0;\n            int numLower = 0;\n\
    \            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c))\
    \ {\n                    numUpper++;\n                } else {\n             \
    \       numLower++;\n                }\n            }\n            int strength\
    \ = numUpper - numLower;\n            if (strength > max) {\n                max\
    \ = strength;\n                ext = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + ext;", "        // >>> your code goes here\n\
    \        return \"\";", "        // \u2193\u2193\u2193\u2193 your code goes here\
    \ \u2193\u2193\u2193\u2193\n        int value = 0;\n        String name = \"\"\
    ;\n        for (String s : extensions) {\n            int upper = 0;\n       \
    \     int lower = 0;\n            for (int i = 0; i < s.length(); i++) {\n   \
    \             if (Character.isUpperCase(s.charAt(i))) {\n                    upper++;\n\
    \                } else {\n                    lower++;\n                }\n \
    \           }\n            if (upper - lower > value) {\n                value\
    \ = upper - lower;\n                name = s;\n            }\n        }\n    \
    \    return class_name + \".\" + name;\n        // \u2191\u2191\u2191\u2191 end\
    \ of your code \u2191\u2191\u2191\u2191"]
stop_tokens:
- "\n    }\n"
