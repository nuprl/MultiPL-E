name: HumanEval_133_sum_squares
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given an array array list of numbers.\n    // You\
  \ need to return the sum of squared numbers in the given array list,\n    // round\
  \ each element in the array list to the upper int(Ceiling) first.\n    // Examples:\n\
  \    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))\n\
  \    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f,\
  \ (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f,\
  \ (float)4.2f, (float)0.0f))))\n    // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
  \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) == (14l));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
  \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) == (29l));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f,\
  \ (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
  \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
  \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
  \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
  \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
  \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) == (2l));\n\
  \    }\n\n}\n"
completions: ["        if (lst.size() == 0) {\n            return 0;\n        }\n\
    \        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n     \
    \       sum += (long)Math.ceil(lst.get(i)) * (long)Math.ceil(lst.get(i));\n  \
    \      }\n        return sum;", '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (a, b) -> a + b);', "        List<Long> l = lst.stream().map(e\
    \ -> (long)Math.ceil(e)).map(e -> e * e).collect(Collectors.toList());\n     \
    \   return l.stream().reduce(0l, (a, b) -> a + b);", '        return lst.stream().mapToLong(n
    -> Math.round(n) * Math.round(n)).sum();', '        return lst.stream().map(e
    -> (long)Math.ceil(e)).map(e -> e * e).reduce(0l, (x, y) -> x + y);', "      \
    \  // write code here\n        return 0;", "        // Write your code here.\n\
    \        return 0l;", '        return lst.stream().map(i -> (long)Math.ceil(i)).map(i
    -> i * i).reduce(0l, (a, b) -> a + b);', "        int len = lst.size();\n    \
    \    // Note that you need to convert from float to int using \"intValue()\"\n\
    \        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n\
    \            arr[i] = (int) Math.ceil(lst.get(i));\n        }\n        long sum\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            sum += arr[i] * arr[i];\n\
    \        }\n        return sum;", '        return null;', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '        return
    IntStream.range(0, lst.size()).mapToLong(i -> Math.round(Math.pow(Math.ceil(lst.get(i)),
    2))).sum();', "        long sum = 0;\n        for (Float x : lst) {\n        \
    \    sum += Math.round(x) * Math.round(x);\n        }\n        return sum;", '        return
    lst.stream().map(i -> (long)Math.ceil(i)).map(i -> i * i).reduce(0l, (a,b) ->
    a + b);', '        return lst.stream().map(a -> a * a).reduce(0L, (acc, a) ->
    (long)Math.ceil(acc) + (long)Math.ceil(a));', "        final class Java {\n  \
    \          static long sumSquares(ArrayList<Float> lst) {\n                long\
    \ acc = 0;\n                for (int i = 0; i < lst.size(); i += 1) {\n      \
    \              acc += Math.ceil(lst.get(i)) * Math.ceil(lst.get(i));\n       \
    \         }\n                return acc;\n            }\n        }\n        return\
    \ Java.sumSquares(lst);", '        return lst.stream().map(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).reduce(0L, (a, b) -> a + b);', '        return lst.stream().map(n
    -> (long)Math.ceil(n)).map(n -> n * n).reduce(0l, (m, n) -> m + n);', '        throw
    new UnsupportedOperationException("Not Implemented Yet");', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (a, b) -> a + b);', '        return
    lst.stream().map(p -> Math.round(p)).map(p -> p * p).mapToLong(p -> p).sum();',
  "        // Type your code here\n        long sum = 0;\n        int len = lst.size();\n\
    \        for (int i = 0; i < len; i++) {\n            sum += Math.ceil(lst.get(i))\
    \ * Math.ceil(lst.get(i));\n        }\n        return sum;", '        return 0;',
  '        return (long)0;', '        return 0l;', '        return (long)lst.stream().map(n
    -> Math.round(n)).map(n -> Math.pow(n, 2)).reduce((a, b) -> a + b).get();', " \
    \       long sum = 0;\n        for (Float number : lst) {\n            sum +=\
    \ Math.round(Math.pow(number, 2));\n        }\n        return sum;", '        return
    0l;', '        return lst.stream().mapToInt(x -> Math.round(x)).mapToLong(x ->
    x * x).sum();', '        return Math.round(lst.stream().mapToDouble(x -> Math.pow(Math.ceil(x),
    2)).sum());', '        return lst.stream().map(x -> new BigDecimal(x).setScale(0,
    BigDecimal.ROUND_CEILING).multiply(new BigDecimal(x)).setScale(0, BigDecimal.ROUND_CEILING).longValue()).reduce(0L,
    Long::sum);', '        return lst.stream().mapToLong(n -> Math.round(n) * Math.round(n)).sum();',
  "        // if the list is empty return the value 0\n        if (lst.size() == 0)\
    \ {\n            return 0;\n        }\n        // if the list is not empty then\
    \ square each item in the list and sum them up\n        long result = 0;\n   \
    \     for (Float i : lst) {\n            // cast the float to a long\n       \
    \     result += (long) (Math.ceil(i.doubleValue()) * Math.ceil(i.doubleValue()));\n\
    \        }\n        return result;", "        // floor = Math.floor(float)\n \
    \       // ceil = Math.ceil(float)\n        // round = Math.round(float)\n   \
    \     return lst.stream().map(e -> (long)Math.ceil(e) * (long)Math.ceil(e)).reduce(0l,\
    \ (a, b) -> a + b);", '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', "        long sum = 0;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            sum += Math.round(Math.pow(lst.get(i),\
    \ 2));\n        }\n        return sum;", '        return lst.stream().map(i ->
    (long)Math.ceil(i)).map(i -> i * i).reduce(0l, (a, b) -> a + b);', "        //\
    \ YOUR CODE HERE\n        ArrayList<Long> f = new ArrayList<Long>();\n       \
    \ for (int i = 0; i < lst.size(); i++) {\n            f.add(Math.round(Math.ceil(lst.get(i))));\n\
    \        }\n        long sum = 0;\n        for (int i = 0; i < f.size(); i++)\
    \ {\n            sum += Math.pow(f.get(i), 2);\n        }\n        return sum;",
  "        int sum = 0;\n        for (Float number : lst) {\n            int squared\
    \ = (int) Math.ceil(number) * (int) Math.ceil(number);\n            sum += squared;\n\
    \        }\n        return sum;", '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', "        // >>>>> YOUR CODE GOES HERE\
    \ <<<<<\n        return 0l;", '        return 0;', '        return (long) lst.stream().mapToDouble(x
    -> x * x).map(x -> Math.ceil(x)).sum();', "        long ret = 0l;\n        for\
    \ (Float item : lst) {\n            ret += Math.round(Math.pow(item, 2.0f));\n\
    \        }\n        return ret;", '        return (long)lst.stream().map((Float
    x) -> Math.round(x)).map((long x) -> x * x).reduce(0l, (long x, long y) -> x +
    y);', "        long total=0;\n        for(Float f: lst)\n            total+=Math.round(f)*Math.round(f);\n\
    \        return total;", '        return lst.stream().map(num -> Math.round(num)).map(num
    -> Math.pow(num, 2)).reduce(0l, (x, y) -> x + y);', "        //TODO: Write your\
    \ code here\n        return 0;", "        // Implement your code here\n      \
    \  long sum = 0;\n        for (Float f : lst) {\n            sum += Math.ceil(f)\
    \ * Math.ceil(f);\n        }\n        return sum;", "        // Your code here\n\
    \        return lst.stream().map(v -> (long) Math.ceil(v))\n                 \
    \           .map(v -> v * v)\n                            .reduce(0l, (a, b) ->\
    \ a + b);", "        // input:  array list of numbers\n        // output: sum\
    \ of squared numbers in the given array list,\n        // round each element in\
    \ the array list to the upper int(Ceiling) first.\n        long r = 0;\n     \
    \   for (int i = 0; i < lst.size(); i++) {\n            r += (long)Math.ceil(lst.get(i))\
    \ * (long)Math.ceil(lst.get(i));\n        }\n        return r;", '        return
    lst.stream().map(Float::longValue).map(i -> (long) Math.ceil(i)).map(i -> i *
    i).reduce(0l, (x, y) -> x + y);', '        return lst.stream().mapToInt(i -> (int)Math.ceil(i)).mapToLong(i
    -> i * i).sum();', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            sum += Math.round(Math.pow(lst.get(i), 2));\n        }\n\
    \        return sum;", '        return lst.stream().mapToLong(x -> Math.round(x)
    * Math.round(x)).sum();', '        return lst.stream().mapToLong(f -> (long)Math.ceil(f)
    * (long)Math.ceil(f)).sum();', '        return lst.stream().mapToLong(e -> new
    BigDecimal(e).setScale(0, RoundingMode.CEILING).longValue()).map(e -> e * e).sum();',
  "        long res = 0;\n        for (Float f : lst) {\n            f = Math.ceil(f);\n\
    \            res += f * f;\n        }\n        return res;", '        return lst.stream().map(x
    -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (a, b) -> a + b);', "      \
    \  long res = 0;\n        for (float n : lst) {\n            res += (long)Math.pow(Math.ceil(n),\
    \ 2);\n        }\n        return res;", "        // Write your code here.\n  \
    \      return lst.stream().map(d->Math.round(d)).map(d->(long)d*d).reduce(0l,(a,b)->a+b);",
  '        return lst.stream().map(x -> (long)Math.ceil(x)*(long)Math.ceil(x)).reduce(0l,
    (x, y) -> x + y);', "        return lst.stream().map(x -> (long)Math.ceil(x))\n\
    \            .map(x -> x*x)\n            .reduce(0L, (x, y) -> x + y);", "   \
    \     lst.replaceAll(number -> (long)Math.ceil(number));\n        return lst.stream().map(x\
    \ -> x * x).reduce(0L, (a, b) -> a + b);", '        return 0l;', '        return
    lst.stream().mapToLong(f -> Math.round(f) * Math.round(f)).sum();', '        return
    lst.stream().mapToLong(Float::longValue).map(i -> i * i).sum();', '        return
    lst.stream().mapToLong(i -> Math.round(i) * Math.round(i)).sum();', "        long\
    \ sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum +=\
    \ Math.round(Math.pow(lst.get(i), 2));\n        }\n        return sum;", '        return
    lst.stream().mapToLong(e -> (long)Math.ceil(e)*(long)Math.ceil(e)).sum();', '        return
    lst.stream().mapToLong(e -> (long)Math.ceil(e)).map(e -> e * e).sum();', "   \
    \     ArrayList<Float> rounded = lst.stream().map(f -> (float)Math.ceil(f)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return (long)rounded.stream().map(f -> f * f).reduce(0f, (a, b) -> a\
    \ + b);", '        return lst.stream().mapToLong(x -> (long)Math.ceil(x) * (long)Math.ceil(x)).sum();',
  "        long ret = 0;\n        for (Float x : lst) {\n            ret += (long)\
    \ Math.ceil(x) * (long) Math.ceil(x);\n        }\n        return ret;", "    \
    \    final long arg = 0;\n        final long[] result = { arg };\n        lst.stream().map(i\
    \ -> (long)Math.ceil(i)).forEach(i -> result[0] += i * i);\n        return result[0];",
  "        // Write your code here\n        return lst.stream().map(it -> Math.round(Math.ceil(it))).map(it\
    \ -> it * it).reduce(0l, (a, b) -> a + b);", "        // Your code here\n    \
    \    return lst.stream().mapToLong(Float::floatToIntBits).reduce(0,(acc,x)->acc+(long)Math.pow(x,2));",
  '        return lst.stream().map(p -> BigDecimal.valueOf(p).divide(BigDecimal.valueOf(1l),
    BigDecimal.ROUND_CEILING)).map(p -> p.multiply(p)).mapToLong(p -> p.longValue()).sum();',
  '        return (long)lst.stream().map(Float::new).map(x -> x * x).map(Math::ceil).mapToInt(x
    -> x.intValue()).sum();', "        long sum = 0;\n        for (Float el : lst)\
    \ {\n            sum += Math.ceil(el) * Math.ceil(el);\n        }\n        return\
    \ sum;", '        return lst.stream().mapToLong(num -> Math.round(num) * Math.round(num)).sum();',
  '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (acc, x) -> acc + x);', "        return lst.stream().map(x\
    \ -> {\n            var num = Math.ceil(x);\n            return (long) Math.pow(num,\
    \ 2);\n        }).reduce(0l, (x, y) -> x + y);", "        // Your code here\n\
    \        return (long) lst.stream().mapToDouble(Double::valueOf).map(x -> Math.ceil(x)).map(x\
    \ -> x * x).sum();", '      return lst.stream().map(x -> (int)Math.ceil(x)).map(x
    -> x*x).reduce(0, (x,y) -> x+y);', '        throw new NotImplementedException();',
  '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', '        return (long)lst.stream().map((f) -> java.lang.Math.ceil(f)).map((ceil)
    -> ceil * ceil).reduce(0.0, (acc, cur) -> acc + cur);', '        return lst.stream().map(f
    -> Math.round(f)).map(Math::round).map(x -> x * x).reduce(0L, Long::sum);', '        return
    lst.stream().map(x -> new Float(Math.ceil(x))).map(y -> y * y).mapToLong(z ->
    z).sum();', '        return lst.stream().map(n -> n.longValue()).map(n -> n *
    n).reduce(0L, (a, b) -> a + b);', '        return (long)lst.stream().map((x) ->
    (long)Math.ceil(x)*(long)Math.ceil(x)).reduce((a, b) -> a + b).get();', "    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n         \
    \   sum += (long)Math.ceil(lst.get(i)) * (long)Math.ceil(lst.get(i));\n      \
    \  }\n        return sum;", "        long sum = 0;\n        for (float f : lst)\
    \ {\n            int v = (int)Math.ceil(f);\n            sum += v * v;\n     \
    \   }\n        return sum;", '        return lst.stream().mapToLong(a -> Math.round(a)*Math.round(a)).sum();',
  '        return lst.stream().map(i -> (long) Math.ceil(i)).map(i -> i * i).reduce(0l,
    (a, b) -> a + b);', '        return lst.stream().mapToLong(l -> (long)Math.ceil(l)
    * (long)Math.ceil(l)).sum();', '        return lst.stream().map(x -> Math.round(x
    * x)).reduce(0l, (x, y) -> x + y);', "        // we sum the squared numbers of\
    \ each element of the list.\n        // we should round it to the upper integer\
    \ first,\n        // we will use the method Math.ceil() to get the next integer\n\
    \        // from the element.\n        // e.g. Math.ceil(1.4) => 2.0\n       \
    \ //      Math.ceil(4.2) => 5.0\n        //      Math.ceil(0.0) => 1.0\n     \
    \   //      Math.ceil(-2.4) => -2.0\n        long sum = 0;\n        for (int i\
    \ = 0; i < lst.size(); i++) {\n            sum += (long) Math.pow(Math.ceil(lst.get(i)),\
    \ 2);\n        }\n        return sum;", "        // >>> your code goes here <<<\n\
    \        long sum = 0;\n        for (Float f : lst) {\n            sum += Math.round(f\
    \ * f);\n        }\n        return sum;", '        return lst.stream().map(a ->
    (long) Math.ceil(a)).map(a -> a * a).reduce(0l, (a, b) -> a + b);', "        long\
    \ x = 0;\n        for (Float f : lst) {\n            x += (long)Math.ceil(f) *\
    \ (long)Math.ceil(f);\n        }\n        return x;", "        float t = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            float f = lst.get(i);\n\
    \            t += f * f;\n        }\n        return Math.round(t);", '        return
    lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l, (x, y) ->
    x + y);', '        return (long)IntStream.range(0, lst.size()).mapToDouble(i ->
    Math.pow(Math.ceil(lst.get(i)), 2)).sum();', '        return lst.stream().mapToLong(i
    -> (long) Math.ceil(i) * (long) Math.ceil(i)).sum();', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0L, (x, y) -> x + y);', "        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        for (Float el : lst) {\n         \
    \   result.add((float)Math.ceil(el));\n        }\n        // System.out.println(result);\n\
    \        long total = 0;\n        for (Float el : result) {\n            total\
    \ += el * el;\n        }\n        return total;", "        long total = 0l;\n\
    \        for (Float num : lst) {\n            float ceil = Math.ceil(num);\n \
    \           long squared = Math.round(ceil * ceil);\n            total += squared;\n\
    \        }\n        return total;", '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (a, b) -> a + b);', '        return lst.stream().mapToLong(x
    -> Math.round(x * x)).sum();', "        // The first thing to look at is our list\
    \ of floats.\n        // We need to map the elements of the list to their upper\
    \ int(Ceiling).\n        // We can use the lst_map function to do this.\n    \
    \    // We also need to square each of the elements in the result of the lst_map,\n\
    \        // so we can use lst_map again to square each element.\n        // The\
    \ final step is to return the sum of the new lst.\n        // There's a function\
    \ for that too, called lst_sum.\n        // The whole expression looks like:\n\
    \        // lst_sum(lst_map(x -> x * x, lst_map(Math::ceil, lst)))\n        return\
    \ 0l;", '        return lst.stream().map(x -> Math.round(x)).map(x -> x * x).mapToLong(x
    -> x).sum();', '        return lst.stream().map(i -> i.longValue()).map(i -> i
    * i).reduce(0l, (x, y) -> x + y);', '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', "        long result = 0;\n        int[]\
    \ arr = new int[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            arr[i] = (int) Math.ceil(lst.get(i));\n        }\n        for (int\
    \ j = 0; j < arr.length; j++) {\n            result += Math.pow(arr[j], 2);\n\
    \        }\n        return result;", '        return lst.stream().map(x -> x.intValue()).map(x
    -> x * x).reduce(0, Integer::sum);', "        long result = 0;\n        for (Float\
    \ f : lst) {\n            long num = new BigDecimal(f.doubleValue()).setScale(0,\
    \ BigDecimal.ROUND_CEILING).longValue();\n            num = num * num;\n     \
    \       result += num;\n        }\n        return result;", '        return lst.stream().map(f
    -> (long)Math.ceil(f)).map(f -> f * f).reduce(0l, (a, b) -> a + b);', "      \
    \  ArrayList<Integer> list = lst.stream().map(it -> (int)Math.ceil(it)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return list.stream().map(it -> it * it).reduce(0, (it, other) -> it +\
    \ other);", '        throw new RuntimeException("Not Implemented");', '        return
    lst.stream().map(Problem::ceil).map(Problem::square).reduce(0l, Long::sum);',
  "        long sum = 0;\n        for (Float i : lst) {\n            i = Math.round(i);\n\
    \            long a = (long) Math.pow(i, 2);\n            sum += a;\n        }\n\
    \        return sum;", "        long sumSquares = 0;\n        for (float val :\
    \ lst) {\n            sumSquares += Math.round(Math.pow(val, 2));\n        }\n\
    \        return sumSquares;", '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)).map(y
    -> y * y).sum();', "        long sum = 0;\n        for (Float f : lst) {\n   \
    \         sum += Math.round(f) * Math.round(f);\n        }\n        return sum;",
  '        return lst.stream().map(x -> x.intValue()).map(x -> (long) x * x).reduce(0l,
    (x, y) -> x + y);', '        return lst.stream().map(x -> (long) Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);', "        long sum = 0l;\n        for\
    \ (float f : lst) {\n            sum += Math.round(f) * Math.round(f);\n     \
    \   }\n        return sum;", "        long sum = 0;\n        for (float elem :\
    \ lst) {\n            sum += Math.round(elem) * Math.round(elem);\n        }\n\
    \        return sum;", '        return lst.stream().map(x -> (long) Math.ceil(x)).map(x
    -> x * x).reduce(0l, (acc, x) -> acc + x);', '        return lst.stream().map(x
    -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x + y);', '      return
    lst.stream().mapToLong(n -> (long)Math.ceil(n)*(long)Math.ceil(n)).sum();', '        return
    lst.stream().mapToLong(f -> Math.round(f)).map(l -> l * l).sum();', "        ArrayList<Integer>\
    \ ints = new ArrayList<Integer>();\n        long sum = 0;\n        for (Float\
    \ i : lst) {\n            ints.add(java.lang.Math.round(i));\n        }\n    \
    \    for (Integer i : ints) {\n            sum += i * i;\n        }\n        return\
    \ sum;", '        return lst.stream().mapToInt(Math::round).mapToLong(x -> x *
    x).sum();', '        return lst.stream().mapToInt(e -> (int)Math.ceil(e)).mapToDouble(Math::pow).sum();',
  '        return Math.round(lst.stream().map(v -> Math.ceil(v)).map(v -> Math.pow(v,
    2)).reduce((a, b) -> a + b).get());', "        // insert your code here\n    \
    \    return lst.stream().map(f -> Math.round(f)).map(n -> n * n).reduce(0l, (a,\
    \ b) -> a + b);", "        ArrayList<Integer> nums = new ArrayList<Integer>();\n\
    \        for (Float num : lst) {\n            nums.add((int)Math.ceil(num));\n\
    \        }\n        return nums.stream().mapToInt(num -> num * num).sum();", " \
    \     lst.replaceAll(x -> (float)Math.ceil(x));\n      lst.replaceAll(x -> x *\
    \ x);\n      return lst.stream().mapToLong(v -> (long)v).sum();", '        return
    lst.stream().map(e -> (long)Math.ceil(e)).map(e -> e * e).reduce(0l, (a, b) ->
    a + b);', "        //for(float i : lst) System.out.println(Math.ceil(i));\n  \
    \      BigInteger r = BigInteger.ZERO;\n        for(float i : lst) r = r.add(BigInteger.valueOf((long)Math.ceil(i)).pow(2));\n\
    \        return r.longValue();", '        return lst.stream().mapToLong(f -> f.longValue()
    * f.longValue()).sum();', '        throw new UnsupportedOperationException("Not
    Implemented Yet.");', '        return lst.stream().mapToLong(x -> Math.round(x)
    * Math.round(x)).sum();', '        return lst.stream().mapToLong(x -> (long) Math.ceil(x)
    * (long) Math.ceil(x)).sum();', "        long r = 0;\n        for (Float f : lst)\
    \ {\n            r += Math.round(f) * Math.round(f);\n        }\n        return\
    \ r;", '        return (long)lst.stream().map(x -> Math.round(x) * Math.round(x)).reduce((a,
    b) -> a + b).get();', "        lst.replaceAll(f -> (long)Math.ceil(f));\n    \
    \    lst.replaceAll(f -> (long)Math.pow(f, 2));\n        long sum = lst.stream().mapToLong(Long::longValue).sum();\n\
    \        return sum;", '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0l, (a, b) -> a + b);', "        // Your code goes here.\n  \
    \      return -1;", '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)*(long)Math.ceil(x)).sum();',
  "        long ret = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      ret += Math.pow(Math.ceil(lst.get(i)), 2);\n        }\n        return ret;",
  '        return lst.stream().mapToLong(e -> Math.round(e)*Math.round(e)).sum();',
  '        return lst.stream().mapToLong(f -> (long) Math.ceil(f)).map(i -> i * i).sum();',
  "        // Implement the method\n        long res = 0;\n        for (Float fl :\
    \ lst) {\n            res += Math.ceil(fl) * Math.ceil(fl);\n        }\n     \
    \   return res;", "        // your code here:\n        return 0l;", '        return
    lst.stream().map(x -> (long) Math.ceil(x)).map(x -> x * x).reduce(0l, (a, b) ->
    a + b);', '        return lst.stream().mapToLong(f -> (long)Math.ceil(f) * (long)Math.ceil(f)).sum();',
  '        return 0l;', "        // YOUR CODE HERE\n        long res = 0;\n      \
    \  for (float f : lst) {\n            int x = (int)Math.ceil(f);\n           \
    \ res += x * x;\n        }\n        return res;", "        if (lst.size() == 0)\
    \ {\n            return 0;\n        }\n        double sum = 0;\n        for (Float\
    \ number : lst) {\n            sum += Math.pow(Math.ceil(number), 2);\n      \
    \  }\n        return Math.round(sum);", "        //TODO: Your code here\n    \
    \    return lst.stream().map(i -> Math.round(i)).map(i -> i * i).reduce(0L, (a,\
    \ b) -> a + b);", '        return lst.stream().map(i -> Math.round(i)).map(i ->
    i * i).reduce(0l, (i, j) -> i + j);', '        return Math.round(lst.stream().mapToDouble(x
    -> Math.pow(Math.ceil(x), 2)).sum());', "        if (lst.size() == 0) {\n    \
    \        return 0;\n        }\n        return lst.stream().mapToInt(f -> (int)Math.ceil(f)).map(x\
    \ -> x * x).reduce(0, (a, b) -> a + b);", "        long res = 0;\n        for\
    \ (float f : lst) {\n            res += (int) Math.ceil(f) * (int) Math.ceil(f);\n\
    \        }\n        return res;", '        return lst.stream().mapToLong(x ->
    (long)Math.ceil(x) * (long)Math.ceil(x)).sum();', "        // your code here\n\
    \        long sum = 0l;\n        for (Float val : lst) {\n            sum += Math.round(Math.pow(val,\
    \ 2.0f));\n        }\n        return sum;", '        return (long) lst.stream().map(n
    -> (long) Math.ceil(n) * (long) Math.ceil(n)).mapToDouble(n -> n).sum();', '        return
    lst.stream().map(a->Math.round(a)).map(a->Math.round(a*a)).reduce(0l,(a,b)->a+b);',
  '        return sumSquares1(lst, 0l);', '        return lst.stream().map(e -> Math.round(e)).map(e
    -> Math.pow(e, 2.0)).mapToLong(e -> (long)e).sum();', '        return lst.stream().mapToLong(f
    -> Math.round(f) * Math.round(f)).sum();', "        // your code here\n      \
    \  Long sum = 0l;\n        for (Float n : lst) {\n            sum += Math.round(Math.pow(n,\
    \ 2));\n        }\n        return sum;", '        return lst.stream().map(Problem::ceil).map(Problem::squared).reduce(0l,
    (a, b) -> a + b);', '        return lst.stream().map(a -> Math.round(a)).map(b
    -> (long) Math.pow(b, 2)).reduce(0l, (a, b) -> a + b);', '        return lst.stream().map(num
    -> (long) Math.ceil(num) * (long) Math.ceil(num)).reduce(0l, (total, num) -> total
    + num);', '        throw new RuntimeException("Please implment me.");', '        return
    lst.stream().map(x -> Math.round(x)).map(x -> x * x).reduce(0l, (x, y) -> x +
    y);', '        return 0l;', "        //throw new java.lang.UnsupportedOperationException(\"\
    Please implement the sumSquares function\");\n        long sum=0;\n        for(int\
    \ i=0;i<lst.size();i++){\n            sum+=(long)Math.ceil(lst.get(i))*(long)Math.ceil(lst.get(i));\n\
    \        }\n        return sum;", '        return lst.stream().mapToLong(n ->
    (long) Math.ceil(n) * (long) Math.ceil(n)).sum();', "        // Your code goes\
    \ here!\n        //return null;\n        long ret = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            ret += Math.round(Math.pow(lst.get(i), 2));\n\
    \        }\n        return ret;", "        // Your code here\n        return 0;",
  '        return lst.stream().map(n -> (long)Math.ceil(n)).map(n -> n * n).reduce(0l,
    (sum, n) -> sum + n);', "        // >>> YOUR CODE HERE <<<\n        return 0;",
  '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x -> x * x).reduce(0l,
    (x, y) -> x + y);', "        // return Stream.of(lst).map(x -> Math.round(x *\
    \ x)).mapToLong(x -> x).sum();\n        long ans = 0;\n        for (Float x :\
    \ lst) {\n            ans += Math.round(x * x);\n        }\n        return ans;",
  '        return lst.stream().map(v -> (long)Math.ceil(v)).map(v -> v * v).reduce(0l,
    (a, b) -> a + b);', "        // Your code here\n        long sum = 0;\n      \
    \  for (float x : lst) {\n            sum += Math.round(x) * Math.round(x);\n\
    \        }\n        return sum;", '        return lst.stream().map(x -> Math.round(x)).map(x
    -> x * x).reduce(0L, (x, y) -> x + y);', "        // Implement your solution here\n\
    \        return 0;", '        return lst.stream().mapToLong(x -> (long)Math.ceil(x)
    * (long)Math.ceil(x)).sum();', "        return (long) lst.stream().map(new Function<Float,\
    \ Long>() {\n            public Long apply(Float x) {\n                return\
    \ (((long) Math.ceil(x)) * ((long) Math.ceil(x)));\n            }\n        }).reduce(0l,\
    \ new BinaryOperator<Long>() {\n            public Long apply(Long a, Long b)\
    \ {\n                return a + b;\n            }\n        });", '        return
    Math.round(lst.stream().map(f -> f*f).reduce((a, b) -> a + b).get());', "    \
    \    // try {\n        //     for (Method method : lst.getClass().getMethods())\
    \ {\n        //         if (method.getName().equals(\"map\")) {\n        //  \
    \           return (long)lst.stream().map(v -> Math.ceil(v)).map(v -> Math.pow(v,\
    \ 2)).reduce(0d, (total, value) -> total + value);\n        //         }\n   \
    \     //     }\n        // } catch (Exception e) {\n        //     System.out.println(e);\n\
    \        // }\n        return 0l;", '        return lst.stream().map(x -> (long)Math.ceil(x)).map(x
    -> x * x).reduce(0l, (x, y) -> x + y);']
stop_tokens:
- "\n    }\n"
