name: HumanEval_29_filter_by_prefix
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter an input array list of strings only for ones that\
  \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
  \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
  \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\"\
  , (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
  \ strings, String prefix) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
  \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"\
  xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
completions: ['        return (ArrayList<String>)strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        result.add(string);\n            }\n        }\n        return result;",
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        // your code here', "        // TODO: Implement the filterByPrefix function\n\
    \        return null;", "\t\n\tArrayList<String> f = new ArrayList<String>();\n\
    \tfor (String s : strings) {\n\t    if (s.startsWith(prefix)) {\n\t\tf.add(s);\n\
    \t    }\n\t}\n\treturn f;", '        return (ArrayList<String>)strings.stream().filter(x
    -> x.startsWith(prefix)).collect(Collectors.toList());', '        return null;',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "\tArrayList<String> l = new ArrayList<String>();\n\tfor (String s : strings) {\n\
    \t    if (s.startsWith(prefix)) {\n\t\tl.add(s);\n\t    }\n\t}\n\treturn l;",
  '        return null;', '        return new ArrayList<String>(strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toList()));', "        ArrayList<String>\
    \ prefixFilter = new ArrayList<String>();\n        for (String str : strings)\
    \ {\n            if (str.startsWith(prefix)) {\n                prefixFilter.add(str);\n\
    \            }\n        }\n        return prefixFilter;", "        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        int i = 0;\n        while (i < strings.size())\
    \ {\n            String string = strings.get(i);\n            if (string.startsWith(prefix))\
    \ {\n                ret.add(string);\n            }\n            i = i + 1;\n\
    \        }\n        return ret;", "        ArrayList<String> newStrings = new\
    \ ArrayList<String>();\n        for (String str : strings) {\n            if (str.startsWith(prefix))\
    \ {\n                newStrings.add(str);\n            }\n        }\n        return\
    \ newStrings;", "        ArrayList<String> filteredStrings = new ArrayList<String>();\n\
    \        for (String currStr : strings) {\n            if (currStr.startsWith(prefix))\
    \ {\n                filteredStrings.add(currStr);\n            }\n        }\n\
    \        return filteredStrings;", '        return (ArrayList<String>)strings.stream().filter(string
    -> string.startsWith(prefix)).collect(Collectors.toList());', '        throw new
    RuntimeException("Implement me");', "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> out = new ArrayList<String>();\n        for (String string\
    \ : strings) {\n            if (string.startsWith(prefix)) {\n               \
    \ out.add(string);\n            }\n        }\n        return out;", '        return
    new ArrayList<String>(strings.stream().filter(o -> o.startsWith(prefix)).collect(Collectors.toList()));',
  "        ArrayList<String> ret = new ArrayList<String>();\n        for (String str\
    \ : strings) {\n            if (str.startsWith(prefix)) {\n                ret.add(str);\n\
    \            }\n        }\n        return ret;", "        ArrayList<String> results\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.startsWith(prefix)) {\n                results.add(s);\n            }\n\
    \        }\n        return results;", "        ArrayList<String> filtered = new\
    \ ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;", "        ArrayList<String> ret = new ArrayList<String>();\n    \
    \    for (String s : strings) {\n            if (s.length() > 0 && s.charAt(0)\
    \ == prefix.charAt(0)) {\n                ret.add(s);\n            }\n       \
    \ }\n        return ret;", "        ArrayList<String> out = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix))\n \
    \               out.add(s);\n        }\n        return out;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.startsWith(prefix)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.startsWith(prefix)) {\n                result.add(s);\n       \
    \     }\n        }\n        return result;", '        return strings;', "    \
    \    ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));', '        return
    new ArrayList<String>(Stream.of(strings).filter(x -> x.indexOf(prefix) == 0).collect(Collectors.toList()));',
  "        ArrayList<String> res = new ArrayList<String>();\n        for (String string\
    \ : strings) {\n            if (string.startsWith(prefix)) {\n               \
    \ res.add(string);\n            }\n        }\n        return res;", "\treturn\
    \ strings;", "        ArrayList<String> result = new ArrayList<String>();\n  \
    \      for (String s : strings) {\n            if (s.startsWith(prefix)) {\n \
    \               result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> ans = new ArrayList<String>();\n        for (String x\
    \ : strings) {\n            if (x.startsWith(prefix)) {\n                ans.add(x);\n\
    \            }\n        }\n        return ans;", "        ArrayList<String> output\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.startsWith(prefix)) {\n                output.add(s);\n            }\n\
    \        }\n        return output;", "        ArrayList<String> filteredStrings\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.startsWith(prefix)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", '        return strings.stream().filter(element
    -> element.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(x
    -> x.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));', " \
    \       ArrayList<String> ans = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.startsWith(prefix)) {\n              \
    \  ans.add(str);\n            }\n        }\n        return ans;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.startsWith(prefix)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.startsWith(prefix)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.startsWith(prefix)) {\n                res.add(s);\n            }\n\
    \        }\n        return res;", "        ArrayList<String> filteredList = new\
    \ ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix))\
    \ {\n                filteredList.add(s);\n            }\n        }\n        return\
    \ filteredList;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String item : strings) {\n            if (item.startsWith(prefix))\
    \ {\n                result.add(item);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> res = new ArrayList<String>();\n      \
    \  for (String str : strings) {\n            if (str.startsWith(prefix)) {\n \
    \               res.add(str);\n            }\n        }\n        return res;",
  "        ArrayList<String> ans = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.startsWith(prefix)) {\n                ans.add(s);\n\
    \            }\n        }\n        return ans;", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;", "        ArrayList<String> retval = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                retval.add(s);\n            }\n        }\n        return retval;",
  "        ArrayList<String> newStrings = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        newStrings.add(string);\n            }\n        }\n        return newStrings;",
  '        return (new ArrayList<String>(strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList())));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.startsWith(prefix)) {\n                result.add(s);\n       \
    \     }\n        }\n        return result;", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;", "        ArrayList<String> filtered = new\
    \ ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;", '        return (ArrayList<String>) strings.stream().filter(str
    -> str.startsWith(prefix)).collect(Collectors.toList());', "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.startsWith(prefix)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        for (String string : strings) {\n  \
    \          if (string.startsWith(prefix)) {\n                ret.add(string);\n\
    \            }\n        }\n        return ret;", "        ArrayList<String> newString\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.startsWith(prefix)) {\n                newString.add(string);\n\
    \            }\n        }\n        return newString;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.startsWith(prefix)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", '        return null;',
  "        ArrayList<String> outputList = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        outputList.add(string);\n            }\n        }\n        return outputList;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.startsWith(prefix))\n                result.add(s);\n        }\n\
    \        return result;", "        ArrayList<String> ret = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                ret.add(s);\n            }\n        }\n        return ret;",
  '        return null;', "        ArrayList<String> prefixStrings = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                prefixStrings.add(string);\n            }\n        }\n  \
    \      return prefixStrings;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  '        return strings.stream().filter(item -> item.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
    \ each : strings) {\n            if (each.startsWith(prefix)) {\n            \
    \    output.add(each);\n            }\n        }\n        return output;", '        return
    new ArrayList<String>(strings.stream().filter(x -> x.startsWith(prefix)).collect(Collectors.toList()));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.indexOf(prefix) == 0) {\n            \
    \    result.add(str);\n            }\n        }\n        return result;", "  \
    \      ArrayList<String> ret=new ArrayList<String>();\n        for(String s:strings)\n\
    \            if(s.startsWith(prefix))\n                ret.add(s);\n        return\
    \ ret;", "        ArrayList<String> filtered = new ArrayList<String>();\n    \
    \    for (String s : strings) {\n            if (s.startsWith(prefix)) {\n   \
    \             filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        result.add(string);\n            }\n        }\n        return result;",
  '        return (ArrayList<String>)strings.stream().filter(x -> x.startsWith(prefix)).collect(Collectors.toList());',
  "        // Write your code here\n        ArrayList<String> newList = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                newList.add(string);\n            }\n        }\n        return\
    \ newList;", "        ArrayList<String> filteredStrings = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;", "        ArrayList<String> filtered_strings\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.startsWith(prefix)) {\n                filtered_strings.add(string);\n\
    \            }\n        }\n        return filtered_strings;", "        ArrayList<String>\
    \ prefix_strings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.startsWith(prefix)) {\n                prefix_strings.add(s);\n\
    \            }\n        }\n        return prefix_strings;", "        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.startsWith(prefix)) {\n                output.add(s);\n       \
    \     }\n        }\n        return output;", '        return null;', '        return
    new ArrayList<String>(strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList()));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        return new ArrayList<String>(strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toList()));', '        return strings;',
  "        ArrayList<String> newList = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.startsWith(prefix)) {\n              \
    \  newList.add(str);\n            }\n        }\n        return newList;", "  \
    \      ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ ans = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.startsWith(prefix)) {\n                ans.add(s);\n            }\n\
    \        }\n        return ans;", "        ArrayList<String> nStrings = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                nStrings.add(s);\n            }\n        }\n        return nStrings;",
  "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
    \ (String str : strings) {\n            if (str.startsWith(prefix)) {\n      \
    \          filteredStrings.add(str);\n            }\n        }\n        return\
    \ filteredStrings;", '        return strings.stream().filter(x -> x.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        // Fill in your answer here\n        return null;", '        return strings.stream().filter(e
    -> e.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));', '        return
    strings;', "        return new ArrayList<String>(\n            strings.stream()\n\
    \            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList())\n\
    \        );", "        ArrayList<String> l = new ArrayList<String>();\n      \
    \  for (String s : strings) {\n            if (s.startsWith(prefix))\n       \
    \         l.add(s);\n        }\n        return l;", '        return (ArrayList<String>)
    strings.stream().filter(x -> x.startsWith(prefix)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));', '        return
    null;', "        ArrayList<String> filtered = new ArrayList<String>();\n     \
    \   for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> newStrings = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        newStrings.add(string);\n            }\n        }\n        return newStrings;",
  '        return null;', '        return new ArrayList<String>(strings.stream().filter(str
    -> str.startsWith(prefix)).collect(Collectors.toList()));', "        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.startsWith(prefix)) {\n                ret.add(s);\n            }\n\
    \        }\n        return ret;", '        return null;', '        return (ArrayList<String>)strings.stream().filter(string
    -> string.startsWith(prefix)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.startsWith(prefix)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.startsWith(prefix)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        for (String str : strings) {\n     \
    \       if (str.startsWith(prefix)) {\n                ret.add(str);\n       \
    \     }\n        }\n        return ret;", '        return null;', "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.startsWith(prefix)) {\n                result.add(s);\n       \
    \     }\n        }\n        return result;", "        ArrayList<String> filtered\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.startsWith(prefix)) {\n                filtered.add(s);\n            }\n\
    \        }\n        return filtered;", '        return null;', "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.startsWith(prefix)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String i : strings) {\n    \
    \        if (i.startsWith(prefix)) {\n                result.add(i);\n       \
    \     }\n        }\n        return result;", "        ArrayList<String> filteredStrings\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.startsWith(prefix)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.startsWith(prefix)) {\n                filtered.add(s);\n   \
    \         }\n        }\n        return filtered;", "        ArrayList<String>\
    \ stringsFiltered = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.startsWith(prefix)) {\n                stringsFiltered.add(string);\n\
    \            }\n        }\n        return stringsFiltered;", '        return strings;',
  '        return strings.stream().filter(e -> e.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        return (ArrayList<String>)strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.startsWith(prefix)) {\n                filtered.add(s);\n   \
    \         }\n        }\n        return filtered;", '        return strings.stream().filter(str
    -> str.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return null;', "        ArrayList<String> output = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix))\n \
    \               output.add(s);\n        }\n        return output;", '        return
    (ArrayList<String>)strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        strings.stream().filter(s\
    \ -> s.startsWith(prefix)).forEach(s -> filtered.add(s));\n        return filtered;",
  '        return new ArrayList<String>(strings.stream().filter(x -> x.startsWith(prefix)).collect(Collectors.toList()));',
  "        ArrayList<String> res = new ArrayList<String>();\n        for (String s\
    \ : strings) {\n            if (s.startsWith(prefix)) {\n                res.add(s);\n\
    \            }\n        }\n        return res;", '        return strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));', " \
    \       ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.startsWith(prefix)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", "        return new\
    \ ArrayList<String>(\n            strings.stream()\n            .filter(string\
    \ -> string.startsWith(prefix))\n            .collect(Collectors.toList())\n \
    \       );", "        // Tuple of (hasPrefix, hasNoPrefix)\n        var partitionedStrings\
    \ = strings.stream().collect(Collectors.partitioningBy(str -> str.startsWith(prefix)));\n\
    \        return new ArrayList<String>(partitionedStrings.get(true));", "     \
    \   // BEGIN SOLUTION\n        ArrayList<String> results = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                results.add(s);\n            }\n        }\n        return results;\n\
    \        // END SOLUTION", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<String>();\n        Iterator<String>\
    \ iter = strings.iterator();\n        while (iter.hasNext()) {\n            String\
    \ val = iter.next();\n            if (val.startsWith(prefix)) {\n            \
    \    result.add(val);\n            }\n        }\n        return result;", "  \
    \      ArrayList<String> output = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                output.add(s);\n\
    \            }\n        }\n        return output;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.startsWith(prefix)) {\n                filtered.add(s);\n   \
    \         }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.startsWith(prefix)) {\n                filtered.add(s);\n   \
    \         }\n        }\n        return filtered;", '        // your code goes
    here', "        ArrayList<String> result = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if (string.startsWith(prefix)) {\n\
    \                result.add(string);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> filtered = new ArrayList<String>();\n \
    \       for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        // REPLACE WITH YOUR CODE\n        return null;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.startsWith(prefix)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", "        ArrayList<String>\
    \ r = new ArrayList<String>();\n        for (String s : strings) {\n         \
    \   if (s.startsWith(prefix)) {\n                r.add(s);\n            }\n  \
    \      }\n        return r;", '        return new ArrayList<String>(strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toList()));', '        return null;',
  "        ArrayList<String> list = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                list.add(s);\n\
    \            }\n        }\n        return list;", '        throw new Error("Replace
    with the implementation of Problem.filterByPrefix()");', "        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.startsWith(prefix)) {\n                ret.add(s);\n            }\n\
    \        }\n        return ret;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.startsWith(prefix)) {\n                filteredStrings.add(s);\n\
    \            }\n        }\n        return filteredStrings;", '        return new
    ArrayList<String>(strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList()));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.startsWith(prefix)) {\n              \
    \  result.add(str);\n            }\n        }\n        return result;", "    \
    \    ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if (string.startsWith(prefix)) {\n\
    \                filteredStrings.add(string);\n            }\n        }\n    \
    \    return filteredStrings;", '        return null;', "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.startsWith(prefix)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        return new ArrayList<String>(\n\
    \            strings.stream()\n                .filter(s -> s.startsWith(prefix))\n\
    \                .collect(Collectors.toList())\n        );", "        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        for (String str : strings) {\n     \
    \       if (str.startsWith(prefix)) {\n                ret.add(str);\n       \
    \     }\n        }\n        return ret;", "        ArrayList<String> result =\
    \ new ArrayList<String>();\n        for (String s : strings) {\n            if\
    \ (s.startsWith(prefix)) {\n                result.add(s);\n            }\n  \
    \      }\n        return result;", "        /* implementation not shown */\n \
    \       ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        throw new IllegalArgumentException("Not
    implemented yet.");', '        return new ArrayList<String>(Arrays.asList());',
  "        ArrayList<String> newArray = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.startsWith(prefix)) {\n              \
    \  newArray.add(str);\n            }\n        }\n        return newArray;", " \
    \       ArrayList<String> res = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                res.add(s);\n\
    \            }\n        }\n        return res;", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;", '        return strings.stream().filter(x
    -> x.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));', " \
    \       ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.indexOf(prefix) == 0) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filtered_strings = new ArrayList<String>();\n        for (String s : strings)\
    \ {\n            if (s.startsWith(prefix)) {\n                filtered_strings.add(s);\n\
    \            }\n        }\n        return filtered_strings;", '        return
    (ArrayList<String>)strings.stream().filter(x -> x.startsWith(prefix)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.startsWith(prefix)) {\n                res.add(s);\n            }\n\
    \        }\n        return res;", "\t/*\n\tArrayList<String> newArr = new ArrayList<String>();\n\
    \tfor (String s : strings) {\n\t    if (s.length() >= prefix.length() && s.substring(0,\
    \ prefix.length()).equals(prefix))\n\t\tnewArr.add(s);\n\t}\n\treturn newArr;\n\
    \t*/\n\treturn (ArrayList<String>)strings.stream().filter(s -> s.length() >= prefix.length()\
    \ && s.substring(0, prefix.length()).equals(prefix)).collect(Collectors.toList());",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ word : strings) {\n            if (word.startsWith(prefix)) {\n            \
    \    result.add(word);\n            }\n        }\n        return result;", " \
    \       ArrayList<String> filteredStrings = new ArrayList<String>();\n       \
    \ for (String str : strings) {\n            if (str.startsWith(prefix)) {\n  \
    \              filteredStrings.add(str);\n            }\n        }\n        return\
    \ filteredStrings;", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        // <<<\n        ArrayList<String> filteredList = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                filteredList.add(string);\n            }\n        }\n   \
    \     return filteredList;\n        // >>>", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.startsWith(prefix)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ results = new ArrayList<String>();\n        for (String str : strings) {\n \
    \           if (str.startsWith(prefix)) {\n                results.add(str);\n\
    \            }\n        }\n        return results;", "        ArrayList<String>\
    \ rs = new ArrayList<String>();\n        for (String s : strings) {\n        \
    \    if (s.startsWith(prefix)) {\n                rs.add(s);\n            }\n\
    \        }\n        return rs;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        Iterator<String> iterator = strings.iterator();\n        while (iterator.hasNext())\
    \ {\n            String string = iterator.next();\n            if (string.indexOf(prefix)\
    \ == 0) {\n                result.add(string);\n            }\n        }\n   \
    \     return result;", "        ArrayList<String> results = new ArrayList<String>();\n\
    \        for (String x : strings) {\n            if (x.startsWith(prefix)) {\n\
    \                results.add(x);\n            }\n        }\n        return results;",
  "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        int\
    \ n = prefix.length();\n        for (String str : strings) {\n            if (str.length()\
    \ >= n && str.substring(0, n).equals(prefix)) {\n                filteredStrings.add(str);\n\
    \            }\n        }\n        return filteredStrings;", '        return null;',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> a = new ArrayList<String>();\n        for (String s :\
    \ strings) {\n            if (s.startsWith(prefix)) {\n                a.add(s);\n\
    \            }\n        }\n        return a;", '        return null;']
stop_tokens:
- "\n    }\n"
