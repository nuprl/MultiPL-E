name: HumanEval_95_check_dict_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a hash map, return true if all keys are strings in\
  \ lower \n    // case or all keys are strings in upper case, else return false.\n\
  \    // The function should return false is the given hash map is empty.\n    //\
  \ Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"a\",\
  \ \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"\
  ))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
  a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
  \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\",\
  \ \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n    //\
  \ (true)\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n\
  \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
  , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\",\
  \ \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
  Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
  \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
  , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        List<String> lst = dict.keySet().stream().map(String::toUpperCase).collect(Collectors.toList());\n\
    \        int cap = lst.size();\n        int lc = 0;\n        for (String k : dict.keySet())\
    \ {\n            if (k.toUpperCase().equals(k)) {\n                lc++;\n   \
    \         }\n        }\n        if (lc == cap || lc == 0) {\n            return\
    \ true;\n        }\n        return false;", '        return false;', '        return
    false;', "        String firstKey = dict.keySet().iterator().next();\n       \
    \ boolean lowerCase = firstKey.toLowerCase().equals(firstKey);\n        boolean\
    \ upperCase = firstKey.toUpperCase().equals(firstKey);\n        return dict.keySet().stream().allMatch(key\
    \ -> (lowerCase && key.toLowerCase().equals(key)) || (upperCase && key.toUpperCase().equals(key)));",
  "        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean\
    \ lowerCase = Character.isLowerCase(dict.keySet().stream().findFirst().get().charAt(0));\n\
    \        return dict.keySet().stream().allMatch(k -> {\n            if (lowerCase)\
    \ {\n                return k.equals(k.toLowerCase());\n            } else {\n\
    \                return k.equals(k.toUpperCase());\n            }\n        });",
  "        // your code goes here\n        if (dict.isEmpty()) {\n            return\
    \ false;\n        }\n        for (Map.Entry<String, String> pair : dict.entrySet())\
    \ {\n            String entry = pair.getKey();\n            if (entry.charAt(0)\
    \ < 'a' || entry.charAt(0) > 'z') {\n                return false;\n         \
    \   }\n        }\n        return true;", '        throw new NotImplementedError();',
  '        return false;', "        // TODO: Write your code here\n        return\
    \ false;", "        if (dict.isEmpty()) {\n            return false;\n       \
    \ }\n        boolean allUpper = true;\n        boolean allLower = true;\n    \
    \    for (String key : dict.keySet()) {\n            if (allUpper && !key.equals(key.toUpperCase()))\
    \ {\n                allUpper = false;\n            }\n            if (allLower\
    \ && !key.equals(key.toLowerCase())) {\n                allLower = false;\n  \
    \          }\n        }\n        return allUpper || allLower;", "        // see\
    \ if all keys are upper or lower case\n        // lower is true if all keys are\
    \ lowercase\n        // upper is true if all keys are uppercase\n        // done\
    \ is true if lower or upper is already set\n        boolean lower = true;\n  \
    \      boolean upper = true;\n        boolean done = false;\n        // assume\
    \ that the dictionary is not empty\n        // let's check the keys and make sure\
    \ they are either\n        // all upper or all lower case\n        for (String\
    \ k : dict.keySet()) {\n            // if the key is in lower case, upper case\
    \ is false\n            if (k.equals(k.toLowerCase())) {\n                upper\
    \ = false;\n            }\n            // if the key is in upper case, lower case\
    \ is false\n            if (k.equals(k.toUpperCase())) {\n                lower\
    \ = false;\n            }\n            // if one key isn't upper or lower case,\
    \ we can return false\n            if (!upper && !lower) {\n                return\
    \ false;\n            }\n        }\n        // all keys are upper or lower case,\
    \ so return true\n        return true;", '        return false;', '        return
    false;', '        throw new UnsupportedOperationException("Please remove this
    line and implement the method.");', '        return false;', '        throw new
    Error("Not yet implemented");', "        // hint: use Character.isUpperCase()\n\
    \        // >>> Character.isUpperCase('A')\n        // (true)\n        // >>>\
    \ Character.isUpperCase('a')\n        // (false)\n        // >>> Character.isUpperCase('6')\n\
    \        // (false)\n        return false;", '        return dict.keySet().stream().allMatch(key
    -> key.equals(key.toLowerCase())) || dict.keySet().stream().allMatch(key -> key.equals(key.toUpperCase()));',
  "        if (dict.isEmpty()) {\n            return false;\n        } else {\n  \
    \          HashMap<String,Integer> dictCount = new HashMap<String,Integer>();\n\
    \            for (String key : dict.keySet()) {\n                if (key.equals(key.toLowerCase()))\
    \ {\n                    if (dictCount.containsKey(\"lower\")) {\n           \
    \             dictCount.put(\"lower\", dictCount.get(\"lower\") + 1);\n      \
    \              } else {\n                        dictCount.put(\"lower\", 1);\n\
    \                    }\n                } else if (key.equals(key.toUpperCase()))\
    \ {\n                    if (dictCount.containsKey(\"upper\")) {\n           \
    \             dictCount.put(\"upper\", dictCount.get(\"upper\") + 1);\n      \
    \              } else {\n                        dictCount.put(\"upper\", 1);\n\
    \                    }\n                } else {\n                    if (dictCount.containsKey(\"\
    other\")) {\n                        dictCount.put(\"other\", dictCount.get(\"\
    other\") + 1);\n                    } else {\n                        dictCount.put(\"\
    other\", 1);\n                    }\n                }\n            }\n      \
    \      return dictCount.size() == 1;\n        }", '        return dict.keySet().stream().allMatch(x
    -> x.equals(x.toLowerCase())) || dict.keySet().stream().allMatch(x -> x.equals(x.toUpperCase()));',
  '        return false;', '        return true;', '        throw new UnsupportedOperationException("Problem.checkDictCase()");',
  "        List<String> lst = dict.keySet().stream().map(s -> s.toLowerCase()).collect(Collectors.toList());\n\
    \        if (lst.stream().anyMatch(s -> s.equals(s.toUpperCase()))) {\n      \
    \      return lst.stream().allMatch(s -> s.equals(s.toUpperCase()));\n       \
    \ } else {\n            return lst.stream().allMatch(s -> s.equals(s.toLowerCase()));\n\
    \        }", '        return false;', "        boolean isUpper = true;\n     \
    \   boolean isLower = true;\n        if (dict.size() == 0) {\n            return\
    \ false;\n        }\n        String[] arr = new String[dict.size()];\n       \
    \ arr = dict.keySet().toArray(arr);\n        for (int i = 0; i < arr.length; i++)\
    \ {\n            for (int j = 0; j < arr[i].length(); j++) {\n               \
    \ if (Character.isLowerCase(arr[i].charAt(j))) {\n                    isUpper\
    \ = false;\n                }\n                if (Character.isUpperCase(arr[i].charAt(j)))\
    \ {\n                    isLower = false;\n                }\n            }\n\
    \        }\n        return isUpper || isLower;", "        if (dict.isEmpty())\
    \ {\n            return false;\n        }\n        boolean allUpper = false;\n\
    \        boolean allLower = false;\n        for (Map.Entry<String, String> entry\
    \ : dict.entrySet()) {\n            if (entry.getKey().equals(entry.getKey().toUpperCase()))\
    \ {\n                allUpper = true;\n            } else if (entry.getKey().equals(entry.getKey().toLowerCase()))\
    \ {\n                allLower = true;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return (allUpper || allLower);", '        return
    false;', "        // Implement this function to solve the problem.\n        //\
    \ Do not change the signature of the function.", '        return dict.keySet().stream().filter(k
    -> (k.toUpperCase().equals(k) || k.toLowerCase().equals(k))).count()==dict.size();',
  '        return true;', '        return false;', "        // Your code goes here.\n\
    \        String prev = null;\n        for (Map.Entry<String, String> entry : dict.entrySet())\
    \ {\n            String key = entry.getKey();\n            if (prev == null) {\n\
    \                prev = key;\n            } else {\n                if (prev.toLowerCase().equals(key.toLowerCase()))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;", "        return dict.keySet().stream().allMatch(e\
    \ -> e.equals(e.toLowerCase())) ||\n            dict.keySet().stream().allMatch(e\
    \ -> e.equals(e.toUpperCase()));", "        if (dict.isEmpty()) {\n          \
    \  return false;\n        } else {\n            String pattern = \"^([a-z]*)*$\"\
    ;\n            String pattern1 = \"^([A-Z]*)*$\";\n            for (Map.Entry<String,\
    \ String> entry : dict.entrySet()) {\n                if (!entry.getKey().matches(pattern)\
    \ && !entry.getKey().matches(pattern1)) {\n                    return false;\n\
    \                }\n            }\n            return true;\n        }", "   \
    \     Boolean flag = true;\n        for (Map.Entry<String, String> entry : dict.entrySet())\
    \ {\n            flag = entry.getKey().equals(entry.getKey().toLowerCase());\n\
    \            if (!flag) {\n                break;\n            }\n        }\n\
    \        return flag;", "        if (dict.isEmpty()) {\n            return false;\n\
    \        }\n        String key = dict.keySet().iterator().next();\n        Character.isUpperCase(key.charAt(0));\n\
    \        return dict.keySet().stream().allMatch(x -> Character.isUpperCase(x.charAt(0)))\
    \ || dict.keySet().stream().allMatch(x -> Character.isLowerCase(x.charAt(0)));",
  "        return dict.entrySet().stream().allMatch(e -> {\n            String s =\
    \ e.getKey();\n            return s.equals(s.toLowerCase()) || s.equals(s.toUpperCase());\n\
    \        });", "        Set<String> set = dict.keySet();\n        List<String>\
    \ list = new ArrayList<String>(set);\n        boolean result = true;\n       \
    \ if (list.size() == 0) {\n            result = false;\n        } else {\n   \
    \         boolean containsLow = false;\n            boolean containsUp = false;\n\
    \            for (String s : list) {\n                if (Character.isUpperCase(s.charAt(0)))\
    \ {\n                    containsUp = true;\n                } else {\n      \
    \              containsLow = true;\n                }\n            }\n       \
    \     if (containsLow && containsUp) {\n                result = false;\n    \
    \        }\n        }\n        return result;", "        if (dict.isEmpty()) {\n\
    \            return false;\n        }\n        // return dict.keySet().stream().map(x\
    \ -> x.toLowerCase()).distinct().count() == 1 ||\n        //        dict.keySet().stream().map(x\
    \ -> x.toUpperCase()).distinct().count() == 1;\n        return dict.keySet().stream().map(x\
    \ -> x.toLowerCase()).distinct().count() == 1 ||\n               dict.keySet().stream().map(x\
    \ -> x.toUpperCase()).distinct().count() == 1;", "        // Solution here\n \
    \       boolean isLower = false;\n        boolean isUpper = false;\n        for\
    \ (Map.Entry<String, String> entry : dict.entrySet()) {\n            String key\
    \ = entry.getKey();\n            for (int i = 0; i < key.length(); i++) {\n  \
    \              if (Character.isLowerCase(key.charAt(i))) {\n                 \
    \   isLower = true;\n                } else if (Character.isUpperCase(key.charAt(i)))\
    \ {\n                    isUpper = true;\n                }\n            }\n \
    \       }\n        return isLower != isUpper;", '        return true;', "    \
    \    if (dict.isEmpty()) {\n            return false;\n        }\n        String[]\
    \ arr = dict.keySet().toArray(new String[0]);\n        String first = arr[0];\n\
    \        boolean lowerCase = false;\n        boolean upperCase = false;\n    \
    \    if (first.toLowerCase().equals(first)) {\n            lowerCase = true;\n\
    \        } else if (first.toUpperCase().equals(first)) {\n            upperCase\
    \ = true;\n        }\n        for (String key : arr) {\n            if (lowerCase\
    \ && !key.toLowerCase().equals(key)) {\n                return false;\n      \
    \      } else if (upperCase && !key.toUpperCase().equals(key)) {\n           \
    \     return false;\n            }\n        }\n        return true;", "      \
    \  boolean upper = dict.isEmpty()?false:Arrays.stream(dict.keySet().toArray()).map(obj->obj.toString()).allMatch(str->str.toUpperCase().equals(str));\n\
    \        boolean lower = dict.isEmpty()?false:Arrays.stream(dict.keySet().toArray()).map(obj->obj.toString()).allMatch(str->str.toLowerCase().equals(str));\n\
    \        return upper||lower;", "        if (dict.isEmpty()) {\n            return\
    \ false;\n        }\n        String[] keys = dict.keySet().toArray(new String[0]);\n\
    \        String firstKey = keys[0];\n        return Stream.of(keys).allMatch(key\
    \ -> key.equals(firstKey) || key.equals(firstKey.toUpperCase()));", "        //\
    \ return false for empty dictionary\n        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        // check upper case\n        boolean allUpper\
    \ = true;\n        for (String key : dict.keySet()) {\n            if (!key.equals(key.toUpperCase()))\
    \ {\n                allUpper = false;\n                break;\n            }\n\
    \        }\n        // check lower case\n        boolean allLower = true;\n  \
    \      for (String key : dict.keySet()) {\n            if (!key.equals(key.toLowerCase()))\
    \ {\n                allLower = false;\n                break;\n            }\n\
    \        }\n        // returns\n        return allUpper || allLower;", "     \
    \   if (dict.isEmpty()) {\n            return false;\n        }\n        Optional<String>\
    \ firstKey = dict.keySet().stream().findFirst();\n        if (!firstKey.isPresent())\
    \ {\n            return false;\n        }\n        if (firstKey.get().toUpperCase().equals(firstKey.get()))\
    \ {\n            return dict.keySet().stream().allMatch(s -> s.toUpperCase().equals(s));\n\
    \        } else if (firstKey.get().toLowerCase().equals(firstKey.get())) {\n \
    \           return dict.keySet().stream().allMatch(s -> s.toLowerCase().equals(s));\n\
    \        } else {\n            return false;\n        }", "        if (dict.isEmpty())\
    \ {\n            return false;\n        }\n        boolean allLowerCase = dict.keySet().stream().allMatch(k\
    \ -> k.matches(\"^[a-z]+$\"));\n        boolean allUpperCase = dict.keySet().stream().allMatch(k\
    \ -> k.matches(\"^[A-Z]+$\"));\n        return allLowerCase || allUpperCase;",
  "        // Enter your code here\n        var it = dict.keySet().iterator();\n \
    \       if (!it.hasNext()) return false;\n        String test = it.next();\n \
    \       String ret = test.equals(test.toLowerCase()) ? test.toLowerCase() : test.toUpperCase();\n\
    \        for (String s : dict.keySet()) {\n            if (!s.equals(ret)) return\
    \ false;\n        }\n        return true;", "        boolean up = false;\n   \
    \     for (String key : dict.keySet()) {\n            if (key.length() == 0)\n\
    \                return false;\n            if (key.toUpperCase().equals(key))\
    \ {\n                if (up)\n                    return false;\n            \
    \    up = true;\n            }\n            else if (key.toLowerCase().equals(key))\
    \ {\n                if (!up)\n                    return false;\n           \
    \     up = false;\n            }\n            else\n                return false;\n\
    \        }\n        return true;", '        return false;', '      return true;',
  "        if (dict.isEmpty()) return false;\n        boolean result = true;\n   \
    \     for (Map.Entry<String,String> entry : dict.entrySet()) {\n            if\
    \ (!entry.getKey().toLowerCase().equals(entry.getKey()) && !entry.getKey().toUpperCase().equals(entry.getKey()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;", "        boolean isLowerCase = true;\n  \
    \      boolean isUpperCase = true;\n        if (dict.isEmpty()) {\n          \
    \  return false;\n        }\n        for (String key : dict.keySet()) {\n    \
    \        if (isLowerCase && !key.equals(key.toLowerCase())) {\n              \
    \  isLowerCase = false;\n            }\n            if (isUpperCase && !key.equals(key.toUpperCase()))\
    \ {\n                isUpperCase = false;\n            }\n        }\n        return\
    \ isLowerCase || isUpperCase;", '        throw new RuntimeException("Implement
    me!");', '        return true;', '        return false;', "        // TODO: complete\
    \ this method\n        // return true iff the keys of the given dictionary dict\
    \ are \n        // either all strings in lower case or all strings in upper case\n\
    \        // else return false.\n        Set<String> lc = new HashSet<>();\n  \
    \      Set<String> uc = new HashSet<>();\n        for (Map.Entry<String, String>\
    \ entry : dict.entrySet()) {\n            String key = entry.getKey();\n     \
    \       if (key.equals(key.toLowerCase())) {\n                lc.add(key);\n \
    \           } else if (key.equals(key.toUpperCase())) {\n                uc.add(key);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \        if (lc.size() == 0 || uc.size() == 0) {\n            return true;\n \
    \       }\n        return false;", '        return false;', '        return false;',
  '        throw new UnsupportedOperationException("Implement Me!");', "        boolean\
    \ upperCase = true;\n        boolean lowerCase = true;\n        for (String key\
    \ : dict.keySet()) {\n            if (key.equals(key.toLowerCase())) {\n     \
    \           upperCase = false;\n            }\n            if (key.equals(key.toUpperCase()))\
    \ {\n                lowerCase = false;\n            }\n        }\n        return\
    \ (upperCase || lowerCase);", '        return false;', "        for (Map.Entry<String,\
    \ String> pair : dict.entrySet()) {\n            String key = pair.getKey();\n\
    \            if (!isUpperCase(key) && !isLowerCase(key)) {\n                return\
    \ false;\n            }\n        }\n        boolean isUpper = isUpperCase(dict.keySet().toArray()[0].toString());\n\
    \        for (Map.Entry<String, String> pair : dict.entrySet()) {\n          \
    \  String key = pair.getKey();\n            if ((isUpper && !isUpperCase(key))\
    \ || (!isUpper && !isLowerCase(key))) {\n                return false;\n     \
    \       }\n        }\n        return true;", "        // TODO\n        return\
    \ false;", '        return false;', "        // Implement your solution here\n\
    \        for (Map.Entry<String, String> entry : dict.entrySet()) {\n         \
    \   if (entry.getKey().equals(entry.getKey().toLowerCase()))\n               \
    \ return true;\n            else if (entry.getKey().equals(entry.getKey().toUpperCase()))\n\
    \                return true;\n            else\n                return false;\n\
    \        }\n        return false;", "        if (dict.isEmpty()) return false;\n\
    \        boolean allUpperCase = true;\n        boolean allLowerCase = true;\n\
    \        for (String key : dict.keySet()) {\n            if (!(key.toUpperCase().equals(key)))\
    \ allUpperCase = false;\n            if (!(key.toLowerCase().equals(key))) allLowerCase\
    \ = false;\n        }\n        return allUpperCase || allLowerCase;", "      \
    \  String firstString = dict.get(dict.keySet().iterator().next());\n        boolean\
    \ isUpper = firstString.toUpperCase().equals(firstString);\n        for (Map.Entry<String,\
    \ String> entry : dict.entrySet()) {\n            if (!isUpper && entry.getKey().toUpperCase().equals(entry.getKey()))\
    \ {\n                return false;\n            }\n            if (isUpper &&\
    \ entry.getKey().toLowerCase().equals(entry.getKey())) {\n                return\
    \ false;\n            }\n        }\n        return true;", '        return true;',
  "        if (dict.isEmpty()) return false;\n        if (dict.size() == 1) return\
    \ true;\n        // Collect a set of lowercase keys and a set of uppercase keys.\n\
    \        Set<String> lower_keys = dict.keySet().stream().filter(k -> k.equals(k.toLowerCase())).collect(Collectors.toSet());\n\
    \        Set<String> upper_keys = dict.keySet().stream().filter(k -> k.equals(k.toUpperCase())).collect(Collectors.toSet());\n\
    \        return (lower_keys.size() == dict.size() || upper_keys.size() == dict.size());",
  '        throw new RuntimeException("Not implemented");', "        return (dict.keySet().stream().allMatch(k\
    \ -> Character.isUpperCase(k.charAt(0))) ||\n                dict.keySet().stream().allMatch(k\
    \ -> Character.isLowerCase(k.charAt(0))));", '        return null;', "       \
    \ var keys = dict.keySet();\n        return (keys.stream().allMatch(e -> e.equals(e.toLowerCase()))\
    \ ||\n                keys.stream().allMatch(e -> e.equals(e.toUpperCase())));",
  "        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean\
    \ uc = isUpperCase(dict.keySet().stream().findFirst().get());\n        for (String\
    \ key : dict.keySet()) {\n            if (isUpperCase(key) != uc) {\n        \
    \        return false;\n            }\n        }\n        return true;", '        //
    Write code here', '        return true;', '        return true;', "        boolean\
    \ caseLower = true;\n        boolean caseUpper = true;\n        boolean anyUpper\
    \ = false;\n        boolean anyLower = false;\n        // Loop over each key in\
    \ the hash map and test if they are lower case\n        for (String key : dict.keySet())\
    \ {\n            if (key.toLowerCase().equals(key)) {\n                anyLower\
    \ = true;\n            } else {\n                caseLower = false;\n        \
    \    }\n            if (key.toUpperCase().equals(key)) {\n                anyUpper\
    \ = true;\n            } else {\n                caseUpper = false;\n        \
    \    }\n        }\n        // Return true if we are all lower case, or all upper\
    \ case\n        return ((caseLower && anyLower) || (caseUpper && anyUpper));",
  "        if (dict.isEmpty()) {\n            return false;\n        } else {\n  \
    \          Set<String> keys = dict.keySet();\n            if (keys.stream().allMatch(key\
    \ -> key.equals(key.toLowerCase()))) {\n                return true;\n       \
    \     } else if (keys.stream().allMatch(key -> key.equals(key.toUpperCase())))\
    \ {\n                return true;\n            } else {\n                return\
    \ false;\n            }\n        }", "        HashMap<String,String> lowerDict\
    \ = new HashMap<String,String>();\n        HashMap<String,String> upperDict =\
    \ new HashMap<String,String>();\n        for (Map.Entry<String,String> entry :\
    \ dict.entrySet()) {\n            String key = entry.getKey();\n            String\
    \ lowerKey = key.toLowerCase();\n            String upperKey = key.toUpperCase();\n\
    \            if (key.equals(lowerKey)) {\n                lowerDict.put(key, dict.get(key));\n\
    \            } else if (key.equals(upperKey)) {\n                upperDict.put(key,\
    \ dict.get(key));\n            } else {\n                return false;\n     \
    \       }\n        }\n        return (lowerDict.size() == dict.size() || upperDict.size()\
    \ == dict.size());", '        return false;', "        if (dict.isEmpty()) return\
    \ false;\n        int is_upper = 0;\n        int is_lower = 0;\n        for (String\
    \ key : dict.keySet()) {\n            if (key.chars().allMatch(Character::isUpperCase))\
    \ {\n                is_upper = 1;\n            } else if (key.chars().allMatch(Character::isLowerCase))\
    \ {\n                is_lower = 1;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return is_upper + is_lower == 1;",
  "        // Fill in the code below\n        return dict.keySet().stream().allMatch(k\
    \ -> k.toUpperCase().equals(k)) || dict.keySet().stream().allMatch(k -> k.toLowerCase().equals(k));",
  "        // TODO: Implement me!\n        return false;", "        // Your code here\n\
    \        int lowerCaseCount = 0;\n        int upperCaseCount = 0;\n        for\
    \ (String key : dict.keySet()) {\n            if (Character.isUpperCase(key.charAt(0)))\
    \ {\n                upperCaseCount++;\n            } else {\n               \
    \ lowerCaseCount++;\n            }\n        }\n        if (lowerCaseCount == 0\
    \ || upperCaseCount == 0) {\n            return true;\n        }\n        return\
    \ false;", '        return true;', '        // Your code here', "        // Write\
    \ your code below this line\n        Set<String>set = dict.keySet();\n       \
    \ List<String>list = new ArrayList<String>(set);\n        boolean allLower = true;\n\
    \        boolean allUpper = true;\n        if(set.size() > 0){\n            for(int\
    \ i = 0; i < list.size(); i++){\n                if(list.get(i).matches(\"[a-z]+\"\
    )){\n                    allUpper = false;\n                }\n              \
    \  else if(list.get(i).matches(\"[A-Z]+\")){\n                    allLower = false;\n\
    \                }\n                else{\n                    return false;\n\
    \                }\n            }\n            if(allLower || allUpper){\n   \
    \             return true;\n            }\n            else{\n               \
    \ return false;\n            }\n        }\n        else{\n            return false;\n\
    \        }\n        // Write your code above this line", '        return false;',
  '        return dict.keySet().stream().noneMatch(x -> Character.isLetter(x.charAt(0))
    && x.toUpperCase().equals(x)) ? false : dict.keySet().stream().noneMatch(x ->
    Character.isLetter(x.charAt(0)) && x.toLowerCase().equals(x)) ? false : true;',
  '        return false;', "        if (dict.isEmpty()) return false;\n        String\
    \ keySet = dict.keySet().toString();\n        keySet = keySet.replaceAll(\"\\\\\
    [|\\\\]|,| \", \"\");\n        if (keySet.equals(keySet.toLowerCase())) return\
    \ true;\n        if (keySet.equals(keySet.toUpperCase())) return true;\n     \
    \   return false;", "        if (dict.isEmpty()) {\n            return false;\n\
    \        }\n        if (dict.keySet().stream().filter(s -> s.equals(s.toLowerCase())).count()\
    \ == dict.size()) {\n            return true;\n        }\n        if (dict.keySet().stream().filter(s\
    \ -> s.equals(s.toUpperCase())).count() == dict.size()) {\n            return\
    \ true;\n        }\n        return false;", "        // Fill in code here\n  \
    \      return false;", "\tboolean case1 = true;\n\tboolean case2 = true;\n\tIterator\
    \ it = dict.entrySet().iterator();\n\tint length = dict.entrySet().size();\n\t\
    if (length == 0) {\n\t    return false;\n\t}\n\tfor (Map.Entry<String, String>\
    \ entry : dict.entrySet()) {\n\t    String key = entry.getKey();\n\t    if (key.equals(key.toLowerCase()))\
    \ {\n\t\tcase1 = true;\n\t    } else {\n\t\tcase1 = false;\n\t\tbreak;\n\t   \
    \ }\n\t}\n\tfor (Map.Entry<String, String> entry : dict.entrySet()) {\n\t    String\
    \ key = entry.getKey();\n\t    if (key.equals(key.toUpperCase())) {\n\t\tcase2\
    \ = true;\n\t    } else {\n\t\tcase2 = false;\n\t\tbreak;\n\t    }\n\t}\n\tif\
    \ (case1 || case2) {\n\t    return true;\n\t} else {\n\t    return false;\n\t}",
  '        return false;', "        boolean res = true;\n        Iterator it = dict.entrySet().iterator();\n\
    \        String k = \"\";\n        while (it.hasNext()) {\n            Map.Entry\
    \ pair = (Map.Entry)it.next();\n            k = (String)pair.getKey();\n     \
    \       if (!k.equals(k.toLowerCase()) && !k.equals(k.toUpperCase())) {\n    \
    \            res = false;\n                break;\n            }\n        }\n\
    \        return res;", '        // Your code goes here', "        if (dict.isEmpty())\
    \ {\n            return false;\n        }\n        String a = \"\";\n        String\
    \ b = \"\";\n        for (String k : dict.keySet()) {\n            a = k.toLowerCase();\n\
    \            b = k.toUpperCase();\n            if (!(a.equals(k) || b.equals(k)))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        try {\n            Optional<String> firstKey = dict.keySet().stream().findFirst();\n\
    \            if (firstKey.isPresent()) {\n                boolean allUpper = firstKey.get().equals(firstKey.get().toUpperCase());\n\
    \                for (String key : dict.keySet()) {\n                    if (allUpper\
    \ != key.equals(key.toUpperCase())) {\n                        return false;\n\
    \                    }\n                }\n            }\n            return true;\n\
    \        } catch (Exception e) {\n            return false;\n        }", '        return
    false;', "        // Code here.\n        boolean isLower = false;\n        boolean\
    \ isUpper = false;\n        for (String key : dict.keySet()) {\n            if\
    \ (!isLower && isUpper && !isUpperCase(key)) {\n                return false;\n\
    \            }\n            if (!isUpper && isLower && !isLowerCase(key)) {\n\
    \                return false;\n            }\n            if (!isLower && !isUpper)\
    \ {\n                isLower = isLowerCase(key);\n                isUpper = isUpperCase(key);\n\
    \            }\n        }\n        return true;", "        HashMap<Character,\
    \ Integer> chars = new HashMap<Character, Integer>();\n        for (String k :\
    \ dict.keySet()) {\n            for (char c : k.toCharArray()) {\n           \
    \     chars.put(c, chars.getOrDefault(c, 0) + 1);\n            }\n        }\n\
    \        boolean isAllUpper = true;\n        boolean isAllLower = true;\n    \
    \    for (char c : chars.keySet()) {\n            if (Character.isLetter(c)) {\n\
    \                isAllUpper = isAllUpper && Character.isUpperCase(c);\n      \
    \          isAllLower = isAllLower && Character.isLowerCase(c);\n            }\n\
    \        }\n        return isAllUpper || isAllLower;", '        return dict.keySet().stream().allMatch(i
    -> i.toUpperCase().equals(i)) || dict.keySet().stream().allMatch(i -> i.toLowerCase().equals(i));',
  "        if (dict.isEmpty()) return false;\n        boolean isUpper = true;\n  \
    \      boolean isLower = true;\n        for (String key : dict.keySet()) {\n \
    \           for (int i = 0; i < key.length(); i++) {\n                if (isUpper\
    \ && key.charAt(i) < 'A' || key.charAt(i) > 'Z') {\n                    isUpper\
    \ = false;\n                }\n                if (isLower && key.charAt(i) <\
    \ 'a' || key.charAt(i) > 'z') {\n                    isLower = false;\n      \
    \          }\n            }\n        }\n        return isUpper || isLower;", '        return
    true;', '        // write your code here', '        return true;', '        return
    false;', "\t\treturn dict.keySet().stream().map(a -> a.toLowerCase()).allMatch(a\
    \ -> a.equals(dict.keySet().iterator().next().toLowerCase())) || dict.keySet().stream().map(a\
    \ -> a.toUpperCase()).allMatch(a -> a.equals(dict.keySet().iterator().next().toUpperCase()));",
  '        return true;', '        return Arrays.stream(dict.keySet().toArray()).allMatch(key
    -> key.toString().toLowerCase().equals(key.toString())) || Arrays.stream(dict.keySet().toArray()).allMatch(key
    -> key.toString().toUpperCase().equals(key.toString()));', '        return true;',
  '        return false;', "        if (dict.isEmpty()) {\n            return false;\n\
    \        }\n        String keySet = String.join(\"\", dict.keySet());\n      \
    \  if (keySet.equals(keySet.toLowerCase())) {\n            return true;\n    \
    \    }\n        if (keySet.equals(keySet.toUpperCase())) {\n            return\
    \ true;\n        }\n        return false;", "        if (dict.isEmpty()) {\n \
    \           return false;\n        }\n        boolean isUpper = true;\n      \
    \  boolean isLower = true;\n        for (Map.Entry<String, String> entry : dict.entrySet())\
    \ {\n            String key = entry.getKey();\n            if (key.equals(key.toLowerCase()))\
    \ {\n                isUpper = false;\n            }\n            if (key.equals(key.toUpperCase()))\
    \ {\n                isLower = false;\n            }\n        }\n        return\
    \ isUpper || isLower;", '        return dict.keySet().stream().allMatch(s -> s.equals(s.toLowerCase()))
    || dict.keySet().stream().allMatch(s -> s.equals(s.toUpperCase()));', "      \
    \  Set<String> l = dict.keySet();\n        Iterator<String> il = l.iterator();\n\
    \        while (il.hasNext()) {\n            String s = il.next();\n         \
    \   if (!isStringInUpperCase(s) && !isStringInLowerCase(s))\n                return\
    \ false;\n        }\n        return true;", "        boolean is_upper = false;\n\
    \        boolean is_lower = false;\n        for (Map.Entry<String, String> entry\
    \ : dict.entrySet()) {\n            String key = entry.getKey();\n           \
    \ String val = entry.getValue();\n            if (key.toUpperCase().equals(key))\
    \ {\n                is_upper = true;\n            }\n            if (key.toLowerCase().equals(key))\
    \ {\n                is_lower = true;\n            }\n        }\n        return\
    \ (is_upper && !is_lower) || (!is_upper && is_lower);", '        throw new UnsupportedOperationException("Problem04:
    checkDictCase");', "        return dict.keySet().stream().allMatch(k -> k.toUpperCase().equals(k))\n\
    \            || dict.keySet().stream().allMatch(k -> k.toLowerCase().equals(k));",
  "\t// define a variable to check if all keys are strings in lower case\n\tboolean\
    \ allLower = true;\n\t// define a variable to check if all keys are strings in\
    \ upper case\n\tboolean allUpper = true;\n\t// use stream to go through each key\
    \ in the hash map\n\tdict.keySet().stream().forEach(key -> {\n\t\t// check if\
    \ any key is not in lower case\n\t\tif (!key.equals(key.toLowerCase())) {\n\t\t\
    \    // set allLower to false if any key is not in lower case\n\t\t    allLower\
    \ = false;\n\t\t}\n\t\t// check if any key is not in upper case\n\t\tif (!key.equals(key.toUpperCase()))\
    \ {\n\t\t    // set allUpper to false if any key is not in upper case\n\t\t  \
    \  allUpper = false;\n\t\t}\n\t    });\n\t// return true if all keys are strings\
    \ in lower case or all keys are strings in upper case\n\t// else return false\n\
    \treturn (allLower || allUpper);", "        // >>> YOUR CODE GOES HERE <<<\n \
    \       return dict.keySet().stream().filter(s -> !s.toLowerCase().equals(s)).count()\
    \ == 0\n            || dict.keySet().stream().filter(s -> !s.toUpperCase().equals(s)).count()\
    \ == 0;", '        return false;', "        //if (dict.size() == 0) return false;\n\
    \        try {\n            for (Map.Entry<String,String> entry : dict.entrySet())\
    \ {\n                if (!entry.getKey().equals(entry.getKey().toLowerCase()))\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return true;\n        } catch (Exception e) {\n            return false;\n\
    \        }", '        return false;', '        return true;', '        return
    false;', "        // Write code here\n        throw new UnsupportedOperationException(\"\
    Impossible to complete\");", '        return false;', "        if (dict.isEmpty())\
    \ {\n            return false;\n        }\n        boolean allUpper = dict.keySet().stream().allMatch(key\
    \ -> key.toUpperCase().equals(key));\n        boolean allLower = dict.keySet().stream().allMatch(key\
    \ -> key.toLowerCase().equals(key));\n        return allUpper || allLower;", '        return
    false;', "        boolean isTrue = true;\n        boolean allUpper = true;\n \
    \       boolean allLower = true;\n        for (String key : dict.keySet()) {\n\
    \            String key2 = key.toUpperCase();\n            String key3 = key.toLowerCase();\n\
    \            if (!key.equals(key2)) {\n                allUpper = false;\n   \
    \         }\n            if (!key.equals(key3)) {\n                allLower =\
    \ false;\n            }\n        }\n        if (allUpper || allLower) {\n    \
    \        isTrue = true;\n        } else {\n            isTrue = false;\n     \
    \   }\n        return isTrue;", '        return dict.isEmpty() ? false : dict.keySet().stream().map(String::toUpperCase).collect(Collectors.toSet()).equals(dict.keySet())
    || dict.keySet().stream().map(String::toLowerCase).collect(Collectors.toSet()).equals(dict.keySet());',
  "        // replace the line below with your solution\n        // return true;\n\
    \        boolean flag = true;\n        for (Map.Entry<String, String> entry :\
    \ dict.entrySet()) {\n            if (entry.getKey().equals(entry.getKey().toLowerCase()))\
    \ {\n                if (flag != true) {\n                    return false;\n\
    \                }\n                flag = true;\n            } else if (entry.getKey().equals(entry.getKey().toUpperCase()))\
    \ {\n                if (flag != false) {\n                    return false;\n\
    \                }\n                flag = false;\n            } else {\n    \
    \            return false;\n            }\n        }\n        return true;", '        return
    true;', "    }\n    // Given a hash map, return a tuple where the first element\
    \ is the hash map \n    // with values greater than zero and the second element\
    \ is the hash map with \n    // values less than or equal to zero. If a key is\
    \ present in both maps, the \n    // key should be added only to the first map.\
    \ The function should return an \n    // empty tuple if the given hash map is\
    \ empty.\n    // Examples:\n    // >>> divideDict((new HashMap<String,Integer>(Map.of(\"\
    a\", 0, \"b\", 1, \"c\", 2, \"d\", -1, \"e\", -3))))\n    // ((new HashMap<String,Integer>(Map.of(\"\
    b\", 1, \"c\", 2))),(new HashMap<String,Integer>(Map.of(\"a\", 0, \"d\", -1, \"\
    e\", -3))))\n    // >>> divideDict((new HashMap<String,Integer>(Map.of(\"a\",\
    \ 0, -7, 1, \"c\", 2, \"d\", -1, \"e\", -3))))\n    // ((new HashMap<String,Integer>(Map.of(\"\
    c\", 2))),(new HashMap<String,Integer>(Map.of(\"a\", 0, -7, 1, \"d\", -1, \"e\"\
    , -3))))\n    // >>> divideDict((new HashMap<String,Integer>(Map.of(\"a\", 0,\
    \ \"b\", 1, \"c\", 2, \"d\", -1, \"e\", -3, \"f\", -1))))\n    // ((new HashMap<String,Integer>(Map.of(\"\
    b\", 1, \"c\", 2))),(new HashMap<String,Integer>(Map.of(\"a\", 0, \"d\", -1, \"\
    e\", -3, \"f\", -1))))\n    // >>> divideDict((new HashMap<String,Integer>(Map.of(\"\
    a\", 0, \"b\", 1, \"c\", 2, \"d\", -1, \"e\", -3, \"b\", -1))))\n    // ((new\
    \ HashMap<String,Integer>(Map.of(\"b\", 1, \"c\", 2))),(new HashMap<String,Integer>(Map.of(\"\
    a\", 0, \"d", '        return true;', "        if (dict.isEmpty()) {\n       \
    \     return false;\n        } else {\n            boolean checkUpper = true;\n\
    \            boolean checkLower = true;\n            for (String key : dict.keySet())\
    \ {\n                if (key.toUpperCase().equals(key)) {\n                  \
    \  checkLower = false;\n                } else if (key.toLowerCase().equals(key))\
    \ {\n                    checkUpper = false;\n                } else {\n     \
    \               return false;\n                }\n            }\n            return\
    \ checkUpper || checkLower;\n        }", '        return dict.keySet().stream().allMatch(x
    -> x.equals(x.toLowerCase())) || dict.keySet().stream().allMatch(x -> x.equals(x.toUpperCase()));',
  '        return false;', "        int count = 0;\n        boolean result = false;\n\
    \        for (Map.Entry<String, String> entry : dict.entrySet()) {\n         \
    \   if (entry.getKey().equals(entry.getKey().toLowerCase())) {\n             \
    \   count += 1;\n            }\n        }\n        if (count == dict.size()) {\n\
    \            result = true;\n        } else {\n            result = false;\n \
    \       }\n        return result;", "        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        int count = 0;\n        for (String s :\
    \ dict.keySet()) {\n            if (s.equals(s.toLowerCase())) {\n           \
    \     count++;\n            }\n        }\n        return count == dict.size()\
    \ || count == 0;", "        if (dict.isEmpty()) {\n            return false;\n\
    \        }\n        boolean isUpper = dict.entrySet().stream().findFirst().get().getKey().toUpperCase().equals(dict.entrySet().stream().findFirst().get().getKey());\n\
    \        return dict.entrySet().stream().map(e -> e.getKey().toUpperCase().equals(e.getKey())).allMatch(x\
    \ -> x == isUpper);", "        // YOUR CODE HERE\n        return false;", "  \
    \      if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        // TODO: Complete the code.\n        return false;", "        Set<String>\
    \ keys = dict.keySet();\n        // Write your code here\n        return false;",
  "        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean\
    \ allUpper = true;\n        boolean allLower = true;\n        for (String key\
    \ : dict.keySet()) {\n            if (key.equals(key.toLowerCase())) {\n     \
    \           allUpper = false;\n            } else if (key.equals(key.toUpperCase()))\
    \ {\n                allLower = false;\n            } else {\n               \
    \ return false;\n            }\n        }\n        return allUpper || allLower;",
  '        throw new java.lang.UnsupportedOperationException("Not yet implemented");',
  "        if (dict.isEmpty()) return false;\n        List<String> keys = new ArrayList<>(dict.keySet());\n\
    \        String dictType = keys.get(0).toLowerCase().equals(keys.get(0)) ? \"\
    lower\" : \"upper\";\n        for (String key : keys) {\n            if (dictType.equals(\"\
    lower\") && !key.toLowerCase().equals(key)) return false;\n            if (dictType.equals(\"\
    upper\") && !key.toUpperCase().equals(key)) return false;\n        }\n       \
    \ return true;", "        for (String key : dict.keySet()) {\n            if (!key.toLowerCase().equals(key)\
    \ && !key.toUpperCase().equals(key)) {\n                return false;\n      \
    \      }\n        }\n        return true;", '        return false;', '        throw
    new RuntimeException("Implement Me!");', "        // write code here\n       \
    \ boolean result = false;\n        if (dict.size() == 0) {\n            return\
    \ result;\n        }\n        Set<String> keys = dict.keySet();\n        int upper\
    \ = 0;\n        int lower = 0;\n        for (String key : keys) {\n          \
    \  char[] chars = key.toCharArray();\n            for (char c : chars) {\n   \
    \             if (Character.isUpperCase(c)) {\n                    upper++;\n\
    \                } else {\n                    lower++;\n                }\n \
    \           }\n        }\n        if (upper == 0) {\n            result = true;\n\
    \        } else if (lower == 0) {\n            result = true;\n        }\n   \
    \     return result;", "        // Write your code here\n        return true;",
  "        boolean allLower = true;\n        boolean allUpper = true;\n        Set<String>\
    \ keys = dict.keySet();\n        if (keys.size() == 0) {\n            return false;\n\
    \        }\n        for (String key : keys) {\n            if (key.toUpperCase().equals(key))\
    \ {\n                allLower = false;\n            }\n            if (key.toLowerCase().equals(key))\
    \ {\n                allUpper = false;\n            }\n        }\n        return\
    \ allLower || allUpper;", "        int upperCase = 0;\n        int lowerCase =\
    \ 0;\n        for (String key : dict.keySet()) {\n            if (key.equals(key.toUpperCase()))\
    \ {\n                upperCase += 1;\n            } else if (key.equals(key.toLowerCase()))\
    \ {\n                lowerCase += 1;\n            }\n        }\n        return\
    \ (lowerCase == dict.size() || upperCase == dict.size());", "        if (dict.isEmpty())\
    \ return false;\n        String x = dict.keySet().iterator().next();\n       \
    \ String y = x.toUpperCase();\n        if (x.equals(y)) {\n            return\
    \ dict.keySet().stream().allMatch(s -> s.equals(s.toUpperCase()));\n        }\
    \ else {\n            return dict.keySet().stream().allMatch(s -> s.equals(s.toLowerCase()));\n\
    \        }", "        // Replace below with your code\n        return false;",
  "        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean\
    \ upperCase = false;\n        for (String key : dict.keySet()) {\n           \
    \ if (key.charAt(0) >= 'A' && key.charAt(0) <= 'Z') {\n                upperCase\
    \ = true;\n                break;\n            }\n        }\n        for (String\
    \ key : dict.keySet()) {\n            if (upperCase) {\n                if (key.charAt(0)\
    \ >= 'a' && key.charAt(0) <= 'z') {\n                    return false;\n     \
    \           }\n            } else {\n                if (key.charAt(0) >= 'A'\
    \ && key.charAt(0) <= 'Z') {\n                    return false;\n            \
    \    }\n            }\n        }\n        return true;", '        throw new UnsupportedOperationException("Problem#checkDictCase
    is not implemented");', "        // YOUR CODE HERE\n        throw new UnsupportedOperationException(\"\
    Not Implemented Yet\");", "        if (dict.isEmpty()) {\n            return false;\n\
    \        }\n        // The hash map will have only strings as keys\n        //\
    \ Extract the set of keys and check if they are all in\n        // upper case\
    \ or all in lower case\n        // if (dict.keySet().stream().allMatch(s -> s.equals(s.toUpperCase())))\
    \ {\n        //     return true;\n        // }\n        // if (dict.keySet().stream().allMatch(s\
    \ -> s.equals(s.toLowerCase()))) {\n        //     return true;\n        // }\n\
    \        // return false;\n        // Collect the keys from the hash map into\
    \ a list\n        List<String> keys = new ArrayList<>(dict.keySet());\n      \
    \  if (keys.isEmpty()) {\n            return false;\n        }\n        // Map\
    \ each element of the list to lower case. If this list is equal\n        // to\
    \ the list of keys, return true. Else map each element of the list\n        //\
    \ to upper case. If this list is equal to the list of keys, return true.\n   \
    \     // Else return false.\n        return keys.equals(keys.stream().map(s ->\
    \ s.toLowerCase()).collect(Collectors.toList())) ||\n            keys.equals(keys.stream().map(s\
    \ -> s.toUpperCase()).collect(Collectors.toList()));", '        // Your code',
  "        // Your code goes here\n        return false;", '        // Fill in your
    code here', "        // Implementation\n        boolean lower = false;\n     \
    \   boolean upper = false;\n        for (String key : dict.keySet()) {\n     \
    \       if (key.toLowerCase().equals(key)) {\n                lower = true;\n\
    \            } else if (key.toUpperCase().equals(key)) {\n                upper\
    \ = true;\n            }\n        }\n        return lower ^ upper;", '        return
    true;', '        return dict.keySet().stream().allMatch(s -> s.matches("[a-zA-Z]+")
    && s.toLowerCase().equals(s)) ? dict.keySet().stream().allMatch(s -> s.matches("[a-z]+"))
    : !dict.keySet().stream().allMatch(s -> s.matches("[A-Z]+"));', '        return
    false;', "        List<String> uppers = new ArrayList<String>();\n        List<String>\
    \ lowers = new ArrayList<String>();\n        for (Map.Entry<String, String> entry\
    \ : dict.entrySet()) {\n            if (Character.isUpperCase(entry.getKey().charAt(0)))\
    \ {\n                uppers.add(entry.getKey());\n            } else {\n     \
    \           lowers.add(entry.getKey());\n            }\n        }\n        if\
    \ (uppers.size() == 0 || lowers.size() == 0) {\n            return true;\n   \
    \     }\n        return false;", "        if (dict.isEmpty()) {\n            return\
    \ false;\n        }\n        for (String key : dict.keySet()) {\n            if\
    \ (key.equals(key.toLowerCase())) {\n                for (String key2 : dict.keySet())\
    \ {\n                    if (!key2.equals(key2.toLowerCase())) {\n           \
    \             return false;\n                    }\n                }\n      \
    \          return true;\n            }\n            else if (key.equals(key.toUpperCase()))\
    \ {\n                for (String key2 : dict.keySet()) {\n                   \
    \ if (!key2.equals(key2.toUpperCase())) {\n                        return false;\n\
    \                    }\n                }\n                return true;\n    \
    \        }\n            else {\n                return false;\n            }\n\
    \        }\n        return false;", "        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        boolean lower = true;\n        boolean upper\
    \ = true;\n        for (String s : dict.keySet()) {\n            lower = lower\
    \ && s.equals(s.toLowerCase());\n            upper = upper && s.equals(s.toUpperCase());\n\
    \        }\n        return lower || upper;", "        if (dict.isEmpty()) {\n\
    \            return false;\n        } else {\n            long count = 0;\n  \
    \          for (String key : dict.keySet()) {\n                if (key.equals(key.toLowerCase()))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    return count == dict.size() || count == 0;\n        }", "        // Your\
    \ code here\n        return null;", "        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        var keys = dict.keySet();\n        boolean\
    \ lower = keys.stream().allMatch(e -> e.equals(e.toLowerCase()));\n        boolean\
    \ upper = keys.stream().allMatch(e -> e.equals(e.toUpperCase()));\n        return\
    \ lower || upper;", '        return false;', "        for (String k : dict.keySet())\
    \ {\n            if (k.toUpperCase().equals(k)) {\n                for (String\
    \ k2 : dict.keySet()) {\n                    if (!k2.toUpperCase().equals(k2))\
    \ {\n                        return false;\n                    }\n          \
    \      }\n                return true;\n            }\n            else if (k.toLowerCase().equals(k))\
    \ {\n                for (String k2 : dict.keySet()) {\n                    if\
    \ (!k2.toLowerCase().equals(k2)) {\n                        return false;\n  \
    \                  }\n                }\n                return true;\n      \
    \      }\n            else {\n                return false;\n            }\n \
    \       }\n        return false;", '        return false;', "        // Your code\
    \ here\n        return false;", '        return dict.keySet().stream().allMatch(k
    -> k.toUpperCase().equals(k) || k.toLowerCase().equals(k));', '        // => Complete
    this function', "        boolean result = true;\n        if (dict.size() > 0)\
    \ {\n            boolean isUpper = isUpper(dict.keySet().toArray()[0].toString());\n\
    \            for (String key : dict.keySet()) {\n                if (isUpper !=\
    \ isUpper(key)) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", '        return
    dict.keySet().stream().map(s -> s.toLowerCase()).distinct().count() == 1;', " \
    \       if (dict.isEmpty()) return false;\n        return dict.keySet().stream().allMatch(key\
    \ -> (key.equals(key.toLowerCase())) || (key.equals(key.toUpperCase())));", '        return
    false;', "        // Write your code here\n        if (dict.size() == 0) {\n \
    \           return false;\n        }\n        boolean state = Character.isUpperCase(dict.keySet().toArray()[0].toString().charAt(0));\n\
    \        for (String key : dict.keySet()) {\n            if (state != Character.isUpperCase(key.charAt(0)))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  '        return Stream.of(dict).map(e -> e.getKey()).map(s -> s.toUpperCase()).filter(s
    -> s.equals(s.toUpperCase())).count() == dict.size() || Stream.of(dict).map(e
    -> e.getKey()).map(s -> s.toLowerCase()).filter(s -> s.equals(s.toLowerCase())).count()
    == dict.size();', '        return false;', "        if (dict.isEmpty()) {\n  \
    \          return false;\n        }\n        List<String> keys = new ArrayList<>(dict.keySet());\n\
    \        String key = keys.get(0);\n        if (key.toUpperCase().equals(key))\
    \ {\n            for (String k : keys) {\n                if (!k.toUpperCase().equals(k))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     } else if (key.toLowerCase().equals(key)) {\n            for (String k :\
    \ keys) {\n                if (!k.toLowerCase().equals(k)) {\n               \
    \     return false;\n                }\n            }\n        } else {\n    \
    \        return false;\n        }\n        return true;", '        return false;',
  "        boolean lowerCase = false;\n        boolean upperCase = false;\n      \
    \  for (String key : dict.keySet()) {\n            if (isLowerCase(key)) {\n \
    \               lowerCase = true;\n            } else if (isUpperCase(key)) {\n\
    \                upperCase = true;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return lowerCase ^ upperCase;", " \
    \       int lower = 0;\n        int upper = 0;\n        for (Map.Entry<String,\
    \ String> item : dict.entrySet()) {\n            if (item.getKey().equals(item.getKey().toLowerCase()))\
    \ {\n                lower++;\n            } else if (item.getKey().equals(item.getKey().toUpperCase()))\
    \ {\n                upper++;\n            }\n        }\n        if (lower ==\
    \ dict.size() || upper == dict.size()) {\n            return true;\n        }\n\
    \        return false;", "        // store list of lower case keys\n        List<String>\
    \ lowerKeys = new ArrayList<String>();\n        // store list of upper case keys\n\
    \        List<String> upperKeys = new ArrayList<String>();\n        // iterate\
    \ over keys in the map\n        for (String key : dict.keySet()) {\n         \
    \   // determine if key is upper case or lower case\n            if (key.toUpperCase().equals(key))\
    \ {\n                // store upper case key\n                upperKeys.add(key);\n\
    \            } else {\n                // store lower case key\n             \
    \   lowerKeys.add(key);\n            }\n        }\n        // determine if upper\
    \ case keys list is empty\n        if (upperKeys.isEmpty()) {\n            //\
    \ no upper case keys\n            // return false if lower case keys list is empty\n\
    \            return !lowerKeys.isEmpty();\n        } else {\n            // upper\
    \ case keys\n            // return false if lower case keys list is not empty\n\
    \            return lowerKeys.isEmpty();\n        }", "        boolean allUpperCase\
    \ = true;\n        boolean allLowerCase = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key != key.toUpperCase()) {\n                allUpperCase\
    \ = false;\n            }\n            if (key != key.toLowerCase()) {\n     \
    \           allLowerCase = false;\n            }\n        }\n        return allUpperCase\
    \ || allLowerCase;", '        return dict.keySet().stream().allMatch(k -> k.matches("[a-z]+"))
    || dict.keySet().stream().allMatch(k -> k.matches("[A-Z]+"));', '        throw
    new RuntimeException("Not Implemented Yet");', '        return false;']
stop_tokens:
- "\n    }\n"
