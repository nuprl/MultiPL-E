name: HumanEval_158_find_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts an array array list of strings.\n\
  \    // The array list contains different words. Return the word with maximum number\n\
  \    // of unique characters. If multiple strings have maximum number of unique\n\
  \    // characters, return the one which comes first in lexicographical order.\n\
  \    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
  of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\"))))\n    // (\"enam\")\n    // >>> findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\"))))\n    // (\"aaaaaaa\")\n    public static String findMax(ArrayList<String>\
  \ words) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"\
  )))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
  )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
completions: ['        return null;', "        int max_char_count = 0;\n        String\
    \ word = \"\";\n        Iterator<String> it = words.iterator();\n        while\
    \ (it.hasNext()) {\n            String w = it.next();\n            if (w.length()\
    \ > max_char_count) {\n                max_char_count = w.length();\n        \
    \        word = w;\n            }\n        }\n        return word;", "       \
    \ String max = \"\";\n        for (String s : words) {\n            if (max.length()\
    \ == 0 ||\n                    (countUnique(s) == countUnique(max) && s.compareTo(max)\
    \ < 0) ||\n                    countUnique(s) > countUnique(max)) {\n        \
    \        max = s;\n            }\n        }\n        return max;", '        return
    "";', "        ArrayList<String> ans = (new ArrayList<String>());\n        int\
    \ max = -1;\n        for (String word : words) {\n            int unique = (new\
    \ HashSet<Character>(StringUtils.toList(word))).size();\n            if (unique\
    \ > max) {\n                ans = (new ArrayList<String>(Arrays.asList(word)));\n\
    \                max = unique;\n            } else if (unique == max) {\n    \
    \            ans.add(word);\n            }\n        }\n        if (ans.size()\
    \ == 1) {\n            return ans.get(0);\n        } else {\n            Collections.sort(ans);\n\
    \            return ans.get(0);\n        }", "        String res = \"\";\n   \
    \     int max = 0;\n        for (String word : words) {\n            int curr\
    \ = new HashSet<>(Arrays.asList(word.split(\"\"))).size();\n            if (curr\
    \ > max) {\n                max = curr;\n                res = word;\n       \
    \     }\n        }\n        return res;", '        return null;', '        return
    null;', "        String ans = words.get(0);\n        int cnt = unique(ans);\n\
    \        for (int i = 1; i < words.size(); i++) {\n            String cur = words.get(i);\n\
    \            int curcnt = unique(cur);\n            if (curcnt > cnt) {\n    \
    \            ans = cur;\n                cnt = curcnt;\n            }\n      \
    \  }\n        return ans;", "        int max = -1;\n        String maxWord = \"\
    \";\n        for (String word : words) {\n            HashSet<Character> visited\
    \ = new HashSet<Character>();\n            for (int i = 0; i < word.length();\
    \ i++) {\n                if (!visited.contains(word.charAt(i))) {\n         \
    \           visited.add(word.charAt(i));\n                }\n            }\n \
    \           if (visited.size() > max) {\n                max = visited.size();\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        String result = \"\";\n        int maxChar = -1;\n        for (String word\
    \ : words) {\n            int c = word.chars().distinct().count();\n         \
    \   if (c >= maxChar) {\n                maxChar = c;\n                result\
    \ = word;\n            }\n        }\n        return result;", "        return\
    \ words.stream().max(\n                Comparator.comparingInt(\n            \
    \        word -> word.chars().distinct().count()\n                ).thenComparing(\n\
    \                    Comparator.naturalOrder()\n                )\n          \
    \  ).get();", '        return null;', "        // Your code here\n        return\
    \ null;", "        // Write your code here.\n        return \"\";", "        Map<String,\
    \ Integer> wordsToUniqueCharacters = new HashMap<String, Integer>();\n       \
    \ for (String word : words) {\n            Set<Character> uniqueCharacters = new\
    \ HashSet<Character>();\n            for (char c : word.toCharArray()) {\n   \
    \             uniqueCharacters.add(c);\n            }\n            wordsToUniqueCharacters.put(word,\
    \ uniqueCharacters.size());\n        }\n        words.sort(new Comparator<String>()\
    \ {\n            @Override\n            public int compare(String o1, String o2)\
    \ {\n                int compareResult = wordsToUniqueCharacters.get(o2).compareTo(wordsToUniqueCharacters.get(o1));\n\
    \                if (compareResult == 0) {\n                    return o1.compareTo(o2);\n\
    \                }\n                return compareResult;\n            }\n   \
    \     });\n        return words.get(0);", '        return words.stream().max(Comparator.comparing(Problem::unique)).get();',
  "        // TODO: Implement.\n        return \"\";", "        String res = words.get(0);\n\
    \        Integer max = res.length();\n        for (int i = 1; i < words.size();\
    \ i++) {\n            String curr = words.get(i);\n            if (curr.length()\
    \ > max) {\n                max = curr.length();\n                res = curr;\n\
    \            }\n        }\n        return res;", "        // fill this in\n  \
    \      return \"\";", "        int max = 0;\n        String maxS = null;\n   \
    \     for (String s : words) {\n            int n = n_unique(s);\n           \
    \ if (n > max) {\n                max = n;\n                maxS = s;\n      \
    \      }\n        }\n        return maxS;", "        final List<String> words2\
    \ = words;\n        final ArrayList<Pair<String, Integer>> counts = new ArrayList<Pair<String,\
    \ Integer>>();\n        final int n = words2.size();\n        for (int i = 0;\
    \ i < n; i++) {\n            final HashSet<Character> s = new HashSet<Character>();\n\
    \            for (int j = 0; j < words2.get(i).length(); j++) {\n            \
    \    s.add(words2.get(i).charAt(j));\n            }\n            counts.add(new\
    \ Pair<String, Integer>(words2.get(i), s.size()));\n        }\n        final int[]\
    \ num = new int[1];\n        num[0] = -1;\n        final int[] pos = new int[1];\n\
    \        pos[0] = -1;\n        final ArrayList<Pair<String, Integer>> counts2\
    \ = counts;\n        counts2.forEach((final Pair<String, Integer> x) -> {\n  \
    \          if (x.getValue1() > num[0]) {\n                num[0] = x.getValue1();\n\
    \                pos[0] = counts2.indexOf(x);\n            }\n        });\n  \
    \      if (pos[0] == -1) {\n            return \"\";\n        }\n        return\
    \ counts.get(pos[0]).getValue0();", "        String maxWord = words.get(0);\n\
    \        int maxUniqueCharacters = uniqueCharacters(maxWord);\n        for (String\
    \ word : words) {\n            int uniqueCharacters = uniqueCharacters(word);\n\
    \            if (uniqueCharacters > maxUniqueCharacters || (uniqueCharacters ==\
    \ maxUniqueCharacters && word.compareTo(maxWord) < 0)) {\n                maxWord\
    \ = word;\n                maxUniqueCharacters = uniqueCharacters;\n         \
    \   }\n        }\n        return maxWord;", "        if (words.size()==0) return\
    \ \"\";\n        String res = words.get(0);\n        int max = countUniqueChars(res);\n\
    \        for (int i=1; i<words.size(); i++) {\n            String word = words.get(i);\n\
    \            int n = countUniqueChars(word);\n            if (n>max) {\n     \
    \           max = n;\n                res = word;\n            } else if (n==max)\
    \ {\n                if (word.compareTo(res)<0) {\n                    res = word;\n\
    \                }\n            }\n        }\n        return res;", "        //\
    \ You write the code\n        String temp = \"\";\n        for (String word :\
    \ words) {\n            if (word.length() == 1) {\n                return word;\n\
    \            }\n            if (word.length() > temp.length()) {\n           \
    \     temp = word;\n            }\n        }\n        Set<Character> set = new\
    \ HashSet<>();\n        for (int i = 0; i < temp.length(); i++) {\n          \
    \  set.add(temp.charAt(i));\n        }\n        for (String word : words) {\n\
    \            if (word.length() == set.size()) {\n                return word;\n\
    \            }\n        }\n        return temp;", '        return null;', '        throw
    new RuntimeException("Not implemented yet!");', '        return null;', "    \
    \    String ret = \"\";\n        int maxCount = 0;\n        for (String word :\
    \ words) {\n            int count = new HashSet<Character>(word.chars().mapToObj(c\
    \ -> (char)c).collect(Collectors.toList())).size();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                ret = word;\n        \
    \    }\n        }\n        return ret;", "        //write your code here\n   \
    \     return \"\";", "        //YOUR CODE HERE\n        //(new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))\n        List<String> result = new\
    \ ArrayList<String>();\n        for (String word : words) {\n            //System.out.println(word);\n\
    \            if (isUnique(word)) {\n                //System.out.println(word);\n\
    \                result.add(word);\n            }\n        }\n        return result.size()\
    \ == 0 ? \"\" : getFirstWord(result);", '        return "";', "        if (words.size()\
    \ == 0) {\n            return \"\";\n        }\n        return words.stream().reduce((a,\
    \ b) -> {\n            if (getUnique(a).size() > getUnique(b).size()) {\n    \
    \            return a;\n            } else if (getUnique(a).size() < getUnique(b).size())\
    \ {\n                return b;\n            } else {\n                return a.compareTo(b)\
    \ < 0 ? a : b;\n            }\n        }).get();", "        String result = words.get(0);\n\
    \        int longest = words.get(0).length();\n        for (int i = 1; i < words.size();\
    \ i++) {\n            String word = words.get(i);\n            if (word.length()\
    \ > longest) {\n                result = word;\n                longest = word.length();\n\
    \            }\n        }\n        return result;", "        String ans = \"\"\
    ;\n        int max = 0;\n        for (String word : words) {\n            int\
    \ count = countUnique(word);\n            if (count > max) {\n               \
    \ max = count;\n                ans = word;\n            }\n        }\n      \
    \  return ans;", '        return "";', '        return null;', '        return
    words.stream().max(Comparator.comparingInt(Problem::numUniqueChars)).get();',
  '        throw new java.lang.UnsupportedOperationException("Not implemented yet.");',
  "        ArrayList<String> maxWords = new ArrayList<String>();\n        int maxNumUniqueChars\
    \ = 0;\n        for (String word : words) {\n            if (word.length() > maxNumUniqueChars)\
    \ {\n                maxNumUniqueChars = word.length();\n                maxWords\
    \ = new ArrayList<String>();\n                maxWords.add(word);\n          \
    \  } else if (word.length() == maxNumUniqueChars) {\n                maxWords.add(word);\n\
    \            }\n        }\n        return maxWords.get(0);", "        int maxCount\
    \ = 0;\n        String maxWord = null;\n        for (String word : words) {\n\
    \            Set<Character> set = new HashSet<Character>();\n            for (char\
    \ ch : word.toCharArray()) {\n                set.add(ch);\n            }\n  \
    \          if (set.size() > maxCount) {\n                maxCount = set.size();\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // Declare a string and set it to the first word\n        String maxWord\
    \ = words.get(0);\n        // Declare an int and set it to the length of the first\
    \ word\n        int maxWordLength = words.get(0).length();\n        // Loop through\
    \ the words\n        for (String word : words) {\n            // If the length\
    \ of the word is greater than maxWordLength\n            if (word.length() > maxWordLength)\
    \ {\n                // Set maxWord to the word\n                maxWord = word;\n\
    \                // Set maxWordLength to the length of the word\n            \
    \    maxWordLength = word.length();\n            }\n        }\n        // Declare\
    \ a TreeSet and set it to the unique characters of maxWord\n        TreeSet<Character>\
    \ uniqueCharacters = new TreeSet<Character>();\n        for (char letter : maxWord.toCharArray())\
    \ {\n            uniqueCharacters.add(letter);\n        }\n        // Declare\
    \ an int and set it to the size of uniqueCharacters\n        int maxUniqueCharacters\
    \ = uniqueCharacters.size();\n        // Loop through the words\n        for (String\
    \ word : words) {\n            // Declare a TreeSet and set it to the unique characters\
    \ of the word\n            TreeSet<Character> wordUniqueCharacters = new TreeSet<Character>();\n\
    \            for (char letter : word.toCharArray()) {\n                wordUniqueCharacters.add(letter);\n\
    \            }\n            // If the size of wordUniqueCharacters is greater\
    \ than maxUniqueCharacters\n            if (wordUniqueCharacters.size() > maxUniqueCharacters)\
    \ {\n                // Set maxWord to the word\n                maxWord = word;\n\
    \                // Set maxUniqueCharacters to the size of wordUniqueCharacters\n\
    \                maxUniqueCharacters = wordUniqueCharacters.size();\n        \
    \    }\n        }\n        // Return maxWord\n        return maxWord;", "    \
    \    return Collections.max(words, new Comparator<String>() {\n            public\
    \ int compare(String a, String b) {\n                if (a.length() == b.length())\
    \ {\n                    return a.compareTo(b);\n                }\n         \
    \       return Integer.compare(a.length(), b.length());\n            }\n     \
    \   });", "        String word = \"\";\n        String maxWord = \"\";\n     \
    \   int max = 0;\n        int size = 0;\n        for (int i = 0; i < words.size();\
    \ i++) {\n            word = words.get(i);\n            size = findUnique(word).size();\n\
    \            if (size > max) {\n                max = size;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        int maxSize\
    \ = 0;\n        String maxString = null;\n        for (String word : words) {\n\
    \            Set<Character> set = new HashSet<Character>();\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                set.add(c);\n            }\n            if (set.size() >= maxSize)\
    \ {\n                maxSize = set.size();\n                maxString = word;\n\
    \            }\n        }\n        return maxString;", '        return null;',
  "        // WRITE CODE HERE\n        return \"\";", "        // your code here\n\
    \        return null;", "        ArrayList<String> max = new ArrayList<String>();\n\
    \        int maxUnique = 0;\n        for (String word : words) {\n           \
    \ int unique = 0;\n            HashSet<Character> letters = new HashSet<Character>();\n\
    \            for (int i = 0; i < word.length(); i++) {\n                letters.add(word.charAt(i));\n\
    \            }\n            unique = letters.size();\n            if (unique >\
    \ maxUnique) {\n                maxUnique = unique;\n                max.clear();\n\
    \                max.add(word);\n            } else if (unique == maxUnique) {\n\
    \                max.add(word);\n            }\n        }\n        Collections.sort(max);\n\
    \        return max.get(0);", "        if (words.size() == 0) {\n            return\
    \ \"\";\n        }\n        int maxLength = 0;\n        String result = words.get(0);\n\
    \        for (String word : words) {\n            int length = uniqueCharCount(word);\n\
    \            if (length > maxLength) {\n                maxLength = length;\n\
    \                result = word;\n            }\n        }\n        return result;",
  '        throw new NotImplementedError();', '        throw new UnsupportedOperationException("Not
    implemented yet");', '        return null;', "        if (words.size() == 0) {\n\
    \            return null;\n        }\n        int max = 0;\n        ArrayList<String>\
    \ candidates = new ArrayList<String>();\n        for (String word : words) {\n\
    \            Set<Character> chars = new HashSet<Character>();\n            for\
    \ (int i = 0; i < word.length(); i++) {\n                chars.add(word.charAt(i));\n\
    \            }\n            if (chars.size() > max) {\n                max = chars.size();\n\
    \                candidates = new ArrayList<String>();\n                candidates.add(word);\n\
    \            } else if (chars.size() == max) {\n                candidates.add(word);\n\
    \            }\n        }\n        Collections.sort(candidates);\n        return\
    \ candidates.get(0);", "        String result = null;\n        int max = 0;\n\
    \        for (String word : words) {\n            Set<Character> s = new HashSet<Character>();\n\
    \            for (int i = 0; i < word.length(); i++) {\n                s.add(word.charAt(i));\n\
    \            }\n            if (s.size() > max) {\n                max = s.size();\n\
    \                result = word;\n            }\n        }\n        return result;",
  '        return words.stream().max(Comparator.comparing(Problem::numberOfUniqueChars)).get();',
  "        HashMap<String, Integer> uniques = new HashMap<String, Integer>();\n  \
    \      for (String word : words) {\n            uniques.put(word, (new HashSet<Character>(word.chars().mapToObj(e\
    \ -> (char)e).collect(Collectors.toList()))).size());\n        }\n        int\
    \ max = 0;\n        for (String key : uniques.keySet()) {\n            max = Math.max(max,\
    \ uniques.get(key));\n        }\n        for (String key : uniques.keySet()) {\n\
    \            if (uniques.get(key) == max) {\n                return key;\n   \
    \         }\n        }\n        return \"\";", "        // return \"\";\n    \
    \    // Please write your solution after this line.\n        int max = 0;\n  \
    \      String ans = \"\";\n        for (String word : words) {\n            int\
    \ temp = 0;\n            for (int i = 0; i < word.length(); i++) {\n         \
    \       if (word.indexOf(word.charAt(i)) == i) {\n                    temp++;\n\
    \                }\n            }\n            if (temp > max) {\n           \
    \     max = temp;\n                ans = word;\n            }\n        }\n   \
    \     return ans;", "        String max = words.get(0);\n        for (String word\
    \ : words) {\n            if (word.length() > max.length()) {\n              \
    \  max = word;\n            }\n        }\n        return max;", "        String\
    \ max_word = null;\n        int max_count = -1;\n        for (String word : words)\
    \ {\n            Set<Character> set = new HashSet<Character>();\n            for\
    \ (int i = 0; i < word.length(); i++) {\n                set.add(word.charAt(i));\n\
    \            }\n            if (set.size() > max_count) {\n                max_count\
    \ = set.size();\n                max_word = word;\n            }\n        }\n\
    \        return max_word;", "        String max = \"\";\n        Set<Character>\
    \ unique = new HashSet<Character>();\n        for (String word : words) {\n  \
    \          if (max.length() < word.length()) {\n                max = word;\n\
    \            }\n            for (int i = 0; i < word.length(); i++) {\n      \
    \          if (!unique.contains(word.charAt(i))) {\n                    unique.add(word.charAt(i));\n\
    \                }\n            }\n            if (unique.size() > max.length())\
    \ {\n                max = word;\n            }\n            unique.clear();\n\
    \        }\n        return max;", "        int maxUniqChars = -1;\n        String\
    \ maxWord = \"\";\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  char c = word.charAt(i);\n                if (word.indexOf(c) == i) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > maxUniqChars) {\n                maxUniqChars = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        int max\
    \ = 0;\n        String ans = \"\";\n        for (String word : words) {\n    \
    \        if (word.length() > max) {\n                max = word.length();\n  \
    \              ans = word;\n            }\n        }\n        return ans;", " \
    \       if (words.size() == 0) {\n            return \"\";\n        }\n      \
    \  int max = 0;\n        String word = words.get(0);\n        for (String s :\
    \ words) {\n            if (uniqueChars(s) > max) {\n                max = uniqueChars(s);\n\
    \                word = s;\n            }\n        }\n        return word;", " \
    \       String[] wordsArr = words.toArray(new String[words.size()]);\n       \
    \ return findMax(wordsArr);", "        //your code here\n        int max = 0;\n\
    \        String str = \"\";\n        for (String word : words) {\n           \
    \ if (max < word.length()) {\n                max = word.length();\n         \
    \       str = word;\n            }\n        }\n        return str;", "       \
    \ String result = \"\";\n        int resultLength = 0;\n        int tempLength\
    \ = 0;\n        ArrayList<String> temp = new ArrayList<String>();\n        //\
    \ Loop through the words array\n        for (String word : words) {\n        \
    \    temp = new ArrayList<String>();\n            // Loop through the characters\
    \ of each word\n            for (int i = 0; i < word.length(); i++) {\n      \
    \          if (!temp.contains(word.substring(i, i + 1))) {\n                 \
    \   temp.add(word.substring(i, i + 1));\n                }\n            }\n  \
    \          tempLength = temp.size();\n            if (tempLength > resultLength)\
    \ {\n                result = word;\n                resultLength = tempLength;\n\
    \            } else if (tempLength == resultLength) {\n                if (word.compareTo(result)\
    \ < 0) {\n                    result = word;\n                    resultLength\
    \ = tempLength;\n                }\n            }\n        }\n        return result;",
  '        throw new UnsupportedOperationException("Please implement the findMax method");',
  "        String res = \"\";\n        int num = 0;\n        for (String word : words)\
    \ {\n            if (num < uniqueCharCount(word)) {\n                num = uniqueCharCount(word);\n\
    \                res = word;\n            }\n        }\n        return res;",
  "        // >>> your code here <<<\n        return null;", "        return words.stream().map(word\
    \ -> {\n            return new Tuple2<Integer, String>(word.chars().distinct().count(),\
    \ word);\n        }).max(Comparator.comparing(tuple -> tuple.getValue0())).get().getValue1();",
  '        return "";', "        if (words.size() == 0) {\n            return null;\n\
    \        }\n        int max = 0;\n        String max_word = null;\n        for\
    \ (String word : words) {\n            int unique = unique_letters(word);\n  \
    \          if (unique > max) {\n                max = unique;\n              \
    \  max_word = word;\n            }\n        }\n        return max_word;", "  \
    \      ArrayList<Integer> uniqueCharsInWords = new ArrayList<Integer>();\n   \
    \     for (String word : words) {\n            uniqueCharsInWords.add(countUniqueChars(word));\n\
    \        }\n        int maxChars = Collections.max(uniqueCharsInWords);\n    \
    \    int firstIndexOfMaxChars = uniqueCharsInWords.indexOf(maxChars);\n      \
    \  return words.get(firstIndexOfMaxChars);", "        String word = \"\";\n  \
    \      int max = 0;\n        for (String s : words) {\n            int count =\
    \ 0;\n            Set<Character> set = new HashSet<Character>();\n           \
    \ for (char c : s.toCharArray()) {\n                if (!set.contains(c)) {\n\
    \                    count++;\n                    set.add(c);\n             \
    \   }\n            }\n            if (count > max) {\n                max = count;\n\
    \                word = s;\n            }\n        }\n        return word;", " \
    \       // YOUR CODE HERE\n        return \"findMax\";", '        throw new RuntimeException("Method
    not implemented yet");', "        int max = Integer.MIN_VALUE;\n        String\
    \ maxWord = \"\";\n        for (String word : words) {\n            HashSet<Character>\
    \ chars = new HashSet<Character>();\n            for (char c : word.toCharArray())\n\
    \                chars.add(c);\n            if (chars.size() > max) {\n      \
    \          max = chars.size();\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", '        return "";', '        return null;',
  "        // Your code here...\n        return \"\";", '        return "";', "  \
    \      if (words.size() == 0) {\n            return \"\";\n        }\n       \
    \ ArrayList<String> sorted = new ArrayList<String>();\n        while (words.size()\
    \ > 0) {\n            int max = 0;\n            String maxword = \"\";\n     \
    \       for (String word : words) {\n                if (word.length() > max)\
    \ {\n                    max = word.length();\n                    maxword = word;\n\
    \                }\n            }\n            sorted.add(maxword);\n        \
    \    words.remove(maxword);\n        }\n        words = sorted;\n        int max\
    \ = 0;\n        String maxword = \"\";\n        for (String word : words) {\n\
    \            Set<Character> uniques = new HashSet<Character>();\n            for\
    \ (char c : word.toCharArray()) {\n                uniques.add(c);\n         \
    \   }\n            if (uniques.size() > max) {\n                max = uniques.size();\n\
    \                maxword = word;\n            }\n        }\n        return maxword;",
  "        HashMap<String, Integer> stringAndLength = new HashMap<String, Integer>();\n\
    \        int max = 0;\n        String maxString = \"\";\n        for (String word\
    \ : words) {\n            Set<Character> uniqueChar = new HashSet<Character>();\n\
    \            for (char c : word.toCharArray()) {\n                uniqueChar.add(c);\n\
    \            }\n            stringAndLength.put(word, uniqueChar.size());\n  \
    \          if (uniqueChar.size() > max) {\n                max = uniqueChar.size();\n\
    \                maxString = word;\n            }\n        }\n        for (String\
    \ word : words) {\n            if (stringAndLength.get(word) == max) {\n     \
    \           if (word.compareTo(maxString) < 0) {\n                    maxString\
    \ = word;\n                }\n            }\n        }\n        return maxString;",
  "        // Write your code here\n        int max = 0;\n        String maxWord =\
    \ \"\";\n        // Hashtable<String, Integer> charCount = new Hashtable<String,\
    \ Integer>();\n        for (String word : words) {\n            int count = 0;\n\
    \            Hashtable<Character, Boolean> charCount = new Hashtable<Character,\
    \ Boolean>();\n            for (int i = 0; i < word.length(); i++) {\n       \
    \         char c = word.charAt(i);\n                if (!charCount.containsKey(c))\
    \ {\n                    charCount.put(c, true);\n                    count++;\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxWord = word;\n            } else if (count\
    \ == max) {\n                if (word.compareTo(maxWord) < 0) {\n            \
    \        maxWord = word;\n                }\n            }\n        }\n      \
    \  return maxWord;", "        int max = 0;\n        String max_word = \"\";\n\
    \        for (String word : words) {\n            Set<Character> seen = new HashSet<Character>();\n\
    \            for (char ch : word.toCharArray()) {\n                seen.add(ch);\n\
    \            }\n            if (seen.size() > max) {\n                max = seen.size();\n\
    \                max_word = word;\n            }\n        }\n        return max_word;",
  '        return "unimplemented";', '        return words.stream().max(Comparator.comparingInt(Problem::unique).thenComparing(s
    -> s)).get();', "        // int max_len = 0;\n        // String max_word = \"\"\
    ;\n        // for (String word : words) {\n        //     if (word.length() >\
    \ max_len) {\n        //         max_len = word.length();\n        //        \
    \ max_word = word;\n        //     }\n        // }\n        //\n        // return\
    \ max_word;\n        String max_word = words.get(0);\n        for (String word\
    \ : words) {\n            if (max_word.length() < word.length()) {\n         \
    \       max_word = word;\n            }\n        }\n        return max_word;",
  "        // write your code below\n        return \"\";", "        String maxUniqueString\
    \ = \"\";\n        int maxUniqueCount = 0;\n        for (String word : words)\
    \ {\n            HashSet<Character> uniqueChars = new HashSet<Character>();\n\
    \            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n\
    \            }\n            if (uniqueChars.size() > maxUniqueCount) {\n     \
    \           maxUniqueCount = uniqueChars.size();\n                maxUniqueString\
    \ = word;\n            }\n        }\n        return maxUniqueString;", "     \
    \   if (words.size() == 0) {\n            return \"\";\n        } else {\n   \
    \         int maxUnique = 0;\n            String maxWord = words.get(0);\n   \
    \         Set<Character> set = new HashSet<Character>();\n            for (String\
    \ s : words) {\n                set.clear();\n                for (int i = 0;\
    \ i < s.length(); i++) {\n                    set.add(s.charAt(i));\n        \
    \        }\n                if (set.size() > maxUnique) {\n                  \
    \  maxUnique = set.size();\n                    maxWord = s;\n               \
    \ }\n            }\n            return maxWord;\n        }", "        // your\
    \ code here\n        return (new ArrayList<String>(Arrays.asList(\"\")))\n   \
    \         .stream()\n            .reduce((acc, word) -> acc)\n            .get();",
  "        int highest_count = 0;\n        String highest_count_word = \"\";\n   \
    \     for (String word : words) {\n            HashSet<Character> unique_chars\
    \ = new HashSet<Character>();\n            for (char c : word.toCharArray()) {\n\
    \                unique_chars.add(c);\n            }\n            if (unique_chars.size()\
    \ > highest_count) {\n                highest_count = unique_chars.size();\n \
    \               highest_count_word = word;\n            }\n        }\n       \
    \ return highest_count_word;", "        String maxWord = \"\";\n        int maxUnique\
    \ = 0;\n        for (String word : words) {\n            int unique = 0;\n   \
    \         for (int i = 0; i < word.length(); i++) {\n                if (word.substring(0,\
    \ i).indexOf(word.charAt(i)) == -1) {\n                    unique++;\n       \
    \         }\n            }\n            if (unique > maxUnique) {\n          \
    \      maxUnique = unique;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;", "        // Write code here!\n        //\
    \ (We want the function to return a string. You can\n        // thus just return\
    \ the string.)\n        // (We want the function to return the string \"name\"\
    . You can\n        // thus just return the string \"name\".)\n        // (We want\
    \ the function to return the string \"of\". You can\n        // thus just return\
    \ the string \"of\".)\n        // (We want the function to return the string \"\
    string\". You can\n        // thus just return the string \"string\".)\n     \
    \   // (We want the function to return the string \"name\". You can\n        //\
    \ thus just return the string \"name\".)\n        // (We want the function to\
    \ return the string \"enam\". You can\n        // thus just return the string\
    \ \"enam\".)\n        // (We want the function to return the string \"game\".\
    \ You can\n        // thus just return the string \"game\".)\n        // (We want\
    \ the function to return the string \"aaaaaaa\". You can\n        // thus just\
    \ return the string \"aaaaaaa\".)\n        // (We want the function to return\
    \ the string \"bb\". You can\n        // thus just return the string \"bb\".)\n\
    \        // (We want the function to return the string \"cc\". You can\n     \
    \   // thus just return the string \"cc\".)\n        throw new RuntimeException(\"\
    Please implement me\");", "        if (words.size() < 1) {\n            return\
    \ null;\n        } else {\n            List<Pair<String, Integer>> res = new ArrayList<Pair<String,\
    \ Integer>>();\n            for (String word : words) {\n                Set<Character>\
    \ set = new HashSet<Character>();\n                for (char c : word.toCharArray())\
    \ {\n                    set.add(c);\n                }\n                res.add(new\
    \ Pair<String, Integer>(word, set.size()));\n            }\n            int max\
    \ = 0;\n            String maxStr = null;\n            for (Pair<String, Integer>\
    \ p : res) {\n                if (p.getValue1() > max) {\n                   \
    \ max = p.getValue1();\n                    maxStr = p.getValue0();\n        \
    \        }\n            }\n            return maxStr;\n        }", '        return
    null;', "        int max = Integer.MIN_VALUE;\n        String s = \"\";\n    \
    \    for (String a : words) {\n            Set<Character> set = new HashSet<Character>();\n\
    \            for (char c : a.toCharArray()) {\n                set.add(c);\n \
    \           }\n            if (set.size() > max) {\n                max = set.size();\n\
    \                s = a;\n            }\n        }\n        return s;", "     \
    \ int mostUniqueChars = 0;\n      String result = \"\";\n      for (String word\
    \ : words) {\n        if (word.length() > mostUniqueChars) {\n          result\
    \ = word;\n          mostUniqueChars = word.length();\n        }\n      }\n  \
    \    return result;", "        String ans = \"\";\n        for (String word :\
    \ words) {\n            if (word.length() > ans.length()) {\n                ans\
    \ = word;\n            }\n        }\n        return ans;", "        String result\
    \ = words.get(0);\n        for (String word : words) {\n            if (word.length()\
    \ > result.length()) {\n                result = word;\n            }\n      \
    \  }\n        return result;", "        String max = null;\n        if (words.size()\
    \ > 0) {\n            max = words.get(0);\n            int max_unique = uniqueChars(max);\n\
    \            for (int i = 1; i < words.size(); i++) {\n                String\
    \ s = words.get(i);\n                int unique = uniqueChars(s);\n          \
    \      if (unique > max_unique) {\n                    max = s;\n            \
    \        max_unique = unique;\n                } else if (unique == max_unique)\
    \ {\n                    if (s.compareTo(max) < 0) {\n                       \
    \ max = s;\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        //throw new Exception(\"Not implemented\");\n\
    \        int max = 0;\n        String ans = words.get(0);\n        for (String\
    \ word : words) {\n            int uniques = (int) word.chars().distinct().count();\n\
    \            if (uniques > max) {\n                max = uniques;\n          \
    \      ans = word;\n            }\n        }\n        return ans;", "        if\
    \ (words.size() == 0) {\n            return \"\";\n        }\n        int max\
    \ = words.get(0).length();\n        String ret = words.get(0);\n        for (int\
    \ i = 1; i < words.size(); i++) {\n            int sz = words.get(i).length();\n\
    \            if (sz > max) {\n                max = sz;\n                ret =\
    \ words.get(i);\n            }\n        }\n        return ret;", "        String\
    \ result = null;\n        for (String word : words) {\n            if (result\
    \ == null || getUnique(word).size() > getUnique(result).size()) {\n          \
    \      result = word;\n            }\n        }\n        return result;", "  \
    \      int max = 0;\n        String ret = \"\";\n        for (String w : words)\
    \ {\n            if (unique(w) > max) {\n                max = unique(w);\n  \
    \              ret = w;\n            }\n        }\n        return ret;", '        return
    words.stream().max(Comparator.comparing(word -> word.chars().distinct().count())).get();',
  '        return null;', "        int max = 0;\n        int curr = 0;\n        String\
    \ maxString = \"\";\n        HashSet<Character> hs = new HashSet<Character>();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                hs.add(c);\n            }\n            curr = hs.size();\n\
    \            if (curr > max) {\n                max = curr;\n                maxString\
    \ = word;\n            }\n            else if (curr == max) {\n              \
    \  if (word.compareTo(maxString) < 0) {\n                    maxString = word;\n\
    \                }\n            }\n            hs.clear();\n        }\n      \
    \  return maxString;", "        Optional<Pair<String, Integer>> answer = words.stream().map(s\
    \ -> Pair.with(s, (int)s.chars().distinct().count())).sorted((p1, p2) -> p2.getValue1().compareTo(p1.getValue1())).filter(p\
    \ -> p.getValue1() == words.stream().map(s -> s.chars().distinct().count()).max(Integer::compare).get()).findFirst();\n\
    \        return answer.get().getValue0();", "        // your code here\n     \
    \   return \"\";", '        return words.stream().max(Comparator.comparing(Problem::countDistinct).thenComparing(String::compareTo)).get();',
  "        if (words.size() == 0) {\n            return \"\";\n        }\n       \
    \ String maxWord = words.get(0);\n        for (int i = 1; i < words.size(); i++)\
    \ {\n            String newWord = words.get(i);\n            if (newWord.length()\
    \ > maxWord.length()) {\n                maxWord = newWord;\n            } else\
    \ if (newWord.length() == maxWord.length()) {\n                if (newWord.compareTo(maxWord)\
    \ < 0) {\n                    maxWord = newWord;\n                }\n        \
    \    }\n        }\n        return maxWord;", "        HashMap<String, Integer>\
    \ wordMap = new HashMap<String, Integer>();\n        for (String word : words)\
    \ {\n            wordMap.put(word, countUnique(word));\n        }\n        int\
    \ max = Collections.max(wordMap.values());\n        ArrayList<String> maxWords\
    \ = new ArrayList<String>();\n        for (String key : wordMap.keySet()) {\n\
    \            if (wordMap.get(key) == max) {\n                maxWords.add(key);\n\
    \            }\n        }\n        String ans = maxWords.get(0);\n        for\
    \ (String word : maxWords) {\n            if (word.compareTo(ans) < 0) {\n   \
    \             ans = word;\n            }\n        }\n        return ans;", " \
    \       // Your code goes here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // WRONG\n        // return words.stream().reduce((acc,\
    \ word) -> {\n        //     if (word.chars().distinct().count() > acc.chars().distinct().count())\
    \ {\n        //         return word;\n        //     } else {\n        //    \
    \     return acc;\n        //     }\n        // }).get();\n        // RIGHT\n\
    \        // return words.stream().reduce((acc, word) -> {\n        //     long\
    \ accUniq = acc.chars().distinct().count();\n        //     long wordUniq = word.chars().distinct().count();\n\
    \        //     if (wordUniq > accUniq) {\n        //         return word;\n \
    \       //     } else if (wordUniq == accUniq) {\n        //         return acc.compareTo(word)\
    \ <= 0 ? acc : word;\n        //     } else {\n        //         return acc;\n\
    \        //     }\n        // }).get();\n        // RIGHT\n        return words.stream().max(Comparator.comparing(word\
    \ -> word.chars().distinct().count())\n            .thenComparing(word -> word)).get();",
  '        throw new RuntimeException("Not Implemented");', "        // Write your\
    \ code here.\n        return \"\";", "        return (new ArrayList<String>(Arrays.asList((String)\"\
    enam\", (String)\"game\"))).stream().reduce((acc, e) -> {\n            return\
    \ ((((acc).length()) < ((e).length())) ? e : acc);\n        }).get();", "    \
    \    // TODO\n        return \"\";", '        return "";', "        String max\
    \ = words.get(0);\n        for (String word : words) {\n            if (countUniqueChars(word)\
    \ > countUniqueChars(max)) {\n                max = word;\n            }\n   \
    \     }\n        return max;", "        int index = 0;\n        int index_max\
    \ = 0;\n        int max = 0;\n        for (int i = 0; i < words.size(); i++) {\n\
    \            int count = 0;\n            for (int j = 0; j < words.get(i).length();\
    \ j++) {\n                if (words.get(i).indexOf(words.get(i).charAt(j)) ==\
    \ j) {\n                    count++;\n                }\n            }\n     \
    \       if (count > max) {\n                max = count;\n                index_max\
    \ = i;\n            }\n        }\n        return words.get(index_max);", "   \
    \     class Pair {\n            String word;\n            int numberUnique;\n\
    \            Pair(String word, int numberUnique) {\n                this.word\
    \ = word;\n                this.numberUnique = numberUnique;\n            }\n\
    \        }\n        ArrayList<Pair> pairs = new ArrayList<Pair>();\n        for\
    \ (String word : words) {\n            HashSet<Character> set = new HashSet<Character>();\n\
    \            for (char c : word.toCharArray()) {\n                set.add(c);\n\
    \            }\n            int numberUnique = set.size();\n            pairs.add(new\
    \ Pair(word, numberUnique));\n        }\n        Collections.sort(pairs, (a, b)\
    \ -> {\n            if (a.numberUnique == b.numberUnique) {\n                return\
    \ a.word.compareTo(b.word);\n            }\n            return b.numberUnique\
    \ - a.numberUnique;\n        });\n        return pairs.get(0).word;", "      \
    \  ArrayList<Pair<String, Integer>> counts = new ArrayList<Pair<String, Integer>>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (Character c : word.toCharArray()) {\n                if (!word.substring(0,\
    \ count).contains(c.toString())) {\n                    count++;\n           \
    \     }\n            }\n            counts.add(new Pair<String, Integer>(word,\
    \ count));\n        }\n        Pair<String, Integer> max = new Pair<String, Integer>(\"\
    \", 0);\n        for (Pair<String, Integer> p : counts) {\n            if (p.getValue1()\
    \ > max.getValue1()) {\n                max = p;\n            }\n        }\n \
    \       return max.getValue0();", '        return null;', '        return null;',
  "        // Write your code here\n        return \"\";", "        // YOUR CODE HERE\n\
    \        String str = \"\";\n        int maxUniqCount = 0;\n        for (String\
    \ word : words) {\n            String uniqueChars = word;\n            StringBuffer\
    \ sb = new StringBuffer();\n            for (int i = 0; i < uniqueChars.length();\
    \ i++) {\n                char ch = uniqueChars.charAt(i);\n                if\
    \ (sb.indexOf(Character.toString(ch)) == -1) {\n                    sb.append(ch);\n\
    \                }\n            }\n            uniqueChars = sb.toString();\n\
    \            if (uniqueChars.length() > maxUniqCount) {\n                maxUniqCount\
    \ = uniqueChars.length();\n                str = word;\n            }\n      \
    \  }\n        return str;", "        String result = null;\n        for (String\
    \ s : words) {\n            if (result == null || s.length() > result.length())\
    \ {\n                result = s;\n            }\n        }\n        return result;",
  "        // Use a hash map to keep track of the number of unique characters in each\
    \ word\n        HashMap<String, Integer> charCount = new HashMap<String, Integer>();\n\
    \        for (String word : words) {\n            // Each entry in the hash map\
    \ maps to a set of unique characters\n            HashSet<Character> unique =\
    \ new HashSet<Character>();\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                unique.add(word.charAt(i));\n            }\n            charCount.put(word,\
    \ unique.size());\n        }\n        // The word with maximum number of unique\
    \ characters will be found by\n        // finding the maximum value in the hash\
    \ map.\n        String maxWord = \"\";\n        int maxUnique = 0;\n        for\
    \ (String word : charCount.keySet()) {\n            if (charCount.get(word) >\
    \ maxUnique) {\n                maxUnique = charCount.get(word);\n           \
    \     maxWord = word;\n            }\n        }\n        return maxWord;", " \
    \       String ans = \"\";\n        for (String word : words) {\n            if\
    \ (ans.length() < word.length()) {\n                ans = word;\n            }\n\
    \        }\n        return ans;", "        // YOUR CODE HERE\n        return \"\
    \";", "        int max = 0;\n        String result = \"\";\n        for (String\
    \ word : words) {\n            Set<Character> set = new HashSet<Character>();\n\
    \            for (int i = 0; i < word.length(); i++) {\n                set.add(word.charAt(i));\n\
    \            }\n            if (set.size() > max) {\n                max = set.size();\n\
    \                result = word;\n            }\n        }\n        return result;",
  '        return null;', '        return Stream.iterate(0, i -> i + 1).limit(words.size()).map(i
    -> words.get(i)).filter(word -> word.length() > 1).max(Comparator.comparing(word
    -> word.length())).get();', '        return words.stream().max(Comparator.comparing(s
    -> s.chars().distinct().count())).get();', "        // >>>> EDIT THE FOLLOWING\
    \ LINE <<<<\n        throw new UnsupportedOperationException(\"Not Implemented\"\
    );", '        return null;', "        // Your code goes here.\n        String\
    \ maxString = \"\";\n        for (String word : words) {\n            if (word.length()\
    \ > maxString.length()) {\n                maxString = word;\n            }\n\
    \        }\n        return maxString;", "        class Pair {\n            int\
    \ count;\n            String word;\n            Pair(int count, String word) {\n\
    \                this.count = count;\n                this.word = word;\n    \
    \        }\n        }\n        HashSet<Character> set = new HashSet<Character>();\n\
    \        Pair max = new Pair(0, \"\");\n        for (String word : words) {\n\
    \            for (int i = 0; i < word.length(); i++) {\n                set.add(word.charAt(i));\n\
    \            }\n            if (set.size() > max.count) {\n                max\
    \ = new Pair(set.size(), word);\n            }\n            set.clear();\n   \
    \     }\n        return max.word;", "        // ArrayList<String> max_words =\
    \ new ArrayList<String>();\n        HashMap<String, Integer> word_count = new\
    \ HashMap<String, Integer>();\n        HashMap<String, Integer> word_max = new\
    \ HashMap<String, Integer>();\n        for (String word : words) {\n         \
    \   // add to hash map\n            if (word_count.containsKey(word)) {\n    \
    \            word_count.put(word, (word_count.get(word) + 1));\n            }\
    \ else {\n                word_count.put(word, 1);\n            }\n          \
    \  // add to second hash map\n            if (word_max.containsKey(word)) {\n\
    \                word_max.put(word, (word_max.get(word) + 1));\n            }\
    \ else {\n                word_max.put(word, 1);\n            }\n        }\n \
    \       // Integer max_count = Collections.max(word_count.values());\n       \
    \ // // find max count\n        // for (String word : words) {\n        //   \
    \  if (word_count.get(word) == max_count) {\n        //         // add max_count\
    \ words to max_words\n        //         max_words.add(word);\n        //    \
    \ }\n        // }\n        // // alphabetically smallest word with max_count\n\
    \        // if (max_words.size() == 1) {\n        //     return max_words.get(0);\n\
    \        // } else {\n        //     // sort max_words\n        //     Collections.sort(max_words);\n\
    \        //     return max_words.get(0);\n        // }\n        // DO NOT MODIFY\
    \ THE LIST. IT IS READ ONLY\n        String max_word = words.get(0);\n       \
    \ for (String word : words) {\n            if (word_max.get(word) > word_max.get(max_word))\
    \ {\n                max_word = word;\n            }\n        }\n        return\
    \ max_word;", "        int max_length = -1;\n        String max_word = \"\";\n\
    \        for (String word : words) {\n            int i = 0;\n            int\
    \ length = 0;\n            while (i < word.length()) {\n                char curr\
    \ = word.charAt(i);\n                int j = i + 1;\n                while (j\
    \ < word.length() && word.charAt(j) != curr)\n                    j++;\n     \
    \           length += 1;\n                i = j;\n            }\n            if\
    \ (length > max_length) {\n                max_length = length;\n            \
    \    max_word = word;\n            }\n        }\n        return max_word;", " \
    \       int max = 0;\n        String result = \"\";\n        for (String word\
    \ : words) {\n            int count = new HashSet<Character>(Arrays.asList(ArrayUtils.toObject(word.toCharArray()))).size();\n\
    \            if (count > max) {\n                max = count;\n              \
    \  result = word;\n            }\n        }\n        return result;", "      \
    \  // write your code here ...\n        ArrayList<String> maxWords = new ArrayList<String>();\n\
    \        int max = 0;\n        for (String word : words) {\n            int curr\
    \ = getNumUniqueChars(word);\n            if (curr > max) {\n                max\
    \ = curr;\n                maxWords = new ArrayList<String>();\n             \
    \   maxWords.add(word);\n            } else if (curr == max) {\n             \
    \   maxWords.add(word);\n            }\n        }\n        if (maxWords.size()\
    \ == 1) {\n            return maxWords.get(0);\n        } else {\n           \
    \ return getLexicographical(maxWords);\n        }", "        String result = \"\
    \";\n        int count = 0;\n        for (String word : words) {\n           \
    \ Set<Character> set = new HashSet<Character>();\n            for (char c : word.toCharArray())\
    \ {\n                set.add(c);\n            }\n            if (set.size() >\
    \ count) {\n                count = set.size();\n                result = word;\n\
    \            }\n        }\n        return result;", '        return "";', "  \
    \      return words.stream().max(\n            Comparator.comparingInt(s -> (int)s.chars().distinct().count())\n\
    \            .thenComparing(Comparator.naturalOrder())\n        ).get();", " \
    \       int max = 0;\n        String result = null;\n        for (String word\
    \ : words) {\n            HashSet<Character> set = new HashSet<Character>();\n\
    \            for (char c : word.toCharArray()) {\n                set.add(c);\n\
    \            }\n            if (set.size() > max) {\n                max = set.size();\n\
    \                result = word;\n            }\n        }\n        return result;",
  "        // >>>>>> your code here <<<<<<\n        int max = 0;\n        String currentMaxString\
    \ = \"\";\n        for (String word : words) {\n            if (word.length()\
    \ > max) {\n                Set<Character> set = new HashSet<Character>();\n \
    \               boolean repeat = false;\n                for (int i = 0; i < word.length();\
    \ i++) {\n                    if (set.contains(word.charAt(i))) {\n          \
    \              repeat = true;\n                        break;\n              \
    \      }\n                    set.add(word.charAt(i));\n                }\n  \
    \              if (!repeat) {\n                    max = word.length();\n    \
    \                currentMaxString = word;\n                }\n            }\n\
    \        }\n        return currentMaxString;", "        int maxCount = 0;\n  \
    \      String maxWord = \"\";\n        int count = 0;\n        String word = \"\
    \";\n        String currentWord = \"\";\n        for (int i = 0; i < words.size();\
    \ i++) {\n            word = words.get(i);\n            for (int j = 0; j < word.length();\
    \ j++) {\n                currentWord = word.substring(j, j + 1);\n          \
    \      if (!word.substring(0, j).contains(currentWord)) {\n                  \
    \  count++;\n                }\n            }\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n            count = 0;\n        }\n        return maxWord;", "   \
    \     String best = \"\";\n        int max_num_distinct = 0;\n        for (String\
    \ word : words) {\n            int num_distinct = numDistinctCharacters(word);\n\
    \            if (num_distinct > max_num_distinct) {\n                max_num_distinct\
    \ = num_distinct;\n                best = word;\n            }\n        }\n  \
    \      return best;", '        return "";', "        String res = \"\";\n    \
    \    int max = -1;\n        int size = words.size();\n        for (int i = 0;\
    \ i < size; i++) {\n            String w = words.get(i);\n            int count\
    \ = 0;\n            for (int j = 0; j < w.length(); j++) {\n                if\
    \ (w.indexOf(w.charAt(j)) == j) {\n                    count++;\n            \
    \    }\n            }\n            if (count > max) {\n                max = count;\n\
    \                res = w;\n            }\n        }\n        return res;", " \
    \       String best = \"\";\n        int bestCount = 0;\n        for (String s\
    \ : words) {\n            Set<Character> set = new HashSet<Character>();\n   \
    \         for (char c : s.toCharArray()) {\n                set.add(c);\n    \
    \        }\n            if (set.size() > bestCount) {\n                bestCount\
    \ = set.size();\n                best = s;\n            }\n        }\n       \
    \ return best;", "        String best = \"\";\n        int best_count = 0;\n \
    \       for (String word : words) {\n            int count = 0;\n            HashSet<Character>\
    \ seen = new HashSet<Character>();\n            for (char c : word.toCharArray())\
    \ {\n                if (!seen.contains(c)) {\n                    count++;\n\
    \                    seen.add(c);\n                }\n            }\n        \
    \    if (count > best_count) {\n                best = word;\n               \
    \ best_count = count;\n            }\n        }\n        return best;", "    \
    \    String maxString = \"\";\n        int maxLength = 0;\n        for (String\
    \ word : words) {\n            HashSet<Character> set = new HashSet<Character>();\n\
    \            for (int i = 0; i < word.length(); i++) {\n                set.add(word.charAt(i));\n\
    \            }\n            if (set.size() > maxLength) {\n                maxLength\
    \ = set.size();\n                maxString = word;\n            }\n        }\n\
    \        return maxString;", '      return "";', '        throw new UnsupportedOperationException("Problem1
    not implemented.");', "        int max = -1;\n        String maxString = \"\"\
    ;\n        for (String word : words) {\n            int count = (int) word.chars().distinct().count();\n\
    \            if (count > max) {\n                max = count;\n              \
    \  maxString = word;\n            }\n        }\n        return maxString;", " \
    \       // we first solve this problem with a brute force approach\n        //\
    \ we will check each word in the list and find its number of unique characters\n\
    \        // we will use a dictionary to keep track of the number of unique characters\n\
    \        HashMap<String, Integer> dict = new HashMap<String, Integer>();\n   \
    \     for (String word : words) {\n            int count = 0;\n            //\
    \ we take advantage of the fact that the keys in a HashMap are unique\n      \
    \      // so we don't need to check whether the key is already in the HashMap\n\
    \            // when putting in a new key value pair\n            dict.put(word,\
    \ count);\n            // we now iterate through each character of the word and\
    \ check whether\n            // it is in the dictionary\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                char letter = word.charAt(i);\n\
    \                if (!dict.containsKey(letter)) {\n                    dict.put(letter,\
    \ 1);\n                    count++;\n                }\n            }\n      \
    \      // now that we know the number of unique characters in this word,\n   \
    \         // we can update the number of unique characters for this word\n   \
    \         dict.put(word, count);\n        }\n        // now we have the number\
    \ of unique characters for each word in the dict\n        // we need to look for\
    \ the word with the maximum number of unique characters\n        // we will keep\
    \ track of the maximum number of unique characters and the word\n        // that\
    \ has that many number of unique characters\n        int maxUnique = 0;\n    \
    \    String maxWord = \"\";\n        for (String word : words) {\n           \
    \ int unique = dict.get(word);\n            if (unique > maxUnique) {\n      \
    \          maxUnique = unique;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        // TODO: Write your code here.\n\
    \        return \"\";", "        return words.stream().max(new Comparator<String>()\
    \ {\n            public int compare(String a, String b) {\n                int\
    \ i = a.chars().distinct().count();\n                int j = b.chars().distinct().count();\n\
    \                if (i != j) {\n                    return j - i;\n          \
    \      }\n                return a.compareTo(b);\n            }\n        }).get();",
  "        if (words.size() == 0) return null;\n        ArrayList<String> distinct\
    \ = new ArrayList<String>();\n        ArrayList<Integer> freq = new ArrayList<Integer>();\n\
    \        for (String word : words) {\n            if (!distinct.contains(word))\
    \ {\n                distinct.add(word);\n                freq.add(word.length());\n\
    \            }\n        }\n        int max = freq.get(0);\n        for (int i\
    \ = 1; i < freq.size(); i++) {\n            max = Math.max(max, freq.get(i));\n\
    \        }\n        for (int i = 0; i < freq.size(); i++) {\n            if (freq.get(i)\
    \ < max) {\n                distinct.remove(i);\n                freq.remove(i);\n\
    \                i--;\n            }\n        }\n        Collections.sort(distinct);\n\
    \        return distinct.get(0);", "        if (words.size() == 0) {\n       \
    \     return \"\";\n        } else {\n            int currentMax = 0;\n      \
    \      String ans = words.get(0);\n            for (String word : words) {\n \
    \               int uniqueChar = 0;\n                for (int i = 0; i < word.length();\
    \ i++) {\n                    char curChar = word.charAt(i);\n               \
    \     if (word.indexOf(curChar) == i) {\n                        uniqueChar++;\n\
    \                    }\n                }\n                if (uniqueChar > currentMax)\
    \ {\n                    currentMax = uniqueChar;\n                    ans = word;\n\
    \                }\n            }\n            return ans;\n        }", '        return
    (String)null;', "        // your code goes here.\n        return \"\";", "   \
    \     // Remove the line below and add your code here\n        return \"\";",
  "        HashMap<String, Integer> map = new HashMap<String, Integer>();\n      \
    \  String minStr = \"\";\n        int min = Integer.MAX_VALUE;\n        for (String\
    \ word : words) {\n            HashSet<Character> set = new HashSet<Character>();\n\
    \            for (char c : word.toCharArray()) {\n                set.add(c);\n\
    \            }\n            if (set.size() < min) {\n                min = set.size();\n\
    \                minStr = word;\n            }\n        }\n        return minStr;",
  "        if (words.size() < 1) {\n            return null;\n        }\n        String\
    \ max = words.get(0);\n        for (String word : words) {\n            if (word.length()\
    \ > max.length()) {\n                max = word;\n            }\n        }\n \
    \       ArrayList<String> matches = new ArrayList<String>();\n        for (String\
    \ word : words) {\n            if (word.length() == max.length()) {\n        \
    \        matches.add(word);\n            }\n        }\n        HashSet<Character>\
    \ hs = new HashSet<Character>();\n        max = matches.get(0);\n        for (String\
    \ word : matches) {\n            for (char c : word.toCharArray()) {\n       \
    \         hs.add(c);\n            }\n            if (hs.size() > max.length())\
    \ {\n                max = word;\n            }\n            hs.clear();\n   \
    \     }\n        return max;", '        return "string";', "        // Write your\
    \ code here\n        return null;", "        String max = words.get(0);\n    \
    \    for (String word : words) {\n            if (findNumberOfUniqueChars(word)\
    \ > findNumberOfUniqueChars(max)) {\n                max = word;\n           \
    \ }\n        }\n        return max;", "        if (words.size() == 0) {\n    \
    \        return \"\";\n        }\n        Pair<String, Integer> pair = new Pair<String,\
    \ Integer>(words.get(0), words.get(0).length());\n        for (String word : words)\
    \ {\n            int length = word.length();\n            HashSet<Character> set\
    \ = new HashSet<Character>();\n            for (int i = 0; i < length; i++) {\n\
    \                set.add(word.charAt(i));\n            }\n            int setSize\
    \ = set.size();\n            if (setSize > pair.getValue1()) {\n             \
    \   pair = new Pair<String, Integer>(word, setSize);\n            } else if (setSize\
    \ == pair.getValue1()) {\n                String prev = pair.getValue0();\n  \
    \              if (word.compareTo(prev) < 0) {\n                    pair = new\
    \ Pair<String, Integer>(word, setSize);\n                }\n            }\n  \
    \      }\n        return pair.getValue0();", "        if (words.size() == 0) {\n\
    \            return null;\n        }\n        int max = 0;\n        int index\
    \ = 0;\n        for (int i = 0; i < words.size(); i++) {\n            if (unique(words.get(i)).size()\
    \ > max) {\n                max = unique(words.get(i)).size();\n             \
    \   index = i;\n            }\n        }\n        return words.get(index);", " \
    \       String result = \"\";\n        int max = 0;\n        for (String word\
    \ : words) {\n            int uniques = (int) word.chars().distinct().count();\n\
    \            if (uniques > max) {\n                max = uniques;\n          \
    \      result = word;\n            }\n        }\n        return result;", "  \
    \      // TODO: Write your code here\n        return \"\";", "        try {\n\
    \            return words.stream().map( (word) -> new Pair<String, Integer>(word,\
    \ word.chars().distinct().count())).sorted( (word1, word2) -> -word1.compareTo(word2)).findFirst().get().getValue0();\n\
    \        } catch (Exception e) {\n            return \"\";\n        }", "    \
    \    if (words.size() == 0) {\n            return \"\";\n        }\n        Integer\
    \ max = 0;\n        String maxString = words.get(0);\n        for (int i = 0;\
    \ i < words.size(); i++) {\n            String word = words.get(i);\n        \
    \    Integer uniques = getNumberOfUnique(word);\n            if (uniques > max)\
    \ {\n                max = uniques;\n                maxString = word;\n     \
    \       }\n        }\n        return maxString;", "        String maxWord = null;\n\
    \        int maxNumUniqueChars = 0;\n        int numUniqueChars;\n        Set<Character>\
    \ uniqueChars;\n        for (String word : words) {\n            uniqueChars =\
    \ new HashSet<Character>();\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                uniqueChars.add(word.charAt(i));\n            }\n       \
    \     numUniqueChars = uniqueChars.size();\n            if (numUniqueChars > maxNumUniqueChars)\
    \ {\n                maxNumUniqueChars = numUniqueChars;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        int max_unique\
    \ = 0;\n        String max_word = \"\";\n        for (String word : words) {\n\
    \            Set<Character> word_set = new HashSet<Character>();\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                word_set.add(word.charAt(i));\n\
    \            }\n            if (word_set.size() > max_unique) {\n            \
    \    max_unique = word_set.size();\n                max_word = word;\n       \
    \     }\n        }\n        return max_word;", "        Integer argMax = 0;\n\
    \        Integer max = 0;\n        for (Integer i = 0; i < words.size(); i++)\
    \ {\n            Integer cnt = 0;\n            HashSet<Character> set = new HashSet<Character>();\n\
    \            for (Integer j = 0; j < words.get(i).length(); j++) {\n         \
    \       Character c = words.get(i).charAt(j);\n                if (!set.contains(c))\
    \ {\n                    set.add(c);\n                    cnt++;\n           \
    \     }\n            }\n            if (cnt > max) {\n                max = cnt;\n\
    \                argMax = i;\n            }\n        }\n        return words.get(argMax);",
  '        throw new RuntimeException("Not implemented");', '        return "";',
  "        ArrayList<Integer> counts = new ArrayList<Integer>();\n        words.forEach(word\
    \ -> counts.add(word.chars().distinct().count()));\n        int max = Collections.max(counts);\n\
    \        int idx = counts.indexOf(max);\n        return words.get(idx);", "  \
    \      // Fill in your code here\n        int maxCount = 0;\n        String maxWord\
    \ = \"\";\n        for (String word : words) {\n            Set<Character> charSet\
    \ = new HashSet<Character>();\n            for (int i = 0; i < word.length();\
    \ i++) {\n                charSet.add(word.charAt(i));\n            }\n      \
    \      if (charSet.size() > maxCount) {\n                maxCount = charSet.size();\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        String maxWord = \"\";\n        int maxCount = 0;\n        for (String\
    \ word : words) {\n            if (word.length() > maxCount) {\n             \
    \   maxCount = word.length();\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        // int max = (int)words.stream().max((a,\
    \ b) -> {\n        //     int ac = (int)Arrays.stream(a.split(\"\")).collect(Collectors.toSet()).size();\n\
    \        //     int bc = (int)Arrays.stream(b.split(\"\")).collect(Collectors.toSet()).size();\n\
    \        //     return Integer.compare(ac, bc);\n        // }).get().size();\n\
    \        // return words.stream().filter(x -> {\n        //     int ac = (int)Arrays.stream(x.split(\"\
    \")).collect(Collectors.toSet()).size();\n        //     return ac == max;\n \
    \       // }).findFirst().get();\n        return words.stream().max((a, b) ->\
    \ {\n            int ac = (int)Arrays.stream(a.split(\"\")).collect(Collectors.toSet()).size();\n\
    \            int bc = (int)Arrays.stream(b.split(\"\")).collect(Collectors.toSet()).size();\n\
    \            return Integer.compare(ac, bc);\n        }).get();", "        String\
    \ result = \"\";\n        int max = 0;\n        for (String str : words) {\n \
    \           Set<Character> set = new HashSet<Character>();\n            for (char\
    \ c : str.toCharArray()) {\n                set.add(c);\n            }\n     \
    \       if (set.size() > max) {\n                max = set.size();\n         \
    \       result = str;\n            }\n        }\n        return result;", '        return
    "";', "        // return null;\n        int max = 0;\n        String result =\
    \ \"\";\n        for (String str : words) {\n            HashSet<Character> set\
    \ = new HashSet<Character>();\n            for (int i = 0; i < str.length(); i++)\
    \ {\n                set.add(str.charAt(i));\n            }\n            if (set.size()\
    \ > max) {\n                max = set.size();\n                result = str;\n\
    \            }\n        }\n        return result;", "        int maxLength = 0;\n\
    \        String word = \"\";\n        for (String s : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < s.length(); i++) {\n           \
    \     for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(i)\
    \ == s.charAt(j)) {\n                        count++;\n                    }\n\
    \                }\n            }\n            if (count > maxLength) {\n    \
    \            maxLength = count;\n                word = s;\n            }\n  \
    \      }\n        return word;", "        return words.stream().sorted((o1, o2)\
    \ -> {\n            if (getUniqueCharCount(o1) > getUniqueCharCount(o2)) {\n \
    \               return -1;\n            } else if (getUniqueCharCount(o1) < getUniqueCharCount(o2))\
    \ {\n                return 1;\n            } else {\n                return o1.compareTo(o2);\n\
    \            }\n        }).findFirst().get();", '        return words.stream().sorted((a,
    b) -> (a.length() - b.length())).findFirst().get();', '        return words.stream().max(Comparator.comparing(a
    -> a.chars().distinct().count())).get();', "        int max = 0;\n        String\
    \ temp = null;\n        for (String s : words) {\n            ArrayList<Character>\
    \ unique_letters = new ArrayList<Character>();\n            for (char c : s.toCharArray())\
    \ {\n                if (!unique_letters.contains(c)) {\n                    unique_letters.add(c);\n\
    \                }\n            }\n            if (unique_letters.size() > max)\
    \ {\n                max = unique_letters.size();\n                temp = s;\n\
    \            }\n        }\n        return temp;", '        return words.stream().reduce("",
    (x, y) -> y.length() > x.length() ? y : x);', "        if (words.size() == 0)\
    \ {\n            return \"\";\n        }\n        HashMap<String, Integer> map\
    \ = new HashMap<String, Integer>();\n        for (String w : words) {\n      \
    \      HashSet<Character> set = new HashSet<Character>();\n            for (int\
    \ i = 0; i < w.length(); i++) {\n                set.add(w.charAt(i));\n     \
    \       }\n            map.put(w, set.size());\n        }\n        int max = 0;\n\
    \        String ans = \"\";\n        for (String w : words) {\n            if\
    \ (map.get(w) > max) {\n                max = map.get(w);\n                ans\
    \ = w;\n            }\n        }\n        return ans;"]
stop_tokens:
- "\n    }\n"
