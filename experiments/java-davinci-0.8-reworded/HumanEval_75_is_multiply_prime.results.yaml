language: java
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n         return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lq9j2rh.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 2) return false;\n        for (int i = 2; i <= a; i++)\
    \ {\n            if (a % i == 0) {\n                if (isPrime(i)) {\n      \
    \              a /= i;\n                    if (a == 1) return true;\n       \
    \             else if (isPrime(a)) return true;\n                    else return\
    \ false;\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvt_2jky0.java:20: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n/tmp/tmpvt_2jky0.java:23: error: cannot find symbol\n       \
    \             else if (isPrime(a)) return true;\n                            \
    \ ^\n  symbol:   method isPrime(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Write your code here\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzk8nw1om.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n\t\tif (a == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlong b = a;\n\t\tfor\
    \ (int i = 2; i < b; i++) {\n\t\t\tif (a % i == 0) {\n\t\t\t\ta = a / i;\n\t\t\
    \t\ti = 1;\n\t\t\t}\n\t\t}\n\t\treturn (b == (a * a));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt24lq05q.java:31)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a == 1) {\n            return false;\n        }\n        if\
    \ (a == 2) {\n            return true;\n        }\n        long copyOfInput =\
    \ a;\n        ArrayList<Long> arr = new ArrayList<Long>();\n        while (a %\
    \ 2 == 0) {\n            arr.add(2l);\n            a /= 2;\n        }\n      \
    \  for (long i = 3; i <= Math.sqrt(a); i += 2) {\n            while (a % i ==\
    \ 0) {\n                arr.add(i);\n                a /= i;\n            }\n\
    \        }\n        if (a > 2) {\n            arr.add(a);\n        }\n       \
    \ return arr.size() == 3;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve5wlhsl.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a <= 0)\n            return false;\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2_mmps_.java:23)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // put your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpot81_nkj.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Integer> primes = getPrimes();\n        for (int prime1 :\
    \ primes) {\n            for (int prime2 : primes) {\n                for (int\
    \ prime3 : primes) {\n                    if (prime1 * prime2 * prime3 == a) {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2si1t261.java:17: error: cannot find symbol\n        List<Integer>\
    \ primes = getPrimes();\n                               ^\n  symbol:   method\
    \ getPrimes()\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n\tboolean ret = false;\n\treturn ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6znr435.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean res = false;\n        // Add your implementation here\n\
    \        throw new UnsupportedOperationException(\"Not implemented.\");\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1ky4sl2.java:20: error: unreachable statement\n        return\
    \ res;\n        ^\n1 error\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        Set<Long> primes = new HashSet<Long>();\n        if ( isPrime(a,\
    \ primes) ) return true;\n        for ( long p : primes ) {\n            if (\
    \ a % p == 0 ) {\n                long rest = a / p;\n                if ( rest\
    \ == 1 ) return true;\n                if ( isPrime(rest, primes) ) return true;\n\
    \                if ( isMultiplyPrime(rest) ) return true;\n            }\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzag4k0l8.java:18: error: cannot find symbol\n        if ( isPrime(a,\
    \ primes) ) return true;\n             ^\n  symbol:   method isPrime(long,Set<Long>)\n\
    \  location: class Problem\n/tmp/tmpzag4k0l8.java:23: error: cannot find symbol\n\
    \                if ( isPrime(rest, primes) ) return true;\n                 \
    \    ^\n  symbol:   method isPrime(long,Set<Long>)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int t = 1;\n        for (int i = 2; i <= a; i++) {\n         \
    \   if (a % i == 0) {\n                for (int j = 2; j <= i / 2; j++) {\n  \
    \                  if (i % j == 0) {\n                        t = 0;\n       \
    \                 break;\n                    }\n                }\n         \
    \       if (t == 1) {\n                    long a1 = a / i;\n                \
    \    System.out.println(a1);\n                    for (int k = 2; k <= a1 / 2;\
    \ k++) {\n                        if (a1 % k == 0) {\n                       \
    \     t = 0;\n                            break;\n                        }\n\
    \                    }\n                    if (t == 1) {\n                  \
    \      for (int l = 2; l <= a1 / 2; l++) {\n                            if (a1\
    \ % l == 0) {\n                                t = 0;\n                      \
    \          break;\n                            }\n                        }\n\
    \                        if (t == 1) {\n                            return true;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptn456n7m.java:52)\n"
  stdout: '1

    '
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i) &&\
    \ a % i == 0) {\n                for (int j = 2; j < 100; j++) {\n           \
    \         if (isPrime(j) && a % j == 0 && i != j) {\n                        for\
    \ (int k = 2; k < 100; k++) {\n                            if (isPrime(k) && a\
    \ % k == 0 && i != k && j != k) {\n                                System.out.println(i\
    \ + \" * \" + j + \" * \" + k);\n                                return true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return false;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0pg_yx0.java:18: error: cannot find symbol\n            if (isPrime(i)\
    \ && a % i == 0) {\n                ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n/tmp/tmpm0pg_yx0.java:20: error: cannot find symbol\n       \
    \             if (isPrime(j) && a % j == 0 && i != j) {\n                    \
    \    ^\n  symbol:   method isPrime(int)\n  location: class Problem\n/tmp/tmpm0pg_yx0.java:22:\
    \ error: cannot find symbol\n                            if (isPrime(k) && a %\
    \ k == 0 && i != k && j != k) {\n                                ^\n  symbol:\
    \   method isPrime(int)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplgib7lks.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a<=0 || a>100)\n            return false;\n        int count=0;\n\
    \        long n=a;\n        for (int i=2;i<n;i++) {\n            if (n%i==0) {\n\
    \                n=n/i;\n                count++;\n                i--;\n    \
    \        }\n        }\n        return count==2;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6dn90acl.java:35)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 3) return false;\n        boolean isPrime = true;\n  \
    \      int counter = 2;\n        while (counter < a) {\n            if (a % counter\
    \ == 0) {\n                a = a / counter;\n                if (isPrime(a))\n\
    \                    return true;\n                isPrime = false;\n        \
    \    }\n            else counter++;\n        }\n        return isPrime;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_d5n36z5.java:23: error: cannot find symbol\n                if\
    \ (isPrime(a))\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        Set<Long> result = new HashSet<>();\n        for (long i = a -\
    \ 1; i > 0; i--) {\n            if (a % i == 0) {\n                result.add(i);\n\
    \            }\n        }\n        for (long i = a - 1; i > 0; i--) {\n      \
    \      if (a % i == 0) {\n                for (long j = a - 1; j > 0; j--) {\n\
    \                    if (a % j == 0) {\n                        if (isPrime(j))\
    \ {\n                            if (result.contains(i * j)) {\n             \
    \                   return true;\n                            }\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1997bjs.java:27: error: cannot find symbol\n                 \
    \       if (isPrime(j)) {\n                            ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long n = a;\n        List<Long> divisors = new ArrayList<>();\n\
    \        for (long i = 2; i <= n; i++) {\n            while (n % i == 0) {\n \
    \               divisors.add(i);\n                n /= i;\n            }\n   \
    \     }\n        return divisors.size() == 3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primes = new ArrayList<>();\n        primes.add(2l);\n\
    \        primes.add(3l);\n        primes.add(5l);\n        primes.add(7l);\n \
    \       primes.add(11l);\n        primes.add(13l);\n        primes.add(17l);\n\
    \        primes.add(19l);\n        primes.add(23l);\n        primes.add(29l);\n\
    \        primes.add(31l);\n        primes.add(37l);\n        primes.add(41l);\n\
    \        primes.add(43l);\n        primes.add(47l);\n        primes.add(53l);\n\
    \        primes.add(59l);\n        primes.add(61l);\n        primes.add(67l);\n\
    \        primes.add(71l);\n        primes.add(73l);\n        primes.add(79l);\n\
    \        primes.add(83l);\n        primes.add(89l);\n        primes.add(97l);\n\
    \        long i = 2;\n        while (i < a) {\n            if (a % i == 0) {\n\
    \                if (primes.contains(i)) {\n                    a = a / i;\n \
    \                   if (primes.contains(a)) {\n                        return\
    \ true;\n                    }\n                }\n            }\n           \
    \ i++;\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2q4c3a61.java:60)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 1; i < Math.sqrt(a); i++) {\n            if (a %\
    \ i == 0) {\n                if (isPrime(i) && isPrime(a / i)) {\n           \
    \         return true;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfav8q8c.java:19: error: cannot find symbol\n                if\
    \ (isPrime(i) && isPrime(a / i)) {\n                    ^\n  symbol:   method\
    \ isPrime(int)\n  location: class Problem\n/tmp/tmpzfav8q8c.java:19: error: cannot\
    \ find symbol\n                if (isPrime(i) && isPrime(a / i)) {\n         \
    \                         ^\n  symbol:   method isPrime(long)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Your code\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz3trh7ti.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 2) {\n            return false;\n        }\n        long\
    \ primes = 0;\n        for (long i = 2; i <= a; i++) {\n            if (a % i\
    \ == 0) {\n                primes++;\n                a /= i;\n              \
    \  i--;\n            }\n        }\n        return primes == 3;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new RuntimeException(\"not implemented yet!\");\n    }\n\
    \    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\
    \ yet!\n\tat Problem.isMultiplyPrime(tmp5t8aux82.java:17)\n\tat Problem.main(tmp5t8aux82.java:20)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Your code goes here!!!\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvrl23adn.java:22)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        \n        if(a<=1) return false;\n        long num = a;\n    \
    \    int count = 0;\n        //System.out.println(\"The number is \"+a);\n   \
    \     for(int i=2;i<a;i++){\n            if(a%i==0){\n                a=a/i;\n\
    \                count++;\n                //System.out.println(\"Number is divisible\
    \ by \"+i);\n                if(count==3){\n                    if(a==1) return\
    \ true;\n                    else return false;\n                }\n         \
    \       i--;\n            }\n        }\n        if(count<3) return false;\n  \
    \      return true;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp065jsqeu.java:39)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long x = 2;\n        while (a > 1) {\n            while (a % x\
    \ == 0) {\n                a /= x;\n            }\n            x++;\n        }\n\
    \        return x >= 100;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpynzr7y_r.java:28)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a <= 3) {\n            return false;\n        }\n        List<Long>\
    \ l = new ArrayList<>();\n        long t = a;\n        if (a % 2 == 0) {\n   \
    \         l.add(2l);\n            t /= 2;\n        }\n        for (long i = 3;\
    \ i < t; i += 2) {\n            if (a % i == 0) {\n                l.add(i);\n\
    \                t /= i;\n            }\n        }\n        if (l.size() == 3)\
    \ {\n            if (isPrime(l.get(0)) && isPrime(l.get(1)) && isPrime(l.get(2)))\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsktjwm_b.java:33: error: cannot find symbol\n            if (isPrime(l.get(0))\
    \ && isPrime(l.get(1)) && isPrime(l.get(2))) {\n                ^\n  symbol: \
    \  method isPrime(Long)\n  location: class Problem\n/tmp/tmpsktjwm_b.java:33:\
    \ error: cannot find symbol\n            if (isPrime(l.get(0)) && isPrime(l.get(1))\
    \ && isPrime(l.get(2))) {\n                                     ^\n  symbol: \
    \  method isPrime(Long)\n  location: class Problem\n/tmp/tmpsktjwm_b.java:33:\
    \ error: cannot find symbol\n            if (isPrime(l.get(0)) && isPrime(l.get(1))\
    \ && isPrime(l.get(2))) {\n                                                  \
    \        ^\n  symbol:   method isPrime(Long)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        //TODO\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__dhduty.java:22)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Integer> res = new ArrayList<>();\n        for (int x = 2;\
    \ x <= a; x++) {\n            boolean flag = true;\n            for (int i = 2;\
    \ i <= Math.sqrt(x); i++) {\n                if (x % i == 0) {\n             \
    \       flag = false;\n                    break;\n                }\n       \
    \     }\n            if (flag && a % x == 0) {\n                res.add(x);\n\
    \                a /= x;\n                x = 1;\n            }\n        }\n \
    \       return res.size() == 3;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Fill in the blank\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8cs5s1kw.java:21)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve5wlhsl.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // return (a == 1) ? false : (Math.sqrt(a) >= 2) ? false : true;\n\
    \        int aux = (int)Math.sqrt(a);\n        List<Integer> primes = new ArrayList<Integer>();\n\
    \        int number = 2;\n        while (number <= aux) {\n            boolean\
    \ is_prime = true;\n            for (int i = 2; i <= Math.sqrt(number); i++) {\n\
    \                if (number % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                primes.add(number);\n            }\n         \
    \   number++;\n        }\n        boolean found = false;\n        for (int i =\
    \ 0; i < primes.size(); i++) {\n            for (int j = 0; j < primes.size();\
    \ j++) {\n                for (int k = 0; k < primes.size(); k++) {\n        \
    \            if (a == primes.get(i) * primes.get(j) * primes.get(k)) {\n     \
    \                   found = true;\n                        break;\n          \
    \          }\n                }\n            }\n        }\n        return found;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Please fill in the implementation here\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_uaxhrf.java:22)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primeList = new ArrayList<>();\n        primeList.add(2l);\n\
    \        primeList.add(3l);\n        primeList.add(5l);\n        primeList.add(7l);\n\
    \        primeList.add(11l);\n        primeList.add(13l);\n        primeList.add(17l);\n\
    \        primeList.add(19l);\n        primeList.add(23l);\n        primeList.add(29l);\n\
    \        primeList.add(31l);\n        primeList.add(37l);\n        primeList.add(41l);\n\
    \        primeList.add(43l);\n        primeList.add(47l);\n        primeList.add(53l);\n\
    \        primeList.add(59l);\n        primeList.add(61l);\n        primeList.add(67l);\n\
    \        primeList.add(71l);\n        primeList.add(73l);\n        primeList.add(79l);\n\
    \        primeList.add(83l);\n        primeList.add(89l);\n        primeList.add(97l);\n\
    \        long k = a;\n        for (long i : primeList) {\n            if (k%i\
    \ == 0) {\n                long b = k/i;\n                for (long j : primeList)\
    \ {\n                    if (b%j == 0) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5g9joemr.java:60)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 2; i < a/2; i++) {\n            if (a % i == 0) {\n\
    \                if (isPrime(i)) {\n                    return true;\n       \
    \         }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqzccm_by.java:19: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new UnsupportedOperationException(\"Implement me\");\n \
    \   }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Implement\
    \ me\n\tat Problem.isMultiplyPrime(tmpz5qh7sur.java:17)\n\tat Problem.main(tmpz5qh7sur.java:20)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int result = 0;\n        for (int i = 2; i <= a; i++) {\n    \
    \        if (a % i == 0) {\n                result = i;\n                a /=\
    \ i;\n                i--;\n            }\n        }\n        return result ==\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6bhplts.java:29)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n\tboolean result = false;\n\t// Write your code here\n\t\n\t// End of\
    \ your code\n\treturn result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnm9no1ih.java:25)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primes = Primes.primes().limit(100).boxed().collect(Collectors.toList());\n\
    \        return primes.contains(a);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpagv8x_br.java:17: error: cannot find symbol\n        List<Long>\
    \ primes = Primes.primes().limit(100).boxed().collect(Collectors.toList());\n\
    \                            ^\n  symbol:   variable Primes\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Challenge 1.1\n        // Write your code here.\n        long\
    \ i = 2;\n        long j = a;\n        while (j >= a) {\n            if (a % i\
    \ == 0) {\n                j = a / i;\n                if (isPrime(j)) {\n   \
    \                 return true;\n                }\n            }\n           \
    \ i++;\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphjn9vthx.java:24: error: cannot find symbol\n                if\
    \ (isPrime(j)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean result = false;\n        // Write your code here\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmevorjw.java:23)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int counter = 0;\n        if (a % 2 == 0) {\n            a /=\
    \ 2;\n            counter++;\n        }\n        if (a % 3 == 0) {\n         \
    \   a /= 3;\n            counter++;\n        }\n        if (a % 5 == 0) {\n  \
    \          a /= 5;\n            counter++;\n        }\n        return counter\
    \ == 3;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsooekf0w.java:35)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean result = false;\n        // Write your code here\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmevorjw.java:23)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        Set<Long> factors = new HashSet<>();\n        for (long i = 2;\
    \ i < Math.pow(a, 0.5); i++) {\n            if (a % i == 0) {\n              \
    \  factors.add(i);\n                factors.add(a / i);\n            }\n     \
    \   }\n        long primeFactors = factors.stream().filter(Problem::isPrime).count();\n\
    \        return primeFactors == 3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1n7n_llt.java:24: error: invalid method reference\n        long\
    \ primeFactors = factors.stream().filter(Problem::isPrime).count();\n        \
    \                                            ^\n  cannot find symbol\n    symbol:\
    \   method isPrime(T)\n    location: class Problem\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n1 error\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new RuntimeException(\"Not implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.isMultiplyPrime(tmp2b7muqcc.java:17)\n\tat Problem.main(tmp2b7muqcc.java:20)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // your code goes here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjydn8a70.java:22)\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a > 4) {\n            int count = 0;\n            long number\
    \ = 2;\n            while (number <= a) {\n                if (a % number == 0)\
    \ {\n                    count += 1;\n                    a /= number;\n     \
    \           } else {\n                    number += 1;\n                }\n  \
    \          }\n            return count == 3;\n        } else {\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // IMPLEMENTATION\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwppxljw1.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int n = 0;\n        for (int i = 2; i <= a; i++) {\n         \
    \   if (a % i == 0) {\n                n++;\n                a /= i;\n       \
    \         i--;\n            }\n        }\n        return n == 3;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO: Fill out the function\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6m7el1j.java:22)\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long[] primes = new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int counter\
    \ = 0;\n        for (int i = 0; i < primes.length; i++) {\n            if (a %\
    \ primes[i] == 0) {\n                counter++;\n            }\n        }\n  \
    \      return counter == 3;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezf3lkj1.java:29)\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Using prime sieve, checking all factors and adding them to\
    \ the list\n\n        boolean[] sieve = new boolean[(int)Math.sqrt(a) + 1];\n\
    \        for (int i = 2; i < sieve.length; i++) {\n            sieve[i] = true;\n\
    \        }\n        for (int i = 2; i < sieve.length; i++) {\n            if (sieve[i])\
    \ {\n                for (int j = i + i; j < sieve.length; j += i) {\n       \
    \             sieve[j] = false;\n                }\n            }\n        }\n\
    \        ArrayList<Integer> primes = new ArrayList<>();\n        for (int i =\
    \ 2; i < sieve.length; i++) {\n            if (sieve[i]) {\n                primes.add(i);\n\
    \            }\n        }\n        ArrayList<Integer> factors = new ArrayList<>();\n\
    \        for (int i = 0; i < primes.size(); i++) {\n            if (a % primes.get(i)\
    \ == 0) {\n                factors.add(primes.get(i));\n            }\n      \
    \  }\n        for (int i = 0; i < factors.size(); i++) {\n            for (int\
    \ j = i + 1; j < factors.size(); j++) {\n                for (int k = j + 1; k\
    \ < factors.size(); k++) {\n                    if (factors.get(i) * factors.get(j)\
    \ * factors.get(k) == a) {\n                        return true;\n           \
    \         }\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfomidofg.java:56)\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpis5dljax.java:22)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primes = Prime.primes(a);\n        int count = 0;\n\
    \        for (long pr : primes) {\n            if (a % pr == 0) {\n          \
    \      count++;\n                a /= pr;\n            }\n        }\n        return\
    \ count == 3;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumw5sxb7.java:17: error: cannot find symbol\n        List<Long>\
    \ primes = Prime.primes(a);\n                            ^\n  symbol:   variable\
    \ Prime\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new UnsupportedOperationException(\"Delete this line and\
    \ write your code here\");\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Delete\
    \ this line and write your code here\n\tat Problem.isMultiplyPrime(tmpcmg_yy9m.java:17)\n\
    \tat Problem.main(tmpcmg_yy9m.java:20)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long i;\n        long[] primeNumbers = null;\n        for (i =\
    \ 2; i <= a; i++) {\n            if (isPrime(i)) {\n                primeNumbers\
    \ = append(primeNumbers, i);\n            }\n        }\n        for (long primeNumber\
    \ : primeNumbers) {\n            if (a % primeNumber == 0) {\n               \
    \ return true;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyjm80sy.java:20: error: cannot find symbol\n            if (isPrime(i))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmpuyjm80sy.java:21: error: cannot find symbol\n                primeNumbers\
    \ = append(primeNumbers, i);\n                               ^\n  symbol:   method\
    \ append(long[],long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new RuntimeException(\"Not Implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.isMultiplyPrime(tmp06cnvp8o.java:17)\n\tat Problem.main(tmp06cnvp8o.java:20)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new RuntimeException(\"Not Implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.isMultiplyPrime(tmp06cnvp8o.java:17)\n\tat Problem.main(tmp06cnvp8o.java:20)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // write your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpleqn674d.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean result = false;\n        if(a==0)\n            return\
    \ result;\n        if(a==1)\n            return true;\n        if(a==2 || a==3\
    \ || a==5)\n            return true;\n        if(a%2==0)\n            return isMultiplyPrime(a/2);\n\
    \        if(a%3==0)\n            return isMultiplyPrime(a/3);\n        if(a%5==0)\n\
    \            return isMultiplyPrime(a/5);\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdzyup2f8.java:33)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int i = 0;\n     \
    \   int length = primes.length;\n        while (i < length) {\n            if\
    \ (a % primes[i] == 0) {\n                return true;\n            }\n      \
    \      i++;\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxvs3ctma.java:29)\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        Set<Long> factors = new HashSet<>();\n        findFactors(a, factors);\n\
    \        List<Long> primeFactors = factors.stream().filter(f -> isPrime(f)).collect(Collectors.toList());\n\
    \        return primeFactors.size() == 3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgy0jlny6.java:18: error: cannot find symbol\n        findFactors(a,\
    \ factors);\n        ^\n  symbol:   method findFactors(long,Set<Long>)\n  location:\
    \ class Problem\n/tmp/tmpgy0jlny6.java:19: error: cannot find symbol\n       \
    \ List<Long> primeFactors = factors.stream().filter(f -> isPrime(f)).collect(Collectors.toList());\n\
    \                                                               ^\n  symbol: \
    \  method isPrime(Long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Your code goes here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ecb7idf.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Make it into a positive number\n        if (a < 0) {\n    \
    \        a = -a;\n        }\n        // The number itself is not prime\n     \
    \   if (isPrime(a)) {\n            return false;\n        }\n        // Try to\
    \ break the number into two factors\n        for (long i = 2; i < a; i++) {\n\
    \            if (a % i == 0) {\n                // If a factor is a prime\n  \
    \              if (isPrime(i)) {\n                    // If the other factor is\
    \ a prime\n                    if (isPrime(a / i)) {\n                       \
    \ return true;\n                    }\n                }\n            }\n    \
    \    }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhysbe4w.java:22: error: cannot find symbol\n        if (isPrime(a))\
    \ {\n            ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmpfhysbe4w.java:29: error: cannot find symbol\n                if (isPrime(i))\
    \ {\n                    ^\n  symbol:   method isPrime(long)\n  location: class\
    \ Problem\n/tmp/tmpfhysbe4w.java:31: error: cannot find symbol\n             \
    \       if (isPrime(a / i)) {\n                        ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primeNumbers = generatePrimeNumbers((long)Math.sqrt(a));\n\
    \        primeNumbers.add(0, 1l);\n        Iterator<Long> it = primeNumbers.iterator();\n\
    \        while (it.hasNext()) {\n            Long primeNumber = it.next();\n \
    \           if (a % primeNumber == 0) {\n                a = a / primeNumber;\n\
    \                if (a % primeNumber == 0) {\n                    a = a / primeNumber;\n\
    \                    return isPrime(a);\n                }\n            }\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznsodco0.java:17: error: cannot find symbol\n        List<Long>\
    \ primeNumbers = generatePrimeNumbers((long)Math.sqrt(a));\n                 \
    \                 ^\n  symbol:   method generatePrimeNumbers(long)\n  location:\
    \ class Problem\n/tmp/tmpznsodco0.java:26: error: cannot find symbol\n       \
    \             return isPrime(a);\n                           ^\n  symbol:   method\
    \ isPrime(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010931
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // if (a) is greater than 100 or less than 1.\n        if (a >\
    \ 100 || a < 1)\n            return false;\n        // if (a) is equal to 1 or\
    \ 2.\n        if (a == 1 || a == 2)\n            return true;\n        // if (a)\
    \ is not equal to 2 or 3.\n        if (a % 2 != 0 && a % 3 != 0)\n           \
    \ return false;\n        // if (a) is not equal to 2 or 5.\n        if (a % 2\
    \ != 0 && a % 5 != 0)\n            return false;\n        // if (a) is not equal\
    \ to 3 or 5.\n        if (a % 3 != 0 && a % 5 != 0)\n            return false;\n\
    \        // Otherwise.\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3ssj7yj.java:38)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a == 1) {\n            return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmrc2j9v.java:23)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long[] primeNumbers = new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        for\
    \ (int i = 0; i < primeNumbers.length; i++) {\n            for (int j = 0; j <\
    \ primeNumbers.length; j++) {\n                for (int k = 0; k < primeNumbers.length;\
    \ k++) {\n                    if (primeNumbers[i] * primeNumbers[j] * primeNumbers[k]\
    \ == a) {\n                        return true;\n                    }\n     \
    \           }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a % 2 == 0)\n            return isMultiplyPrime(a / 2);\n\
    \        if (a % 3 == 0)\n            return isMultiplyPrime(a / 3);\n       \
    \ if (a % 5 == 0)\n            return isMultiplyPrime(a / 5);\n        return\
    \ a == 1;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckhhkxr7.java:26)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // First find the prime numbers from 2 to a/2 or below.\n    \
    \    // Then loop through each prime number dividing the number a\n        //\
    \ by each one and counting how many times each factor can be divided by the \n\
    \        // primes found.\n        // Once the number a is fully divided by the\
    \ primes \n        // check if the number of factors is equals to 3.\n       \
    \ return false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvfsjl_cl.java:27)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long b = 2;\n        long c = a;\n        if (a < 4) return true;\n\
    \        for (; a != b; b++) {\n            if (a % b == 0) {\n              \
    \  a = a / b;\n                if (isPrime(a)) {\n                    if (isPrime(b))\
    \ {\n                        return true;\n                    }\n           \
    \     }\n                b = 1;\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpayt48kjn.java:23: error: cannot find symbol\n                if\
    \ (isPrime(a)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n/tmp/tmpayt48kjn.java:24: error: cannot find symbol\n       \
    \             if (isPrime(b)) {\n                        ^\n  symbol:   method\
    \ isPrime(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean isMultiplyPrime = false;\n        // code here\n     \
    \   return isMultiplyPrime;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppg2t62ml.java:23)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // 10 - maksimum liczby jakiej moze byc pierwiastek\n        //\
    \ maksimum liczby jakiej moze byc pierwiastek\n        // \n        // przekracza\
    \ wymagania?\n        if(a > 100000)\n            return false;\n        // sprawdzmy\
    \ pierwiastki\n        long max = (long)Math.sqrt(a);\n        if(max*max == a)\n\
    \            return false;\n        // sprawdzamy czy jest podzielne przez dwie\
    \ liczby pierwsze\n        // max - liczba najwieksza jakiej mozemy wybierac liczby\
    \ pierwsze\n        //\n        // sprawdzamy czy dzielniki sa liczbami pierwszymi\n\
    \        // zmniejszamy zakres\n        int min = (int)Math.sqrt(max);\n     \
    \   while(max > min) {\n            // sprawdzamy czy dzielniki sa liczbami pierwszymi\n\
    \            // zmniejszamy zakres\n            if(isPrime(max) && a % max ==\
    \ 0) {\n                return isPrime(a/max);\n            }\n            max--;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptohg6fjq.java:36: error: cannot find symbol\n            if(isPrime(max)\
    \ && a % max == 0) {\n               ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n/tmp/tmptohg6fjq.java:37: error: cannot find symbol\n       \
    \         return isPrime(a/max);\n                       ^\n  symbol:   method\
    \ isPrime(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new UnsupportedOperationException(\"Solution not implemented\
    \ yet\");\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Solution\
    \ not implemented yet\n\tat Problem.isMultiplyPrime(tmpt4qrf5g_.java:17)\n\tat\
    \ Problem.main(tmpt4qrf5g_.java:20)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // ...\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmiubjy22.java:21)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        //TODO\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__dhduty.java:22)\n"
  stdout: ''
  timestamp: 1660010930
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO: implement this function.\n        return false;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6f_dngvh.java:22)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (isPrime(a)) return false;\n        List<Long> factors = new\
    \ ArrayList<>();\n        int i = 2;\n        while (a > 1) {\n            if\
    \ (a % i == 0) {\n                factors.add((long)i);\n                a /=\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       return factors.size() == 3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbiukn8j.java:17: error: cannot find symbol\n        if (isPrime(a))\
    \ return false;\n            ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n\t  // start coding here\n\t  throw new UnsupportedOperationException(\"\
    Not implemented\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented\n\tat Problem.isMultiplyPrime(tmpcazu0nyr.java:18)\n\tat Problem.main(tmpcazu0nyr.java:21)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        ArrayList<Long> primes = getPrimes(a);\n        ArrayList<Long>\
    \ factors = getFactors(a, primes);\n        return factors.size() == 3;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimv33a67.java:17: error: cannot find symbol\n        ArrayList<Long>\
    \ primes = getPrimes(a);\n                                 ^\n  symbol:   method\
    \ getPrimes(long)\n  location: class Problem\n/tmp/tmpimv33a67.java:18: error:\
    \ cannot find symbol\n        ArrayList<Long> factors = getFactors(a, primes);\n\
    \                                  ^\n  symbol:   method getFactors(long,ArrayList<Long>)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> list = new ArrayList<>();\n        List<Long> list1\
    \ = new ArrayList<>();\n        long answer = 0;\n        for (long i = 2; i <\
    \ 100; i++) {\n            if (isPrime(i)) {\n                list.add(i);\n \
    \           }\n        }\n        for (long i = 0; i < list.size(); i++) {\n \
    \           for (long j = 0; j < list.size(); j++) {\n                for (long\
    \ k = 0; k < list.size(); k++) {\n                    if (list.get((int) i) *\
    \ list.get((int) j) * list.get((int) k) == a) {\n                        list1.add(list.get((int)\
    \ i));\n                        list1.add(list.get((int) j));\n              \
    \          list1.add(list.get((int) k));\n                        answer = list.get((int)\
    \ i) * list.get((int) j) * list.get((int) k);\n                    }\n       \
    \         }\n            }\n        }\n        if (answer == a) {\n          \
    \  System.out.println(list1);\n            return true;\n        } else {\n  \
    \          return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6zqdgnw.java:21: error: cannot find symbol\n            if (isPrime(i))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpis5dljax.java:22)\n"
  stdout: ''
  timestamp: 1660010932
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        ArrayList<Long> list = new ArrayList<Long>();\n        long copy\
    \ = a;\n        while (copy % 2 == 0) {\n            list.add(2l);\n         \
    \   copy /= 2;\n        }\n        for (long i = 3; i <= Math.sqrt(copy); i +=\
    \ 2) {\n            while (copy % i == 0) {\n                list.add(i);\n  \
    \              copy /= i;\n            }\n        }\n        if (copy > 2) {\n\
    \            list.add(copy);\n        }\n        if (list.size() == 3) {\n   \
    \         return true;\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Write your code here\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzk8nw1om.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean is = false;\n        int i = 2;\n        int j = 2;\n\
    \        int k = 2;\n        long t = 1;\n        for (i = 2; i < 100; i++) {\n\
    \            for (j = 2; j < 100; j++) {\n                for (k = 2; k < 100;\
    \ k++) {\n                    t = (long) (i * j * k);\n                    if\
    \ (t == a) {\n                        is = true;\n                        System.out.println(a\
    \ + \" = \" + i + \" * \" + j + \" * \" + k);\n                        return\
    \ is;\n                    }\n                }\n            }\n        }\n  \
    \      return is;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64jqffhv.java:43)\n"
  stdout: '30 = 2 * 3 * 5

    8 = 2 * 2 * 2

    125 = 5 * 5 * 5

    105 = 3 * 5 * 7

    126 = 2 * 3 * 21

    '
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Integer> pl = primesLessThen(100);\n        for (int i :\
    \ pl) {\n            if (a % i == 0) {\n                for (int j : pl) {\n \
    \                   if (i != j && a % j == 0 && a % (i * j) == 0) {\n        \
    \                for (int k : pl) {\n                            if (i != k &&\
    \ j != k && a % k == 0 && a % (i * j * k) == 0) {\n                          \
    \      return true;\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzw9o7stp.java:17: error: cannot find symbol\n        List<Integer>\
    \ pl = primesLessThen(100);\n                           ^\n  symbol:   method\
    \ primesLessThen(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 2; i < a; i++) {\n            if (a % i == 0) {\n\
    \                a /= i;\n                if (isPrime(a)) {\n                \
    \    return true;\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkemyvl2c.java:20: error: cannot find symbol\n                if\
    \ (isPrime(a)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n\t\tint total=0;\n\t\tfor(int i=2;i<=a;i++){\n\t\t\tif(a%i==0){\n\t\t\t\
    \ttotal++;\n\t\t\t\ta=a/i;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif(total==3){\n\t\
    \t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcq3bp6kb.java:22)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n    \treturn false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxdg174o.java:21)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n     \
    \       if (a % i == 0) {\n                count++;\n                a /= i;\n\
    \                i--;\n            }\n        }\n        if (count != 3) {\n \
    \           return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzrw6hee_.java:22)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 1; i <= a; i++) {\n            if (isPrime(i) &&\
    \ a % i == 0) {\n                for (int j = 1; j <= a; j++) {\n            \
    \        if (isPrime(j) && a % j == 0 && j != i) {\n                        for\
    \ (int k = 1; k <= a; k++) {\n                            if (isPrime(k) && a\
    \ % k == 0 && k != i && k != j) {\n                                if (i * j *\
    \ k == a) {\n                                    return true;\n              \
    \                  }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwueok_0e.java:18: error: cannot find symbol\n            if (isPrime(i)\
    \ && a % i == 0) {\n                ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n/tmp/tmpwueok_0e.java:20: error: cannot find symbol\n       \
    \             if (isPrime(j) && a % j == 0 && j != i) {\n                    \
    \    ^\n  symbol:   method isPrime(int)\n  location: class Problem\n/tmp/tmpwueok_0e.java:22:\
    \ error: cannot find symbol\n                            if (isPrime(k) && a %\
    \ k == 0 && k != i && k != j) {\n                                ^\n  symbol:\
    \   method isPrime(int)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n    \tif (a == 1) return false;\n    \tif (a == 2) return true;\n    \t\
    if (a == 3) return true;\n    \tif (a == 5) return true;\n    \tif (a == 7) return\
    \ true;\n    \tif (a == 11) return true;\n    \tif (a == 13) return true;\n  \
    \  \tif (a == 17) return true;\n    \tif (a == 19) return true;\n    \tif (a ==\
    \ 23) return true;\n    \tif (a == 29) return true;\n    \tif (a == 31) return\
    \ true;\n    \tif (a == 37) return true;\n    \tif (a == 41) return true;\n  \
    \  \tif (a == 43) return true;\n    \tif (a == 47) return true;\n    \tif (a ==\
    \ 53) return true;\n    \tif (a == 59) return true;\n    \tif (a == 61) return\
    \ true;\n    \tif (a == 67) return true;\n    \tif (a == 71) return true;\n  \
    \  \tif (a == 73) return true;\n    \tif (a == 79) return true;\n    \tif (a ==\
    \ 83) return true;\n    \tif (a == 89) return true;\n    \tif (a == 97) return\
    \ true;\n    \treturn false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1gkzqp6.java:46)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Prime numbers: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n        // Multiplication:\
    \ 2 * 3 * 5 = 30\n        // Multiplication: 2 * 3 * 5 * 7 = 210\n        // Multiplication:\
    \ 2 * 3 * 5 * 7 * 11 = 2310\n        // Multiplication: 2 * 3 * 5 * 7 * 11 * 13\
    \ = 30030\n        // ...\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpern2rwul.java:27)\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a %\
    \ i == 0) {\n                if (isPrime(i)) {\n                    if (isPrime(a\
    \ / i)) {\n                        return true;\n                    }\n     \
    \           }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbyyamjq.java:19: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n/tmp/tmpbbyyamjq.java:20: error: cannot find symbol\n       \
    \             if (isPrime(a / i)) {\n                        ^\n  symbol:   method\
    \ isPrime(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010933
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 2; i < Math.sqrt(a); i++) {\n            int count\
    \ = 0;\n            if (a % i == 0) {\n                count++;\n            \
    \    if (isPrime(i)) {\n                    count++;\n                }\n    \
    \        }\n            if (count >= 3) {\n                return true;\n    \
    \        }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8ejfl_y.java:21: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 6) return false;\n        if (a % 2 == 0) return isMultiplyPrime(a\
    \ / 2);\n        if (a % 3 == 0) return isMultiplyPrime(a / 3);\n        if (a\
    \ % 5 == 0) return isMultiplyPrime(a / 5);\n        if (a % 7 == 0) return isMultiplyPrime(a\
    \ / 7);\n        for (int i = 11; i * i <= a; i++) {\n            if (a % i ==\
    \ 0) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr4q2p3x8.java:29)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // YOUR CODE HERE\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn9nx_nyh.java:21)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return primeFactors(a).stream().limit(3).reduce(1l, (x, y) ->\
    \ x * y) == a;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuui8bcnv.java:17: error: cannot find symbol\n        return primeFactors(a).stream().limit(3).reduce(1l,\
    \ (x, y) -> x * y) == a;\n               ^\n  symbol:   method primeFactors(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO\n    }\n    public static void main(String[] args) {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplyg9_u_8.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primeNumbers = Arrays.asList(2l, 3l, 5l, 7l, 11l, 13l,\
    \ 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l,\
    \ 83l, 89l, 97l);\n        boolean found = false;\n        if (a < 100) {\n  \
    \          if (primeNumbers.contains(a)) {\n                found = true;\n  \
    \          } else {\n                for (long primeNumber : primeNumbers) {\n\
    \                    if (a % primeNumber == 0) {\n                        if (primeNumbers.contains(a\
    \ / primeNumber)) {\n                            found = true;\n             \
    \               break;\n                        }\n                    }\n   \
    \             }\n            }\n        }\n        return found;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdx0858b_.java:36)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Compute the list of prime number less then a.\n        List<Long>\
    \ l = new ArrayList<Long>();\n        for (long i = 2; i <= a; i++) {\n      \
    \      boolean isPrime = true;\n            for (long j = 2; j < i; j++) {\n \
    \               if (i % j == 0) {\n                    isPrime = false;\n    \
    \                break;\n                }\n            }\n            if (isPrime)\
    \ {\n                l.add(i);\n            }\n        }\n        // Compute all\
    \ combinations of 3 prime numbers\n        List<Triplet<Long, Long, Long>> res\
    \ = new ArrayList<Triplet<Long, Long, Long>>();\n        List<Triplet<Long, Long,\
    \ Long>> tmp = new ArrayList<Triplet<Long, Long, Long>>();\n        for (int i\
    \ = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++)\
    \ {\n                for (int k = j + 1; k < l.size(); k++) {\n              \
    \      tmp.add(Triplet.with(l.get(i), l.get(j), l.get(k)));\n                }\n\
    \            }\n        }\n        // Filter combinations by the product\n   \
    \     for (Triplet<Long, Long, Long> t : tmp) {\n            long product = t.getValue0()\
    \ * t.getValue1() * t.getValue2();\n            if (product == a) {\n        \
    \        res.add(t);\n            }\n        }\n        return !res.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Triplet\n\
    \tat Problem.isMultiplyPrime(tmporiom9ff.java:37)\n\tat Problem.main(tmporiom9ff.java:51)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Triplet\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // FILL ME\n        // Hint: primes under 100\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl2fh7x9.java:23)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long tmpa = a;\n        long[] num = new long[100];\n        int\
    \ count = 0;\n        for (long i = 2; i < a; i++) {\n            if (a % i ==\
    \ 0) {\n                a = a / i;\n                num[count] = i;\n        \
    \        count++;\n                i = 1;\n            }\n        }\n        num[count]\
    \ = a;\n        count++;\n        num = Arrays.copyOf(num, count);\n        int[]\
    \ number = new int[100];\n        for (int i = 0; i < count; i++) {\n        \
    \    for (int j = 0; j < count; j++) {\n                if (num[i] == num[j])\
    \ {\n                    number[i]++;\n                }\n            }\n    \
    \    }\n        int c = 0;\n        for (int i = 0; i < count; i++) {\n      \
    \      if (number[i] == 1) {\n                c++;\n            }\n        }\n\
    \        if (c == 3) {\n            return true;\n        } else {\n         \
    \   return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6lvdkfa.java:54)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        for (int i = 2; i < a; i++) {\n            if (a % i == 0) {\n\
    \                for (int j = 2; j < a; j++) {\n                    if (a % j\
    \ == 0) {\n                        long c = a / (i * j);\n                   \
    \     if (c != 1 && c != i && c != j) {\n                            return true;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8nxde4t.java:35)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Your code goes here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcj332jxj.java:22)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primeNumbers = primeNumbers(a);\n        Collections.reverse(primeNumbers);\n\
    \        List<Triplet<Long, Long, Long>> primeTriplets = primeNumbersTriplets(primeNumbers);\n\
    \        for (Triplet<Long, Long, Long> triplet : primeTriplets) {\n         \
    \   if (triplet.getValue0() * triplet.getValue1() * triplet.getValue2() == a)\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8rkfdoe.java:17: error: cannot find symbol\n        List<Long>\
    \ primeNumbers = primeNumbers(a);\n                                  ^\n  symbol:\
    \   method primeNumbers(long)\n  location: class Problem\n/tmp/tmpr8rkfdoe.java:19:\
    \ error: cannot find symbol\n        List<Triplet<Long, Long, Long>> primeTriplets\
    \ = primeNumbersTriplets(primeNumbers);\n                                    \
    \                    ^\n  symbol:   method primeNumbersTriplets(List<Long>)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int numberOfPrime = 0;\n        for (int i = 2; i <= a; i++) {\n\
    \            if (isPrime(i)) {\n                if (a % i == 0) {\n          \
    \          a /= i;\n                    numberOfPrime++;\n                }\n\
    \            }\n        }\n        return numberOfPrime == 3;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbmaroez1.java:19: error: cannot find symbol\n            if (isPrime(i))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int num = 0;\n        for (int i = 2; i < a; i++) {\n        \
    \    while (a % i == 0) {\n                a /= i;\n                num++;\n \
    \           }\n        }\n        return num == 3;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpll96veca.java:28)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int sum = 0;\n        int divisor = 0;\n        int count = 0;\n\
    \        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n     \
    \           count++;\n                System.out.println(i);\n               \
    \ if (count == 2) {\n                    break;\n                }\n         \
    \   }\n        }\n        if (count == 1) {\n            return true;\n      \
    \  } else {\n            return false;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7s5ilc4r.java:36)\n"
  stdout: '5

    '
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve5wlhsl.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long[] prims = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        List<Long> primsList\
    \ = Arrays.stream(prims).boxed().collect(Collectors.toList());\n        if (primsList.contains(a))\
    \ {\n            return true;\n        }\n        for (int i = 0; i < prims.length;\
    \ i++) {\n            for (int j = 0; j < prims.length; j++) {\n             \
    \   for (int k = 0; k < prims.length; k++) {\n                    if (prims[i]\
    \ * prims[j] * prims[k] == a) {\n                        return true;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_dm4umrg.java:34)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // This function uses trial division to determine if a is a prime\
    \ or not\n        long stop = (long)Math.sqrt(a);\n        for (long i = 2; i\
    \ <= stop; i++) {\n            if (a % i == 0) {\n                if (isPrime(i))\
    \ {\n                    long x = a / i;\n                    if (isPrime(x))\
    \ {\n                        if (isPrime(a / x)) {\n                         \
    \   return true;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbie8e7ci.java:21: error: cannot find symbol\n                if\
    \ (isPrime(i)) {\n                    ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n/tmp/tmpbie8e7ci.java:23: error: cannot find symbol\n       \
    \             if (isPrime(x)) {\n                        ^\n  symbol:   method\
    \ isPrime(long)\n  location: class Problem\n/tmp/tmpbie8e7ci.java:24: error: cannot\
    \ find symbol\n                        if (isPrime(a / x)) {\n               \
    \             ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new RuntimeException(\"Remove this line!\");\n    }\n  \
    \  public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Remove this line!\n\
    \tat Problem.isMultiplyPrime(tmp6pi1tk5c.java:17)\n\tat Problem.main(tmp6pi1tk5c.java:20)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO: Write your code here\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpybdlp0j1.java:22)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return new java.util.Random().nextBoolean();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa1faijvn.java:20)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // 1 is not a prime number\n        if (a == 1) return false;\n\
    \        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0)\
    \ {\n                return isMultiplyPrime(a / i) && isPrime(i);\n          \
    \  }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhn8ipy1.java:21: error: cannot find symbol\n                return\
    \ isMultiplyPrime(a / i) && isPrime(i);\n                                    \
    \             ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long temp = a;\n        while (temp % 2 == 0) {\n            temp\
    \ /= 2;\n        }\n        while (temp % 3 == 0) {\n            temp /= 3;\n\
    \        }\n        while (temp % 5 == 0) {\n            temp /= 5;\n        }\n\
    \        return temp == 1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wcc4vmk.java:30)\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 0) return false;\n        else if (a == 0) return true;\n\
    \        return isPrime(a);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmqdyybp.java:19: error: cannot find symbol\n        return isPrime(a);\n\
    \               ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Write here your code\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ds_esy_.java:22)\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 6) {\n            return false;\n        }\n        if\
    \ (a < 17) {\n            return true;\n        }\n        for (int i = 2; i <\
    \ a / 3; i++) {\n            if (isPrime(i) && a % i == 0) {\n               \
    \ for (int j = i + 1; j < a / 2; j++) {\n                    if (isPrime(j) &&\
    \ a % j == 0) {\n                        for (int k = j + 1; k < a; k++) {\n \
    \                           if (isPrime(k) && a % k == 0) {\n                \
    \                return true;\n                            }\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4s11zcs.java:24: error: cannot find symbol\n            if (isPrime(i)\
    \ && a % i == 0) {\n                ^\n  symbol:   method isPrime(int)\n  location:\
    \ class Problem\n/tmp/tmpg4s11zcs.java:26: error: cannot find symbol\n       \
    \             if (isPrime(j) && a % j == 0) {\n                        ^\n  symbol:\
    \   method isPrime(int)\n  location: class Problem\n/tmp/tmpg4s11zcs.java:28:\
    \ error: cannot find symbol\n                            if (isPrime(k) && a %\
    \ k == 0) {\n                                ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // your code here\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplgib7lks.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 6) return false;\n        if (a % 2 == 0) return isMultiplyPrime(a\
    \ / 2);\n        if (a % 3 == 0) return isMultiplyPrime(a / 3);\n        if (a\
    \ % 5 == 0) return isMultiplyPrime(a / 5);\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6eykrjz.java:25)\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a > 100) {\n            return false;\n        }\n       \
    \ if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n\
    \            return false;\n        }\n        if (a == 2) {\n            return\
    \ false;\n        }\n        if (a == 3) {\n            return false;\n      \
    \  }\n        if (a == 5) {\n            return false;\n        }\n        if\
    \ (a == 7) {\n            return false;\n        }\n        if (a == 9) {\n  \
    \          return false;\n        }\n        if (a == 11) {\n            return\
    \ false;\n        }\n        if (a == 13) {\n            return false;\n     \
    \   }\n        if (a == 15) {\n            return false;\n        }\n        if\
    \ (a == 17) {\n            return false;\n        }\n        if (a == 19) {\n\
    \            return false;\n        }\n        if (a == 21) {\n            return\
    \ false;\n        }\n        if (a == 23) {\n            return false;\n     \
    \   }\n        if (a == 25) {\n            return false;\n        }\n        if\
    \ (a == 27) {\n            return false;\n        }\n        if (a == 29) {\n\
    \            return false;\n        }\n        if (a == 31) {\n            return\
    \ false;\n        }\n        if (a == 33) {\n            return false;\n     \
    \   }\n        if (a == 35) {\n            return false;\n        }\n        if\
    \ (a == 37) {\n            return false;\n        }\n        if (a == 39) {\n\
    \            return false;\n        }\n        if (a == 41) {\n            return\
    \ false;\n        }\n        if (a == 43) {\n            return false;\n     \
    \   }\n        if (a == 45) {\n            return false;\n        }\n        if\
    \ (a == 47) {\n            return false;\n        }\n        if (a == 49) {\n\
    \            return false;\n        }\n        if (a == 51) {\n            return\
    \ false;\n        }\n        if (a == 53) {\n            return false;\n     \
    \   }\n       \n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s3tzpzp.java:108: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long i;\n        boolean flag = false;\n        for(i=2; i<=a/2;\
    \ ++i)\n        {\n            // condition for i to be a prime number\n     \
    \       if(isPrime(i))\n            {\n                // condition for n-i to\
    \ be a prime number\n                if(isPrime(a-i))\n                {\n   \
    \                 // n = primeNumber1 + primeNumber2\n                    System.out.printf(\"\
    %d = %d + %d\\n\", a, i, a-i);\n                    flag = true;\n           \
    \     }\n            }\n        }\n        if (flag == false)\n            System.out.println(a\
    \ + \" can't be expressed as the sum of two prime numbers.\");\n        return\
    \ flag;\n    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4cusil8j.java:22: error: cannot find symbol\n            if(isPrime(i))\n\
    \               ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    /tmp/tmp4cusil8j.java:25: error: cannot find symbol\n                if(isPrime(a-i))\n\
    \                   ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long d = 2;\n        while (a > 1) {\n            if (a % d ==\
    \ 0) {\n                a /= d;\n            } else {\n                d += 1;\n\
    \            }\n        }\n        return d > 5;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9zr8difu.java:29)\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a == 0) {\n            return false;\n        }\n        if\
    \ (a == 1) {\n            return true;\n        }\n        return isMultiplyPrimeRec(a,\
    \ new ArrayList<Long>());\n    }\n    public static void main(String[] args) {\n\
    \    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj__wwl6.java:23: error: cannot find symbol\n        return isMultiplyPrimeRec(a,\
    \ new ArrayList<Long>());\n               ^\n  symbol:   method isMultiplyPrimeRec(long,ArrayList<Long>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean result = false;\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3m5l37b2.java:22)\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        if (a < 6) {\n            return false;\n        }\n        List<Integer>\
    \ nums = new ArrayList<Integer>();\n        while (a % 2 == 0) {\n           \
    \ nums.add(2);\n            a /= 2;\n        }\n        for (int i = 3; i <= a;\
    \ i += 2) {\n            while (a % i == 0) {\n                nums.add(i);\n\
    \                a /= i;\n            }\n        }\n        if (nums.size() ==\
    \ 3) {\n            return true;\n        }\n        return false;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // List<Long> res = new ArrayList<>();\n        for (long i =\
    \ 2; i < a; i++) {\n            if (isPrime(i) && a % i == 0) {\n            \
    \    // res.add(i);\n                long temp = a / i;\n                if (isPrime(temp))\
    \ {\n                    // res.add(temp);\n                    long temp2 = temp\
    \ / i;\n                    if (isPrime(temp2)) {\n                        //\
    \ res.add(temp2);\n                        if (i * temp * temp2 == a) {\n    \
    \                        return true;\n                        }\n           \
    \         }\n                }\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb20gpvrm.java:19: error: cannot find symbol\n            if (isPrime(i)\
    \ && a % i == 0) {\n                ^\n  symbol:   method isPrime(long)\n  location:\
    \ class Problem\n/tmp/tmpb20gpvrm.java:22: error: cannot find symbol\n       \
    \         if (isPrime(temp)) {\n                    ^\n  symbol:   method isPrime(long)\n\
    \  location: class Problem\n/tmp/tmpb20gpvrm.java:25: error: cannot find symbol\n\
    \                    if (isPrime(temp2)) {\n                        ^\n  symbol:\
    \   method isPrime(long)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Integer> primes = new ArrayList<>();\n        int count =\
    \ 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i\
    \ == 0) {\n                primes.add(i);\n                a /= i;\n         \
    \       i--;\n                count++;\n            }\n        }\n        primes.add((int)\
    \ a);\n        count++;\n        if (count == 3) {\n            for (int i = 0;\
    \ i < primes.size(); i++) {\n                for (int j = i + 1; j < primes.size();\
    \ j++) {\n                    if (primes.get(i) == primes.get(j)) {\n        \
    \                return false;\n                    }\n                }\n   \
    \         }\n            return true;\n        }\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qwki17g.java:44)\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return isMultiplyPrime(a, new ArrayList<>());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprp1avjhn.java:17: error: method isMultiplyPrime in class Problem\
    \ cannot be applied to given types;\n        return isMultiplyPrime(a, new ArrayList<>());\n\
    \               ^\n  required: long\n  found:    long,ArrayList<Object>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> primes = sieve(100);\n        for (int i = 0; i < primes.size();\
    \ i++) {\n            long x = primes.get(i);\n            if (a % x == 0) {\n\
    \                long b = a / x;\n                for (int j = 0; j < primes.size();\
    \ j++) {\n                    long y = primes.get(j);\n                    if\
    \ (b % y == 0) {\n                        long z = b / y;\n                  \
    \      if (Collections.binarySearch(primes, z) >= 0) {\n                     \
    \       return true;\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4e2vnxqn.java:17: error: cannot find symbol\n        List<Long>\
    \ primes = sieve(100);\n                            ^\n  symbol:   method sieve(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Write your code here\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpve5wlhsl.java:22)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        boolean isPrimeNumber = false;\n        // Write your code here\n\
    \        return isPrimeNumber;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbn5uola6.java:23)\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long a_prime = 2;\n        long a_prime_times = 0;\n        long\
    \ a_prime_last = 0;\n        while (a_prime <= a) {\n            if (a % a_prime\
    \ == 0) {\n                a_prime_times++;\n                a_prime_last = a_prime;\n\
    \                a = a / a_prime;\n            } else {\n                a_prime++;\n\
    \            }\n        }\n        return (a_prime_times == 3);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyuxoho1b.java:20)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> list = new ArrayList<>();\n        List<Long> prime\
    \ = new ArrayList<>();\n        long index = 1;\n        while (true) {\n    \
    \        prime.add(index);\n            index = nextPrime(index);\n          \
    \  if (index == 0) {\n                break;\n            }\n        }\n     \
    \   for (long num : prime) {\n            if (a % num == 0) {\n              \
    \  list.add(num);\n                a = a / num;\n            }\n        }\n  \
    \      return list.size() == 3;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gdkyad_.java:22: error: cannot find symbol\n            index\
    \ = nextPrime(index);\n                    ^\n  symbol:   method nextPrime(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO: Implement function\n        return false;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeluq8780.java:22)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        List<Long> result = new ArrayList<>();\n        long n = a;\n\
    \        for (long i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n\
    \                result.add(i);\n                n /= i;\n            }\n    \
    \    }\n        if (n > 1) {\n            result.add(n);\n        }\n        return\
    \ result.size() == 3;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // Your code is here.\n        long b = a;\n        int c = 0;\n\
    \        boolean d = false;\n        boolean e = false;\n        while (b != 1)\
    \ {\n            for (int i = 2; i <= b; i++) {\n                if (b % i ==\
    \ 0) {\n                    if (isPrime(i)) {\n                        c += 1;\n\
    \                        b = b / i;\n                        if (c == 3) {\n \
    \                           d = true;\n                            e = true;\n\
    \                            break;\n                        }\n             \
    \       } else {\n                        break;\n                    }\n    \
    \            }\n            }\n            if (d == true) {\n                break;\n\
    \            }\n        }\n        return e;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0k3_fzr.java:25: error: cannot find symbol\n                 \
    \   if (isPrime(i)) {\n                        ^\n  symbol:   method isPrime(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n\t\tif (a<=0 || a%2==0 || a%3==0 || a%5==0) return false;\n\t\tList<Long>\
    \ listPrime=new ArrayList<>();\n\t\tlistPrime.add(2l);\n\t\tlistPrime.add(3l);\n\
    \t\tlistPrime.add(5l);\n\t\tlong number=7;\n\t\t\n\t\twhile (number<=a/2) {\n\t\
    \t\tboolean isPrime=true;\n\t\t\t\n\t\t\tfor (long prime:listPrime) {\n\t\t\t\t\
    if (number%prime==0) {\n\t\t\t\t\tisPrime=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t\t\n\t\t\tif (isPrime) {\n\t\t\t\tlistPrime.add(number);\n\t\t\t\t\
    \n\t\t\t\tif (a%number==0) {\n\t\t\t\t\tList<Long> lista=new ArrayList<>();\n\t\
    \t\t\t\tList<Long> listb=new ArrayList<>();\n\t\t\t\t\tlista.add(number);\n\t\t\
    \t\t\tlong b=a/number;\n\t\t\t\t\t\n\t\t\t\t\tfor (long prime:listPrime) {\n\t\
    \t\t\t\t\tif (b%prime==0) {\n\t\t\t\t\t\t\tlistb.add(prime);\n\t\t\t\t\t\t\tb/=prime;\n\
    \t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (b==1) {\n\t\t\t\t\t\tSystem.out.println(a+\"\
    =\"+lista+\"*\"+listb);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\t\n\t\t\tnumber+=2;\n\t\t}\n\t\t\n\t\treturn false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwsq_tp1.java:64)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // you write code here\n        // return true;\n        long\
    \ n=a;\n        int flag=0;\n        if(n%2==0)\n        {\n            n=n/2;\n\
    \            if(n%2==0)\n            {\n                flag=1;\n            }\n\
    \        }\n        for(int i=3;i<=Math.sqrt(n);i+=2)\n        {\n           \
    \ if(n%i==0)\n            {\n                n=n/i;\n                if(n%i==0)\n\
    \                {\n                    flag=1;\n                }\n         \
    \   }\n        }\n        if(flag==0)\n        {\n            return true;\n \
    \       }\n        else\n        {\n            return false;\n        }\n   \
    \ }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5te16ml5.java:50)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        throw new Error(\"Not implemented\");\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isMultiplyPrime((5l)) == (false));\n\
    \    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.Error: Not implemented\n\tat Problem.isMultiplyPrime(tmpk4t4dfhn.java:17)\n\
    \tat Problem.main(tmpk4t4dfhn.java:20)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        int[] primes = new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        // Write your\
    \ code here:\n        int n = primes.length;\n        int i = 0;\n        boolean\
    \ isPrimeMultiply = false;\n        while (i < n) {\n            if (a % primes[i]\
    \ == 0) {\n                a = a / primes[i];\n                isPrimeMultiply\
    \ = true;\n            } else {\n                i++;\n            }\n       \
    \ }\n        return isPrimeMultiply;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54k769af.java:33)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        long[] array = new long[3];\n        int index = 0;\n        for\
    \ (long i = 2; i <= a; i++) {\n            if (a % i == 0) {\n               \
    \ array[index] = i;\n                index++;\n                a = a / i;\n  \
    \              i = 1;\n            }\n            if (index == 3) {\n        \
    \        return true;\n            }\n        }\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxhlsff9x.java:39)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        // TODO: Return true if the given number is the multiplication\
    \ of 3 prime numbers\n        // and false otherwise.\n        // IMPORTANT:\n\
    \        // Write your code in this function. Do not change any code from the\
    \ template.\n        // In this function you can write your own test cases.\n\
    \        //\n        // Your solution must use a global variable to store the\
    \ result. \n        // At the end, the content of this variable will be returned\
    \ by the isMultiplyPrime() function.\n        //\n        // boolean isMultiplyPrimeResult\
    \ = false;\n        //\n        // TODO:\n        // - start \n        // - your\
    \ code goes here\n        // - end\n        //\n        // IMPORTANT: \n     \
    \   // - do not change the return value\n        // - do not change the \"isMultiplyPrimeResult\"\
    \ variable\n        // - do not change the name of the \"isMultiplyPrimeResult\"\
    \ variable\n        //\n        // * To test your solution, use the SolutionTest.java\
    \ file.\n        // * To get a basic understanding of the problem, read the \"\
    task description\" in the Problem.java file.\n        // * To see what the solution\
    \ of the sample test case looks like, look at the \"expected output\" in the SolutionTest.java\
    \ file.\n        // * Do not change the name of the methods (if you do, the SolutionTest.java\
    \ file will not work).\n        // * Do not write your own main() method.\n  \
    \      // * Do not write your own package.\n        //\n        boolean isMultiplyPrimeResult\
    \ = false;\n        // TODO: start\n        // your code goes here\n        //\n\
    \        // find all prime numbers\n        List<Long> primeNumbers = findPrimeNumbers(a);\n\
    \        // find all possible combinations of three numbers\n        List<Triplet<Long,\
    \ Long, Long>> possibleResults = findPossibleResults(primeNumbers);\n        //\
    \ find if the given number is a multiplication of three prime numbers\n      \
    \  // an algorithm needs to be written here\n        isMultiplyPrimeResult = isMultiplyPrimeResult(possibleResults,\
    \ a);\n        //\n        // TODO: end\n        return isMultiplyPrimeResult;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz525ontm.java:50: error: cannot find symbol\n        List<Long>\
    \ primeNumbers = findPrimeNumbers(a);\n                                  ^\n \
    \ symbol:   method findPrimeNumbers(long)\n  location: class Problem\n/tmp/tmpz525ontm.java:52:\
    \ error: cannot find symbol\n        List<Triplet<Long, Long, Long>> possibleResults\
    \ = findPossibleResults(primeNumbers);\n                                     \
    \                     ^\n  symbol:   method findPossibleResults(List<Long>)\n\
    \  location: class Problem\n/tmp/tmpz525ontm.java:55: error: cannot find symbol\n\
    \        isMultiplyPrimeResult = isMultiplyPrimeResult(possibleResults, a);\n\
    \                                ^\n  symbol:   method isMultiplyPrimeResult(List<Triplet<Long,Long,Long>>,long)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpflqlugsg.java:21)\n"
  stdout: ''
  timestamp: 1660010929
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n\t\t// \n        // Start coding here!\n        //\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isMultiplyPrime((5l))\
    \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
    \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
    \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
    \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
    \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__1e3rve.java:23)\n"
  stdout: ''
  timestamp: 1660010936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    // and false otherwise.\n    //\
    \ Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n\
    \    // (true)\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(long\
    \ a) {\n        return a == 1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isMultiplyPrime((5l)) == (false));\n    assert(isMultiplyPrime((30l))\
    \ == (true));\n    assert(isMultiplyPrime((8l)) == (true));\n    assert(isMultiplyPrime((10l))\
    \ == (false));\n    assert(isMultiplyPrime((125l)) == (true));\n    assert(isMultiplyPrime((105l))\
    \ == (true));\n    assert(isMultiplyPrime((126l)) == (false));\n    assert(isMultiplyPrime((729l))\
    \ == (false));\n    assert(isMultiplyPrime((891l)) == (false));\n    assert(isMultiplyPrime((1001l))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuyente_7.java:21)\n"
  stdout: ''
  timestamp: 1660010936
