name: HumanEval_156_int_to_mini_roman
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num\
  \ <= 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
  \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
  \    // (\"cdxxvi\")\n    public static String intToMiniRoman(long number) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19l)).equals((\"\
  xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
  ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
  d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
  iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
  xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
  dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
  cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n}\n"
completions: ["        int num = (int) number;\n        String res = \"\";\n     \
    \   if (num == 0)\n            return \"\";\n        while (num >= 1000) {\n \
    \           res += \"m\";\n            num -= 1000;\n        }\n        if (num\
    \ >= 900) {\n            res += \"cm\";\n            num -= 900;\n        }\n\
    \        if (num >= 500) {\n            res += \"d\";\n            num -= 500;\n\
    \        }\n        if (num >= 400) {\n            res += \"cd\";\n          \
    \  num -= 400;\n        }\n        while (num >= 100) {\n            res += \"\
    c\";\n            num -= 100;\n        }\n        if (num >= 90) {\n         \
    \   res += \"xc\";\n            num -= 90;\n        }\n        if (num >= 50)\
    \ {\n            res += \"l\";\n            num -= 50;\n        }\n        if\
    \ (num >= 40) {\n            res += \"xl\";\n            num -= 40;\n        }\n\
    \        while (num >= 10) {\n            res += \"x\";\n            num -= 10;\n\
    \        }\n        if (num >= 9) {\n            res += \"ix\";\n            num\
    \ -= 9;\n        }\n        if (num >= 5) {\n            res += \"v\";\n     \
    \       num -= 5;\n        }\n        if (num >= 4) {\n            res += \"iv\"\
    ;\n            num -= 4;\n        }\n        while (num >= 1) {\n            res\
    \ += \"i\";\n            num -= 1;\n        }\n        return res;", "       \
    \ StringBuilder builder = new StringBuilder();\n        ArrayList<Long> list =\
    \ new ArrayList<Long>();\n        while (number > 0) {\n            long count\
    \ = number / 1000;\n            list.add(count);\n            number -= count\
    \ * 1000;\n            long count2 = number / 500;\n            list.add(count2);\n\
    \            number -= count2 * 500;\n            long count3 = number / 100;\n\
    \            list.add(count3);\n            number -= count3 * 100;\n        \
    \    long count4 = number / 50;\n            list.add(count4);\n            number\
    \ -= count4 * 50;\n            long count5 = number / 10;\n            list.add(count5);\n\
    \            number -= count5 * 10;\n            long count6 = number / 5;\n \
    \           list.add(count6);\n            number -= count6 * 5;\n           \
    \ long count7 = number / 1;\n            list.add(count7);\n            number\
    \ -= count7 * 1;\n        }\n        for (int i = 0; i < list.size(); i++) {\n\
    \            if (i == 0) {\n                if (list.get(i) != 0) {\n        \
    \            builder.append(String.join(\"\", Collections.nCopies(list.get(i).intValue(),\
    \ \"m\")));\n                }\n            }\n            if (i == 1) {\n   \
    \             if (list.get(i) != 0) {\n                    if (list.get(i) ==\
    \ 1) {\n                        builder.append(\"d\");\n                    }\
    \ else {\n                        builder.append(\"cm\");\n                  \
    \  }\n                }\n            }\n            if (i == 2) {\n          \
    \      if (list.get(i) != 0) {\n                    builder.append(String.join(\"\
    \", Collections.nCopies(list.get(i).intValue(), \"c\")));\n                }\n\
    \            }\n            if (i == 3) {\n                if (list.get(i) !=\
    \ 0) {\n                    if (list.get(i) == 1) {\n                        builder.append(\"\
    l\");\n                    } else {\n                        builder.append(\"\
    xc\");\n                    }\n                }\n            }\n            if\
    \ (i == 4) {\n               ", "        String[] romans = {\"x\",\"ix\",\"v\"\
    ,\"iv\",\"i\"};\n        int[] numbers = {10,9,5,4,1};\n        StringBuffer result\
    \ = new StringBuffer();\n        int k = 0;\n        while (number > 0) {\n  \
    \          int times = (int) (number / numbers[k]);\n            number -= numbers[k]\
    \ * times;\n            for (; times > 0; times--) {\n                result.append(romans[k]);\n\
    \            }\n            k++;\n        }\n        return result.toString();",
  '        throw new RuntimeException("Not implemented.");', '        return "";',
  "        String rom = \"\";\n        if (number >= 1000) {\n            rom += \"\
    m\";\n            number -= 1000;\n        }\n        if (number >= 900) {\n \
    \           rom += \"cm\";\n            number -= 900;\n        }\n        if\
    \ (number >= 500) {\n            rom += \"d\";\n            number -= 500;\n \
    \       }\n        if (number >= 400) {\n            rom += \"cd\";\n        \
    \    number -= 400;\n        }\n        if (number >= 100) {\n            rom\
    \ += \"c\";\n            number -= 100;\n        }\n        if (number >= 90)\
    \ {\n            rom += \"xc\";\n            number -= 90;\n        }\n      \
    \  if (number >= 50) {\n            rom += \"l\";\n            number -= 50;\n\
    \        }\n        if (number >= 40) {\n            rom += \"xl\";\n        \
    \    number -= 40;\n        }\n        if (number >= 10) {\n            rom +=\
    \ \"x\";\n            number -= 10;\n        }\n        if (number >= 9) {\n \
    \           rom += \"ix\";\n            number -= 9;\n        }\n        if (number\
    \ >= 5) {\n            rom += \"v\";\n            number -= 5;\n        }\n  \
    \      if (number >= 4) {\n            rom += \"iv\";\n            number -= 4;\n\
    \        }\n        if (number >= 1) {\n            rom += \"i\";\n          \
    \  number -= 1;\n        }\n        return rom;", "        String roman = \"\"\
    ;\n        String[] romanNumeral = new String[] {\"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n      \
    \  int[] intNumeral = new int[] {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n        for (int i = 0; i < intNumeral.length; i++) {\n         \
    \   while (number >= intNumeral[i]) {\n                number -= intNumeral[i];\n\
    \                roman += romanNumeral[i];\n            }\n        }\n       \
    \ return roman.toLowerCase();", "        StringBuilder result = new StringBuilder();\n\
    \        for (String key : roman.keySet()) {\n            while (number >= roman.get(key))\
    \ {\n                result.append(key);\n                number -= roman.get(key);\n\
    \            }\n        }\n        return result.toString();", "        String[][]\
    \ romanValues = new String[][]{\n            {\"\", \"i\", \"ii\", \"iii\", \"\
    iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"},\n            {\"\", \"x\", \"\
    xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"},\n          \
    \  {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"\
    cm\"},\n            {\"\", \"m\", \"mm\", \"mmm\", \"mv\", \"v\", \"vm\", \"vmm\"\
    , \"vmmm\", \"mx\"}\n        };\n        String roman = \"\";\n        for (int\
    \ i = 0; i < 4; i++) {\n            roman = romanValues[i][(int) (number % 10)]\
    \ + roman;\n            number /= 10;\n        }\n        return roman;", "  \
    \      if (number == 0) return \"\";\n        // Use a map to store the basic\
    \ roman numerals, ordered in descending order.\n        // Use a TreeMap so that\
    \ the internal storage is ordered.\n        Map<Integer, String> nums = new TreeMap<>(Comparator.reverseOrder());\n\
    \        nums.put(1000, \"m\");\n        nums.put(900, \"cm\");\n        nums.put(500,\
    \ \"d\");\n        nums.put(400, \"cd\");\n        nums.put(100, \"c\");\n   \
    \     nums.put(90, \"xc\");\n        nums.put(50, \"l\");\n        nums.put(40,\
    \ \"xl\");\n        nums.put(10, \"x\");\n        nums.put(9, \"ix\");\n     \
    \   nums.put(5, \"v\");\n        nums.put(4, \"iv\");\n        nums.put(1, \"\
    i\");\n        // To avoid hardcoding all the numerals manually, we could make\
    \ this a\n        // little more dynamic by first constructing a list of the numerals.\n\
    \        // Then, we can use a map function on each numeral and the list of nums.\n\
    \        // The map function would first use a filter function to split the numeral\n\
    \        // into two parts if possible. This would allow us to handle 9, 90, 900,\n\
    \        // etc.\n        // The filter function would be as follows:\n      \
    \  // 1. If the number is divisible by 1000, split it into 1000, and the remainder.\n\
    \        // Else, if the number is divisible by 900, split it into 900, and the\
    \ remainder.\n        // Etc.\n        // 2. If the number is divisible by 500,\
    \ split it into 500, and the remainder.\n        // Else, if the number is divisible\
    \ by 400, split it into 400, and the remainder.\n        // Etc.\n        // 3.\
    \ If the number is divisible by 100, split it into 100, and the remainder.\n \
    \       // Else, if the number is divisible by 90, split it into 90, and the remainder.\n\
    \        // Etc.\n        // 4. If the number is divisible by 50, split it into\
    \ 50, and", "        // Your code goes here\n        return \"\";", "        Map<Integer,\
    \ String> map = new HashMap<>();\n        map.put(1, \"i\");\n        map.put(5,\
    \ \"v\");\n        map.put(10, \"x\");\n        map.put(50, \"l\");\n        map.put(100,\
    \ \"c\");\n        map.put(500, \"d\");\n        map.put(1000, \"m\");\n     \
    \   StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < String.valueOf(number).length();\
    \ i++) {\n            int digit = Character.getNumericValue(String.valueOf(number).charAt(i));\n\
    \            if (digit < 4) {\n                for (int j = 0; j < digit; j++)\
    \ {\n                    sb.append(map.get((int) Math.pow(10, i)));\n        \
    \        }\n            } else if (digit == 4) {\n                sb.append(map.get((int)\
    \ Math.pow(10, i)));\n                sb.append(map.get((int) Math.pow(10, i)\
    \ * 5));\n            } else if (digit == 5) {\n                sb.append(map.get((int)\
    \ Math.pow(10, i) * 5));\n            } else if (digit > 5 && digit < 9) {\n \
    \               sb.append(map.get((int) Math.pow(10, i) * 5));\n             \
    \   for (int j = 0; j < digit - 5; j++) {\n                    sb.append(map.get((int)\
    \ Math.pow(10, i)));\n                }\n            } else if (digit == 9) {\n\
    \                sb.append(map.get((int) Math.pow(10, i)));\n                sb.append(map.get((int)\
    \ Math.pow(10, i + 1)));\n            }\n        }\n        return sb.toString();",
  "        String res = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                res += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                res += \"cm\";\n   \
    \             number -= 900;\n            } else if (number >= 500) {\n      \
    \          res += \"d\";\n                number -= 500;\n            } else if\
    \ (number >= 400) {\n                res += \"cd\";\n                number -=\
    \ 400;\n            } else if (number >= 100) {\n                res += \"c\"\
    ;\n                number -= 100;\n            } else if (number >= 90) {\n  \
    \              res += \"xc\";\n                number -= 90;\n            } else\
    \ if (number >= 50) {\n                res += \"l\";\n                number -=\
    \ 50;\n            } else if (number >= 40) {\n                res += \"xl\";\n\
    \                number -= 40;\n            } else if (number >= 10) {\n     \
    \           res += \"x\";\n                number -= 10;\n            } else if\
    \ (number >= 9) {\n                res += \"ix\";\n                number -= 9;\n\
    \            } else if (number >= 5) {\n                res += \"v\";\n      \
    \          number -= 5;\n            } else if (number >= 4) {\n             \
    \   res += \"iv\";\n                number -= 4;\n            } else if (number\
    \ >= 1) {\n                res += \"i\";\n                number -= 1;\n     \
    \       }\n        }\n        return res;", "        // Your code here\n     \
    \   return null;", '        throw new RuntimeException("not implemented");', " \
    \       if (!(1 <= number)) throw new AssertionError(\"number not in valid range\"\
    );\n        if (!(number <= 1000)) throw new AssertionError(\"number not in valid\
    \ range\");\n        String result = null;\n        String roman_string = null;\n\
    \        int number_i = (int) number;\n        switch (number_i) {\n         \
    \   case 1: roman_string = \"i\"; break;\n            case 2: roman_string = \"\
    ii\"; break;\n            case 3: roman_string = \"iii\"; break;\n           \
    \ case 4: roman_string = \"iv\"; break;\n            case 5: roman_string = \"\
    v\"; break;\n            case 6: roman_string = \"vi\"; break;\n            case\
    \ 7: roman_string = \"vii\"; break;\n            case 8: roman_string = \"viii\"\
    ; break;\n            case 9: roman_string = \"ix\"; break;\n            case\
    \ 10: roman_string = \"x\"; break;\n            case 11: roman_string = \"xi\"\
    ; break;\n            case 12: roman_string = \"xii\"; break;\n            case\
    \ 13: roman_string = \"xiii\"; break;\n            case 14: roman_string = \"\
    xiv\"; break;\n            case 15: roman_string = \"xv\"; break;\n          \
    \  case 16: roman_string = \"xvi\"; break;\n            case 17: roman_string\
    \ = \"xvii\"; break;\n            case 18: roman_string = \"xviii\"; break;\n\
    \            case 19: roman_string = \"xix\"; break;\n            case 20: roman_string\
    \ = \"xx\"; break;\n            case 21: roman_string = \"xxi\"; break;\n    \
    \        case 22: roman_string = \"xxii\"; break;\n            case 23: roman_string\
    \ = \"xxiii\"; break;\n            case 24: roman_string = \"xxiv\"; break;\n\
    \            case 25: roman_string = \"xxv\"; break;\n            case 26: roman_string\
    \ = \"xxvi\"; break;\n            case 27: roman_string = \"xxvii\"; break;\n\
    \            case 28:", '        return "";', "        String s = \"\";\n    \
    \    long[][] a = {{1l, \"i\"}, {4l, \"iv\"}, {5l, \"v\"}, {9l, \"ix\"}, {10l,\
    \ \"x\"}, {40l, \"xl\"}, {50l, \"l\"}, {90l, \"xc\"}, {100l, \"c\"}, {400l, \"\
    cd\"}, {500l, \"d\"}, {900l, \"cm\"}, {1000l, \"m\"}};\n        while (number\
    \ > 0) {\n            int i = 0;\n            while (i < a.length && a[i][0] >\
    \ number) {\n                i++;\n            }\n            s += a[i][1];\n\
    \            number -= a[i][0];\n        }\n        return s;", '        return
    "";', '        return "";', "        // your code goes here\n        return \"\
    \";", "        // Your code goes here\n        return \"\";", '        throw new
    UnsupportedOperationException("Problem.intToMiniRoman()");', "        // Your\
    \ code goes here.\n        return null;", "        if (number <= 0) {\n      \
    \      return \"\";\n        }\n        if (number < 4) {\n            return\
    \ \"i\".repeat((int) number);\n        }\n        if (number == 4) {\n       \
    \     return \"iv\";\n        }\n        if (number < 9) {\n            return\
    \ \"v\" + intToMiniRoman(number - 5);\n        }\n        if (number == 9) {\n\
    \            return \"ix\";\n        }\n        if (number < 40) {\n         \
    \   return \"x\" + intToMiniRoman(number - 10);\n        }\n        if (number\
    \ < 50) {\n            return \"xl\" + intToMiniRoman(number - 40);\n        }\n\
    \        if (number < 90) {\n            return \"l\" + intToMiniRoman(number\
    \ - 50);\n        }\n        if (number < 100) {\n            return \"xc\" +\
    \ intToMiniRoman(number - 90);\n        }\n        if (number < 400) {\n     \
    \       return \"c\" + intToMiniRoman(number - 100);\n        }\n        if (number\
    \ < 500) {\n            return \"cd\" + intToMiniRoman(number - 400);\n      \
    \  }\n        if (number < 900) {\n            return \"d\" + intToMiniRoman(number\
    \ - 500);\n        }\n        if (number < 1000) {\n            return \"cm\"\
    \ + intToMiniRoman(number - 900);\n        }\n        if (number == 1000) {\n\
    \            return \"m\";\n        }\n        return \"\";", "        // Iterate\
    \ through the key-value pairs in the dictionary\n        for (int i = 0; i < miniRomanDict.length;\
    \ i++) {\n            // Obtain the key-value pair\n            Pair<Integer,\
    \ String> pair = miniRomanDict[i];\n            int key = pair.getValue0();\n\
    \            String value = pair.getValue1();\n            // If the number is\
    \ divisible by the key, we found a matching base case\n            if (number\
    \ / key >= 1) {\n                // Obtain the remainder\n                long\
    \ remaining = number % key;\n                // If there is a remainder, recursively\
    \ convert it and append the result\n                String remainingStr = (remaining\
    \ > 0) ? intToMiniRoman(remaining) : \"\";\n                // Return the value\
    \ repeated the amount of times that the key divided the number\n             \
    \   return value.repeat((int) number / key) + remainingStr;\n            }\n \
    \       }\n        // If no match is found, return an empty string\n        return\
    \ \"\";", '        return new String();', "        // WRITE YOUR CODE HERE\n \
    \       // Your code must create and return the string, not just print it.\n \
    \       // For example, \"return \"Hello World!\"\" is correct,\n        // but\
    \ \"System.out.println(\"Hello World!\")\" is not.\n        return \"\";", " \
    \       String m[][] = {{\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\",\
    \ \"vii\", \"viii\", \"ix\"},\n                        {\"\", \"x\", \"xx\", \"\
    xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"},\n                  \
    \      {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\"\
    , \"cm\"},\n                        {\"\", \"m\", \"mm\", \"mmm\"}};\n       \
    \ return m[3][(int)(number / 1000) % 10] +\n               m[2][(int)(number /\
    \ 100) % 10] +\n               m[1][(int)(number / 10) % 10] +\n             \
    \  m[0][(int)number % 10];", "        StringBuilder result = new StringBuilder();\n\
    \        long[] arabic = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        String[] roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        for (int i = 0; i < arabic.length;\
    \ i++) {\n            while (number >= arabic[i]) {\n                number -=\
    \ arabic[i];\n                result.append(roman[i]);\n            }\n      \
    \  }\n        return result.toString();", "        String result = \"\";\n   \
    \     while (number > 0) {\n            if (number >= 1000) {\n              \
    \  result += \"m\";\n                number -= 1000;\n            } else if (number\
    \ >= 900) {\n                result += \"cm\";\n                number -= 900;\n\
    \            } else if (number >= 500) {\n                result += \"d\";\n \
    \               number -= 500;\n            } else if (number >= 400) {\n    \
    \            result += \"cd\";\n                number -= 400;\n            }\
    \ else if (number >= 100) {\n                result += \"c\";\n              \
    \  number -= 100;\n            } else if (number >= 90) {\n                result\
    \ += \"xc\";\n                number -= 90;\n            } else if (number >=\
    \ 50) {\n                result += \"l\";\n                number -= 50;\n   \
    \         } else if (number >= 40) {\n                result += \"xl\";\n    \
    \            number -= 40;\n            } else if (number >= 10) {\n         \
    \       result += \"x\";\n                number -= 10;\n            } else if\
    \ (number >= 9) {\n                result += \"ix\";\n                number -=\
    \ 9;\n            } else if (number >= 5) {\n                result += \"v\";\n\
    \                number -= 5;\n            } else if (number >= 4) {\n       \
    \         result += \"iv\";\n                number -= 4;\n            } else\
    \ if (number >= 1) {\n                result += \"i\";\n                number\
    \ -= 1;\n            }\n        }\n        return result;", "        if (number\
    \ < 1)\n            throw new IllegalArgumentException();\n        if (number\
    \ > 1000)\n            throw new IllegalArgumentException();\n        String s\
    \ = \"\";\n        long m, d, c, l, x, v, i;\n        m = number / 1000;\n   \
    \     number = number % 1000;\n        d = number / 500;\n        number = number\
    \ % 500;\n        c = number / 100;\n        number = number % 100;\n        l\
    \ = number / 50;\n        number = number % 50;\n        x = number / 10;\n  \
    \      number = number % 10;\n        v = number / 5;\n        number = number\
    \ % 5;\n        i = number;\n        if (m > 0)\n            s += \"m\";\n   \
    \     if (d > 0)\n            s += \"d\";\n        if (c > 0)\n            s +=\
    \ \"c\";\n        if (l > 0)\n            s += \"l\";\n        if (x > 0)\n  \
    \          s += \"x\";\n        if (v > 0)\n            s += \"v\";\n        if\
    \ (i > 0)\n            s += \"i\";\n        return s;", "        String result\
    \ = \"\";\n        if (number > 1000) {\n            return \"\";\n        }\n\
    \        if (number > 100) {\n            for (int i = 0; i < number / 100; i++)\
    \ {\n                result += \"c\";\n            }\n            number %= 100;\n\
    \        }\n        if (number > 10) {\n            for (int i = 0; i < number\
    \ / 10; i++) {\n                result += \"x\";\n            }\n            number\
    \ %= 10;\n        }\n        if (number > 0) {\n            for (int i = 0; i\
    \ < number; i++) {\n                result += \"i\";\n            }\n        }\n\
    \        return result;", "        String s = \"\";\n        int count = 0;\n\
    \        while (number > 0) {\n            int digit = (int) (number % 10);\n\
    \            if (digit == 0) {\n                count++;\n            } else {\n\
    \                s = intToRomanHelper(digit, count) + s;\n                count++;\n\
    \            }\n            number /= 10;\n        }\n        return s;", '        throw
    new RuntimeException("Not yet implemented");', "        String m = \"\";\n   \
    \     String[] roman = new String[] {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        String[] tens = new String[]\
    \ {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"\
    xc\"};\n        String[] hundreds = new String[] {\"\", \"c\", \"cc\", \"ccc\"\
    , \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] thousands\
    \ = new String[] {\"\", \"m\", \"mm\", \"mmm\"};\n        int hund = (int) number/100;\n\
    \        int ten = (int) (number%100)/10;\n        int one = (int) (number%10);\n\
    \        m = thousands[(int) number/1000] + hundreds[hund] + tens[ten] + roman[one];\n\
    \        return m;", "        if(number < 1 || number > 1000)\n            throw\
    \ new IllegalArgumentException(\"Number must be in the range [1, 1000]\");\n \
    \       String[] roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",\
    \ \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] numerals = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        StringBuilder result\
    \ = new StringBuilder();\n        int i = 0;\n        while(number > 0) {\n  \
    \          if(number - numerals[i] >= 0) {\n                result.append(roman[i]);\n\
    \                number -= numerals[i];\n            } else {\n              \
    \  i++;\n            }\n        }\n        return result.toString();", "     \
    \   StringBuilder builder = new StringBuilder();\n        long count = 0;\n  \
    \      while (number != 0) {\n            count = number % 10;\n            if\
    \ (count == 0) {\n                count = number / 10;\n                number\
    \ = 0;\n            } else {\n                number = number / 10;\n        \
    \    }\n            if (count == 9) {\n                builder.append(\"ix\");\n\
    \            } else if (count == 4) {\n                builder.append(\"iv\");\n\
    \            } else if (count == 5) {\n                builder.append(\"v\");\n\
    \            } else if (count > 5) {\n                builder.append(\"v\");\n\
    \                for (int i = 5; i < count; i++) {\n                    builder.append(\"\
    i\");\n                }\n            } else {\n                for (int i = 0;\
    \ i < count; i++) {\n                    builder.append(\"i\");\n            \
    \    }\n            }\n        }\n        return builder.reverse().toString();",
  '        return null;', "        String miniRoman = \"\";\n        miniRoman +=\
    \ letters('m', number/1000, ' ');\n        miniRoman += letters('c', (number%1000)/100,\
    \ 'd', 'm');\n        miniRoman += letters('x', (number%100)/10, 'l', 'c');\n\
    \        miniRoman += letters('i', number%10, 'v', 'x');\n        return miniRoman;",
  '        throw new UnsupportedOperationException("Problem not implemented yet.");',
  "        String[] m = {\"\", \"m\", \"mm\", \"mmm\"};\n        String[] c = {\"\"\
    , \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \        String[] x = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"\
    lxx\", \"lxxx\", \"xc\"};\n        String[] i = {\"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        return m[(int) (number\
    \ / 1000)] + c[(int) ((number % 1000) / 100)] + x[(int) ((number % 100) / 10)]\
    \ + i[(int) (number % 10)];", '        throw new UnsupportedOperationException("TODO");',
  '        return "";', "        String roman = \"\";\n        String[] symbols =\
    \ {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"};\n        long[] numbers =\
    \ {1, 5, 10, 50, 100, 500, 1000};\n        int i = numbers.length - 1;\n     \
    \   while (number > 0) {\n            if (number >= numbers[i]) {\n          \
    \      long quotient = number / numbers[i];\n                long remainder =\
    \ number % numbers[i];\n                number = remainder;\n                if\
    \ (quotient == 4 && i > 0) {\n                    roman += symbols[i] + symbols[i\
    \ - 1];\n                } else if (quotient == 9 && i > 1) {\n              \
    \      roman += symbols[i] + symbols[i - 2];\n                } else {\n     \
    \               roman += symbols[i].repeat((int) quotient);\n                }\n\
    \            } else {\n                i--;\n            }\n        }\n      \
    \  return roman;", '        return "";', "        // Fill in the correct implementation\
    \ here\n        return \"\";", "        if (number > 1000) {\n            throw\
    \ new RuntimeException(\"number must be between 1 and 1000.\");\n        }\n \
    \       StringBuilder roman = new StringBuilder();\n        while (number > 0)\
    \ {\n            if (number >= 900) {\n                roman.append(\"cm\");\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             roman.append(\"d\");\n                number -= 500;\n         \
    \   } else if (number >= 400) {\n                roman.append(\"cd\");\n     \
    \           number -= 400;\n            } else if (number >= 100) {\n        \
    \        roman.append(\"c\");\n                number -= 100;\n            } else\
    \ if (number >= 90) {\n                roman.append(\"xc\");\n               \
    \ number -= 90;\n            } else if (number >= 50) {\n                roman.append(\"\
    l\");\n                number -= 50;\n            } else if (number >= 40) {\n\
    \                roman.append(\"xl\");\n                number -= 40;\n      \
    \      } else if (number >= 10) {\n                roman.append(\"x\");\n    \
    \            number -= 10;\n            } else if (number >= 9) {\n          \
    \      roman.append(\"ix\");\n                number -= 9;\n            } else\
    \ if (number >= 5) {\n                roman.append(\"v\");\n                number\
    \ -= 5;\n            } else if (number >= 4) {\n                roman.append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                roman.append(\"i\");\n                number -= 1;\n        \
    \    }\n        }\n        return roman.toString();", "        int[] values =\
    \ {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        String[] numerals = {\"\
    m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"\
    i\"};\n        String result = \"\";\n        for (int i = 0; i < values.length;\
    \ i++) {\n            while (number >= values[i]) {\n                number -=\
    \ values[i];\n                result += numerals[i];\n            }\n        }\n\
    \        return result;", '        return "";', "        String roman = \"\";\n\
    \        int i = 0;\n        while (number > 0) {\n            int mult = (int)number\
    \ / VALUES[i];\n            for (int j = 0; j < mult; j++) {\n               \
    \ roman += ROMAN[i];\n            }\n            number = number % VALUES[i];\n\
    \            i++;\n        }\n        return roman;", "        StringBuilder result\
    \ = new StringBuilder();\n        if (number > 1000) return null;\n        if\
    \ (number == 1000) return \"m\";\n        if (number > 500) {\n            for\
    \ (int i = 0; i < number / 500; i++) {\n                result.append(\"d\");\n\
    \            }\n            number = number % 500;\n        }\n        if (number\
    \ > 100) {\n            if (number / 100 == 4) {\n                result.append(\"\
    cd\");\n            } else {\n                for (int i = 0; i < number / 100;\
    \ i++) {\n                    result.append(\"c\");\n                }\n     \
    \       }\n            number = number % 100;\n        }\n        if (number >\
    \ 50) {\n            if (number / 50 == 4) {\n                result.append(\"\
    xl\");\n            } else {\n                for (int i = 0; i < number / 50;\
    \ i++) {\n                    result.append(\"l\");\n                }\n     \
    \       }\n            number = number % 50;\n        }\n        if (number >\
    \ 10) {\n            if (number / 10 == 4) {\n                result.append(\"\
    xc\");\n            } else {\n                for (int i = 0; i < number / 10;\
    \ i++) {\n                    result.append(\"x\");\n                }\n     \
    \       }\n            number = number % 10;\n        }\n        if (number >\
    \ 5) {\n            if (number / 5 == 4) {\n                result.append(\"ix\"\
    );\n            } else {\n                for (int i = 0; i < number / 5; i++)\
    \ {\n                    result.append(\"v\");\n                }\n          \
    \  }\n            number = number % 5;\n        }\n        if (number > 1) {\n\
    \            if (number == 4) {\n                result.append(\"iv\");\n    \
    \        } else {\n                for (int i = 0; i < number; i++) {\n      \
    \              result.append(\"i\");\n                }\n            }\n     \
    \   }\n        return result.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int place = 1; place <= 4; place++) {\n            int digit = (int)\
    \ (number % 10);\n            if (digit == 0) {\n                number /= 10;\n\
    \                continue;\n            }\n            char[][] numeral = new\
    \ char[][]{\n                {'i', 'v', 'x'},\n                {'x', 'l', 'c'},\n\
    \                {'c', 'd', 'm'},\n                {'m', 'm', 'm'}\n         \
    \   };\n            char ones = numeral[place - 1][0];\n            char fives\
    \ = numeral[place - 1][1];\n            char tens = numeral[place - 1][2];\n \
    \           if (digit <= 3) {\n                for (int i = 0; i < digit; i++)\
    \ {\n                    sb.append(ones);\n                }\n            } else\
    \ if (digit == 4) {\n                sb.append(ones);\n                sb.append(fives);\n\
    \            } else if (digit == 5) {\n                sb.append(fives);\n   \
    \         } else if (digit <= 8) {\n                sb.append(fives);\n      \
    \          for (int i = 0; i < digit - 5; i++) {\n                    sb.append(ones);\n\
    \                }\n            } else {\n                sb.append(ones);\n \
    \               sb.append(tens);\n            }\n            number /= 10;\n \
    \       }\n        sb.reverse();\n        return sb.toString();", '        return
    null;', "        String res = \"\";\n        while (number > 0) {\n          \
    \  if (number >= 1000) {\n                res += \"m\";\n                number\
    \ -= 1000;\n            } else if (number >= 900) {\n                res += \"\
    cm\";\n                number -= 900;\n            } else if (number >= 500) {\n\
    \                res += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                res += \"cd\";\n                number\
    \ -= 400;\n            } else if (number >= 100) {\n                res += \"\
    c\";\n                number -= 100;\n            } else if (number >= 90) {\n\
    \                res += \"xc\";\n                number -= 90;\n            }\
    \ else if (number >= 50) {\n                res += \"l\";\n                number\
    \ -= 50;\n            } else if (number >= 40) {\n                res += \"xl\"\
    ;\n                number -= 40;\n            } else if (number >= 10) {\n   \
    \             res += \"x\";\n                number -= 10;\n            } else\
    \ if (number >= 9) {\n                res += \"ix\";\n                number -=\
    \ 9;\n            } else if (number >= 5) {\n                res += \"v\";\n \
    \               number -= 5;\n            } else if (number >= 4) {\n        \
    \        res += \"iv\";\n                number -= 4;\n            } else if (number\
    \ >= 1) {\n                res += \"i\";\n                number -= 1;\n     \
    \       }\n        }\n        return res;", "        String[] n_one = {\"i\",\
    \ \"x\", \"c\", \"m\"};\n        String[] n_five = {\"v\", \"l\", \"d\"};\n  \
    \      String result = \"\";\n        int counter = 0;\n        while (number\
    \ > 0) {\n            long last_digit = number % 10;\n            number /= 10;\n\
    \            if (last_digit <= 3) {\n                for (int i = 0; i < last_digit;\
    \ i++) {\n                    result = n_one[counter] + result;\n            \
    \    }\n            } else if (last_digit == 4) {\n                result = n_one[counter]\
    \ + n_five[counter] + result;\n            } else if (last_digit <= 8) {\n   \
    \             for (int i = 0; i < last_digit - 5; i++) {\n                   \
    \ result = n_one[counter] + result;\n                }\n                result\
    \ = n_five[counter] + result;\n            } else {\n                result =\
    \ n_one[counter] + n_one[counter + 1] + result;\n            }\n            counter++;\n\
    \        }\n        return result;", '        return null;', '        return null;',
  "        String[] c = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"};\n        String[] x = {\"\", \"x\", \"xx\", \"xxx\", \"xl\"\
    , \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] i = {\"\", \"i\"\
    , \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n      \
    \  return c[(int) (number / 100)] + x[(int) ((number % 100) / 10)] + i[(int) (number\
    \ % 10)];", '        return null;', "        // WRITE YOUR CODE HERE\n       \
    \ return null;", '        throw new UnsupportedOperationException("Please implement
    the intToMiniRoman method");', '        return "";', '        return "";', " \
    \       String[] roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",\
    \ \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] dec = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        StringBuilder string =\
    \ new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n   \
    \         while (number >= dec[i]) {\n                string.append(roman[i]);\n\
    \                number -= dec[i];\n            }\n        }\n        return string.toString();",
  "        // Fill in the code below\n        // Start with your solution to the previous\
    \ problem\n        return \"\";", "        long[] values = {1000l,900l,500l,400l,100l,90l,50l,40l,10l,9l,5l,4l,1l};\n\
    \        String[] numerals = {\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"\
    xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n        StringBuilder sb = new StringBuilder();\n\
    \        while (number > 0) {\n            for (int i = 0; i < values.length;\
    \ i++) {\n                if (number >= values[i]) {\n                    sb.append(numerals[i]);\n\
    \                    number -= values[i];\n                    break;\n      \
    \          }\n            }\n        }\n        return sb.toString();", '        throw
    new UnsupportedOperationException("Not implemented.");', "        if (number <\
    \ 1 || number > 1000) {\n            throw new RuntimeException(\"number out of\
    \ range\");\n        }\n        String[] romans = new String[]{\"i\", \"v\", \"\
    x\", \"l\", \"c\", \"d\", \"m\"};\n        String miniRoman = \"\";\n        int\
    \ digit = 0;\n        while (number > 0) {\n            int n = (int) (number\
    \ % 10);\n            if (n < 4) {\n                miniRoman = String.join(\"\
    \", Collections.nCopies(n, romans[digit])) + miniRoman;\n            } else if\
    \ (n == 4) {\n                miniRoman = romans[digit] + romans[digit + 1] +\
    \ miniRoman;\n            } else if (n == 5) {\n                miniRoman = romans[digit\
    \ + 1] + miniRoman;\n            } else if (n < 9) {\n                miniRoman\
    \ = romans[digit + 1] + String.join(\"\", Collections.nCopies(n - 5, romans[digit]))\
    \ + miniRoman;\n            } else {\n                miniRoman = romans[digit]\
    \ + romans[digit + 2] + miniRoman;\n            }\n            number /= 10;\n\
    \            digit += 2;\n        }\n        return miniRoman;", "        // Fill\
    \ in the solution here\n        return \"\";", '        return "";', "       \
    \ String s = \"\";\n        if (number >= 1000) {\n            s += \"m\";\n \
    \           number -= 1000;\n        }\n        if (number >= 900) {\n       \
    \     s += \"cm\";\n            number -= 900;\n        }\n        if (number\
    \ >= 500) {\n            s += \"d\";\n            number -= 500;\n        }\n\
    \        if (number >= 400) {\n            s += \"cd\";\n            number -=\
    \ 400;\n        }\n        while (number >= 100) {\n            s += \"c\";\n\
    \            number -= 100;\n        }\n        if (number >= 90) {\n        \
    \    s += \"xc\";\n            number -= 90;\n        }\n        if (number >=\
    \ 50) {\n            s += \"l\";\n            number -= 50;\n        }\n     \
    \   if (number >= 40) {\n            s += \"xl\";\n            number -= 40;\n\
    \        }\n        while (number >= 10) {\n            s += \"x\";\n        \
    \    number -= 10;\n        }\n        if (number >= 9) {\n            s += \"\
    ix\";\n            number -= 9;\n        }\n        if (number >= 5) {\n     \
    \       s += \"v\";\n            number -= 5;\n        }\n        if (number >=\
    \ 4) {\n            s += \"iv\";\n            number -= 4;\n        }\n      \
    \  while (number >= 1) {\n            s += \"i\";\n            number -= 1;\n\
    \        }\n        return s;", '        return null;', "        // Fill in the\
    \ code here!\n        // Make sure the return value is of type String, and to\
    \ use lowercase.\n        // Remember that all variables in Java start as null,\
    \ so you'll have to\n        // instantiate your return value.\n        String\
    \ str = \"\";\n        if (number <= 0 || number > 1000)\n            return \"\
    \";\n        if (number < 10) {\n            if (number == 1)\n              \
    \  str = \"i\";\n            else if (number == 2)\n                str = \"ii\"\
    ;\n            else if (number == 3)\n                str = \"iii\";\n       \
    \     else if (number == 4)\n                str = \"iv\";\n            else if\
    \ (number == 5)\n                str = \"v\";\n            else if (number ==\
    \ 6)\n                str = \"vi\";\n            else if (number == 7)\n     \
    \           str = \"vii\";\n            else if (number == 8)\n              \
    \  str = \"viii\";\n            else if (number == 9)\n                str = \"\
    ix\";\n        } else if (number < 100) {\n            if (number / 10 == 1)\n\
    \                str = \"x\";\n            else if (number / 10 == 2)\n      \
    \          str = \"xx\";\n            else if (number / 10 == 3)\n           \
    \     str = \"xxx\";\n            else if (number / 10 == 4)\n               \
    \ str = \"xl\";\n            else if (number / 10 == 5)\n                str =\
    \ \"l\";\n            else if (number / 10 == 6)\n                str = \"lx\"\
    ;\n            else if (number / 10 == 7)\n                str = \"lxx\";\n  \
    \          else if (number / 10 == 8)\n                str = \"lxxx\";\n     \
    \       else if (number / 10 == 9)\n                str = \"xc\";\n          \
    \  if (number % 10 == 1)\n                str += \"i\";\n            else if (number\
    \ % 10 == 2)\n                str += \"ii\";\n            else if (number % 10\
    \ == 3)\n                str += \"iii\";\n            else if (number % 10 ==\
    \ 4)\n                str += \"iv\";\n            else if (number % 10 == 5)\n\
    \                str += \"v\";\n            else if (number % 10 == 6)\n     \
    \           str", "        String[] table = {\"M\", \"CM\", \"D\", \"CD\", \"\
    C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int[]\
    \ values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < values.length; i++)\
    \ {\n            while (number >= values[i]) {\n                number -= values[i];\n\
    \                result.append(table[i]);\n            }\n        }\n        return\
    \ result.toString().toLowerCase();", "        // Write your code here\n      \
    \  return \"\";", "        // YOUR CODE HERE\n        return \"\";", '        return
    "";', "        String roman = \"\";\n        roman += fill(number / 1000, \"m\"\
    );\n        number = number % 1000;\n        roman += fill(number / 100, \"c\"\
    );\n        number = number % 100;\n        roman += fill(number / 10, \"x\");\n\
    \        number = number % 10;\n        roman += fill(number, \"i\");\n      \
    \  return roman;", '        return "";', '        throw new UnsupportedOperationException("Not
    implemented");', "        // Replace \"return null;\" with your code.\n      \
    \  // Do not use any library function or data structure except for basic primitives\n\
    \        // (int, long, BigInteger, etc.).\n        // Do not use regular expressions.\n\
    \        // Do not change the signature of the method.\n        return null;",
  "        // Return a string containing the roman numeral representation of the number\n\
    \        // this function should be written in one line.\n        return \"\";",
  "        if(number < 1 || number > 1000)\n            throw new IllegalArgumentException();\n\
    \        StringBuilder sb = new StringBuilder();\n        while(number > 0) {\n\
    \            if(number / 100 > 0) {\n                int d = (int)(number / 100);\n\
    \                if(d < 4) {\n                    sb.append(\"c\".repeat(d));\n\
    \                } else if(d == 4) {\n                    sb.append(\"cd\");\n\
    \                } else if(d == 5) {\n                    sb.append(\"d\");\n\
    \                } else if(d > 5 && d < 9) {\n                    sb.append(\"\
    d\");\n                    sb.append(\"c\".repeat(d - 5));\n                }\
    \ else if(d == 9) {\n                    sb.append(\"cm\");\n                }\n\
    \                number %= 100;\n            } else if(number / 10 > 0) {\n  \
    \              int d = (int)(number / 10);\n                if(d < 4) {\n    \
    \                sb.append(\"x\".repeat(d));\n                } else if(d == 4)\
    \ {\n                    sb.append(\"xl\");\n                } else if(d == 5)\
    \ {\n                    sb.append(\"l\");\n                } else if(d > 5 &&\
    \ d < 9) {\n                    sb.append(\"l\");\n                    sb.append(\"\
    x\".repeat(d - 5));\n                } else if(d == 9) {\n                   \
    \ sb.append(\"xc\");\n                }\n                number %= 10;\n     \
    \       } else {\n                int d = (int)number;\n                if(d <\
    \ 4) {\n                    sb.append(\"i\".repeat(d));\n                } else\
    \ if(d == 4) {\n                    sb.append(\"iv\");\n                } else\
    \ if(d == 5) {\n                    sb.append(\"v\");\n                } else\
    \ if(d > 5 && d < 9) {\n                    sb.append(\"v\");\n              \
    \      sb.append(\"i\".repeat(d - 5));\n                } else if(d == 9) {\n\
    \                    sb.append(\"ix\");\n                }\n                number\
    \ %= 1;\n            }\n        }\n        return sb.toString", "        String\
    \ result = \"\";\n        while (number >= 1000) {\n            result += \"m\"\
    ;\n            number -= 1000;\n        }\n        while (number >= 500) {\n \
    \           result += \"d\";\n            number -= 500;\n        }\n        while\
    \ (number >= 100) {\n            result += \"c\";\n            number -= 100;\n\
    \        }\n        while (number >= 50) {\n            result += \"l\";\n   \
    \         number -= 50;\n        }\n        while (number >= 10) {\n         \
    \   result += \"x\";\n            number -= 10;\n        }\n        while (number\
    \ >= 5) {\n            result += \"v\";\n            number -= 5;\n        }\n\
    \        while (number >= 1) {\n            result += \"i\";\n            number\
    \ -= 1;\n        }\n        return result;", '        return "";', '        return
    "";', "        String[] numerals = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\",\
    \ \"m\"};\n        StringBuilder roman = new StringBuilder();\n        int i =\
    \ 0;\n        int[] digits = new int[4];\n        while (number > 0) {\n     \
    \       digits[i] = (int) number % 10;\n            number /= 10;\n          \
    \  i++;\n        }\n        for (int j = 0; j < digits.length; j++) {\n      \
    \      if (digits[j] == 4) {\n                roman.insert(0, numerals[2 * j +\
    \ 1] + numerals[2 * j]);\n            } else if (digits[j] == 9) {\n         \
    \       roman.insert(0, numerals[2 * j + 2] + numerals[2 * j]);\n            }\
    \ else {\n                if (digits[j] > 4) {\n                    roman.insert(0,\
    \ numerals[2 * j] + numerals[2 * j + 1]);\n                    digits[j] -= 5;\n\
    \                }\n                for (int k = 0; k < digits[j]; k++) {\n  \
    \                  roman.insert(0, numerals[2 * j]);\n                }\n    \
    \        }\n        }\n        return roman.toString();", "        StringBuilder\
    \ romanNumeral = new StringBuilder();\n        String romanDigits[] = { \"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\" };\n        int arabicDigits[] = { 1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1 };\n        int i = 0;\n        while (number > 0 || arabicDigits.length\
    \ == (i - 1)) {\n            while ((number - arabicDigits[i]) >= 0) {\n     \
    \           number -= arabicDigits[i];\n                romanNumeral.append(romanDigits[i]);\n\
    \            }\n            i++;\n        }\n        return romanNumeral.toString();",
  "        String s = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                s += \"m\";\n                number -= 1000;\n \
    \           } else if (number >= 900) {\n                s += \"cm\";\n      \
    \          number -= 900;\n            } else if (number >= 500) {\n         \
    \       s += \"d\";\n                number -= 500;\n            } else if (number\
    \ >= 400) {\n                s += \"cd\";\n                number -= 400;\n  \
    \          } else if (number >= 100) {\n                s += \"c\";\n        \
    \        number -= 100;\n            } else if (number >= 90) {\n            \
    \    s += \"xc\";\n                number -= 90;\n            } else if (number\
    \ >= 50) {\n                s += \"l\";\n                number -= 50;\n     \
    \       } else if (number >= 40) {\n                s += \"xl\";\n           \
    \     number -= 40;\n            } else if (number >= 10) {\n                s\
    \ += \"x\";\n                number -= 10;\n            } else if (number >= 9)\
    \ {\n                s += \"ix\";\n                number -= 9;\n            }\
    \ else if (number >= 5) {\n                s += \"v\";\n                number\
    \ -= 5;\n            } else if (number >= 4) {\n                s += \"iv\";\n\
    \                number -= 4;\n            } else if (number >= 1) {\n       \
    \         s += \"i\";\n                number -= 1;\n            }\n        }\n\
    \        return s;", '        return "";', "        String res = \"\";\n     \
    \   long number_tmp = number;\n        int res_ind = 0;\n        while (number_tmp\
    \ > 0) {\n            if (number_tmp >= 1000) {\n                res = res + 'm';\n\
    \                number_tmp = number_tmp - 1000;\n            } else if (number_tmp\
    \ >= 900) {\n                res = res + \"cm\";\n                number_tmp =\
    \ number_tmp - 900;\n            } else if (number_tmp >= 500) {\n           \
    \     res = res + 'd';\n                number_tmp = number_tmp - 500;\n     \
    \       } else if (number_tmp >= 400) {\n                res = res + \"cd\";\n\
    \                number_tmp = number_tmp - 400;\n            } else if (number_tmp\
    \ >= 100) {\n                res = res + 'c';\n                number_tmp = number_tmp\
    \ - 100;\n            } else if (number_tmp >= 90) {\n                res = res\
    \ + \"xc\";\n                number_tmp = number_tmp - 90;\n            } else\
    \ if (number_tmp >= 50) {\n                res = res + 'l';\n                number_tmp\
    \ = number_tmp - 50;\n            } else if (number_tmp >= 40) {\n           \
    \     res = res + \"xl\";\n                number_tmp = number_tmp - 40;\n   \
    \         } else if (number_tmp >= 10) {\n                res = res + 'x';\n \
    \               number_tmp = number_tmp - 10;\n            } else if (number_tmp\
    \ >= 9) {\n                res = res + \"ix\";\n                number_tmp = number_tmp\
    \ - 9;\n            } else if (number_tmp >= 5) {\n                res = res +\
    \ 'v';\n                number_tmp = number_tmp - 5;\n            } else if (number_tmp\
    \ >= 4) {\n                res = res + \"iv\";\n                number_tmp = number_tmp\
    \ - 4;\n            } else if (number_tmp >= 1) {\n                res = res +\
    \ 'i';\n                number_tmp = number_tmp - 1;\n            }\n        }\n\
    \        return res;", "        List<Tuple2<String, Long>> romanNumerals = Arrays.asList(\n\
    \            new Tuple2<String, Long>(\"i\", 1l),\n            new Tuple2<String,\
    \ Long>(\"v\", 5l),\n            new Tuple2<String, Long>(\"x\", 10l),\n     \
    \       new Tuple2<String, Long>(\"l\", 50l),\n            new Tuple2<String,\
    \ Long>(\"c\", 100l),\n            new Tuple2<String, Long>(\"d\", 500l),\n  \
    \          new Tuple2<String, Long>(\"m\", 1000l)\n        );\n        String\
    \ result = \"\";\n        for (int i = romanNumerals.size() - 1; i >= 0; i--)\
    \ {\n            long digit = number / romanNumerals.get(i).getValue1();\n   \
    \         number %= romanNumerals.get(i).getValue1();\n            if (digit <=\
    \ 3) {\n                for (int j = 0; j < digit; j++) {\n                  \
    \  result += romanNumerals.get(i).getValue0();\n                }\n          \
    \  } else if (digit == 4) {\n                result += romanNumerals.get(i).getValue0();\n\
    \                result += romanNumerals.get(i + 1).getValue0();\n           \
    \ } else if (digit <= 8) {\n                result += romanNumerals.get(i + 1).getValue0();\n\
    \                for (int j = 0; j < digit - 5; j++) {\n                    result\
    \ += romanNumerals.get(i).getValue0();\n                }\n            } else\
    \ {\n                result += romanNumerals.get(i).getValue0();\n           \
    \     result += romanNumerals.get(i + 2).getValue0();\n            }\n       \
    \ }\n        return result;", '        throw new UnsupportedOperationException("Method
    intToMiniRoman has not been implemented yet.");', "        // Good luck!\n   \
    \     Map<Integer,String> n = new HashMap<Integer,String>();\n        n.put(1000,\"\
    m\");\n        n.put(900,\"cm\");\n        n.put(500,\"d\");\n        n.put(400,\"\
    cd\");\n        n.put(100,\"c\");\n        n.put(90,\"xc\");\n        n.put(50,\"\
    l\");\n        n.put(40,\"xl\");\n        n.put(10,\"x\");\n        n.put(9,\"\
    ix\");\n        n.put(5,\"v\");\n        n.put(4,\"iv\");\n        n.put(1,\"\
    i\");\n        String answer = \"\";\n        while(number>0){\n            int\
    \ maxNumber = n.keySet().stream().filter(k->k<=number).max(Integer::compare).get();\n\
    \            answer += n.get(maxNumber);\n            number-=maxNumber;\n   \
    \     }\n        return answer;", "\tchar[] Roman = {'i', 'v', 'x', 'l', 'c',\
    \ 'd', 'm'};\n\tStringBuilder sb = new StringBuilder();\n\tint i = 0;\n\twhile\
    \ (number > 0) {\n\t    int digit = (int) (number % 10);\n\t    switch (digit)\
    \ {\n\t    case 1:\n\t    case 2:\n\t    case 3:\n\t\tfor (int j = 0; j < digit;\
    \ j++)\n\t\t    sb.append(Roman[i]);\n\t\tbreak;\n\t    case 4:\n\t\tsb.append(Roman[i\
    \ + 1]);\n\t\tsb.append(Roman[i]);\n\t\tbreak;\n\t    case 5:\n\t\tsb.append(Roman[i\
    \ + 1]);\n\t\tbreak;\n\t    case 6:\n\t    case 7:\n\t    case 8:\n\t\tsb.append(Roman[i\
    \ + 1]);\n\t\tfor (int j = 0; j < digit - 5; j++)\n\t\t    sb.append(Roman[i]);\n\
    \t\tbreak;\n\t    case 9:\n\t\tsb.append(Roman[i + 2]);\n\t\tsb.append(Roman[i]);\n\
    \t\tbreak;\n\t    default:\n\t\tbreak;\n\t    }\n\t    number /= 10;\n\t    i\
    \ += 2;\n\t}\n\treturn sb.reverse().toString();", '        return "";', "    \
    \    if(number < 1 || number > 1000)\n            throw new IllegalArgumentException(\"\
    number must be greater than 0 and less than 1001\");\n        char[] cs = new\
    \ char[3];\n        int i = 2;\n        for(; number > 0; ++i) {\n           \
    \ int digit = (int)(number % 10);\n            char c = digit == 9 ? 'x' : digit\
    \ == 4 ? 'v' : (char)('i' + 5 * digit);\n            if(digit > 4) {\n       \
    \         char cc = (char)('i' + digit - 5);\n                cs[i] = cc;\n  \
    \          }\n            cs[i] = c;\n            number /= 10;\n        }\n \
    \       String result = new String(cs, 0, i);\n        return result;", '        return
    "";', "        String value =\"\";\n        if(number == 0)\n        {\n     \
    \       return \"\";\n        }\n        else if(number >= 1000)\n        {\n\
    \            value += \"m\";\n            return value + intToMiniRoman(number\
    \ - 1000);\n        }\n        else if(number >= 900)\n        {\n           \
    \ value += \"cm\";\n            return value + intToMiniRoman(number - 900);\n\
    \        }\n        else if(number >= 500)\n        {\n            value += \"\
    d\";\n            return value + intToMiniRoman(number - 500);\n        }\n  \
    \      else if(number >= 400)\n        {\n            value += \"cd\";\n     \
    \       return value + intToMiniRoman(number - 400);\n        }\n        else\
    \ if(number >= 100)\n        {\n            value += \"c\";\n            return\
    \ value + intToMiniRoman(number - 100);\n        }\n        else if(number >=\
    \ 90)\n        {\n            value += \"xc\";\n            return value + intToMiniRoman(number\
    \ - 90);\n        }\n        else if(number >= 50)\n        {\n            value\
    \ += \"l\";\n            return value + intToMiniRoman(number - 50);\n       \
    \ }\n        else if(number >= 40)\n        {\n            value += \"xl\";\n\
    \            return value + intToMiniRoman(number - 40);\n        }\n        else\
    \ if(number >= 10)\n        {\n            value += \"x\";\n            return\
    \ value + intToMiniRoman(number - 10);\n        }\n        else if(number >= 9)\n\
    \        {\n            value += \"ix\";\n            return value + intToMiniRoman(number\
    \ - 9);\n        }\n        else if(number >= 5)\n        {\n            value\
    \ += \"v\";\n            return value + intToMiniRoman(number - 5);\n        }\n\
    \        else if(number >= 4)\n        {\n            value += \"iv\";\n     \
    \       return value + intToMiniRoman(number - 4);\n        }\n        else if(number\
    \ >= 1)\n        {\n            value += \"i\";\n            return value + intToMiniRoman(number\
    \ - 1);\n        }\n        return \"\";", '        return "";', "        // REPLACE\
    \ WITH YOUR CODE\n        return \"\";", '        throw new UnsupportedOperationException("TODO:
    implement");', "        String s=\"\";\n        if(number<1||number>1000)\n  \
    \      return s;\n        long[] ar={1000,500,100,50,10,5,1};\n        char[]\
    \ ar1={'m','d','c','l','x','v','i'};\n        int[] c={0,0,0,0,0,0,0};\n     \
    \   int i=0;\n        while(number>0)\n        {\n            c[i]=c[i]+(int)(number/ar[i]);\n\
    \            number=number%ar[i];\n            if(i%2==0)\n            {\n   \
    \             if(c[i]==4)\n                {\n                    s=s+ar1[i]+ar1[i-1];\n\
    \                    c[i]=0;\n                }\n                else if(c[i]==9)\n\
    \                {\n                    s=s+ar1[i]+ar1[i-2];\n               \
    \     c[i]=0;\n                }\n            }\n            else\n          \
    \  {\n                if(c[i]==4)\n                {\n                    s=s+ar1[i]+ar1[i-1];\n\
    \                    c[i]=0;\n                }\n            }\n            i++;\n\
    \        }\n        return s;", "        String[] RC = {\"m\", \"cm\", \"d\",\
    \ \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \        int[] VA = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        String result = \"\";\n        for (int i = 0; i < RC.length; i++) {\n\
    \            while (number >= VA[i]) {\n                number -= VA[i];\n   \
    \             result += RC[i];\n            }\n        }\n        return result;",
  "        StringBuilder res = new StringBuilder();\n        String[] romans = {\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"};\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1};\n        int i = 0;\n        while (number > 0 && i < 13) {\n\
    \            while (number >= values[i]) {\n                number -= values[i];\n\
    \                res.append(romans[i]);\n            }\n            i++;\n   \
    \     }\n        return res.toString();", "        StringBuilder str = new StringBuilder();\n\
    \        str.append(getTens(number%100));\n        str.append(getHundreds(number/100));\n\
    \        return str.toString();", "        String romanNumeral = \"\";\n     \
    \   for (int i = 0; i < number; i++) {\n            // (a,b) a \u304C\u542B\u307E\
    \u308C\u308B\u5834\u5408b \u306B\u7F6E\u304D\u63DB\u3048\u308B\n            romanNumeral\
    \ = romanNumeral.replace(\"ccc\", \"cd\");\n            romanNumeral = romanNumeral.replace(\"\
    cc\", \"d\");\n            romanNumeral = romanNumeral.replace(\"lll\", \"lx\"\
    );\n            romanNumeral = romanNumeral.replace(\"ll\", \"x\");\n        \
    \    romanNumeral = romanNumeral.replace(\"vvv\", \"vx\");\n            romanNumeral\
    \ = romanNumeral.replace(\"vv\", \"x\");\n            romanNumeral = romanNumeral.replace(\"\
    dd\", \"cm\");\n            romanNumeral = romanNumeral.replace(\"dccc\", \"cm\"\
    );\n            romanNumeral = romanNumeral.replace(\"cccc\", \"cd\");\n     \
    \       romanNumeral = romanNumeral.replace(\"lxl\", \"xc\");\n            romanNumeral\
    \ = romanNumeral.replace(\"lxx\", \"xc\");\n            romanNumeral = romanNumeral.replace(\"\
    lxxx\", \"xc\");\n            romanNumeral = romanNumeral.replace(\"xxxx\", \"\
    xl\");\n            romanNumeral = romanNumeral.replace(\"vvvv\", \"vx\");\n \
    \           romanNumeral = romanNumeral.replace(\"iiii\", \"iv\");\n         \
    \   romanNumeral = romanNumeral.replace(\"xxx\", \"xl\");\n            romanNumeral\
    \ = romanNumeral.replace(\"xx\", \"xl\");\n            romanNumeral = romanNumeral.replace(\"\
    xvx\", \"xl\");\n            romanNumeral = romanNumeral.replace(\"vxv\", \"xl\"\
    );\n            romanNumeral = romanNumeral.replace(\"ivi\", \"ix\");\n      \
    \      romanNumeral = romanNumeral.replace(\"iii\", \"iv\");\n            romanNumeral\
    \ = romanNumeral.replace(\"ii\", \"iv\");\n            romanNumeral = roman",
  "        // TODO\n        return \"\";", "        String[][] numerals = new String[][]\
    \ {\n            {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\"\
    , \"IX\"},\n            {\"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\"\
    , \"LXXX\", \"XC\"},\n            {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\"\
    , \"DCC\", \"DCCC\", \"CM\"},\n            {\"M\", \"MM\", \"MMM\", \"\", \"\"\
    , \"\", \"\", \"\", \"\"}\n        };\n        StringBuilder roman = new StringBuilder();\n\
    \        int i = 1;\n        while (number > 0) {\n            int digit = (int)\
    \ (number % 10);\n            roman.insert(0, numerals[i-1][digit-1]);\n     \
    \       number /= 10;\n            i++;\n        }\n        return roman.toString();",
  "        //using string streams\n        String[] roman = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \        int[] ints = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        //using string builder\n        StringBuilder sb = new StringBuilder();\n\
    \        while (number > 0) {\n            for (int i = 0; i < ints.length; i++)\
    \ {\n                if (number >= ints[i]) {\n                    number -= ints[i];\n\
    \                    sb.append(roman[i]);\n                    break;\n      \
    \          }\n            }\n        }\n        return sb.toString();", '        throw
    new UnsupportedOperationException("Waiting to be implemented.");', "        String\
    \ output = \"\";\n        for (int x = 0; x < number / 1000; x++) {\n        \
    \    output += \"m\";\n        }\n        if (number / 100 == 9) {\n         \
    \   output += \"cm\";\n        } else if (number / 100 == 4) {\n            output\
    \ += \"cd\";\n        } else {\n            for (int x = 0; x < number / 500;\
    \ x++) {\n                output += \"d\";\n            }\n            for (int\
    \ x = 0; x < number / 100 - 5; x++) {\n                output += \"c\";\n    \
    \        }\n        }\n        if (number / 10 == 9) {\n            output +=\
    \ \"xc\";\n        } else if (number / 10 == 4) {\n            output += \"xl\"\
    ;\n        } else {\n            for (int x = 0; x < number / 50; x++) {\n   \
    \             output += \"l\";\n            }\n            for (int x = 0; x <\
    \ number / 10 - 5; x++) {\n                output += \"x\";\n            }\n \
    \       }\n        if (number == 9) {\n            output += \"ix\";\n       \
    \ } else if (number == 4) {\n            output += \"iv\";\n        } else {\n\
    \            for (int x = 0; x < number / 5; x++) {\n                output +=\
    \ \"v\";\n            }\n            for (int x = 0; x < number - 5; x++) {\n\
    \                output += \"i\";\n            }\n        }\n        return output;",
  '        return "";', '        throw new UnsupportedOperationException("Method intToMiniRoman
    has not been implemented yet.");', "        int a, b, c, d, e, f, g, h, i, j,\
    \ k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n        // n = number;\n  \
    \      // a = n % 10;\n        // n /= 10;\n        // b = n % 10;\n        //\
    \ n /= 10;\n        // c = n % 10;\n        // n /= 10;\n        // d = n % 10;\n\
    \        // n /= 10;\n        // e = n % 10;\n        // n /= 10;\n        //\
    \ f = n % 10;\n        // n /= 10;\n        // g = n % 10;\n        // n /= 10;\n\
    \        // h = n % 10;\n        // n /= 10;\n        // i = n % 10;\n       \
    \ // n /= 10;\n        // j = n % 10;\n        // n /= 10;\n        // k = n %\
    \ 10;\n        // n /= 10;\n        // l = n % 10;\n        // n /= 10;\n    \
    \    // m = n % 10;\n        // n /= 10;\n        // o = n % 10;\n        // n\
    \ /= 10;\n        // p = n % 10;\n        // n /= 10;\n        // q = n % 10;\n\
    \        // n /= 10;\n        // r = n % 10;\n        // n /= 10;\n        //\
    \ s = n % 10;\n        // n /= 10;\n        // t = n % 10;\n        // n /= 10;\n\
    \        // u = n % 10;\n        // n /= 10;\n        // v = n % 10;\n       \
    \ // n /= 10;\n        // w = n % 10;\n        // n /= 10;\n        // x = n %\
    \ 10;\n        // n /= 10;\n        // y = n % 10;\n        // n /= 10;\n    \
    \    // z = n % 10;\n        // n /= 10;\n        //\n        // if (z > 0) return\
    \ \"too big\";\n        // if (y > 0", '        return null;', '        throw
    new UnsupportedOperationException("Not implemented yet.");', "        if (number\
    \ == 0) {\n            return \"\";\n        }\n        if (number < 4) {\n  \
    \          return \"i\".repeat((int) number);\n        }\n        if (number ==\
    \ 4) {\n            return \"iv\";\n        }\n        if (number < 9) {\n   \
    \         return \"v\" + intToMiniRoman(number - 5);\n        }\n        if (number\
    \ == 9) {\n            return \"ix\";\n        }\n        if (number < 40) {\n\
    \            return \"x\" + intToMiniRoman(number - 10);\n        }\n        if\
    \ (number < 50) {\n            return \"xl\" + intToMiniRoman(number - 40);\n\
    \        }\n        if (number < 90) {\n            return \"l\" + intToMiniRoman(number\
    \ - 50);\n        }\n        if (number < 100) {\n            return \"xc\" +\
    \ intToMiniRoman(number - 90);\n        }\n        if (number < 400) {\n     \
    \       return \"c\" + intToMiniRoman(number - 100);\n        }\n        if (number\
    \ < 500) {\n            return \"cd\" + intToMiniRoman(number - 400);\n      \
    \  }\n        if (number < 900) {\n            return \"d\" + intToMiniRoman(number\
    \ - 500);\n        }\n        if (number < 1000) {\n            return \"cm\"\
    \ + intToMiniRoman(number - 900);\n        }\n        if (number == 1000) {\n\
    \            return \"m\";\n        }\n        return \"\";", "        final String[]\
    \ ones = {\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"};\n        final String[] tens = {\"x\", \"xx\", \"xxx\", \"xl\", \"l\",\
    \ \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        final String[] hundreds = {\"c\"\
    , \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n      \
    \  final String[] thousands = {\"m\", \"mm\", \"mmm\"};\n        if (number <=\
    \ 0 || number > 1000) {\n            throw new IllegalArgumentException(\"number\
    \ is out of range\");\n        }\n        if (number >= 1000) {\n            return\
    \ thousands[(int) number / 1000 - 1] + intToMiniRoman(number % 1000);\n      \
    \  }\n        if (number >= 100) {\n            return hundreds[(int) number /\
    \ 100 - 1] + intToMiniRoman(number % 100);\n        }\n        if (number >= 10)\
    \ {\n            return tens[(int) number / 10 - 1] + intToMiniRoman(number %\
    \ 10);\n        }\n        return ones[(int) number - 1];", "        String result\
    \ = \"\";\n        String[] roman = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] value =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        while (number\
    \ > 0) {\n            for (int i = 0; i < value.length; i++) {\n             \
    \   if (number >= value[i]) {\n                    number -= value[i];\n     \
    \               result += roman[i];\n                    break;\n            \
    \    }\n            }\n        }\n        return result;", "        // <<<placeholder>>>\n\
    \        return \"\";", '        throw new UnsupportedOperationException("Not
    supported yet.");', '        return "";', '        return new String();', '        //
    Your code goes here', '        throw new UnsupportedOperationException("Waiting
    to be implemented.");', "        // Implement me!\n        return \"\";", "  \
    \      String[] ones = new String[]{\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"\
    vi\", \"vii\", \"viii\", \"ix\"};\n        String[] tens = new String[]{\"x\"\
    , \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n      \
    \  String[] hundreds = new String[]{\"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"\
    dc\", \"dcc\", \"dccc\", \"cm\"};\n        if (number < 10) {\n            return\
    \ ones[(int) number - 1];\n        } else if (number < 100) {\n            return\
    \ tens[(int) number / 10 - 1] + ones[(int) number % 10 - 1];\n        } else if\
    \ (number < 1000) {\n            return hundreds[(int) number / 100 - 1] + tens[(int)\
    \ number % 100 / 10 - 1] + ones[(int) number % 10 - 1];\n        } else {\n  \
    \          throw new IllegalArgumentException(\"Too big!\");\n        }", "  \
    \      long[] nums = {1000, 500, 100, 50, 10, 5, 1};\n        String[] romans\
    \ = {\"m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\"};\n        StringBuilder\
    \ sb = new StringBuilder();\n        int index = 0;\n        while (number > 0)\
    \ {\n            if (number - nums[index] >= 0) {\n                sb.append(romans[index]);\n\
    \                number -= nums[index];\n            } else if (index + 1 < nums.length\
    \ && index % 2 == 0 && number - (nums[index] - nums[index + 2]) >= 0) {\n    \
    \            sb.append(romans[index + 2]);\n                sb.append(romans[index]);\n\
    \                number -= nums[index] - nums[index + 2];\n            } else\
    \ if (index + 1 < nums.length && index % 2 == 1 && number - (nums[index] - nums[index\
    \ + 1]) >= 0) {\n                sb.append(romans[index + 1]);\n             \
    \   sb.append(romans[index]);\n                number -= nums[index] - nums[index\
    \ + 1];\n            } else {\n                index++;\n            }\n     \
    \   }\n        return sb.toString();", "        String[] sym = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n        int[] num = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n        StringBuilder ret = new StringBuilder();\n        int i = 0;\n\
    \        while (number > 0) {\n            int div = (int) (number / num[i]);\n\
    \            if (div > 0) {\n                for (int j = 0; j < div; j++)\n \
    \                   ret.append(sym[i]);\n                number = number - (num[i]\
    \ * div);\n            }\n            i++;\n        }\n        return ret.toString();",
  '        return "";', '        return "";', "        if (number <= 0 || number >\
    \ 1000) {\n            throw new IllegalArgumentException();\n        }\n    \
    \    Map<Long, String> conversionMap = new HashMap<>();\n        conversionMap.put(1l,\
    \ \"i\");\n        conversionMap.put(5l, \"v\");\n        conversionMap.put(10l,\
    \ \"x\");\n        conversionMap.put(50l, \"l\");\n        conversionMap.put(100l,\
    \ \"c\");\n        conversionMap.put(500l, \"d\");\n        conversionMap.put(1000l,\
    \ \"m\");\n        long cur_num = number;\n        StringBuilder roman_num = new\
    \ StringBuilder();\n        while (cur_num > 0) {\n            long cur_pow =\
    \ (long) Math.pow(10, (int) Math.log10(cur_num));\n            long cur_digit\
    \ = cur_num / cur_pow;\n            if (cur_digit == 4) {\n                roman_num.append(conversionMap.get(cur_pow));\n\
    \                roman_num.append(conversionMap.get(cur_pow * 5));\n         \
    \   } else if (cur_digit == 9) {\n                roman_num.append(conversionMap.get(cur_pow));\n\
    \                roman_num.append(conversionMap.get(cur_pow * 10));\n        \
    \    } else {\n                if (cur_digit >= 5) {\n                    roman_num.append(conversionMap.get(cur_pow\
    \ * 5));\n                    cur_digit -= 5;\n                }\n           \
    \     for (int i = 0; i < cur_digit; i++) {\n                    roman_num.append(conversionMap.get(cur_pow));\n\
    \                }\n            }\n            cur_num -= cur_digit * cur_pow;\n\
    \        }\n        return roman_num.toString();", "        if(number < 1 || number\
    \ > 1000) {\n            return \"\";\n        }\n        String result = \"\"\
    ;\n        if(number >= 1000) {\n            long rem = number / 1000;\n     \
    \       for(int i = 0; i < rem; i++) {\n                result += \"m\";\n   \
    \         }\n            number %= 1000;\n        }\n        if(number >= 900)\
    \ {\n            result += \"cm\";\n            number -= 900;\n        }\n  \
    \      if(number >= 500) {\n            result += \"d\";\n            number -=\
    \ 500;\n        }\n        if(number >= 400) {\n            result += \"cd\";\n\
    \            number -= 400;\n        }\n        if(number >= 100) {\n        \
    \    long rem = number / 100;\n            for(int i = 0; i < rem; i++) {\n  \
    \              result += \"c\";\n            }\n            number %= 100;\n \
    \       }\n        if(number >= 90) {\n            result += \"xc\";\n       \
    \     number -= 90;\n        }\n        if(number >= 50) {\n            result\
    \ += \"l\";\n            number -= 50;\n        }\n        if(number >= 40) {\n\
    \            result += \"xl\";\n            number -= 40;\n        }\n       \
    \ if(number >= 10) {\n            long rem = number / 10;\n            for(int\
    \ i = 0; i < rem; i++) {\n                result += \"x\";\n            }\n  \
    \          number %= 10;\n        }\n        if(number >= 9) {\n            result\
    \ += \"ix\";\n            number -= 9;\n        }\n        if(number >= 5) {\n\
    \            result += \"v\";\n            number -= 5;\n        }\n        if(number\
    \ >= 4) {\n            result += \"iv\";\n            number -= 4;\n        }\n\
    \        if(number >= 1) {\n            for(int i = 0; i < number; i++) {\n  \
    \              result += \"i\";\n            }\n        }\n        return result;",
  '        return null;', "        LinkedHashMap<Integer, String> roman_numerals =\
    \ new LinkedHashMap<Integer, String>();\n        roman_numerals.put(1000, \"m\"\
    );\n        roman_numerals.put(900, \"cm\");\n        roman_numerals.put(500,\
    \ \"d\");\n        roman_numerals.put(400, \"cd\");\n        roman_numerals.put(100,\
    \ \"c\");\n        roman_numerals.put(90, \"xc\");\n        roman_numerals.put(50,\
    \ \"l\");\n        roman_numerals.put(40, \"xl\");\n        roman_numerals.put(10,\
    \ \"x\");\n        roman_numerals.put(9, \"ix\");\n        roman_numerals.put(5,\
    \ \"v\");\n        roman_numerals.put(4, \"iv\");\n        roman_numerals.put(1,\
    \ \"i\");\n        String roman = \"\";\n        int N =  roman_numerals.size();\n\
    \        int i = 0;\n        while (number > 0) {\n            int matches = (int)\
    \ (number / roman_numerals.keySet().toArray()[i]);\n            for (; matches\
    \ > 0; matches--) {\n                roman += roman_numerals.get(roman_numerals.keySet().toArray()[i]);\n\
    \                number -= roman_numerals.keySet().toArray()[i];\n           \
    \ }\n            i++;\n        }\n        return roman;", '        return "";',
  "        StringBuilder miniRomanString = new StringBuilder();\n        while (number\
    \ > 0) {\n            if (number >= 1000) {\n                miniRomanString.append(\"\
    m\");\n                number -= 1000;\n            } else if (number >= 900)\
    \ {\n                miniRomanString.append(\"cm\");\n                number -=\
    \ 900;\n            } else if (number >= 500) {\n                miniRomanString.append(\"\
    d\");\n                number -= 500;\n            } else if (number >= 400) {\n\
    \                miniRomanString.append(\"cd\");\n                number -= 400;\n\
    \            } else if (number >= 100) {\n                miniRomanString.append(\"\
    c\");\n                number -= 100;\n            } else if (number >= 90) {\n\
    \                miniRomanString.append(\"xc\");\n                number -= 90;\n\
    \            } else if (number >= 50) {\n                miniRomanString.append(\"\
    l\");\n                number -= 50;\n            } else if (number >= 40) {\n\
    \                miniRomanString.append(\"xl\");\n                number -= 40;\n\
    \            } else if (number >= 10) {\n                miniRomanString.append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                miniRomanString.append(\"ix\");\n                number -= 9;\n\
    \            } else if (number >= 5) {\n                miniRomanString.append(\"\
    v\");\n                number -= 5;\n            } else if (number >= 4) {\n \
    \               miniRomanString.append(\"iv\");\n                number -= 4;\n\
    \            } else if (number >= 1) {\n                miniRomanString.append(\"\
    i\");\n                number -= 1;\n            }\n        }\n        return\
    \ miniRomanString.toString();", "        // YOUR CODE HERE\n        // Please\
    \ do not use java.util.stream.* here.\n        return \"\";", '        return
    "";', "        String[] romanNumerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int[]\
    \ ints = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        StringBuilder\
    \ sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n\
    \            int howManyRomanDigits = (int)number / ints[i];\n            number\
    \ = number % ints[i];\n            for (int j = 0; j < howManyRomanDigits; j++)\
    \ {\n                sb.append(romanNumerals[i]);\n            }\n           \
    \ i++;\n        }\n        return sb.toString();", '        return "";', "   \
    \     String result = \"\";\n        while (number >= 1000) {\n            result\
    \ += \"m\";\n            number -= 1000;\n        }\n        while (number >=\
    \ 900) {\n            result += \"cm\";\n            number -= 900;\n        }\n\
    \        while (number >= 500) {\n            result += \"d\";\n            number\
    \ -= 500;\n        }\n        while (number >= 400) {\n            result += \"\
    cd\";\n            number -= 400;\n        }\n        while (number >= 100) {\n\
    \            result += \"c\";\n            number -= 100;\n        }\n       \
    \ while (number >= 90) {\n            result += \"xc\";\n            number -=\
    \ 90;\n        }\n        while (number >= 50) {\n            result += \"l\"\
    ;\n            number -= 50;\n        }\n        while (number >= 40) {\n    \
    \        result += \"xl\";\n            number -= 40;\n        }\n        while\
    \ (number >= 10) {\n            result += \"x\";\n            number -= 10;\n\
    \        }\n        while (number >= 9) {\n            result += \"ix\";\n   \
    \         number -= 9;\n        }\n        while (number >= 5) {\n           \
    \ result += \"v\";\n            number -= 5;\n        }\n        while (number\
    \ >= 4) {\n            result += \"iv\";\n            number -= 4;\n        }\n\
    \        while (number >= 1) {\n            result += \"i\";\n            number\
    \ -= 1;\n        }\n        return result;", "        // Fill in the return statement\n\
    \        return null;", "        long a = number / 1000;\n        long b = (number\
    \ % 1000) / 100;\n        long c = (number % 100) / 10;\n        long d = number\
    \ % 10;\n        String result = \"\";\n        for (int i = 0; i < a; i++)\n\
    \            result += \"m\";\n        for (int i = 0; i < b; i++)\n         \
    \   result += \"c\";\n        for (int i = 0; i < c; i++)\n            result\
    \ += \"x\";\n        for (int i = 0; i < d; i++)\n            result += \"i\"\
    ;\n        result = result.replace(\"cccc\", \"cd\");\n        result = result.replace(\"\
    ccc\", \"d\");\n        result = result.replace(\"cc\", \"cc\");\n        result\
    \ = result.replace(\"c\", \"c\");\n        result = result.replace(\"xxxx\", \"\
    xl\");\n        result = result.replace(\"xxx\", \"l\");\n        result = result.replace(\"\
    xx\", \"xx\");\n        result = result.replace(\"x\", \"x\");\n        result\
    \ = result.replace(\"iiii\", \"iv\");\n        result = result.replace(\"iii\"\
    , \"v\");\n        result = result.replace(\"ii\", \"ii\");\n        result =\
    \ result.replace(\"i\", \"i\");\n        return result;", '        return "";',
  "        List<String> I = Arrays.asList(\"\", \"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\");\n        List<String> X = Arrays.asList(\"\
    \", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\");\n\
    \        List<String> C = Arrays.asList(\"\", \"c\", \"cc\", \"ccc\", \"cd\",\
    \ \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\");\n        List<String> M = Arrays.asList(\"\
    \", \"m\", \"mm\", \"mmm\");\n        return M.get((int)number / 1000) + C.get((int)number\
    \ % 1000 / 100) + X.get((int)number % 100 / 10) + I.get((int)number % 10);", '        return
    "";', "        Map<Integer,String> roman = new HashMap<Integer,String>();\n  \
    \      roman.put(1,\"i\");\n        roman.put(5,\"v\");\n        roman.put(10,\"\
    x\");\n        roman.put(50,\"l\");\n        roman.put(100,\"c\");\n        roman.put(500,\"\
    d\");\n        roman.put(1000,\"m\");\n        StringBuilder str = new StringBuilder();\n\
    \        for(long i = 1; number > 0; i*=10) {\n            long digit = number\
    \ % 10;\n            long x = digit * i;\n            if(digit <= 3) {\n     \
    \           for(int j = 0; j < digit; j++) {\n                    str.insert(0,roman.get((int)i));\n\
    \                }\n            } else if(digit == 4) {\n                str.insert(0,roman.get((int)(x+i)));\n\
    \            } else if(digit == 5) {\n                str.insert(0,roman.get((int)x));\n\
    \            } else if(digit > 5 && digit < 9) {\n                str.insert(0,roman.get((int)x));\n\
    \                for(int j = 5; j < digit; j++) {\n                    str.insert(0,roman.get((int)i));\n\
    \                }\n            } else if(digit == 9) {\n                str.insert(0,roman.get((int)(x+i)));\n\
    \            }\n            number /= 10;\n        }\n        return str.toString();",
  "\tString[] units = new String[]{\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"\
    vi\", \"vii\", \"viii\", \"ix\"};\n\tString[] tens = new String[]{\"\", \"x\"\
    , \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n\tString[]\
    \ hundreds = new String[]{\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\"\
    , \"dcc\", \"dccc\", \"cm\"};\n\tString[] thousands = new String[]{\"\", \"m\"\
    , \"mm\", \"mmm\"};\n\treturn String.format(\"%s%s%s%s\", thousands[(int)(number\
    \ / 1000l)], hundreds[(int)((number % 1000l) / 100l)], tens[(int)((number % 100l)\
    \ / 10l)], units[(int)(number % 10l)]);", '        return "";', "        // Every\
    \ Roman numeral is constructed from a sequence of\n        // seven different\
    \ letters: M, D, C, L, X, V, and I.\n        // The value of a Roman numeral is\
    \ determined by summing the values of\n        // each individual letter.\n  \
    \      // An Arabic numeral is represented by the sequence of these seven letters\n\
    \        // and the order of their appearance is critical.\n        // Each letter\
    \ can appear at most three times in succession.\n        // The following symbols\
    \ can be subtracted from the letters appearing\n        // immediately after them:\
    \ I can be subtracted from V and X,\n        // X can be subtracted from L and\
    \ C,\n        // C can be subtracted from D and M.\n        // Only one symbol\
    \ may be subtracted from a letter.\n        // The following letters can never\
    \ be subtracted:\n        // I can never be subtracted from another I,\n     \
    \   // X can never be subtracted from another X,\n        // C can never be subtracted\
    \ from another C.\n        // The symbols \"V\", \"L\", and \"D\" can never be\
    \ subtracted.\n        String result = \"\";\n        String roman = \"\";\n \
    \       String subtraction = \"\";\n        String[][] mapping = {\n         \
    \   {\"\", \"\", \"\", \"\", \"\", \"\", \"\"},\n            {\"I\", \"V\", \"\
    X\", \"L\", \"C\", \"D\", \"M\"},\n            {\"II\", \"XX\", \"CC\", \"LL\"\
    , \"DD\", \"MM\", \"MMMMMMMMMM\"},\n            {\"III\", \"XXX\", \"CCC\", \"\
    LLL\", \"DDD\", \"MMM\", \"MMMMMMMMMMM\"},\n            {\"IV\", \"XL\", \"CD\"\
    , \"\", \"\", \"\", \"\"},\n            {\"V\", \"L\", \"D\", \"\", \"\", \"\"\
    , \"\"},\n            {\"VI\", \"LX\", \"DC\", \"\", \"\", \"\", \"\"},\n    \
    \        {\"VII\", \"LXX\", \"DCC\", \"\", \"\", \"\", \"\"},\n            {\"\
    VIII\", \"LXXX\", \"DCCC\", \"\", \"\", \"\", \"\"},\n            {\"IX\", \"\
    XC\", \"CM\", \"\", \"\", \"\", \"\"},\n            {\"X\", \"C\", \"M\", \"\"\
    , \"\", \"\",", "        String[] m = {\"\", \"m\", \"mm\", \"mmm\"};\n      \
    \  String[] c = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"};\n        String[] x = {\"\", \"x\", \"xx\", \"xxx\", \"xl\"\
    , \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] i = {\"\", \"i\"\
    , \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n      \
    \  return m[(int)number / 1000] + c[(int)number % 1000 / 100] + x[(int)number\
    \ % 100 / 10] + i[(int)number % 10];", "        int[] base = {1000, 500, 100,\
    \ 50, 10, 5, 1};\n        String[] numeral = {\"m\", \"d\", \"c\", \"l\", \"x\"\
    , \"v\", \"i\"};\n        String roman = \"\";\n        int N = base.length;\n\
    \        int i = 0;\n        while (number > 0) {\n            if (number >= base[i])\
    \ {\n                roman += numeral[i];\n                number -= base[i];\n\
    \            } else if (i % 2 == 0 && number >= base[i] - base[i + 2]) {\n   \
    \             roman += numeral[i + 2] + numeral[i];\n                number -=\
    \ base[i] - base[i + 2];\n            } else if (i % 2 == 1 && number >= base[i]\
    \ - base[i + 1]) {\n                roman += numeral[i + 1] + numeral[i];\n  \
    \              number -= base[i] - base[i + 1];\n            } else {\n      \
    \          i++;\n            }\n        }\n        return roman;", "        Map<Integer,\
    \ String> ref = new HashMap<Integer, String>();\n        ref.put(1, \"i\");\n\
    \        ref.put(5, \"v\");\n        ref.put(10, \"x\");\n        ref.put(50,\
    \ \"l\");\n        ref.put(100, \"c\");\n        ref.put(500, \"d\");\n      \
    \  ref.put(1000, \"m\");\n        String[] roman = {\n            \"m\",\n   \
    \         \"cm\",\n            \"d\",\n            \"cd\",\n            \"c\"\
    ,\n            \"xc\",\n            \"l\",\n            \"xl\",\n            \"\
    x\",\n            \"ix\",\n            \"v\",\n            \"iv\",\n         \
    \   \"i\"\n        };\n        int[] arabic = {\n            1000,\n         \
    \   900,\n            500,\n            400,\n            100,\n            90,\n\
    \            50,\n            40,\n            10,\n            9,\n         \
    \   5,\n            4,\n            1\n        };\n        if (number < 1 || number\
    \ > 1000) {\n            throw new IllegalArgumentException(\"number must be between\
    \ 1 and 1000\");\n        }\n        String result = \"\";\n        for (int i\
    \ = 0; i < arabic.length; i++) {\n            while (number >= arabic[i]) {\n\
    \                number -= arabic[i];\n                result += roman[i];\n \
    \           }\n        }\n        return result;", '        return "";', "   \
    \     // Insert code here.\n        return \"\";", "        String miniRoman =\
    \ \"\";\n        while (number > 0) {\n            int ones = ((int) number) %\
    \ 10;\n            int tens = ((int) number / 10) % 10;\n            int hundreds\
    \ = ((int) number / 100) % 10;\n            int thousands = ((int) number / 1000)\
    \ % 10;\n            miniRoman = digitToMiniRoman(thousands, \"m\") + digitToMiniRoman(hundreds,\
    \ \"c\") + digitToMiniRoman(tens, \"x\") + digitToMiniRoman(ones, \"i\");\n  \
    \          number /= 10;\n        }\n        return miniRoman;", '        return
    Solution.intToMiniRoman(number);', "        StringBuilder result = new StringBuilder();\n\
    \        String[] units = new String[]{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\"\
    , \"m\"};\n        String[][] ranges = new String[][]{\n            {\"\", \"\
    i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"},\n   \
    \         {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\"\
    , \"xc\"},\n            {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\",\
    \ \"dcc\", \"dccc\", \"cm\"}\n        };\n        for (int i = 0; i < 4; i++)\
    \ {\n            int d = (int) number % 10;\n            if (d != 0) {\n     \
    \           result.insert(0, ranges[i/2][d]);\n            }\n            number\
    \ /= 10;\n        }\n        while (number > 0) {\n            result.insert(0,\
    \ \"m\");\n            number--;\n        }\n        return result.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < number\
    \ / 1000; i++) {\n            sb.append(\"m\");\n        }\n        number %=\
    \ 1000;\n        if (number / 900 == 1) {\n            sb.append(\"cm\");\n  \
    \          number %= 900;\n        }\n        if (number / 500 == 1) {\n     \
    \       sb.append(\"d\");\n            number %= 500;\n        }\n        if (number\
    \ / 400 == 1) {\n            sb.append(\"cd\");\n            number %= 400;\n\
    \        }\n        for (int i = 0; i < number / 100; i++) {\n            sb.append(\"\
    c\");\n        }\n        number %= 100;\n        if (number / 90 == 1) {\n  \
    \          sb.append(\"xc\");\n            number %= 90;\n        }\n        if\
    \ (number / 50 == 1) {\n            sb.append(\"l\");\n            number %= 50;\n\
    \        }\n        if (number / 40 == 1) {\n            sb.append(\"xl\");\n\
    \            number %= 40;\n        }\n        for (int i = 0; i < number / 10;\
    \ i++) {\n            sb.append(\"x\");\n        }\n        number %= 10;\n  \
    \      if (number / 9 == 1) {\n            sb.append(\"ix\");\n            number\
    \ %= 9;\n        }\n        if (number / 5 == 1) {\n            sb.append(\"v\"\
    );\n            number %= 5;\n        }\n        if (number / 4 == 1) {\n    \
    \        sb.append(\"iv\");\n            number %= 4;\n        }\n        for\
    \ (int i = 0; i < number; i++) {\n            sb.append(\"i\");\n        }\n \
    \       return sb.toString();", "        String result = \"\";\n        return\
    \ result;", '        throw new UnsupportedOperationException("Solution not yet
    implemented");', "        String res = \"\";\n        for (int i = 0; i < String.valueOf(number).length();\
    \ i++) {\n            res += Converter.intToMiniRoman(Character.getNumericValue(String.valueOf(number).charAt(i)));\n\
    \        }\n        return res;", "        var roman = new ArrayList<String>();\n\
    \        if (number < 4) {\n            roman.addAll(Collections.nCopies((int)\
    \ number, \"i\"));\n        } else if (number == 4) {\n            roman.add(\"\
    iv\");\n        } else if (number == 5) {\n            roman.add(\"v\");\n   \
    \     } else if (number < 9) {\n            roman.add(\"v\");\n            roman.addAll(Collections.nCopies((int)\
    \ (number - 5), \"i\"));\n        } else if (number == 9) {\n            roman.add(\"\
    ix\");\n        } else if (number < 14) {\n            roman.add(\"x\");\n   \
    \         roman.addAll(Collections.nCopies((int) (number - 10), \"i\"));\n   \
    \     } else if (number < 40) {\n            roman.addAll(Collections.nCopies((int)\
    \ (number / 10), \"x\"));\n            roman.addAll(\n                    intToMiniRoman(number\
    \ % 10).chars().mapToObj(c -> Character.toString((char) c)).collect(Collectors.toList()));\n\
    \        } else if (number < 50) {\n            roman.add(\"xl\");\n         \
    \   roman.addAll(\n                    intToMiniRoman(number % 10).chars().mapToObj(c\
    \ -> Character.toString((char) c)).collect(Collectors.toList()));\n        } else\
    \ if (number < 90) {\n            roman.add(\"l\");\n            roman.addAll(\n\
    \                    intToMiniRoman(number % 10).chars().mapToObj(c -> Character.toString((char)\
    \ c)).collect(Collectors.toList()));\n        } else if (number < 100) {\n   \
    \         roman.add(\"xc\");\n            roman.addAll(\n                    intToMiniRoman(number\
    \ % 10).chars().mapToObj(c -> Character.toString((char) c)).collect(Collectors.toList()));\n\
    \        } else if (number < 400) {\n            roman.addAll(Collections.nCopies((int)\
    \ (number / 100),", "        String answer = \"\";\n        String str = \"\"\
    ;\n        long num = number;\n        if (num == 1000) {\n            return\
    \ \"m\";\n        }\n        for (int i = 0; i < 10; i++) {\n            str =\
    \ num % 10 + \"\";\n            if (str.equals(\"0\")) {\n                str\
    \ = \"\";\n            } else if (str.equals(\"1\")) {\n                str =\
    \ \"i\";\n            } else if (str.equals(\"2\")) {\n                str = \"\
    ii\";\n            } else if (str.equals(\"3\")) {\n                str = \"iii\"\
    ;\n            } else if (str.equals(\"4\")) {\n                str = \"iv\";\n\
    \            } else if (str.equals(\"5\")) {\n                str = \"v\";\n \
    \           } else if (str.equals(\"6\")) {\n                str = \"vi\";\n \
    \           } else if (str.equals(\"7\")) {\n                str = \"vii\";\n\
    \            } else if (str.equals(\"8\")) {\n                str = \"viii\";\n\
    \            } else if (str.equals(\"9\")) {\n                str = \"ix\";\n\
    \            }\n            answer = str + answer;\n            num = num / 10;\n\
    \            if (num == 0) {\n                break;\n            }\n        \
    \    if (num == 1000) {\n                return \"m\" + answer;\n            }\n\
    \            str = num % 10 + \"\";\n            if (str.equals(\"0\")) {\n  \
    \              str = \"\";\n            } else if (str.equals(\"1\")) {\n    \
    \            str = \"x\";\n            } else if (str.equals(\"2\")) {\n     \
    \           str = \"xx\";\n            } else if (str.equals(\"3\")) {\n     \
    \           str = \"xxx\";\n            } else if (str.equals(\"4\")) {\n    \
    \            str = \"xl\";\n            } else if (str.equals(\"5\")) {\n    \
    \            str = \"l\";\n            } else if (str.equals(\"6\")) {\n     \
    \           str = \"lx\";\n            } else if (str.equals(\"7\")) {\n     \
    \           str = \"lxx\";\n            } else", "        String ans = \"\";\n\
    \        String[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"\
    xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] hundreds\
    \ = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"\
    cm\"};\n        String[] thousands = {\"\", \"m\", \"mm\", \"mmm\"};\n       \
    \ ans += thousands[(int) number / 1000];\n        ans += hundreds[(int) (number\
    \ % 1000) / 100];\n        ans += tens[(int) (number % 100) / 10];\n        ans\
    \ += ones[(int) (number % 10)];\n        return ans;", '        return "";', '        return
    "";', '        throw new UnsupportedOperationException("Remove this line and implement
    the method");', "        long num = number;\n        StringBuilder builder = new\
    \ StringBuilder();\n        while (num > 0) {\n            if (num >= 1000) {\n\
    \                builder.append(\"m\");\n                num -= 1000;\n      \
    \      } else if (num >= 900) {\n                builder.append(\"cm\");\n   \
    \             num -= 900;\n            } else if (num >= 500) {\n            \
    \    builder.append(\"d\");\n                num -= 500;\n            } else if\
    \ (num >= 400) {\n                builder.append(\"cd\");\n                num\
    \ -= 400;\n            } else if (num >= 100) {\n                builder.append(\"\
    c\");\n                num -= 100;\n            } else if (num >= 90) {\n    \
    \            builder.append(\"xc\");\n                num -= 90;\n           \
    \ } else if (num >= 50) {\n                builder.append(\"l\");\n          \
    \      num -= 50;\n            } else if (num >= 40) {\n                builder.append(\"\
    xl\");\n                num -= 40;\n            } else if (num >= 10) {\n    \
    \            builder.append(\"x\");\n                num -= 10;\n            }\
    \ else if (num >= 9) {\n                builder.append(\"ix\");\n            \
    \    num -= 9;\n            } else if (num >= 5) {\n                builder.append(\"\
    v\");\n                num -= 5;\n            } else if (num >= 4) {\n       \
    \         builder.append(\"iv\");\n                num -= 4;\n            } else\
    \ if (num >= 1) {\n                builder.append(\"i\");\n                num\
    \ -= 1;\n            }\n        }\n        return builder.toString();", "    \
    \    StringBuilder result = new StringBuilder();\n        for (int i = 0; i <\
    \ number / 1000; i++) {\n            result.append(\"m\");\n        }\n      \
    \  if (number / 100 % 10 == 9) {\n            result.append(\"cm\");\n       \
    \ } else if (number / 100 % 10 >= 5) {\n            result.append(\"d\");\n  \
    \          for (int i = 0; i < number / 100 % 10 - 5; i++) {\n               \
    \ result.append(\"c\");\n            }\n        } else if (number / 100 % 10 ==\
    \ 4) {\n            result.append(\"cd\");\n        } else {\n            for\
    \ (int i = 0; i < number / 100 % 10; i++) {\n                result.append(\"\
    c\");\n            }\n        }\n        if (number / 10 % 10 == 9) {\n      \
    \      result.append(\"xc\");\n        } else if (number / 10 % 10 >= 5) {\n \
    \           result.append(\"l\");\n            for (int i = 0; i < number / 10\
    \ % 10 - 5; i++) {\n                result.append(\"x\");\n            }\n   \
    \     } else if (number / 10 % 10 == 4) {\n            result.append(\"xl\");\n\
    \        } else {\n            for (int i = 0; i < number / 10 % 10; i++) {\n\
    \                result.append(\"x\");\n            }\n        }\n        if (number\
    \ % 10 == 9) {\n            result.append(\"ix\");\n        } else if (number\
    \ % 10 >= 5) {\n            result.append(\"v\");\n            for (int i = 0;\
    \ i < number % 10 - 5; i++) {\n                result.append(\"i\");\n       \
    \     }\n        } else if (number % 10 == 4) {\n            result.append(\"\
    iv\");\n        } else {\n            for (int i = 0; i < number % 10; i++) {\n\
    \                result.append(\"i\");\n            }\n        }\n        return\
    \ result.toString();", "        String romanNumeral = \"\";\n        String[]\
    \ romanNumerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] decimals = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        if (number < 1 || number\
    \ > 1000)\n            return \"Enter a number between 1 and 1000\";\n       \
    \ while (number > 0) {\n            for (int i = 0; i < decimals.length; i++)\
    \ {\n                if (number >= decimals[i]) {\n                    romanNumeral\
    \ += romanNumerals[i];\n                    number -= decimals[i];\n         \
    \           break;\n                }\n            }\n        }\n        return\
    \ romanNumeral;", '        return "";', '        return "";', "        StringBuilder\
    \ result = new StringBuilder();\n        String[] romans = {\"i\", \"iv\", \"\
    v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"\
    };\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\
    \        while (number > 0) {\n            for (int i = values.length - 1; i >=\
    \ 0; i--) {\n                if (number >= values[i]) {\n                    number\
    \ -= values[i];\n                    result.append(romans[i]);\n             \
    \       break;\n                }\n            }\n        }\n        return result.toString();",
  "        String ans = \"\";\n        if (number > 1000 || number < 1) return ans;\n\
    \        String[] units = {\"i\", \"x\", \"c\", \"m\"};\n        int count = 0;\n\
    \        while (number > 0) {\n            int digit = (int) (number % 10);\n\
    \            if (digit == 4) {\n                ans = units[count + 1] + units[count]\
    \ + ans;\n            } else if (digit == 9) {\n                ans = units[count\
    \ + 1] + units[count + 2] + ans;\n            } else {\n                int noOfOnes\
    \ = digit % 5;\n                for (int i = 0; i < noOfOnes; i++) {\n       \
    \             ans = units[count] + ans;\n                }\n                if\
    \ (digit >= 5) {\n                    ans = units[count + 1] + ans;\n        \
    \        }\n            }\n            number /= 10;\n            count += 2;\n\
    \        }\n        return ans;", "        // If a modulus operation yields a\
    \ 0, that means that the number is\n        // divisible by that value, and therefore\
    \ the value can be subtracted\n        // from it, since we're dealing with positive\
    \ integers.\n        // We first use the highest numerals (M and C), then the\
    \ middle numerals\n        // (D and L), and finally the lowest numerals (X and\
    \ V), and then use the\n        // remaining numbers with I.\n        // There\
    \ is no need to check for numbers greater than 1000, because\n        // anything\
    \ over 1000 would yield more characters than are given.\n\n        String[] numerals\
    \ = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"};\n        int[] numeralValues = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        // First, check if the number is\
    \ greater than zero.\n        if (number > 0) {\n            // Next, check if\
    \ the number is 1000.\n            if (number == 1000) {\n                return\
    \ \"m\";\n            }\n            // Otherwise, we are going to start removing\
    \ numbers by subtracting\n            // their values and adding their numerals\
    \ to a string.\n            // Let's set up some variables.\n            int currentNumeralIndex\
    \ = 0;\n            String numeral = \"\";\n            while (number > 0) {\n\
    \                // For each number, check if the number is divisible by the current\
    \ numeral value.\n                if (number >= numeralValues[currentNumeralIndex])\
    \ {\n                    // If it is, subtract the value and add the numeral to\
    \ the string.\n                    number -= numeralValues[currentNumeralIndex];\n\
    \                    numeral += numerals[currentNumeralIndex];\n             \
    \   } else {\n                    // Otherwise, go to the next numeral.\n    \
    \                currentNumeralIndex++;\n                }\n            }\n  \
    \          // Finally, return the numeral as a lowercase string.\n           \
    \ return numeral.toLowerCase();\n        }\n        // If we have a non-positive\
    \ number, we simply return an empty string.\n        return \"\";", "        String\
    \ result = \"\";\n        while (number > 0) {\n            if (number >= 1000)\
    \ {\n                result += \"m\";\n                number -= 1000;\n     \
    \       } else if (number >= 900) {\n                result += \"cm\";\n     \
    \           number -= 900;\n            } else if (number >= 500) {\n        \
    \        result += \"d\";\n                number -= 500;\n            } else\
    \ if (number >= 400) {\n                result += \"cd\";\n                number\
    \ -= 400;\n            } else if (number >= 100) {\n                result +=\
    \ \"c\";\n                number -= 100;\n            } else if (number >= 90)\
    \ {\n                result += \"xc\";\n                number -= 90;\n      \
    \      } else if (number >= 50) {\n                result += \"l\";\n        \
    \        number -= 50;\n            } else if (number >= 40) {\n             \
    \   result += \"xl\";\n                number -= 40;\n            } else if (number\
    \ >= 10) {\n                result += \"x\";\n                number -= 10;\n\
    \            } else if (number >= 9) {\n                result += \"ix\";\n  \
    \              number -= 9;\n            } else if (number >= 5) {\n         \
    \       result += \"v\";\n                number -= 5;\n            } else if\
    \ (number >= 4) {\n                result += \"iv\";\n                number -=\
    \ 4;\n            } else if (number >= 1) {\n                result += \"i\";\n\
    \                number -= 1;\n            }\n        }\n        return result;",
  "        StringBuilder result = new StringBuilder();\n        long[] values = {1000,\
    \ 500, 100, 50, 10, 5, 1};\n        String[] symbols = {\"m\", \"d\", \"c\", \"\
    l\", \"x\", \"v\", \"i\"};\n        int idx = 0;\n        while (number > 0) {\n\
    \            int value = (int) (number / values[idx]);\n            if (value\
    \ >= 4) {\n                result.append(symbols[idx]);\n                if (value\
    \ == 4) {\n                    result.append(symbols[idx - 1]);\n            \
    \    } else {\n                    result.append(symbols[idx - 2]);\n        \
    \        }\n            } else {\n                while (value > 0) {\n      \
    \              result.append(symbols[idx]);\n                    value--;\n  \
    \              }\n            }\n            number = number % values[idx];\n\
    \            idx++;\n        }\n        return result.toString();", "        String\
    \ output = \"\";\n        while (number > 0) {\n            long thousands = number\
    \ / 1000;\n            number = number % 1000;\n            while (thousands >\
    \ 0) {\n                output += \"m\";\n                thousands--;\n     \
    \       }\n            long fiveHundreds = number / 500;\n            number =\
    \ number % 500;\n            while (fiveHundreds > 0) {\n                output\
    \ += \"d\";\n                fiveHundreds--;\n            }\n            long\
    \ hundreds = number / 100;\n            number = number % 100;\n            while\
    \ (hundreds > 0) {\n                output += \"c\";\n                hundreds--;\n\
    \            }\n            long fifties = number / 50;\n            number =\
    \ number % 50;\n            while (fifties > 0) {\n                output += \"\
    l\";\n                fifties--;\n            }\n            long tens = number\
    \ / 10;\n            number = number % 10;\n            while (tens > 0) {\n \
    \               output += \"x\";\n                tens--;\n            }\n   \
    \         long fives = number / 5;\n            number = number % 5;\n       \
    \     while (fives > 0) {\n                output += \"v\";\n                fives--;\n\
    \            }\n            while (number > 0) {\n                output += \"\
    i\";\n                number--;\n            }\n        }\n        return output;",
  "        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int[] decimal = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String result = \"\";\n\
    \        for (int i = 0; i < decimal.length; i++) {\n            while (number\
    \ >= decimal[i]) {\n                number -= decimal[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result.toLowerCase();",
  "        String result = \"\";\n        while (number >= 1000) {\n            result\
    \ += \"m\";\n            number -= 1000;\n        }\n        while (number >=\
    \ 900) {\n            result += \"cm\";\n            number -= 900;\n        }\n\
    \        while (number >= 500) {\n            result += \"d\";\n            number\
    \ -= 500;\n        }\n        while (number >= 400) {\n            result += \"\
    cd\";\n            number -= 400;\n        }\n        while (number >= 100) {\n\
    \            result += \"c\";\n            number -= 100;\n        }\n       \
    \ while (number >= 90) {\n            result += \"xc\";\n            number -=\
    \ 90;\n        }\n        while (number >= 50) {\n            result += \"l\"\
    ;\n            number -= 50;\n        }\n        while (number >= 40) {\n    \
    \        result += \"xl\";\n            number -= 40;\n        }\n        while\
    \ (number >= 10) {\n            result += \"x\";\n            number -= 10;\n\
    \        }\n        while (number >= 9) {\n            result += \"ix\";\n   \
    \         number -= 9;\n        }\n        while (number >= 5) {\n           \
    \ result += \"v\";\n            number -= 5;\n        }\n        while (number\
    \ >= 4) {\n            result += \"iv\";\n            number -= 4;\n        }\n\
    \        while (number >= 1) {\n            result += \"i\";\n            number\
    \ -= 1;\n        }\n        return result;", '        return "";', "        if\
    \ (number < 1) return \"\";\n        if (number >= 1 && number <= 1000) return\
    \ roman(number);\n        return intToMiniRoman(number/1000) + \"m\" + intToMiniRoman(number%1000);",
  "        String romans = \"ivxlcdm\";\n        int base = 0;\n        String roman\
    \ = \"\";\n        while (number > 0) {\n            int unit = (int) number %\
    \ 10;\n            String romanUnit = \"\";\n            switch (unit) {\n   \
    \             case 1: romanUnit = \"i\"; break;\n                case 2: romanUnit\
    \ = \"ii\"; break;\n                case 3: romanUnit = \"iii\"; break;\n    \
    \            case 4: romanUnit = \"iv\"; break;\n                case 5: romanUnit\
    \ = \"v\"; break;\n                case 6: romanUnit = \"vi\"; break;\n      \
    \          case 7: romanUnit = \"vii\"; break;\n                case 8: romanUnit\
    \ = \"viii\"; break;\n                case 9: romanUnit = \"ix\"; break;\n   \
    \         }\n            String baseRoman = \"\";\n            switch (base) {\n\
    \                case 0: baseRoman = \"\"; break;\n                case 1: baseRoman\
    \ = \"x\"; break;\n                case 2: baseRoman = \"c\"; break;\n       \
    \         case 3: baseRoman = \"m\"; break;\n            }\n            roman\
    \ = romanUnit + baseRoman + roman;\n            number /= 10;\n            base++;\n\
    \        }\n        return roman;", "        if (number <= 0)\n            return\
    \ \"\";\n        else if (number >= 1000)\n            return \"m\" + intToMiniRoman(number\
    \ - 1000);\n        else if (number >= 900)\n            return \"cm\" + intToMiniRoman(number\
    \ - 900);\n        else if (number >= 500)\n            return \"d\" + intToMiniRoman(number\
    \ - 500);\n        else if (number >= 400)\n            return \"cd\" + intToMiniRoman(number\
    \ - 400);\n        else if (number >= 100)\n            return \"c\" + intToMiniRoman(number\
    \ - 100);\n        else if (number >= 90)\n            return \"xc\" + intToMiniRoman(number\
    \ - 90);\n        else if (number >= 50)\n            return \"l\" + intToMiniRoman(number\
    \ - 50);\n        else if (number >= 40)\n            return \"xl\" + intToMiniRoman(number\
    \ - 40);\n        else if (number >= 10)\n            return \"x\" + intToMiniRoman(number\
    \ - 10);\n        else if (number >= 9)\n            return \"ix\" + intToMiniRoman(number\
    \ - 9);\n        else if (number >= 5)\n            return \"v\" + intToMiniRoman(number\
    \ - 5);\n        else if (number >= 4)\n            return \"iv\" + intToMiniRoman(number\
    \ - 4);\n        else if (number >= 1)\n            return \"i\" + intToMiniRoman(number\
    \ - 1);\n        else\n            return \"\";", "        if (number < 1) {\n\
    \            return \"\";\n        }\n        if (number < 4) {\n            return\
    \ \"i\".repeat((int) number);\n        }\n        if (number < 5) {\n        \
    \    return \"iv\";\n        }\n        if (number < 9) {\n            return\
    \ \"v\" + intToMiniRoman(number - 5);\n        }\n        if (number < 10) {\n\
    \            return \"ix\";\n        }\n        if (number < 40) {\n         \
    \   return \"x\".repeat((int) (number / 10)) + intToMiniRoman(number % 10);\n\
    \        }\n        if (number < 50) {\n            return \"xl\" + intToMiniRoman(number\
    \ - 40);\n        }\n        if (number < 90) {\n            return \"l\" + intToMiniRoman(number\
    \ - 50);\n        }\n        if (number < 100) {\n            return \"xc\" +\
    \ intToMiniRoman(number - 90);\n        }\n        if (number < 400) {\n     \
    \       return \"c\".repeat((int) (number / 100)) + intToMiniRoman(number % 100);\n\
    \        }\n        if (number < 500) {\n            return \"cd\" + intToMiniRoman(number\
    \ - 400);\n        }\n        if (number < 900) {\n            return \"d\" +\
    \ intToMiniRoman(number - 500);\n        }\n        if (number < 1000) {\n   \
    \         return \"cm\" + intToMiniRoman(number - 900);\n        }\n        if\
    \ (number < 4000) {\n            return \"m\".repeat((int) (number / 1000)) +\
    \ intToMiniRoman(number % 1000);\n        }\n        return \"\";", "        if\
    \ (number <= 0) {\n            return \"\";\n        } else if (number == 1) {\n\
    \            return \"i\";\n        } else if (number == 5) {\n            return\
    \ \"v\";\n        } else if (number == 10) {\n            return \"x\";\n    \
    \    } else if (number == 50) {\n            return \"l\";\n        } else if\
    \ (number == 100) {\n            return \"c\";\n        } else if (number == 500)\
    \ {\n            return \"d\";\n        } else if (number == 1000) {\n       \
    \     return \"m\";\n        } else if (number == 4) {\n            return \"\
    iv\";\n        } else if (number == 9) {\n            return \"ix\";\n       \
    \ } else if (number == 40) {\n            return \"xl\";\n        } else if (number\
    \ == 90) {\n            return \"xc\";\n        } else if (number == 400) {\n\
    \            return \"cd\";\n        } else if (number == 900) {\n           \
    \ return \"cm\";\n        } else if (number > 1000) {\n            return \"m\"\
    \ + intToMiniRoman(number - 1000);\n        } else if (number > 500) {\n     \
    \       return \"d\" + intToMiniRoman(number - 500);\n        } else if (number\
    \ > 100) {\n            return \"c\" + intToMiniRoman(number - 100);\n       \
    \ } else if (number > 50) {\n            return \"l\" + intToMiniRoman(number\
    \ - 50);\n        } else if (number > 10) {\n            return \"x\" + intToMiniRoman(number\
    \ - 10);\n        } else if (number > 5) {\n            return \"v\" + intToMiniRoman(number\
    \ - 5);\n        } else if (number > 1) {\n            return \"i\" + intToMiniRoman(number\
    \ - 1);\n        } else {\n            return \"\";\n        }", "        if (number\
    \ < 1) {\n            throw new IllegalArgumentException();\n        }\n     \
    \   long rem = number;\n        StringBuilder sb = new StringBuilder();\n    \
    \    int i = 0;\n        while (rem > 0) {\n            int currDigit = (int)\
    \ rem % 10;\n            while (currDigit > 0) {\n                if (currDigit\
    \ == 9) {\n                    sb.append(Arrays.asList(\"c\", \"x\", \"i\").get(i));\n\
    \                    sb.append(Arrays.asList(\"m\", \"c\", \"x\").get(i));\n \
    \                   currDigit = 0;\n                } else if (currDigit == 4)\
    \ {\n                    sb.append(Arrays.asList(\"c\", \"x\", \"i\").get(i));\n\
    \                    sb.append(Arrays.asList(\"d\", \"l\", \"v\").get(i));\n \
    \                   currDigit = 0;\n                } else if (currDigit >= 5)\
    \ {\n                    sb.append(Arrays.asList(\"d\", \"l\", \"v\").get(i));\n\
    \                    currDigit -= 5;\n                } else {\n             \
    \       sb.append(Arrays.asList(\"c\", \"x\", \"i\").get(i));\n              \
    \      currDigit -= 1;\n                }\n            }\n            rem /= 10;\n\
    \            i++;\n        }\n        return sb.reverse().toString();", "    \
    \    if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"\
    number must be in [1, 1000]\");\n        }\n        String str = \"\";\n     \
    \   int num = (int) number;\n        int[] digits = new int[4];\n        for (int\
    \ i = 0; i < 4; i++) {\n            digits[i] = num % 10;\n            num /=\
    \ 10;\n        }\n        for (int i = 3; i >= 0; i--) {\n            if (digits[i]\
    \ == 0) {\n                continue;\n            }\n            switch (i) {\n\
    \                case 3: {\n                    for (int j = 0; j < digits[i];\
    \ j++) {\n                        str += \"m\";\n                    }\n     \
    \               break;\n                }\n                case 2: {\n       \
    \             if (digits[i] <= 3) {\n                        for (int j = 0; j\
    \ < digits[i]; j++) {\n                            str += \"c\";\n           \
    \             }\n                    } else if (digits[i] == 4) {\n          \
    \              str += \"cd\";\n                    } else if (digits[i] == 5)\
    \ {\n                        str += \"d\";\n                    } else if (digits[i]\
    \ <= 8) {\n                        str += \"d\";\n                        for\
    \ (int j = 0; j < digits[i] - 5; j++) {\n                            str += \"\
    c\";\n                        }\n                    } else {\n              \
    \          str += \"cm\";\n                    }\n                    break;\n\
    \                }\n                case 1: {\n                    if (digits[i]\
    \ <= 3) {\n                        for (int j = 0; j < digits[i]; j++) {\n   \
    \                         str += \"x\";\n                        }\n         \
    \           } else if (digits[i] == 4) {\n                        str += \"xl\"\
    ;\n                    } else if (digits[i] == 5) {\n                        str\
    \ += \"l\";\n                    } else if (digits[i] <= 8) {\n              \
    \          str += \"l\";\n                        for (int j = 0; j < digits[i]\
    \ - 5; j++) {\n                            str += \"x\";\n                   \
    \     }\n                    } else {\n                        str += \"xc\";",
  "        // One thousand == m\n        if (number == 1000) {\n            return\
    \ \"m\";\n        }\n        // Nine hundreds == cm\n        if (number == 900)\
    \ {\n            return \"cm\";\n        }\n        // Five hundreds == d\n  \
    \      if (number == 500) {\n            return \"d\";\n        }\n        //\
    \ Four hundreds == cd\n        if (number == 400) {\n            return \"cd\"\
    ;\n        }\n        // One hundred == c\n        if (number == 100) {\n    \
    \        return \"c\";\n        }\n        // Ninety == xc\n        if (number\
    \ == 90) {\n            return \"xc\";\n        }\n        // Fifty == l\n   \
    \     if (number == 50) {\n            return \"l\";\n        }\n        // Forty\
    \ == xl\n        if (number == 40) {\n            return \"xl\";\n        }\n\
    \        // Ten == x\n        if (number == 10) {\n            return \"x\";\n\
    \        }\n        // Nine == ix\n        if (number == 9) {\n            return\
    \ \"ix\";\n        }\n        // Five == v\n        if (number == 5) {\n     \
    \       return \"v\";\n        }\n        // Four == iv\n        if (number ==\
    \ 4) {\n            return \"iv\";\n        }\n        // One == i\n        if\
    \ (number == 1) {\n            return \"i\";\n        }\n        // One thousand\
    \ == m\n        String roman = \"\";\n        long m = number / 1000;\n      \
    \  roman += IntStream.range(0, (int) m).mapToObj(i -> \"m\").collect(Collectors.joining());\n\
    \        number %= 1000;\n        // Nine hundreds == cm\n        long cm = number\
    \ / 900;\n        roman += IntStream.range(0, (int) cm).mapToObj(i -> \"cm\").collect(Collectors.joining());\n\
    \        number %= 900;\n        // Five hundreds == d\n        long d = number\
    \ / 500;\n        roman += IntStream.range(0, (int) d).mapToObj(i -> \"d\").collect(Collectors.joining());\n\
    \        number %= 500;\n        // Four hundreds == cd\n        long cd = number\
    \ /", '        throw new UnsupportedOperationException("Problem not solved");',
  '        return null;', "        // EDIT: I added an example to clarify what mini-roman\
    \ is, and some tests to\n        // improve flexibility.\n        // Mini-roman\
    \ is written in lowercase and does not have the subtractive\n        // notation.\n\
    \        // It consists of the following characters:\n        // i, v, x, l, c,\
    \ d, m\n        // For example, 24 -> xxiv in standard roman, but xxiiii in mini-roman.\n\
    \        // We use the following function to convert to standard roman\n     \
    \   // Standard roman:\n        // M = 1000, CM = 900, D = 500, CD = 400, C =\
    \ 100, XC = 90, L = 50, XL = 40,\n        // X = 10, IX = 9, V = 5, IV = 4, I\
    \ = 1\n        // We use the following function to convert from standard roman\
    \ to mini-roman\n        // Mini-roman:\n        // M = 1000, D = 500, C = 100,\
    \ L = 50, X = 10, V = 5, I = 1\n        // We use the following function to convert\
    \ from mini-roman to standard roman\n        // Standard roman:\n        // M\
    \ = 1000, D = 500, C = 100, L = 50, X = 10, V = 5, I = 1\n        // We use the\
    \ following function to convert from standard roman to mini-roman\n        //\
    \ Mini-roman:\n        // M = 1000, CM = 900, D = 500, CD = 400, C = 100, XC =\
    \ 90, L = 50, XL = 40,\n        // X = 10, IX = 9, V = 5, IV = 4, I = 1\n    \
    \    // We use the following function to convert from mini-roman to standard roman\n\
    \        // Standard roman:\n        // M = 1000, D = 500, C = 100, L = 50, X\
    \ = 10, V = 5, I = 1\n        // We use the following function to convert from\
    \ standard roman to mini-roman\n        // Mini-roman:\n        // M = 1000, CM\
    \ = 900, D = 500, CD = 400, C = 100, XC = 90, L = 50, XL = 40,\n        // X =\
    \ 10, IX = 9, V = 5, IV = 4, I = 1\n       ", "        StringBuilder res = new\
    \ StringBuilder();\n        for (int i = 0; i < romanDigits.length; i++) {\n \
    \           Pair<Long, String> p = romanDigits[i];\n            if (number < p.getValue0())\
    \ {\n                continue;\n            }\n            while (number >= p.getValue0())\
    \ {\n                res.append(p.getValue1());\n                number -= p.getValue0();\n\
    \            }\n        }\n        return res.toString();", "        String result\
    \ = \"\";\n        // REPLACE WITH YOUR CODE\n        return result;", '        throw
    new UnsupportedOperationException("Not Implemented Yet");', "        /*\n    \
    \     * Many thanks to Wikipedia for the algorithm:\n         * http://en.wikipedia.org/wiki/Roman_numerals#Conversion_to_modern_decimal_numerals\n\
    \         */\n        HashMap<Integer, String> digitToRoman = new HashMap<Integer,\
    \ String>();\n        digitToRoman.put(0, \"\");\n        digitToRoman.put(1,\
    \ \"i\");\n        digitToRoman.put(2, \"ii\");\n        digitToRoman.put(3, \"\
    iii\");\n        digitToRoman.put(4, \"iv\");\n        digitToRoman.put(5, \"\
    v\");\n        digitToRoman.put(6, \"vi\");\n        digitToRoman.put(7, \"vii\"\
    );\n        digitToRoman.put(8, \"viii\");\n        digitToRoman.put(9, \"ix\"\
    );\n        digitToRoman.put(10, \"x\");\n        digitToRoman.put(20, \"xx\"\
    );\n        digitToRoman.put(30, \"xxx\");\n        digitToRoman.put(40, \"xl\"\
    );\n        digitToRoman.put(50, \"l\");\n        digitToRoman.put(60, \"lx\"\
    );\n        digitToRoman.put(70, \"lxx\");\n        digitToRoman.put(80, \"lxxx\"\
    );\n        digitToRoman.put(90, \"xc\");\n        digitToRoman.put(100, \"c\"\
    );\n        digitToRoman.put(200, \"cc\");\n        digitToRoman.put(300, \"ccc\"\
    );\n        digitToRoman.put(400, \"cd\");\n        digitToRoman.put(500, \"d\"\
    );\n        digitToRoman.put(600, \"dc\");\n        digitToRoman.put(700, \"dcc\"\
    );\n        digitToRoman.put(800, \"dccc\");\n        digitToRoman.put(900, \"\
    cm\");\n        digitToRoman.put(1000, \"m\");\n        digitToRoman.put(2000,\
    \ \"mm\");\n        digitToRoman.put(3000, \"mmm\");\n        digitToRoman.put(4000,\
    \ \"mmmm\");\n        digitToRoman.put(5000, \"mmmmm\");\n       "]
stop_tokens:
- "\n    }\n"
