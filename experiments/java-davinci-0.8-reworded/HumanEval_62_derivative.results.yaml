language: java
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // BEGIN\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        int exponent = 1;\n        for (int i = 1; i < xs.size(); i++) {\n  \
    \          Long coefficient = xs.get(i) * exponent;\n            result.add(coefficient);\n\
    \            exponent++;\n        }\n        return result;\n        // END\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // write your code here\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp6gsgeikx.java:21)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * i);\n        }\n  \
    \      return ys;\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> dxs = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            dxs.add((long)xs.get(i) * (long)i);\n\
    \        }\n        return dxs;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        int size = xs.size();\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (int i = 1; i < size; i++) {\n            result.add(xs.get(i) *\
    \ (long)i);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * i);\n        }\n  \
    \      return ys;\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<Long> ans = new ArrayList<Long>();\n     \
    \   for (int i = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        int size = xs.size();\n        ArrayList<Long> answer = new ArrayList<Long>();\n\
    \        for (int i = 1; i < size; i++) {\n            answer.add(xs.get(i) *\
    \ i);\n        }\n        return answer;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() <= 1) return new ArrayList<Long>();\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        int n = xs.size();\n        for (int i\
    \ = 1; i < n; i++) {\n            ans.add(xs.get(i) * (long)i);\n        }\n \
    \       return ans;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        ys.add((long)0l);\n\
    \        ys.addAll(xs);\n        ArrayList<Long> zs = new ArrayList<Long>();\n\
    \        for (int i = 1; i < ys.size(); i++) {\n            zs.add(ys.get(i) *\
    \ (long)i);\n        }\n        return zs;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmkn9qtla.java:27)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // your code here\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gdi33ya.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        long exp =\
    \ 1;\n        for (long x : xs) {\n            ans.add(x * exp);\n           \
    \ exp += 1;\n        }\n        ans.remove(0);\n        return ans;\n    }\n \
    \   public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpooiufgqp.java:27)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Start coding here.\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpdg5f_2vw.java:21)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> nxs = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            nxs.add(xs.get(i) * (long)i);\n    \
    \    }\n        return nxs;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(i * xs.get(i));\n        }\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> dxs = new ArrayList<Long>();\n        long n = xs.size();\n\
    \        for (long i = 1; i < n; i++) {\n            dxs.add(xs.get((int)i) *\
    \ i);\n        }\n        return dxs;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        long n = xs.size();\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (int i = 1; i < n; i++) {\n            res.add(xs.get(i) * i);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int x =\
    \ 1; x < xs.size(); x++) {\n            ys.add((long) x * xs.get(x));\n      \
    \  }\n        return ys;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011066
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011066
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        ans.add((long)0l);\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            ans.add((long)(i *\
    \ xs.get(i)));\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpodrtu1qz.java:25)\n"
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l))))\n        // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n        ArrayList<Long> dx = new ArrayList<Long>();\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            dx.add((long)xs.get(i)\
    \ * (long)i);\n        }\n        return dx;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        if (xs.size()\
    \ < 2) {\n            return ys;\n        }\n        for (int i = 1; i < xs.size();\
    \ i++) {\n            ys.add(xs.get(i) * (long)i);\n        }\n        return\
    \ ys;\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        int n = xs.size();\n\
    \        for (int i = 1; i < n; i++) {\n            res.add(xs.get(i) * (long)i);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return f(xs);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vpd4f2q.java:17: error: cannot find symbol\n        return f(xs);\n\
    \               ^\n  symbol:   method f(ArrayList<Long>)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011066
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> a = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            a.add((i + 1 - 1) * xs.get(i));\n    \
    \    }\n        return a;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> diff = new ArrayList<Long>();\n        long i = 1;\n\
    \        for (Long x : xs) {\n            if (i > 1) {\n                diff.add(x\
    \ * i);\n            }\n            i += 1;\n        }\n        return diff;\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltkgzesa.java:28)\n"
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        int n = xs.size();\n\
    \        for (int i = 1; i < n; i++) {\n            ans.add(xs.get(i) * (long)i);\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> newXs = new ArrayList<Long>();\n        // STUDENT-TODO\n\
    \        // Read comments above the question.\n        // You need to implement\
    \ this.\n        for (int i = 1; i < xs.size(); i++) {\n            newXs.add(xs.get(i)\
    \ * i);\n        }\n        return newXs;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if (xs.size()\
    \ > 1) {\n            for (int i = 1; i < xs.size(); i++) {\n                result.add(xs.get(i)\
    \ * ((long)i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // fill in here\n        if (xs.size() <= 1) return xs;\n       \
    \ ArrayList<Long> answer = new ArrayList<Long>();\n        for (int i = 1; i <\
    \ xs.size(); i++) {\n            answer.add(xs.get(i) * i);\n        }\n     \
    \   return answer;\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphulci2hq.java:30)\n"
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Replace {1} with your code.\n        return null;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpm6a0m7h4.java:21)\n"
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> rv = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            rv.add(xs.get(i) * i);\n        }\n  \
    \      return rv;\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            answer.add(i * xs.get(i));\n     \
    \   }\n        return answer;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() == 0) {\n            return xs;\n        }\n      \
    \  ArrayList<Long> res = new ArrayList<Long>();\n        int n = xs.size();\n\
    \        for (int i = 1; i < n; i++) {\n            res.add(xs.get(i) * i);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // TODO: Write your code here\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp51wi26gx.java:21)\n"
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add((long)0l);\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i)\
    \ * (long)i);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8q3gq9gg.java:25)\n"
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        int length\
    \ = xs.size();\n        for (int i = 1; i < length; i++) {\n            ans.add(xs.get(i)\
    \ * (long)i);\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(i * xs.get(i));\n        }\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * (long)i);\n       \
    \ }\n        return ys;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l))))\n        // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n        // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n        // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for\
    \ (int i = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * i);\n   \
    \     }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        int n = xs.size();\n\
    \        if (n <= 1) {\n            return ans;\n        }\n        for (int i\
    \ = 1; i < n; i++) {\n            ans.add(xs.get(i) * (long)i);\n        }\n \
    \       return ans;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        int n = xs.size();\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for (int i = 1; i < n; i++) {\n            res.add(xs.get(i) * (long)i);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        long degree\
    \ = xs.size() - 1;\n        result.add(degree * xs.get(0));\n        long i =\
    \ 1;\n        while (i < degree) {\n            result.add(i * xs.get(i));\n \
    \           i = i + 1;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpybclvsvi.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            result.add(i * xs.get(i));\n                 \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        throw new RuntimeException(\"not implemented yet\");\n    }\n   \
    \ public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\
    \ yet\n\tat Problem.derivative(tmp0mm8akg0.java:17)\n\tat Problem.main(tmp0mm8akg0.java:20)\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return xs.stream().\n            limit(xs.size() - 1).\n        \
    \    map((x) -> x * (xs.size() - 1)).\n            collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5zl1qyll.java:23)\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> answer = new ArrayList<Long>();\n        // System.out.println(xs);\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            answer.add(xs.get(i)\
    \ * (long)i);\n        }\n        return answer;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Your code here.\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmptlx1smho.java:21)\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Write your code here.\n        // int n = xs.size();\n       \
    \ // ArrayList<Long> result = new ArrayList<>();\n        // for (int i = 1; i\
    \ < n; i++) {\n        //     result.add(xs.get(i) * (long)i);\n        // }\n\
    \        // return result;\n        return xs.stream().map(new Function<Long,\
    \ Long>() {\n            long i = 1;\n            public Long apply(Long e) {\n\
    \                return e * i++;\n            }\n        }).skip(1).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhagzejw.java:24: error: cannot find symbol\n        return xs.stream().map(new\
    \ Function<Long, Long>() {\n                                   ^\n  symbol:  \
    \ class Function\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return xs;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbr5jz89q.java:20)\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> nxs = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            nxs.add((long) i * xs.get(i));\n   \
    \     }\n        return nxs;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011070
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        long n = (long)xs.size();\n        long x = (long)1l;\n        long\
    \ ans = (long)0l;\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       for (long i = (long)1l; i < n; i++) {\n            x = i * xs.get((int)i);\n\
    \            result.add(x);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011070
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        long\
    \ i = 0l;\n        for (i = 1l; i < xs.size(); i++) {\n            ans.add(i *\
    \ xs.get((int)i));\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n\t\t// Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      long power = 1;\n        for (long x : xs) {\n            if (power ==\
    \ 1) {\n                result.add(x);\n            } else {\n               \
    \ result.add(x * power);\n            }\n            power += 1;\n        }\n\
    \        result.remove(0);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptkdrzpnd.java:34)\n"
  stdout: ''
  timestamp: 1660011070
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Replace this code with your implementation\n        return new\
    \ ArrayList<Long>();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgb5j55uy.java:21)\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        ys.add((long)0l);\n        ys.add((long)0l);\n\
    \        ys.add((long)0l);\n        y\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptmktvhmh.java:59: error: not a statement\n        y\n        ^\n\
    /tmp/tmptmktvhmh.java:59: error: ';' expected\n        y\n         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011068
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // write your solution here\n        if (xs.size() == 0) {\n    \
    \        return new ArrayList<Long>();\n        }\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        for (int i = 1; i < xs.size(); i++) {\n  \
    \          ans.add(i * xs.get(i));\n        }\n        return ans;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011070
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            long coeff = xs.get(i) * (long)i;\n\
    \            result.add(coeff);\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011070
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        long numberOfTerms = xs.size();\n        ArrayList<Long> newTerms\
    \ = new ArrayList<Long>();\n        for (int i = 1; i < numberOfTerms; i++) {\n\
    \            long newTerm = xs.get(i) * i;\n            newTerms.add(newTerm);\n\
    \        }\n        return newTerms;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011070
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // write your code here\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp6gsgeikx.java:21)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> rs = new ArrayList<Long>();\n        // System.out.println(xs);\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            rs.add(xs.get(i) *\
    \ (long)i);\n        }\n        return rs;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011070
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        long n = (long)xs.size();\n\
    \        long i = (long)1l;\n        while (i < n) {\n            long j = (long)0l;\n\
    \            long acc = (long)0l;\n            while (j < i) {\n             \
    \   long x = get(xs, j);\n                long c = (long)1l;\n               \
    \ long k = (long)0l;\n                while (k < i) {\n                    c =\
    \ (c * (j - k)) % mod;\n                    k = k + (long)1l;\n              \
    \  }\n                acc = (acc + (x * c)) % mod;\n                j = j + (long)1l;\n\
    \            }\n            ans.add(acc);\n            i = i + (long)1l;\n   \
    \     }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphm3in9zp.java:24: error: cannot find symbol\n                long\
    \ x = get(xs, j);\n                         ^\n  symbol:   method get(ArrayList<Long>,long)\n\
    \  location: class Problem\n/tmp/tmphm3in9zp.java:28: error: cannot find symbol\n\
    \                    c = (c * (j - k)) % mod;\n                              \
    \          ^\n  symbol:   variable mod\n  location: class Problem\n/tmp/tmphm3in9zp.java:31:\
    \ error: cannot find symbol\n                acc = (acc + (x * c)) % mod;\n  \
    \                                      ^\n  symbol:   variable mod\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * (long)i);\n       \
    \ }\n        return ys;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> derivative = new ArrayList<Long>();\n        int\
    \ n = xs.size();\n        for (int i = 1; i < n; i++) {\n            derivative.add(xs.get(i)\
    \ * (long)i);\n        }\n        return derivative;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011070
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return IntStream.range(1, xs.size())\n                .mapToObj(i\
    \ -> (long)xs.get(i) * i)\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // if xs is empty, 0 * x^0 = 0. return 0.\n        if (xs.size()\
    \ == 0) {\n            return (new ArrayList<Long>(Arrays.asList((long)0l)));\n\
    \        }\n        // Only 1 coefficient in a polynomial.\n        // xs is [0]\n\
    \        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [1]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [2]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [3]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [4]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [5]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [6]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [7]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [8]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [9]\n        // Derivative = 0 * x^0 = 0. return (new ArrayList<Long>(Arrays.asList((long)0l)))\n\
    \        // xs is [10]\n        // Der\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8ayh4w9.java:44: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011071
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> dxs = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            dxs.add((long)i * xs.get(i));\n    \
    \    }\n        return dxs;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        //x\n        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i)\
    \ * i);\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Write your code here\n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpcvddv3hh.java:21)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> list = new ArrayList<Long>();\n        Long index\
    \ = 0l;\n        Long xsSize = (long)xs.size();\n        while ((index < xsSize))\
    \ {\n            if ((index > 0l)) {\n                list.add((xs.get((int)(index.longValue()\
    \ - 1l)) * index));\n            }\n            index = (index + 1l);\n      \
    \  }\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps9t6vb5p.java:29)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int i =\
    \ 0;\n        for (Long x : xs) {\n            if (i > 0) {\n                result.add(x\
    \ * i);\n            }\n            i++;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // start coding here\n        ArrayList<Long>der=new ArrayList<Long>();\n\
    \        for(int i=1;i<xs.size();i++)\n        {\n            der.add(i*xs.get(i));\n\
    \        }\n        return der;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            long n = xs.get(i) * i;\n            ys.add(n);\n\
    \        }\n        return ys;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        throw new RuntimeException(\"Not implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.derivative(tmp8fmdz380.java:17)\n\tat Problem.main(tmp8fmdz380.java:20)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        int i = 1;\n\
    \        for (Long x : xs) {\n            if (i > 1) {\n                ans.add(x\
    \ * (long)i);\n            }\n            i++;\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3ys7smp.java:28)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // insert your code here\n        return xs;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmsh6pcpi.java:21)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> out = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            out.add(xs.get(i) * (long)i);\n    \
    \    }\n        return out;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * (long)i);\n       \
    \ }\n        return ys;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        throw new UnsupportedOperationException(\"Delete this statement and\
    \ write your own implementation.\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Delete\
    \ this statement and write your own implementation.\n\tat Problem.derivative(tmpi2f7d6ae.java:17)\n\
    \tat Problem.main(tmpi2f7d6ae.java:20)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return xs.stream().map(x -> x).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwh96_se.java:20)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011066
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n\tArrayList<Long> res = new ArrayList<Long>();\n\tfor (int i = 1; i < xs.size();\
    \ i++) {\n\t    res.add(xs.get(i) * (long)i);\n\t}\n\treturn res;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011073
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(i * xs.get(i));\n        }\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() == 0) return xs;\n        ArrayList<Long> res = new\
    \ ArrayList<Long>();\n        long prev = xs.get(0);\n        long curr = 0;\n\
    \        long len = xs.size();\n        for (int i = 1; i < len; i++) {\n    \
    \        curr = xs.get(i);\n            res.add(i * curr);\n            prev =\
    \ curr;\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> new_xs = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            new_xs.add(xs.get(i) * i);\n     \
    \   }\n        return new_xs;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011072
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        Long i =\
    \ 0l;\n        while (i < xs.size() - 1) {\n            result.add(xs.get(i +\
    \ 1) * (i + 1));\n            i = i + 1;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpymqkw4ul.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            result.add(xs.get(i + 1) * (i + 1));\n       \
    \                         ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        ans.add((long)0l);\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            ans.add((xs.get(i)\
    \ * (long)i));\n        }\n        return ans;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1zv9l94.java:25)\n"
  stdout: ''
  timestamp: 1660011073
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        int n = xs.size();\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        for (int i = 1; i < n; i++) {\n            ans.add(xs.get(i) * (long)i);\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011073
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (long i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get((int)i) * i);\n     \
    \   }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011073
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() <= 1) return new ArrayList<Long>();\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (int i = 1; i < xs.size(); i++) {\n\
    \            res.add(xs.get(i) * (long)i);\n        }\n        return res;\n \
    \   }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011073
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            long y = (long) i * xs.get(i);\n     \
    \       ys.add(y);\n        }\n        return ys;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Fill in your code here.\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0493jni.java:21)\n"
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n\t\tint n = xs.size();\n\t\tArrayList<Long> deriv = new ArrayList<Long>();\n\
    \t\tfor (int i = 1; i < n; i++) {\n\t\t\tderiv.add(xs.get(i) * (long)i);\n\t\t\
    }\n\t\treturn deriv;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011074
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n\tint n = xs.size();\n\tArrayList<Long> result = new ArrayList<Long>();\n\
    \tfor (int i = 1; i < n; i++) {\n\t    result.add(xs.get(i) * (long)i);\n\t}\n\
    \treturn result;\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        int n = xs.size();\n\
    \        for (int i = 1; i < n; i++) {\n            res.add(xs.get(i) * i);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        if(xs.size()\
    \ <= 1) {\n            return result;\n        }\n        for(int i = 1; i < xs.size();\
    \ i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // BEGIN SECRET\n        final int N = xs.size();\n        final\
    \ long[] res = new long[N - 1];\n        for (int i = 0; i < N - 1; i++) {\n \
    \           res[i] = xs.get(i + 1) * (i + 1);\n        }\n        return new ArrayList<Long>(Arrays.asList(Arrays.stream(res).boxed().toArray(Long[]::new)));\n\
    \        // END SECRET\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        long n = xs.size();\n\
    \        for (long i = 1; i < n; i++) {\n            ans.add(xs.get((int)i) *\
    \ i);\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int len\
    \ = xs.size();\n        for (int i = 1; i < len; i++) {\n            result.add(i\
    \ * xs.get(i));\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int index\
    \ = 0;\n        for (Long x : xs) {\n            if (index > 0) {\n          \
    \      result.add((long) index * x);\n            }\n            index = index\
    \ + 1;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * (long)i);\n       \
    \ }\n        return ys;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        int n = xs.size();\n\
    \        for (int i = 1; i < n; i++) {\n            long y = xs.get(i) * i;\n\
    \            ys.add(y);\n        }\n        return ys;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int i =\
    \ 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * (long)i);\n       \
    \ }\n        return ys;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011067
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n      ArrayList<Long> ret = new ArrayList<Long>();\n      int i = 0;\n  \
    \    while (i < xs.size() - 1) {\n        ret.add(xs.get(i + 1) * (long)(i + 1));\n\
    \        i = i + 1;\n      }\n      return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // if (xs.size() < 2) return xs;\n        // if (xs.size() == 2)\
    \ return (new ArrayList<Long>(Arrays.asList((long)xs.get(1l))));\n        // ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        // for (int i = 1; i < xs.size(); i++)\
    \ {\n        //     ans.add(((long)xs.get(i) * (long)i));\n        // }\n    \
    \    // return ans;\n        return xs.stream().skip(1).map(e -> e * xs.indexOf(e)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> dxs = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            dxs.add(((long)xs.get(i) * (long)i));\n\
    \        }\n        return dxs;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        // BEGIN\n \
    \       int n = xs.size();\n        for (int i = 1; i < n; i++) {\n          \
    \  ys.add(xs.get(i) * (long)i);\n        }\n        // END\n        return ys;\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ys = new ArrayList<Long>();\n        int n = xs.size();\n\
    \        for (int i = 1; i < n; i++) {\n            ys.add(xs.get(i) * (long)i);\n\
    \        }\n        return ys;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            long x = xs.get(i);\n            x *=\
    \ i;\n            ans.add(x);\n        }\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        int m = xs.size();\n\
    \        for (int i = 1; i < m; i++) {\n            long x = xs.get(i);\n    \
    \        ans.add(x * i);\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> xs_derivative = new ArrayList<Long>();\n        for\
    \ (int i = 1; i < xs.size(); i++) {\n            xs_derivative.add(xs.get(i) *\
    \ (long)i);\n        }\n        return xs_derivative;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Write your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbh8pj491.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            ys.add((long) i * xs.get(i));\n  \
    \      }\n        return ys;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l,\
    \ (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011069
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        int n = xs.size();\n        if (n == 0) {\n            return xs;\n\
    \        }\n        ArrayList<Long> ys = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < n; i++) {\n            ys.add(i * xs.get(i));\n        }\n      \
    \  return ys;\n    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Write your code here.\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        for (int i = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i)\
    \ * (long)i);\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // BEGIN CODE HERE\n        return null;\n        // END CODE HERE\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmplmp_glhc.java:22)\n"
  stdout: ''
  timestamp: 1660011076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // Your Code Here\n        return null;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp14scuuji.java:21)\n"
  stdout: ''
  timestamp: 1660011076
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * (long)i);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return new ArrayList<Long>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wa9cy1n.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> ans = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * (long)i);\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011064
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        throw new RuntimeException(\"Not implemented\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.derivative(tmp8fmdz380.java:17)\n\tat Problem.main(tmp8fmdz380.java:20)\n"
  stdout: ''
  timestamp: 1660011072
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return null;\n    }\n    public static void main(String[] args) {\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.derivative(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpy_tac_wd.java:20)\n"
  stdout: ''
  timestamp: 1660011064
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (int i\
    \ = 1; i < xs.size(); i++) {\n            long x = (long)xs.get(i) * (long)i;\n\
    \            res.add(x);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011076
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> deriv = new ArrayList<Long>();\n        for (int\
    \ i = 1; i < xs.size(); i++) {\n            deriv.add(xs.get(i) * i);\n      \
    \  }\n        return deriv;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l,\
    \ (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011076
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        if (xs.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (long)i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011075
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        return xs.stream().map(x -> (x * (long)xs.indexOf(x))).skip(1).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011076
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        // TODO: Implement this method.\n        return new ArrayList<Long>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(derivative((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyoghfe45.java:21)\n"
  stdout: ''
  timestamp: 1660011076
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial\
    \ in the same form.\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))\n    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)6l)))\n    public static ArrayList<Long> derivative(ArrayList<Long> xs)\
    \ {\n        ArrayList<Long> result = new ArrayList<Long>();\n        int n =\
    \ xs.size();\n        for (int i = 1; i < n; i++) {\n            result.add(xs.get(i)\
    \ * (long)i);\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)1l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)12l, (long)20l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)))));\n\
    \    assert(derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l,\
    \ (long)1l, (long)0l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)0l, (long)16l)))));\n    assert(derivative((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011076
