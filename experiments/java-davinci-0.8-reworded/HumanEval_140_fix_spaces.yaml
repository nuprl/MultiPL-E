name: HumanEval_140_fix_spaces
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String\
  \ text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"\
  Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ['        return text;', '        return null;', "        // YOUR CODE\
    \ HERE\n        throw new UnsupportedOperationException(\"Problem.fixSpaces: Not\
    \ implemented\");", '        return text.replaceAll(" {2,}", " ").replaceAll("
    ", "_").replaceAll(" ", "-");', '        return "";', "        if (text == null)\
    \ {\n            return \"\";\n        }\n        if (text.isEmpty()) {\n    \
    \        return text;\n        }\n        return text.replaceAll(\"\\\\s+\", \"\
    \ _ \");", "        String[] words = text.split(\" \");\n        String result\
    \ = words[0];\n        int i = 1;\n        while (i < words.length) {\n      \
    \      if (words[i].equals(\"\")) {\n                if (words[i - 1].equals(\"\
    \")) {\n                    result += \"-\";\n                } else {\n     \
    \               result += \"_\";\n                }\n            } else {\n  \
    \              result += \"_\" + words[i];\n            }\n            i++;\n\
    \        }\n        return result;", "        if (text == null) return \"\";\n\
    \        return text.replace(\" \", \"_\").replaceAll(\"_+\", \"-\");", '        return
    text.replaceAll(" +", "-" ).replaceAll(" ", "_" );', '        return text.replaceAll("
    {2,}", "-").replaceAll(" ", "_");', '        return null;', "        String result\
    \ = \"\";\n        String space = \" \";\n        String underscore = \"_\";\n\
    \        String minus = \"-\";\n        text = text.trim();\n        String[]\
    \ words = text.split(space);\n        for (int i = 0; i < words.length; i++) {\n\
    \            result += words[i];\n            if (i < words.length - 1) {\n  \
    \              result += underscore;\n            }\n        }\n        result\
    \ = result.replaceAll(\"_+\", \"_\");\n        result = result.replaceAll(\"_\"\
    , minus);\n        return result;", "        for (int i = 0; i < text.length();\
    \ i++) {\n            if (text.charAt(i) == ' ') {\n                if (i == 0)\
    \ {\n                    text = \"_\" + text.substring(1);\n                }\
    \ else if (i == text.length() - 1) {\n                    text = text.substring(0,\
    \ text.length() - 1) + \"_\";\n                } else if (text.charAt(i - 1) ==\
    \ ' ') {\n                    if (text.charAt(i + 1) == ' ') {\n             \
    \           text = text.substring(0, i) + \"-\";\n                    } else {\n\
    \                        text = text.substring(0, i) + \"_\";\n              \
    \      }\n                } else {\n                    text = text.substring(0,\
    \ i) + \"_\" + text.substring(i + 1);\n                }\n            }\n    \
    \    }\n        return text;", "        StringBuilder sb = new StringBuilder();\n\
    \        String[] words = text.split(\"\\\\s+\");\n        for (int i = 0; i <\
    \ words.length; i++) {\n            if (i > 0) {\n                sb.append('_');\n\
    \            }\n            sb.append(words[i]);\n        }\n        text = sb.toString();\n\
    \        return text.replaceAll(\"\\\\s+\", \"-\");", "        // Your code goes\
    \ here\n        if (text.length()==0) return text;\n        int count = 0;\n \
    \       StringBuilder sb = new StringBuilder();\n        char[] c = text.toCharArray();\n\
    \        for (int i=0; i<c.length; i++) {\n            if (c[i]==' ') {\n    \
    \            count++;\n                if (count==1) {\n                    sb.append(\"\
    _\");\n                } else if (count==2) {\n                    sb.append(\"\
    -\");\n                }\n            } else {\n                sb.append(c[i]);\n\
    \                count = 0;\n            }\n        }\n        return sb.toString();",
  "        // Code here.\n        String[] words = text.split(\" \");\n        String\
    \ new_text = \"\";\n        for (int i = 0; i < words.length; i++) {\n       \
    \     if (i == 0) {\n                new_text += words[i];\n            } else\
    \ {\n                if (words[i].length() > 0) {\n                    new_text\
    \ += \"_\" + words[i];\n                } else {\n                    new_text\
    \ += \"-\";\n                }\n            }\n        }\n        return new_text;",
  "        // YOUR CODE HERE\n        return null;", '        return text.trim().replaceAll("\\s+",
    "").length() > 2 ? text.trim().replaceAll("\\s+", "-") : text.trim().replaceAll("\\s+",
    "_");', "        // Your code here\n        return \"\";", "        text = text.trim();\n\
    \        while (text.contains(\"  \")) {\n            text = text.replace(\" \
    \ \", \" \");\n        }\n        while (text.contains(\" \")) {\n           \
    \ text = text.replace(\" \", \"_\");\n        }\n        if (text.length() > 2)\
    \ {\n            text = text.replace(\"_\", \"-\");\n        }\n        return\
    \ text;", "        String s = new String();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < text.length(); i++) {\n            sb.append(text.charAt(i));\n\
    \            if (text.charAt(i) == ' ') {\n                if (i + 1 < text.length()\
    \ && text.charAt(i + 1) == ' ') {\n                    sb.append('-');\n     \
    \               i++;\n                } else {\n                    sb.append('_');\n\
    \                }\n            }\n        }\n        s = sb.toString();\n   \
    \     return s;", "        // Your code goes here\n        return null;", '        return
    null;', "        char[] chars = text.toCharArray();\n        int currSpaces =\
    \ 0;\n        for (int i = 0; i < chars.length; i++) {\n            char curr\
    \ = chars[i];\n            if (curr == ' ') {\n                currSpaces++;\n\
    \                if (currSpaces == 1) {\n                    chars[i] = '_';\n\
    \                } else if (currSpaces == 2) {\n                    chars[i -\
    \ 1] = '_';\n                } else {\n                    chars[i - 1] = '-';\n\
    \                }\n            } else {\n                currSpaces = 0;\n  \
    \          }\n        }\n        return new String(chars);", '        throw new
    NotImplementedException();', '        return "";', "        // fill in your code\
    \ here.\n        int cnt = 0;\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                cnt++;\n                if (cnt > 2) continue;\n\
    \            } else {\n                cnt = 0;\n            }\n            if\
    \ (text.charAt(i) == ' ') {\n                if (cnt > 2) sb.append('-');\n  \
    \              else sb.append('_');\n            } else {\n                sb.append(text.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        String[] words\
    \ = text.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        boolean flag = false;\n        for (String word : words) {\n        \
    \    result.append(word);\n            result.append(\"_\");\n            if (word.length()\
    \ == 0) {\n                flag = true;\n            }\n        }\n        String\
    \ resultStr = result.toString();\n        if (flag) {\n            resultStr =\
    \ resultStr.replaceAll(\"_\", \"-\");\n        }\n        return resultStr.substring(0,\
    \ resultStr.length() - 1);", "        text = text.trim();\n        text = text.replaceAll(\"\
    \\\\s{2,}\", \" \");\n        text = text.replaceAll(\" \", \"_\");\n        return\
    \ text;", "        String nospace = text.replace(\" \", \"_\");\n        String\
    \ double = nospace.replace(\"__\", \"_\");\n        String triple = double.replace(\"\
    ___\", \"-\");\n        return triple;", '        return text;', "        // your\
    \ code\n        return null;", '        return null;', "        StringBuilder\
    \ newText = new StringBuilder();\n        for (int i = 0; i < text.length(); i++)\
    \ {\n            if (text.charAt(i) == ' ') {\n                if (newText.charAt(newText.length()\
    \ - 1) == '_') {\n                    newText.append('-');\n                }\
    \ else {\n                    newText.append('_');\n                }\n      \
    \      } else {\n                newText.append(text.charAt(i));\n           \
    \ }\n        }\n        return newText.toString();", '        return "";', '      return
    text.replaceAll("\\s{2,}", "-").replaceAll(" ", "_");', '        throw new NotImplementedException();',
  "        StringBuilder b = new StringBuilder();\n        char[] c = text.toCharArray();\n\
    \        int count = 0;\n        for (int i = 0; i < c.length; i++) {\n      \
    \      char ch = c[i];\n            if (ch == ' ') {\n                count++;\n\
    \                if (count == 1) {\n                    b.append('_');\n     \
    \           } else if (count == 2) {\n                    b.append('_');\n   \
    \             } else {\n                    b.append('-');\n                }\n\
    \            } else {\n                count = 0;\n                b.append(ch);\n\
    \            }\n        }\n        return b.toString();", "        String[] arr\
    \ = text.split(\" \");\n        String result = \"\";\n        for (int i = 0;\
    \ i < arr.length; i++) {\n            result += arr[i];\n            if (i < arr.length\
    \ - 1) {\n                result += \"_\";\n            }\n        }\n       \
    \ if (result.length() > 2) {\n            result = result.substring(0, 2) + result.substring(2).replaceAll(\"\
    _\", \"-\");\n        }\n        return result;", '        return text.replaceAll("\\s{2,}",
    "-").replaceAll(" ", "_");', "        text = text.trim();\n        int count =\
    \ 0;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n      \
    \          count++;\n                if (count == 1)\n                    sb.append('_');\n\
    \                else if (count == 2)\n                    sb.append('-');\n \
    \           } else {\n                sb.append(text.charAt(i));\n           \
    \     count = 0;\n            }\n        }\n        return sb.toString();", '        return
    null;', "        throw new UnsupportedOperationException(\"Can't solve this problem\
    \ yet.\");", '        return text;', '        return text.replaceAll("[ ]+", "_");',
  "        // Replace all spaces with underscores\n        text = text.replace(\"\
    \ \", \"_\");\n        // Replace all consecutive spaces with -\n        text\
    \ = text.replace(\"_+\", \"-\");\n        return text;", "        // Code here\n\
    \        return \"Hello World\";", '        return text;', "        // TODO return\
    \ correct output\n        return \"TODO\";", "        // REPLACE THIS LINE WITH\
    \ YOUR CODE\n        return text;", "        StringBuilder sb = new StringBuilder();\n\
    \        boolean shouldReplace = false;\n        int consecSpaces = 0;\n     \
    \   for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ') {\n                consecSpaces++;\n              \
    \  if (consecSpaces >= 2) {\n                    shouldReplace = true;\n     \
    \           }\n            } else {\n                consecSpaces = 0;\n     \
    \       }\n            if (shouldReplace) {\n                if (c == ' ') {\n\
    \                    sb.append('-');\n                } else {\n             \
    \       sb.append('_');\n                    sb.append(c);\n                 \
    \   shouldReplace = false;\n                }\n            } else {\n        \
    \        sb.append(c);\n            }\n        }\n        return sb.toString();",
  '        return text.replaceAll(" ", "_").replaceAll("_+", "-");', '        return
    null;', "        // Write your code here\n        StringBuilder sb = new StringBuilder();\n\
    \        char prev = ' ';\n        for (int i = 0; i < text.length(); i++) {\n\
    \            char c = text.charAt(i);\n            if (c == ' ') {\n         \
    \       if (prev == ' ') {\n                    sb.append('-');\n            \
    \    } else {\n                    sb.append('_');\n                }\n      \
    \      } else {\n                sb.append(c);\n            }\n            prev\
    \ = c;\n        }\n        return sb.toString();", "        // replace space with\
    \ underscore\n        text = text.replace(\" \", \"_\");\n        // replace all\
    \ more than 2 spaces with 2 spaces\n        text = text.replaceAll(\"[ ]{2,}\"\
    , \"  \");\n        // replace 2 spaces with -\n        text = text.replace(\"\
    \  \", \"-\");\n        return text;", "        return Stream.of(text.split(\"\
    \ \"))\n            .map(word -> word.replaceAll(\" \", \"_\"))\n            .map(word\
    \ -> word.replaceAll(\"_+\", \"-\"))\n            .collect(Collectors.joining(\"\
    \ \"));", "        String r = text.replace(\" \", \"_\");\n        r = r.replace(\"\
    __\", \"_\");\n        r = r.replace(\"__\", \"-\");\n        return r;", "  \
    \      // first, we have to split the text into an array at each space\n     \
    \   // then we create an empty string for the result of the function\n       \
    \ // we loop through the array and check for each string \n        // the length\
    \ of it, if it's bigger than 1 we keep it as it is\n        // if it's 1 we check\
    \ if it's a space or not, if it's a space we\n        // replace it with an underscore,\
    \ else we keep it as it is\n        // if it's 0 we replace it with a dash\n \
    \       // after that we add the string to the result and repeat the process\n\
    \        // until we finish the whole array\n        String[] arr = text.split(\"\
    \ \");\n        String result = \"\";\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (arr[i].length() > 1) {\n                result += arr[i];\n\
    \            } else if (arr[i].length() == 1) {\n                if (arr[i].equals(\"\
    \ \")) {\n                    result += \"_\";\n                } else {\n   \
    \                 result += arr[i];\n                }\n            } else {\n\
    \                result += \"-\";\n            }\n        }\n        return result;",
  "        String result = text.replaceAll(\"  +\", \"-\");\n        result = result.replaceAll(\"\
    \ \", \"_\");\n        return result;", '        return null;', "        if (text\
    \ == null) {\n            return null;\n        }\n        return text.replaceAll(\"\
    \ +\", \" -\").replaceAll(\"_\", \" \").replaceAll(\"-\", \"_\");", "        int\
    \ count = 0;\n        StringBuilder builder = new StringBuilder();\n        for\
    \ (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ')\
    \ {\n                count++;\n                continue;\n            }\n    \
    \        else {\n                if (count > 2) {\n                    builder.append(\"\
    -\");\n                }\n                else if (count == 2) {\n           \
    \         builder.append(\"_\");\n                }\n                else if (count\
    \ == 1) {\n                    builder.append(\" \");\n                }\n   \
    \             builder.append(text.charAt(i));\n                count = 0;\n  \
    \          }\n        }\n        if (count > 2) {\n            builder.append(\"\
    -\");\n        }\n        else if (count == 2) {\n            builder.append(\"\
    _\");\n        }\n        else if (count == 1) {\n            builder.append(\"\
    \ \");\n        }\n        return builder.toString();", "        int count = 0;\n\
    \        String result = \"\";\n        for (int i = 0; i < text.length(); i++)\
    \ {\n            if (text.charAt(i) == ' ') {\n                count++;\n    \
    \            if (count > 2) {\n                    result += '-';\n          \
    \      } else {\n                    result += '_';\n                }\n     \
    \       } else {\n                count = 0;\n                result += text.charAt(i);\n\
    \            }\n        }\n        return result;", '        return text.replaceAll("\\s",
    "_").replaceAll("_+", "_").replaceAll("\\s{3,}", "_");', "        char[] arr =\
    \ text.toCharArray();\n        int c = 0;\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            if (arr[i] == ' ') {\n                arr[i] = '_';\n  \
    \              c++;\n            } else {\n                c = 0;\n          \
    \  }\n            if (c > 2) {\n                arr[i] = '-';\n            }\n\
    \        }\n        return new String(arr);", '        return "";', "        if\
    \ (text == null) {\n            return null;\n        }\n        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        boolean doubleSpace = false;\n\
    \        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ') {\n                if (i + 1 < text.length() && text.charAt(i\
    \ + 1) == ' ') {\n                    if (doubleSpace) {\n                   \
    \     stringBuilder.append('-');\n                    } else {\n             \
    \           stringBuilder.append('_');\n                        doubleSpace =\
    \ true;\n                    }\n                } else {\n                   \
    \ stringBuilder.append('_');\n                    doubleSpace = false;\n     \
    \           }\n            } else {\n                stringBuilder.append(c);\n\
    \                doubleSpace = false;\n            }\n        }\n        return\
    \ stringBuilder.toString();", "        String result = text.replace(\" \", \"\
    _\");\n        int i = 0;\n        while (i < result.length() - 2) {\n       \
    \     if (result.charAt(i) == '_' && result.charAt(i + 1) == '_' && result.charAt(i\
    \ + 2) == '_') {\n                result = result.substring(0, i) + \"-\" + result.substring(i\
    \ + 3);\n            }\n            i++;\n        }\n        return result;",
  "        // TODO: implement this function\n        return \"\";", "        // fill\
    \ here\n        return \"\";", "        //\n        return \"\";", "        int\
    \ counter = 0;\n        String res = \"\";\n        for (int i = 0; i < text.length();\
    \ i++) {\n            if (text.charAt(i) == ' ') {\n                counter++;\n\
    \                if (counter >= 3) {\n                    res += \"-\";\n    \
    \                counter = 0;\n                }\n            } else {\n     \
    \           if (counter == 1) {\n                    res += \"_\";\n         \
    \       }\n                counter = 0;\n                res += text.charAt(i);\n\
    \            }\n        }\n        return res;", "        StringBuilder sb = new\
    \ StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n\
    \                if (count > 2) {\n                    sb.append('-');\n     \
    \           } else {\n                    sb.append('_');\n                }\n\
    \            } else {\n                count = 0;\n                sb.append(text.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        if (text ==\
    \ null) return null;\n        StringBuilder sb = new StringBuilder();\n      \
    \  boolean firstSeen = false;\n        boolean consecutive = false;\n        for\
    \ (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ')\
    \ {\n                if (!firstSeen) {\n                    firstSeen = true;\n\
    \                    sb.append('_');\n                } else {\n             \
    \       if (consecutive) {\n                        sb.append('-');\n        \
    \            } else {\n                        sb.append('_');\n             \
    \           consecutive = true;\n                    }\n                }\n  \
    \          } else {\n                sb.append(text.charAt(i));\n            \
    \    consecutive = false;\n            }\n        }\n        return sb.toString();",
  '        return "";', '        return text.replaceAll("[ ]{2,}", "-").replaceAll("[
    ]", "_");', "        String ret = text.replaceAll(\" \", \"_\");\n        ret\
    \ = ret.replaceAll(\"_+\", \"-\");\n        return ret;", "        String space\
    \ = \"\";\n        String c = \"\";\n        for (int i = 0; i < text.length();\
    \ i++) {\n            c = text.substring(i, i + 1);\n            if (c.equals(\"\
    \ \")) {\n                if (space.equals(\"\")) {\n                    space\
    \ = c;\n                } else {\n                    space += c;\n          \
    \      }\n            } else {\n                if (space.equals(\"\")) {\n  \
    \                  space = c;\n                } else {\n                    if\
    \ (space.length() <= 2) {\n                        space = space.replace(\" \"\
    , \"_\");\n                    } else {\n                        space = \"_\"\
    \ + space.replace(\" \", \"-\");\n                    }\n                    space\
    \ += c;\n                }\n            }\n        }\n        return space;",
  "        // Implement me\n        return null;", '        return "";', "       \
    \ String result = text.replaceAll(\"\\\\s\", \"_\");\n        result = result.replaceAll(\"\
    _+\", \"-\");\n        return result;", "        if (text == null) return null;\n\
    \        String clean = text.trim();\n        StringBuilder builder = new StringBuilder();\n\
    \        int i = 0;\n        int spaceCount = 0;\n        while (i < clean.length())\
    \ {\n            if (clean.charAt(i) == ' ') {\n                spaceCount++;\n\
    \                if (spaceCount > 2) {\n                    builder.append('-');\n\
    \                    spaceCount = 0;\n                }\n            } else {\n\
    \                spaceCount = 0;\n                builder.append(clean.charAt(i));\n\
    \            }\n            i++;\n        }\n        return builder.toString();",
  '        return text;', "        String result = \"\";\n        for (int i = 0;\
    \ i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n      \
    \          result += \"_\";\n            } else {\n                result += text.charAt(i);\n\
    \            }\n        }\n        return result;", "        char[] arr = text.toCharArray();\n\
    \        int n = arr.length;\n        boolean space = false;\n        int count\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == ' ')\
    \ {\n                space = true;\n                count++;\n            } else\
    \ {\n                if (space) {\n                    arr[i-count] = '-';\n \
    \                   space = false;\n                    count = 0;\n         \
    \       }\n                arr[i-count] = arr[i];\n            }\n        }\n\
    \        if (space) arr[n-count] = '-';\n        return new String(arr).replaceAll(\"\
    \ \", \"_\");", "        StringBuffer sb = new StringBuffer(text);\n        int\
    \ prevIndex = 0;\n        int index = 0;\n        while (index != -1) {\n    \
    \        index = sb.indexOf(\" \", prevIndex);\n            int numConsecutiveSpaces\
    \ = (index - prevIndex);\n            if (numConsecutiveSpaces > 2) {\n      \
    \          sb.replace(prevIndex, index, \"-\");\n            } else if (numConsecutiveSpaces\
    \ == 2) {\n                sb.replace(prevIndex, index, \"_\");\n            }\
    \ else if (numConsecutiveSpaces == 1) {\n                sb.replace(prevIndex,\
    \ index, \"\");\n            }\n            prevIndex = index+1;\n        }\n\
    \        return sb.toString();", "        // TODO: implement this\n        return\
    \ \"\";", "        int spaceCount = 0;\n        StringBuilder out = new StringBuilder();\n\
    \        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                spaceCount++;\n                if (spaceCount ==\
    \ 1) {\n                    out.append('_');\n                } else if (spaceCount\
    \ == 2) {\n                    out.append('_');\n                } else {\n  \
    \                  out.append('-');\n                }\n            } else {\n\
    \                spaceCount = 0;\n                out.append(text.charAt(i));\n\
    \            }\n        }\n        return out.toString();", "        // Your code\
    \ here\n        return \"\";", "      text = text.trim();\n      for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text.charAt(i) == ' ') {\n       \
    \   text = text.substring(0, i) + '_' + text.substring(i + 1);\n        }\n  \
    \    }\n      text = text.replaceAll(\"_+\", \"-\");\n      return text;", " \
    \       int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i)\
    \ == ' ') {\n                text = text.substring(0, i) + \"_\" + text.substring(i\
    \ + 1);\n            }\n            i += 1;\n        }\n        i = 0;\n     \
    \   while (i < text.length()) {\n            if (text.charAt(i) == '_' && text.charAt(i\
    \ + 1) == '_') {\n                if (text.charAt(i + 2) == '_') {\n         \
    \           text = text.substring(0, i) + \"-\" + text.substring(i + 3);\n   \
    \             } else {\n                    text = text.substring(0, i) + \"_\"\
    \ + text.substring(i + 2);\n                }\n            }\n            i +=\
    \ 1;\n        }\n        return text;", "        if (text == null) return null;\n\
    \        StringBuilder result = new StringBuilder();\n        for (int i = 0;\
    \ i < text.length(); i++) {\n            if (i > 0 && text.charAt(i) == ' ' &&\
    \ text.charAt(i - 1) == ' ') {\n                if (result.charAt(result.length()\
    \ - 1) != '-') {\n                    result.append('-');\n                }\n\
    \            } else if (text.charAt(i) == ' ') {\n                result.append('_');\n\
    \            } else {\n                result.append(text.charAt(i));\n      \
    \      }\n        }\n        return result.toString();", "        for (int i =\
    \ 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n   \
    \             if (i > 0 && text.charAt(i - 1) == ' ') {\n                    text\
    \ = text.substring(0, i) + '-' + text.substring(i + 1);\n                } else\
    \ {\n                    text = text.substring(0, i) + '_' + text.substring(i\
    \ + 1);\n                }\n            }\n        }\n        return text;", " \
    \       int counter = 0;\n        StringBuilder sb = new StringBuilder();\n  \
    \      for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                if (counter > 1) {\n                    sb.append('-');\n\
    \                } else {\n                    sb.append('_');\n             \
    \   }\n                counter++;\n            } else {\n                sb.append(text.charAt(i));\n\
    \                counter = 0;\n            }\n        }\n        return sb.toString();",
  '        throw new RuntimeException("Not implemented.");', "        // ... code\
    \ here\n        return \"\";", '        return text.replace(" ", "_").replaceAll("_+",
    "_").replaceAll("_$", "");', "        // YOUR CODE HERE\n        return null;",
  "        //todo\n        int numSpace = 0;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            if (text.charAt(i) == ' ') {\n                numSpace++;\n\
    \            }\n        }\n        if (numSpace > 2) {\n            text = text.replace(\"\
    \  \", \"-\");\n        }\n        text = text.replace(\" \", \"_\");\n      \
    \  return text;", "        if (text == null) {\n            return null;\n   \
    \     }\n        if (text.length() == 0) {\n            return \"\";\n       \
    \ }\n        text = text.trim();\n        StringBuilder sb = new StringBuilder();\n\
    \        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n \
    \           if (text.charAt(i) == ' ') {\n                count++;\n         \
    \   } else {\n                count = 0;\n            }\n            if (count\
    \ > 2) {\n                sb.append('-');\n            } else if (count == 1)\
    \ {\n                sb.append('_');\n            } else {\n                sb.append(text.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        String result\
    \ = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                int next = i + 1;\n                int count = 1;\n\
    \                while (next < text.length() && text.charAt(next) == ' ') {\n\
    \                    count++;\n                    next++;\n                }\n\
    \                if (count > 2) {\n                    result += \"-\";\n    \
    \            } else {\n                    result += \"_\";\n                }\n\
    \                i = next - 1;\n            } else {\n                result +=\
    \ text.charAt(i);\n            }\n        }\n        return result;", '        return
    text;', "        String underscore = \"_\";\n        String dash = \"-\";\n  \
    \      String ans = \"\";\n        String[] arr = text.split(\" \");\n       \
    \ for (int i = 0; i < arr.length; i++) {\n            if (arr[i].isEmpty()) {\n\
    \                if (i > 0 && arr[i - 1].isEmpty()) {\n                    ans\
    \ += dash;\n                } else {\n                    ans += underscore;\n\
    \                }\n            } else {\n                ans += arr[i];\n   \
    \         }\n        }\n        return ans;", '        return text;', '        throw
    new UnsupportedOperationException("Waiting to be implemented.");', '        return
    null;', '        return text.replace(" ", "_").replaceAll("(_){2,}", " ");', " \
    \       // Replace this line with your code\n        return null;", "        //\
    \ fill in the solution here\n        return \"\";", "        String result = \"\
    \";\n        int spaceCount = 0;\n        for (int i = 0; i < text.length(); i++)\
    \ {\n            char c = text.charAt(i);\n            if (c == ' ') {\n     \
    \           spaceCount++;\n                if (spaceCount == 1) {\n          \
    \          result += '_';\n                } else if (spaceCount >= 2) {\n   \
    \                 result += '-';\n                }\n            } else {\n  \
    \              spaceCount = 0;\n                result += c;\n            }\n\
    \        }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                if (sb.length() > 0 && sb.charAt(sb.length() - 1)\
    \ == ' ') {\n                    if (sb.length() > 1 && sb.charAt(sb.length()\
    \ - 2) == ' ') {\n                        sb.append('-');\n                  \
    \  } else {\n                        sb.append('_');\n                    }\n\
    \                } else {\n                    sb.append(' ');\n             \
    \   }\n            } else {\n                sb.append(text.charAt(i));\n    \
    \        }\n        }\n        if (sb.length() > 0 && sb.charAt(sb.length() -\
    \ 1) == ' ') {\n            sb.setLength(sb.length() - 1);\n        }\n      \
    \  return sb.toString();", '        return null;', "        String[] parts = text.split(\"\
    \ \");\n        String result = \"\";\n        for (int i = 0; i < parts.length;\
    \ i++) {\n            if (parts[i].length() > 0) {\n                result +=\
    \ (parts[i] + \"_\");\n            }\n        }\n        return result.substring(0,\
    \ result.length() - 1);", "        text = text.trim();\n        text = text.replace(\"\
    \ \", \"_\");\n        text = text.replaceAll(\"(_)+\", \"_\");\n        return\
    \ text;", "        StringBuilder result = new StringBuilder();\n        boolean\
    \ space = false;\n        for (int i = 0; i < text.length(); i++) {\n        \
    \    char c = text.charAt(i);\n            if (c == ' ') {\n                space\
    \ = true;\n            } else {\n                if (space) {\n              \
    \      result.append('_');\n                    space = false;\n             \
    \   }\n                result.append(c);\n            }\n        }\n        return\
    \ result.toString();", "        Pattern pattern = Pattern.compile(\"\\\\s+\");\n\
    \        Matcher matcher = pattern.matcher(text);\n        return matcher.replaceAll(\"\
    _\");", "        int counter = 0;\n        char[] output = new char[text.length()];\n\
    \        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                if (counter == 0) {\n                    output[i]\
    \ = '_';\n                    counter++;\n                } else if (counter ==\
    \ 1) {\n                    output[i] = '_';\n                    counter++;\n\
    \                } else {\n                    output[i] = '-';\n            \
    \    }\n            } else {\n                output[i] = text.charAt(i);\n  \
    \              counter = 0;\n            }\n        }\n        return new String(output);",
  '        return "Implement Me";', "        //\n        // write code here\n    \
    \    //\n        String[] tokens = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < tokens.length; i++) {\n\
    \            if (tokens[i].equals(\"\")) {\n                if (i + 1 < tokens.length\
    \ && tokens[i + 1].equals(\"\")) {\n                    sb.append(\"-\");\n  \
    \              } else {\n                    sb.append(\"_\");\n             \
    \   }\n            } else {\n                sb.append(tokens[i]);\n         \
    \   }\n        }\n        return sb.toString();", "        String result = text.replaceAll(\"\
    \ \", \"_\");\n        result = result.replaceAll(\"__\", \"_\");\n        result\
    \ = result.replaceAll(\"___\", \"-\");\n        return result;", "        String\
    \ result = \"\";\n        int count = 0;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n\
    \            } else {\n                count = 0;\n            }\n           \
    \ if (count == 2) {\n                result += '-';\n            } else if (count\
    \ == 1) {\n                result += '_';\n            } else {\n            \
    \    result += text.charAt(i);\n            }\n        }\n        return result;",
  '        // >>> your code goes here <<<', "        String finalString = \"\";\n\
    \        String[] splitString = text.split(\" \");\n        if (splitString.length\
    \ == 1) {\n            return text;\n        } else {\n            int i = 0;\n\
    \            while (i < splitString.length) {\n                if (splitString[i].length()\
    \ != 0) {\n                    finalString += \"_\" + splitString[i];\n      \
    \          } else {\n                    if (i != 0) {\n                     \
    \   if (splitString[i - 1].length() == 0) {\n                            finalString\
    \ += \"-\";\n                        } else {\n                            finalString\
    \ += \"_\";\n                        }\n                    }\n              \
    \  }\n                i++;\n            }\n            return finalString.substring(1);\n\
    \        }", '        return "";', "        String res = \"\";\n        for (int\
    \ i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n\
    \                int j = i + 1;\n                while (j < text.length() && text.charAt(j)\
    \ == ' ') {\n                    j++;\n                }\n                if (j\
    \ == i + 1) {\n                    res += \"_\";\n                } else {\n \
    \                   res += \"-\";\n                    i = j - 1;\n          \
    \      }\n            } else {\n                res += text.charAt(i);\n     \
    \       }\n        }\n        return res;", "        // Write your code here\n\
    \        return \"\";", '        return text.replaceAll(" +", "_").replaceAll("_",
    " ").replaceAll(" +", "-");', "        String[] split = text.split(\"\\\\s+\"\
    );\n        return String.join(\"_\", split);", '        return null;', '        return
    "";', '        return text.replaceAll("\\s+", " ").replaceAll(" ", "_");', '        return
    text;', '        return "";', "        text = text.trim();\n        text = text.replaceAll(\"\
    \\\\s+\", \" \");\n        text = text.replaceAll(\"\\\\s\", \"_\");\n       \
    \ return text;", "        for (int i = 0; i < text.length(); i++) {\n        \
    \    if (text.charAt(i) == ' ') {\n                text = text.substring(0, i)\
    \ + '_' + text.substring(i + 1);\n            }\n        }\n        for (int i\
    \ = 0; i < text.length() - 2; i++) {\n            if (text.charAt(i) == '_' &&\
    \ text.charAt(i + 1) == '_' && text.charAt(i + 2) == '_') {\n                text\
    \ = text.substring(0, i) + '-' + text.substring(i + 3);\n            }\n     \
    \   }\n        return text;", '        return "";', '        return null;', '        return
    text;', "        // int i = text.indexOf(\" \");\n        // if (i == -1) {\n\
    \        //     return text;\n        // }\n        // else {\n        //    \
    \ text = text.replace(\" \", \"_\");\n        //     return fixSpaces(text);\n\
    \        // }\n        if (text.indexOf(\"  \") == -1) {\n            text = text.replace(\"\
    \ \", \"_\");\n            return text;\n        }\n        else {\n         \
    \   String[] s = text.split(\"  \");\n            String t = \"\";\n         \
    \   for (int i = 0; i < s.length; i++) {\n                t += s[i];\n       \
    \         if (i != s.length - 1) {\n                    t += \"-\";\n        \
    \        }\n            }\n            return fixSpaces(t);\n        }", '        return
    text;', '        return "";', "        int n = text.length();\n        if (n ==\
    \ 0) {\n            return text;\n        }\n        char[] A = text.toCharArray();\n\
    \        int i = 0;\n        while (i < n && A[i] == ' ') {\n            i++;\n\
    \        }\n        A[i - 1] = '_';\n        int j = i;\n        while (j < n)\
    \ {\n            if (A[j] == ' ') {\n                int k = j;\n            \
    \    while (k < n && A[k] == ' ') {\n                    k++;\n              \
    \  }\n                if (k - j > 2) {\n                    A[j] = '-';\n    \
    \            } else {\n                    A[j] = '_';\n                }\n  \
    \              j = k;\n            } else {\n                j++;\n          \
    \  }\n        }\n        return new String(A, i - 1, n - i + 1);", '        return
    text.replaceAll(" ", "_").replaceAll("\\s{2,}", "-");', "        return Stream.of(text.split(\"\
    \ \"))\n            .map(s -> s.replaceAll(\" \", \"_\"))\n            .map(s\
    \ -> s.replaceAll(\"__\", \"-\"))\n            .map(s -> s.replaceAll(\"___\"\
    , \"_\"))\n            .map(s -> s.replaceAll(\"____\", \"_\"))\n            .collect(Collectors.joining(\"\
    \ \"));", '        throw new UnsupportedOperationException("Not implemented yet.");',
  "        int space_count = 0;\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                if (++space_count > 2) {\n                    space_count\
    \ = 1;\n                    sb.append('-');\n                } else {\n      \
    \              sb.append('_');\n                }\n            } else {\n    \
    \            space_count = 0;\n                sb.append(text.charAt(i));\n  \
    \          }\n        }\n        return sb.toString();", '        throw new UnsupportedOperationException("Not
    yet implemented");', "        // YOUR CODE HERE\n        return null;", "    \
    \    String[] textArr = text.split(\" \");\n        StringBuilder result = new\
    \ StringBuilder();\n        String current = \"\";\n        String previous =\
    \ \"\";\n        String next = \"\";\n        for (int i = 0; i < textArr.length;\
    \ i++) {\n            current = textArr[i];\n            if (i > 0) {\n      \
    \          previous = textArr[i - 1];\n            }\n            if (i < textArr.length\
    \ - 1) {\n                next = textArr[i + 1];\n            }\n            if\
    \ (current.equals(\"\")) {\n                if (previous.equals(\"\")) {\n   \
    \                 result.append(\"-\");\n                } else {\n          \
    \          result.append(\"_\");\n                }\n            } else {\n  \
    \              result.append(current);\n            }\n        }\n        return\
    \ result.toString();", "        String result = \"\";\n        StringTokenizer\
    \ st = new StringTokenizer(text, \" \");\n        while (st.hasMoreTokens()) {\n\
    \            String token = st.nextToken();\n            result += token + \"\
    _\";\n        }\n        if (result.contains(\"__\")) {\n            result =\
    \ result.replace(\"__\", \"_\");\n        }\n        if (result.contains(\"__\"\
    )) {\n            result = result.replace(\"__\", \"-\");\n        }\n       \
    \ return result.substring(0, result.length() - 1);", "        // if (text.length()\
    \ == 0) return text;\n        // if (text.length() == 1) return text;\n      \
    \  // String res = \"\";\n        // StringBuilder sb = new StringBuilder();\n\
    \        // boolean addDash = false;\n        // int i = 0;\n        // while\
    \ (i < text.length()) {\n        //     if (text.charAt(i) == ' ') {\n       \
    \ //         if (i == 0) {\n        //             sb.append('_');\n        //\
    \         } else if (text.charAt(i - 1) == ' ') {\n        //             addDash\
    \ = true;\n        //         } else {\n        //             sb.append('_');\n\
    \        //         }\n        //     } else {\n        //         if (addDash)\
    \ {\n        //             sb.append('-');\n        //             addDash =\
    \ false;\n        //         }\n        //         sb.append(text.charAt(i));\n\
    \        //     }\n        //     i++;\n        // }\n        // return sb.toString();\n\
    \        // Regex version: \n        return text.replaceAll(\"[ ]+\", \"-\").replaceAll(\"\
    \\\\b\\\\s\", \"_\").replaceAll(\"\\\\s\\\\b\", \"_\");", "        // Implementation\
    \ here\n        return null;", "        String result = text.replaceAll(\"\\\\\
    s\", \"_\");\n        if (result.indexOf(\"  \") != -1) {\n            result\
    \ = result.replaceAll(\"\\\\s+\", \"-\");\n        }\n        return result;",
  '        return text.replaceAll(" ", "_").replaceAll("__", "_").replaceAll("_",
    " ").replaceAll("   ", "-").replaceAll("  ", " ");', '        return "";', " \
    \       text = text.trim();\n        char space = ' ';\n        char underscore\
    \ = '_';\n        char dash = '-';\n        char underscore2 = ' ';\n        int\
    \ count = 0;\n        boolean flag = false;\n        StringBuilder res = new StringBuilder();\n\
    \        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == space) {\n                if (count == 0) {\n                    res.append(underscore);\n\
    \                    count++;\n                } else if (count == 1) {\n    \
    \                res.append(underscore);\n                    count++;\n     \
    \           } else if (count == 2) {\n                    res.deleteCharAt(res.length()\
    \ - 1);\n                    res.append(dash);\n                    count++;\n\
    \                } else {\n                    res.append(dash);\n           \
    \         count++;\n                }\n            } else {\n                res.append(text.charAt(i));\n\
    \                count = 0;\n            }\n        }\n        return res.toString();",
  "        StringBuilder sb = new StringBuilder();\n        int spaces = 0;\n    \
    \    for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                spaces++;\n            } else {\n               \
    \ spaces = 0;\n            }\n            if (spaces == 1) {\n               \
    \ sb.append('_');\n            } else if (spaces > 2) {\n                sb.append('-');\n\
    \            } else if (spaces < 1) {\n                sb.append(text.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        String s =\
    \ \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                if (s.length() > 0 && s.charAt(s.length() - 1) ==\
    \ '_') {\n                    continue;\n                }\n                s\
    \ += \"_\";\n            } else {\n                s += text.charAt(i);\n    \
    \        }\n        }\n        if (s.length() > 0 && s.charAt(0) == '_') {\n \
    \           s = \"-\" + s.substring(1);\n        }\n        if (s.length() > 1\
    \ && s.charAt(1) == '_') {\n            s = s.substring(0, 1) + s.substring(2);\n\
    \        }\n        return s;", '        return text.trim().replaceAll(" ", "_").replaceAll("
    +", "-");', "        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n\
    \                if (i == 0) {\n                    sb.append('_');\n        \
    \        } else if (i == text.length() - 1) {\n                    sb.append('_');\n\
    \                } else if (text.charAt(i - 1) == ' ') {\n                   \
    \ if (text.charAt(i + 1) == ' ') {\n                        sb.append('-');\n\
    \                    } else {\n                        sb.append('_');\n     \
    \               }\n                } else {\n                    sb.append('_');\n\
    \                }\n            } else {\n                sb.append(text.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", '        return text;',
  "        char[] textChars = text.toCharArray();\n        int i = 0;\n        int\
    \ spaceCount = 0;\n        for (char c : textChars) {\n            if (c == '\
    \ ') {\n                spaceCount++;\n            } else {\n                spaceCount\
    \ = 0;\n            }\n            if (spaceCount == 1) {\n                textChars[i]\
    \ = '_';\n            } else if (spaceCount == 2) {\n                textChars[i]\
    \ = '-';\n            }\n            i++;\n        }\n        return new String(textChars);",
  "        if (text == null) {\n            return \"\";\n        }\n        return\
    \ text.replaceAll(\"\\\\s\", \"_\").replaceAll(\"_+\", \"_\").replaceAll(\"_\"\
    , \"-\");", "        text = text.trim();\n        text = text.replaceAll(\"\\\\\
    s\", \" \");\n        text = text.replaceAll(\"\\\\s{2,}\", \" - \");\n      \
    \  text = text.replaceAll(\"\\\\s\", \"_\");\n        return text;", "\t\tint\
    \ cons = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0;\
    \ i < text.length(); i++) {\n\t\t\tif (text.charAt(i) == ' ') {\n\t\t\t\tif (cons\
    \ < 2) {\n\t\t\t\t\tsb.append('_');\n\t\t\t\t\tcons++;\n\t\t\t\t} else {\n\t\t\
    \t\t\tsb.append('-');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsb.append(text.charAt(i));\n\
    \t\t\t\tcons = 0;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();", '        throw
    new RuntimeException("Not implemented");', "        StringBuilder sb = new StringBuilder();\n\
    \        int spaces = 0;\n        for (int i = 0; i < text.length(); i++) {\n\
    \            if (text.charAt(i) == ' ') {\n                spaces++;\n       \
    \     } else {\n                if (spaces > 2) {\n                    sb.append(\"\
    -\");\n                } else if (spaces > 0) {\n                    sb.append(\"\
    _\");\n                }\n                sb.append(text.charAt(i));\n       \
    \         spaces = 0;\n            }\n        }\n        return sb.toString();",
  '        throw new UnsupportedOperationException("Problem is not implemented");',
  "        String ans = \"\";\n        for (int i = 0; i < text.length(); i++) {\n\
    \            if (text.charAt(i) == ' ') {\n                if (i > 0 && text.charAt(i\
    \ - 1) == ' ') {\n                    if (i > 1 && text.charAt(i - 2) == ' ')\n\
    \                        ans += '-';\n                    else\n             \
    \           ans += '_';\n                } else {\n                    ans +=\
    \ '_';\n                }\n            } else {\n                ans += text.charAt(i);\n\
    \            }\n        }\n        return ans;", '        throw new UnsupportedOperationException("fixSpaces");',
  '        return null;', '        return Pattern.compile("\\s{2,}").matcher(text.replaceAll("
    ", "_")).replaceAll("-");', '        return "";', '        return null;', '        throw
    new UnsupportedOperationException("Not supported yet.");', "        String result\
    \ = text.replaceAll(\" \", \"_\");\n        result = result.replaceAll(\"__\"\
    , \"_\");\n        result = result.replaceAll(\"___\", \"-\");\n        return\
    \ result;", "        StringBuffer temp = new StringBuffer(text);\n        int\
    \ index = 0;\n        int count = 0;\n        while (temp.indexOf(\" \") != -1)\
    \ {\n            index = temp.indexOf(\" \");\n            if (count > 2) {\n\
    \                temp.replace(index, index + 1, \"-\");\n            } else {\n\
    \                temp.replace(index, index + 1, \"_\");\n            }\n     \
    \       count++;\n        }\n        return temp.toString();", "        // >>>\
    \ Write code to compute the result here <<<\n        int n = text.length();\n\
    \        if (n == 0) return text;\n        int countSpace = 0;\n        char lastChar\
    \ = text.charAt(0);\n        String result = \"\";\n        for (int i = 0; i\
    \ < n; i++) {\n            char currChar = text.charAt(i);\n            if (currChar\
    \ == ' ') {\n                countSpace++;\n                if (countSpace > 2)\
    \ {\n                    if (lastChar != '-') {\n                        result\
    \ += '-';\n                        lastChar = '-';\n                    }\n  \
    \              } else {\n                    if (lastChar != '_') {\n        \
    \                result += '_';\n                        lastChar = '_';\n   \
    \                 }\n                }\n            } else {\n               \
    \ result += currChar;\n                lastChar = currChar;\n                countSpace\
    \ = 0;\n            }\n        }\n        return result;", '        return "";',
  "        // Write your code here\n        return null;", "        return text.replaceAll(\"\
    \ \", \"_\")\n            .replaceAll(\"_+\", \"_\")\n            .replaceAll(\"\
    (_)_\", \"$1-\");", "        // TODO: complete this\n        return null;", '        return
    null;', "        if (text == null)\n            return \"\";\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++)\
    \ {\n            if (text.charAt(i) == ' ') {\n                int count = 1;\n\
    \                while (text.charAt(i + count) == ' ') {\n                   \
    \ count++;\n                }\n                if (count == 1) {\n           \
    \         builder.append('_');\n                } else if (count == 2) {\n   \
    \                 builder.append(\"__\");\n                } else {\n        \
    \            builder.append(\"_-\");\n                }\n                i +=\
    \ count - 1;\n            } else {\n                builder.append(text.charAt(i));\n\
    \            }\n        }\n        return builder.toString();", "        // your\
    \ code here\n        char[] txt = text.toCharArray();\n        StringBuffer newString\
    \ = new StringBuffer();\n        int spaceCounter = 0;\n        for (int i = 0;\
    \ i < txt.length; i++) {\n            if (txt[i] == ' ') {\n                spaceCounter++;\n\
    \                continue;\n            }\n            if (spaceCounter == 0)\
    \ {\n                newString.append(txt[i]);\n            } else if (spaceCounter\
    \ == 1) {\n                newString.append('_');\n                newString.append(txt[i]);\n\
    \            } else if (spaceCounter == 2) {\n                newString.append('_');\n\
    \                newString.append(txt[i]);\n            } else {\n           \
    \     newString.append('-');\n                newString.append(txt[i]);\n    \
    \        }\n            spaceCounter = 0;\n        }\n        return newString.toString();",
  '        return "";', '        return null;', '        return text.replaceAll("
    +", "_");', "        // return text.replaceAll(\" \", \"_\").replaceAll(\"[ ]{2,}\"\
    , \"-\");\n        return text.replaceAll(\" \", \"_\").replaceAll(\"  \", \"\
    -\");", "        char[] textArray = text.toCharArray();\n        int i = 0;\n\
    \        while (i < textArray.length && textArray[i] == ' ') {\n            textArray[i]\
    \ = '_';\n            i++;\n        }\n        int j = i;\n        while (j <\
    \ textArray.length) {\n            while (j < textArray.length && textArray[j]\
    \ != ' ') {\n                j++;\n            }\n            if (j >= textArray.length)\
    \ {\n                break;\n            }\n            int count = 0;\n     \
    \       while (j < textArray.length && textArray[j] == ' ') {\n              \
    \  count++;\n                j++;\n            }\n            if (count > 1) {\n\
    \                count -= 2;\n                textArray[j - count - 1] = '-';\n\
    \                for (int k = 0; k < count; k++) {\n                    textArray[j\
    \ - k - 1] = '_';\n                }\n            } else {\n                textArray[j\
    \ - 1] = '_';\n            }\n        }\n        return new String(textArray);",
  "        text = text.trim();\n        String output = \"\";\n        String prev\
    \ = \"\";\n        String[] arr = text.split(\"\");\n        for (int i = 0; i\
    \ < arr.length; i++) {\n            if (arr[i].equals(\" \")) {\n            \
    \    if (prev.equals(\" \")) {\n                    output += \"-\";\n       \
    \         } else {\n                    output += \"_\";\n                }\n\
    \            } else {\n                output += arr[i];\n            }\n    \
    \        prev = arr[i];\n        }\n        return output;", "        String result\
    \ = text.replaceAll(\"\\\\s\", \"_\");\n        result = result.replaceAll(\"\
    _{2,}\", \"-\");\n        return result;", "        int i = 1;\n        while\
    \ (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n          \
    \      if (text.charAt(i - 1) == ' ') {\n                    text = text.substring(0,\
    \ i) + \"-\" + text.substring(i + 1);\n                } else {\n            \
    \        text = text.substring(0, i) + \"_\" + text.substring(i + 1);\n      \
    \          }\n            }\n            i += 1;\n        }\n        if (text.length()\
    \ == 0) {\n            return text;\n        }\n        if (text.charAt(0) ==\
    \ ' ') {\n            text = \"_\" + text.substring(1);\n        }\n        return\
    \ text;", "        text = text.trim();\n        String[] text2 = text.split(\"\
    \ \");\n        if (text2.length == 1) {\n            return text2[0];\n     \
    \   }\n        text = \"\";\n        for (int i = 0; i < text2.length; i++) {\n\
    \            if (text2[i].equals(\"\")) {\n                text += \"-\";\n  \
    \          } else {\n                text += text2[i] + \"_\";\n            }\n\
    \        }\n        return text.substring(0, text.length() - 1);", '        return
    null;', "        // FIXME: implement a solution here\n        StringBuilder builder\
    \ = new StringBuilder();\n        int len = text.length();\n        for (int i\
    \ = 0; i < len; i++) {\n            if (text.charAt(i) == ' ') {\n           \
    \     if (i + 1 < len && text.charAt(i + 1) == ' ') {\n                    builder.append('-');\n\
    \                    while (i + 1 < len && text.charAt(i + 1) == ' ') {\n    \
    \                    i++;\n                    }\n                } else {\n \
    \                   builder.append('_');\n                }\n            } else\
    \ {\n                builder.append(text.charAt(i));\n            }\n        }\n\
    \        return builder.toString();", '        return null;', "        String\
    \ result = \"\";\n        return result;", '        return null;', '        return
    text;']
stop_tokens:
- "\n    }\n"
